===========
Build HOWTO
===========

:Authors: Scott T. Mansfield, Mark M. Evans, Bret Warren
:Contact: bretw@acm.org
:Revision: $Revision: 20101 $
:Date: $Date: 2011-03-06 08:02:15 -0800 (Sun, 06 Mar 2011) $
:Copyright: 2006 Richards-Zeta
:Abstract: HOWTO describing Broadway 1_4_13 branch build process.

.. contents::

Purpose
-------

The purpose of this HOWTO is to provide instruction on how to carry out builds
of the BROADWAY source (including node defs) using makefiles generated by
autoconf and configure.


Dependencies 
------------

automake17:

	The ``setup_configure_script.sh`` script requires the /usr/bin/aclocal-1.7 command 
	which is part of the automake17 package.  The autmake17 package can be installed
	with yum, for example::

		yum install  automake17

python2.2

	Broadway is built using Python 2.2.  You can verify the existence of Python 2.2
	with the following command::

		/usr/bin/python2.2

	If you don't have Python 2.2 on your computer it can be installed from the
	RPMs in the CVS devtools module. (See the Devtools section below on how to
	checkout the devtools module)

	Use the following commands to install Python 2.2 (note the "--nodeps"
	option, since Python 2.2 will likely need to co-exist with another version)::

		rpm -ivh devtools/python2-2.2.3-rz1.fc5.i386.rpm  --nodeps --force
		rpm -ivh devtools/python2-devel-2.2.3-rz1.fc5.i386.rpm --nodeps	--force

check0.9.3

	Check is a c unit testing framework, http://check.sourceforge.net/
	Building the c unit tests requires check.h and running the c unit tests
	requires libchcheck.a. Depending on the version of the rpm you install you may need the check-devel package or simply the check package.

Quick-start
-----------

Assuming you have a complete check out of the CVS ``broadway`` module, these
steps will provide a correct build environment.  Please note that
*source-directory* refers to the ``broadway`` directory created via
``cvs checkout`` and *build-directory* refers to the directory where the build
process puts the files generated by the build (object files, libraries,
executables, etc).

1. The First Time You Ever Build on a Machine

   These steps are only required once on a system to ensure that the special
   *dev stubs* used by the build process are installed in the user's home
   directory [#dev-stubs]_.

   i. Make sure you have the latest Richards-Zeta Mediator development tools [#qs-dt]_
      installed.
   ii. Make sure you have the correct version of Python installed.  This trunk
       currently uses Python 2.2.
       Installing an old version:

       a) Save all /usr/python* $ cd /usr/bin ; mkdir SAVE ; mv python* SAVE
       b) $ cd /usr/src/Python-2.2.3
       c) ./configure --prefix=/usr
       d) make install
       e) Restore correct python defaults $ cd /usr/bin ; mv -f SAVE/* .

   iii. Preform a complete CVS checkout in a new directory, or a CVS update
        to freshen your sources and get any updated \*.in files which control
        the build process.
   iv. The first time you check out, you need to run INSTALL_STUBS from the
       tools directory::

          cd broadway/tools
          ./INSTALL_STUBS
          . ~/bin/.profile

.. [#qs-dt] The build process for the source checked out with this HOWTO
            requires devtools-2.0 and devtools-3.0.  See the `Devtools`_
            section for information on downloading and installing the
            devtools.

.. [#dev-stubs] The dev stubs are special commands that are in the user's
                ~/bin directory, which the INSTALL_STUBS script adds
                to the users ``~/.bash_profile``.  These work by actually
                running the commands from the current build tree.  The
                new Makefile build system and buildsup support directory
                may obsolete the requirement for the dev stubs, but that
                has not occurred yet.

2. The First Time You Checkout a Source Repository

  i. Change to the *source-directory*/broadway directory.
  ii. Run ``./setup_configure_script.sh``, this will execute the necessary
      steps to get a 'configure' script generated. [#qs-altcfg]_
  iii. Create (or choose) a *build* directory **outside** the *source*
       directory and cd to it.  For example,
       
  iv. Execute the *source-directory*\ 's configure script:

        *source-directory*/broadway/configure \
        --with-buildrc=\ ``native`` **|**\ ``moe2`` **|**\ *custom* [#qs-cfg]_

.. [#qs-altcfg] If you already have a configured build tree you can run
   *make reconfig* from that directory, all your configure options are
   preserved and re-used.

.. [#qs-cfg] Unless otherwise necessary, use the *moe2* build rc.  See the
             "Using Configure" section of this document.

3. Every Time You Want to Build the Source

   i. To establish the correct environment in the shell, source in the
      penvironment.rc file::

        cd *build-directory*
        . ./tools/penvironment.rc

      This only is required once for a shell, for a given *build-directory*.

      If you forget to source the penvironment.rc file you will receive the following message:

	   Making sure that the build infrastructure files are up to date...

	   Build Requires that you (re)source ./tools/penvironment.rc.

   ii. From your build-directory, type ``make`` (part of the Richards-Zeta Mediator dev
       tools).  This will build the entire source tree.  Note that you can
       also execute 'make' from any directory in your build area to build
       files for a particular directory, it is not necessary to build the
       entire tree.

Devtools
--------

    The build process currently relies on what is referred to as devtools-2.0
    and devtools-3.0.  The devtools can be checked out from the CVS devtools
    module.
    
    To checkout the devtools, use the following commands (adjust
    the CVSROOT variable to use your own username)::

	    export CVS_RSH=ssh
	    export CVSROOT=:ext:bwarren@cvs:/home/cvs
	    cvs checkout devtools
	    mv devtools/rz-devtools-2.0-full.tar.bz2 /tmp
	    mv devtools/rz-devtools-3.0-build_156.tar.bz2 /tmp

    Note: The devtools modules is very large and may take a long time to check out.

    A given version of the devtools only needs to be installed once on any
    system.  The devtools are installed in a well known, versioned,
    location to ensure that an engineer can develop, debug and build every
    version of Mediator software concurrently, which is a fact of life.

    As well as Encorp's development tools, Python 2.2 is required to develop
    on this branch.

Confirming the Correct Devtools are Installed
=============================================

    A quick test to see if devtools 2.0 is installed is to check for the
    existence of the ``/opt/envenergy/devtools/2.0``.  A quick test to see if
    devtools 3.0 is installed is the check for the existence of the
    ``/opt/envenergy/devtools/3.0`` directory.

Installing the Devtools
=======================

    The build relies on devtools installed from two tarballs::

        devtools 2.0
                 rz-devtools-2.0-full.tar.bz2
        devtools 3.0
                 rz-devtools-3.0-build_156.tar.bz2

    You should checkout out these tarballs from the CVS repository (see above). 
    The tarballs can be installed from anywhere, but for this example there are
    assumed to be located in the /tmp directory.

    1. You must be superuser or logged in as root to install the devtools.

    2. The devtools **must** be installed in the ``/opt/envenergy`` directory.
       If the directory does not exist, create it and make sure that regular
       users have read and search access.  Example::

           mkdir -p /opt/envenergy
           chmod 775 /opt
           chmod 775 /opt/envenergy

    3. Extract the required tarball in the ``/opt/envenergy`` directory.
       Example::

           cd /opt/envenergy
           tar xjvf /tmp/rz-devtools-2.0-full.tar.bz2
           tar xjvf /tmp/rz-devtools-3.0-build_156.tar.bz2


Using Configure
---------------

At any time you can execute `configure --help` to get a brief listing of
options that the configure script understands.  Because we chose to use the
autoconf utility to drive future builds, we have added some options to
configure to tailor the builds to our environment.  Here are the additional
options that configure will take:

  --with-buildrc=\ *rcfile*
    **Required** parameter.  Specify the toolchain resource file to drive
    the build.  *rcfile* can be one of:

        moe2
          Selects the toolchain provided by devtools 2.0 [#rc_ex]_
        moe3
          Selects the toolchain provided by devtools 3.0
        native
          Selects the local (/usr/bin) toolchain [#rc_ex]_
        custom
          Allows one to specify a different toolchain [#rc_ex]_

    Please see the 'Build RC Files' section for details.

.. [#rc_ex]  There are some exceptions:

  1. A standard version of *ant* and *j2sdk* are provided with devtools 3.0,
     in order to minimize inconsistencies, please use these tools.
  2. A version of *m4* (a very old macro language used by autoconf) is
     provided with devtools 2.0 and 3.0.  The last "official" GNU version
     of *m4* is **1.4**.  With Redhat 9.0 and newer, there is a **1.4.1**
     version of *m4* that is incompatible with the standard autoconf **2.57**.
     Please use one of the aforementioned versions provided by the devtools.

Broadway Build
---------------

One of the goals was to make the transition to this build system as painless
as possible, and not require the learning of a whole new set of commands or
procedures to carry out a successful, reproducible build.

================= ===========
The Old Way       The New Way
================= ===========
prelease -p -n    make release; make publish
prelease -n       make release
prelease -d -p    make build; make publish
prelease -d       make build
================= ===========


Additionally, the following makefile targets are available for you:

+ make autoconf:
    Regenerate the configure script from the configure.in source file and
    then re-execute the new configure script using the same configure options.
    Same as running *setup_configure_script.sh* from the *source-directory*.

+ make build:
    The same as executing: `make reconfig; make; make tarball` on the CLI.

+ make clean:
    Remove compiler-generated files (.py[c|o], .o, .so, et cetera).

+ make checkcvs:
    Verifies that your source tree is up to date and complains if it isn't.

+ make distclean:
    Removes **everything** in the build tree. Useful if you want to start
    over with a clean configuration.

+ make doc:
    Generate the documentation contained in supplemental files through out
    the source repository.

+ make help:
    Print a summary screen of each makefile target available.  Detailed help
    for each listed target is available by typing `make <target>-help`.

+ make montydoc:
    Generate the *MontyDoc*\ 's derived from the source code.  This target
    is only valid in top *build-directory* since MontyDoc's are generated
    against the entire source repository at this time.

+ make makecheck:
    Verify that all the build infrastructure files are up-to-date.  If part
    of a build, then prevents the build from taking place if it is determined
    that the build-directory is not in sync with its *source-directory*.

+ make publish:
    Publishes a finished tarball to *labman*.

+ make reconfig:
    Re-executes the configure script using the options originally specified
    when configure was first invoked for a particular build tree.

+ make release:
    The same as executing::

      make cvscheck; make autoconf; make tagandchangelog; make; make tarball

    on the CLI.

+ make tagandchangelog:
    Generate a changelog, tag the tree, and update the BROADWAY file.

+ make unittest:
    Visits each directory and runs any unit test programs
    (*future expansion, just a placeholder for now*).

It is not necessary to source in tools/penvironment.rc to build, but
tools/penvironment.rc is required to run a native build.

Adding Files to a Makefile
--------------------------

Depending on what you want, there are four possible sections in a Makefile
to list targets to be built.  These sections are:

  TARGETS:
        Anything listed here will be included in the *prelease* tarball.

  TOOLS:
        Items in this will be built, but not included in the *prelease*
        tarball.

  TESTS:
        Like TOOLS, but for test programs.  Programs listed here will
        also be called if using make to launch the unit tests.

  DOC:
        For documentation-generation tasks.  See the Makefile in the 'doc'
        subdirectory for a good example.

Generally, the build order is TARGETS, DOC, TOOLS, and then TESTS.

To add one or more targets, open up the 'Makefile.in' for the directory where
the source files live, scroll down to the bottom of the file, and find the
section you wish to add target(s) to.  For this example, add the rule to get
'opt/trane/seaworld/foo.py' bytecode-compiled.  Since 'foo.py(c|o)' is to be
installed on a Mediator, we'll add it to the TARGETS list, so the TARGETS list
might look like::

  TARGETS:=     shamu.$(PYEXT) \
                flipper.$(PYEXT) \
                foo.$(PYEXT) \
                sushi.$(PYEXT)

Note that you MUST use tabs for indentation in the Makefile.in -- make is
sensitive and requires tabs for leading spaces.  If you accidentally use
spaces make will complain mightily about "missing a separator."

If the list spans multiple lines, use a backslash for continuation (shown).

A note about "$(PYEXT)": PYEXT is a Makefile variable that will be either
'pyc' or 'pyo' depending on optimization level specified for PYGCC.

It is important that you specify the OUTPUT (generated) file in your list, and
not the source file ('make' uses the output file and determines how to build
it from source).


Adding a Directory
------------------

To add a new directory to the build process, there are two files you
will have to modify, these are::

  broadway/configure.in
  <dir>/Makefile.in

In the example for this section, we will add 'opt/trane/seaworld/foo.py' to
the build.

The first step is to add the new directory to the 'configure.in' script, near
the end of the 'configure.in' script, you will see a section called
"ac_MAKEFILES=\"Makeile", determine where in this list you would like your new
directory.  The order in which directories are listed here is the order in
which the generated configure script will process and generate Makefiles.
Notice that, like specifying lists of strings in shell scripts, multi-line
lists must have a backslash to signify continuation.  For example, I want
'opt/trane/seaworld' to be visited before 'opt/trane/tracer100', so
this::

  ac_MAKEFILES="Makefile \
  ...
        opt/trane/Makefile \
        opt/trane/tracer100/Makefile \
  ...

Becomes::

  ac_MAKEFILES="Makefile \
  ...
        opt/trane/Makefile \
        opt/trane/seaworld/Makefile \
        opt/trane/tracer100/Makefile \
  ...

That's all there is to it!  The configure script will automagically generate
a list of directories to visit from this ``ac_MAKEFILES`` list!

The final step is to add a new Makefile.in, to get started copy the
boilerplate file from
*source-directory*/broadway/buildsup/boilerplate-Makefile.in
to *source-directory*/opt/trane/seaworld/Makefile.in, and follow the
instructions in the preceding "Adding Files to a Makefile" section to add
foo.$(PYEXT) to the new file.

Once the new files are finished and tested, check in your work.  It is
necessary redo step four in the above "Quick Start" instructions.

Removing a Directory
--------------------

To remove a directory, follow the instructions in the preceding "Adding a
Directory" section, removing the directory name from 'configure.in'.

As with adding a directory, you will have to repeat step four in the "Quick
Start" instructions.

New Filetypes
-------------

Face it, make in and of itself is a very powerful tool, but it's also dumb
as a post.  Make doesn't know what to do with source files until a rule is
specified telling make how to process it.

If you see a message something like::
    make: don't know how to make box_of_rocks.psp

This indicates that make doesn't know what to do with source files having the
*psp* extension.  Constructing a rule so make can handle psp files is very
easy.  For this particular example we want to copy a file from the source
directory to the build directory.  To add the psp rule the following must be
added into one of two files::

    .SUFFIXES: psp
    %.psp: $(srcdir)/%.psp
        cp -fp $(srcdir)/$@ .

This is a very simplistic example, here's a breakdown of each line.

.SUFFIXES: psp
    This informs make to add *psp* to its list of known suffixes (filename
    extensions).  This is the first part of the psp rule definition.

%.psp: $(srcdir)/%.psp
    This is a minimal dependency list.  This just tells make that the target
    file (``%.psp``) depends on the source file (``$(srcdir)/%.psp``).  This
    way, make will only act upon the target if it is either missing or its
    source file(s) are newer.

cp -fp $(srcdir)/$@ .
    This is the action make will take to build a target file from its source
    files.  Note also that in the above definition this line is indented.
    Make expects that indentation **must** be done with the TAB character.

This rule can be placed in either:
    *srcdir*/buildsup/Rules.make
        Place the psp rule here to make it globally available to the build.

    *srcdir*/some_dir/Makefile.in
        Place the psp rule here to make it available only to a specific
        directory.

Build RC Files
--------------

The build rc files allow one to specify a compiler toolchain (*gcc*) and
supporting tools necessary to carry out a successful framework build.

There is a sample custom.rc file in
*source-directory*/buildsup/custom.rc.template
which is fully documented.  Please refer to that file for formatting, syntax,
and usage.

Ongoing Build Process Issues
----------------------------

While working with the source code over an extended period of time,
there are a couple of situations one should be aware of.

1.  Whenever and Makefile.in [#IN_MOD]_ files are modified, it is necessary
    reconfigure the build tree.  This can be achieved by either:

    i. Executing ``make reconfig`` in the *build-directory*.
    ii. Executing the *source-directory*/configure in the *build-directory*,
        with the same arguments again (which is what ``make reconfig`` does
        for you.)
    iii. This is automagically checked for you before each build [#COOL]_

2.  Whenever configure.in [#IN_MOD]_ is modified, you must regenerate the
    configure scripts.  These is accomplished by either:

    i. Executing ``make autoconf`` in the *build-directory*.
    ii. Run ``./setup_configure_script.sh`` in the
        *source-directory* (which is what ``make autoconf``
        does for you.)
    iii. This is automagically checked for you before each build [#COOL]_

    After regenerating the configure scripts with the ``make autoconf``
    command, the build-directory will be automatically re-configured
    for you as per #1 above.

.. [#COOL] If such an update is required you will be informed upon the next
           invocation of make, which action is needed to resync your build
           tree's infrastructure.  You can also execute ``make makecheck``
           to verify that your build infrastructure is up-to-date.

.. [#IN_MOD] Remember that cvs update may modify these files, not just you.
             Assuming that you have cvs configured as recommended via
             ~/.cvsrc,::

                cvs -q
                update -Pd
                checkout -P
                diff -u

             then it should be clear in cvs' output.

Scott's Soapbox (and a FAQ, too)
--------------------------------

Q. Why do I need both devtools 2.0 and devtools 3.0?  This sucks.

A. Our original intent was to move to MOE3 (a.k.a. EvIL) within the 1.4
   time-frame, so yours truly cranked out a new set of development tools
   to support our Mediator platform development efforts going forward.

Q. I get an ``ERROR CODE 127`` from penvironment.rc!  This sucks.

A. Run INSTALL_STUBS from *source-directory*/tools/INSTALL_STUBS.

Q. Why change s--t?  Why can't I build in the *source-directory* like before?

A. Because we may expand our target platforms in the future.  The big picture
   here is that this is a virtual ``child-proof`` cap on the finished product.
   Still don't get it?  OK grasshopper, what happens when one tries to execute
   Intel binaries on a PowerPC platform?

Q. What happened to the ``--enable-process-debug`` flag?

A. It's been removed for several reasons:

   + It was hardly ever used, so I considered it dead code and yanked it.
   + Because this was a configure-time option, it meant that the build tree
     would always and forever be a debug tree -- waste of time and space.
   + It is sometimes desirable to debug the build process in a live build
     directory, in case the developer broke something.
   + If you want to debug, do a ``make BUILD_DEBUG=-d`` *target*

Changes to the Build Process
----------------------------

When changes are made to the build process, this document **must** be
updated and the changes summarized in the following table.

=========== ========== =========================================================
Author      Date       Description
=========== ========== =========================================================
smansfield  2003/12/01 1. Removed the duplicate lists from configure.in and
                          Makefile.in.  It is now only necessary to maintain
                          a single list of directories and Makefiles on one
                          place.
                       2. Added the ``Help system`` -- general help is now in
                          place.  Topical (rule-specific) help will be added
                          when time permits.
                       3. Bug fixes and enhancements as I hear about them.
mevans      2003/11/12 1. Suggested sourcing ``./tools/penvironment.rc`` in
                          the shell used for builds.  There was no change
                          in the actual build process, but I consistently
                          run into problems when I don't do this.  This is
                          my own damn fault, I'm not blaming anyone, but it
                          is a reality that without sourcing
                          ``./tools/penvironment.rc``, existing environment
                          variables can confuse some of the scripts and
                          commands that the Makefiles execute.
smansfield  2003/10/19 1. Removed the deprecated 'confcheck' rule.
                       2. Removed the generated build_helper.py in favor
                          of a more maintainable version in buildsup.
                       3. Removed the '--enable-process-debug' configure
                          flag.
smansfield  2003/09/28 1. Added 'makecheck'
                       2. Deprecated 'confcheck'
mevans      2003/09/25 1. Moved pygcc and pygcc_backend into the source
                          directory (under *buildsup*).  Adjusted configure
                          scripts and build resource files accordingly.
                       2. Beginning efforts towards more granular packaging,
                          splitting up subdirectories by package.
                          (*entered by stmansfield because mevans forgot this*)
smansfield  2003/09/13 1. Removed the 'PUBLISH_xxxx' environment variables.
                       2. Make the BUILD_TYPE environment variable a switch
                          instead (--enable-process-debug).
                       3. Removing most of the last vestiges of the previous
                          build process.
                       4. Renamed the 'prelease' makefile target to 'tarball'.
                       5. Added the 'build' and 'release' makefile targets.
                       6. Many structural changes to the top-level build stuff.
                       7. Renamed the 'config' directory to 'buildsup' so we
                          free up the 'config' name for future development/
                          product instead of just build support things.  Let's
                          diffuse this time-bomb before it goes off, thank you!
smansfield  2003/08/18 1. Added buildrc type to prelease tarball.
smansfield  2003/08/13 1. Added '.rc' files and '--with-buildrc' switch
                          to specify which toolchain to use.
                       2. Modified nodedef and sdk/applet Makefiles so
                          we absolutely do not have to have any environment
                          variable present in order to carry out a build.
mevans      2003/07/13 1. Integrated sourcing of tools/penvironment.rc
                          into the configure script so builds did not
                          rely on environment variables.
                       2. Created the make install target that
                          installs the "MPX Application" in the
                          *build-directory* and updates the
                          rc.mfw file to source tools/penvironment.rc as
                          well.
=========== ========== =========================================================


Not For the Squeamish
---------------------

Makefile and automake usage and other references can be found at:

   GNU make documentation
       http://www.gnu.org/manual/make-3.80/make.html
   The ``Goat Book``
       http://sources.redhat.com/autobook/autobook/autobook_toc.html

About this Document
-------------------

This source for this document, written using the
ReStructuredText markup language which is part of Python's
docutils package.  Modifications to this document must
conform to the `reStructuredText Markup Specification`_.  If
this is your first exposure to reStructuredText, please read
`A ReStructuredText Primer`_ and the
`Quick reStructuredText`_ user reference first.

.. _`reStructuredText Markup Specification`:
   http://docutils.sourceforge.net/spec/rst/reStructuredText.html
.. _`A ReStructuredText Primer`:
   http://docutils.sourceforge.net/docs/rst/quickstart.html
.. _`Quick reStructuredText`:
   http://docutils.sourceforge.net/docs/rst/quickref.html

Revision History
----------------


================ ========== =====================================================
Author           Date       Description
================ ========== =====================================================
bwarren		 2006/04/13 Updated to use new rz-devtools.  Added dependencies
                            section
smansfield       2004/01/21 Removed 'mediator' from source directory
                            references, we're just Broadway now.
                            Fixed wacky grammar in the abstract.
smansfield       2004/01/04 Added section on new filetypes.
smansfield       2003/12/11 General refresh to pick up recent changes to the
                            process, see the build process changes.  Hopefully
                            I've not trashed formatting in this document again
                            like I've done in the past.  Kudos to Mark for the
                            maintenance help.
mevans           2003/11/17 Added the Devtools_ sections with explicit
                            instructions on determining if the
                            required versions of the devtools are installed,
                            links to the required tarballs used to install
                            the devtools and instructions on installing the
                            devtools.  Also broke the `Quick-start`_ into
                            three sections and cleaned up a bunch of minor
                            formating problems.
smansfield       2003/10/19 Documentation refresh in line with the changes
                            to the process.
                            Fixed this document's version 1.1 changelog entry.
                            Made the dates in this table and the build process
                            changelog table consistent in format.
smansfield       2003/09/29 Removed statement about MOE3 alpha test.
                            Corrected the ``old way/new way`` table in the
                            Envenergy Build section.
smansfield       2003/09/28 Fixed a couple of syntax errors.
smansfield       2003/09/28 Documented new 'makecheck' makefile target.
                            Added 'DOC' to makefile build list.
                            Added deprecation note for 'confcheck' rule.
smansfield       2003/09/19 Updated FAQ to reflect the fact that development
                            on EvIL is going to proceed.
smansfield       2003/09/15 Editorialized a couple of things (I was pretty
                            tired when I wrote the new stuff).
                            Moved to the "doc" subdirectory.
smansfield       2003/09/13 Added "soapbox" section.
                            Update to reflect latest changes to the process.
smansfield       2003/08/25 Corrected erroneous sentence in ``Ongoing
                            Development Issues`` section.
mevans           2003/08/25 Added Ongoing Development section to include
                            caveats regarding when to execute ``make reconfig``
                            and ``make autoconf``.
smansfield       2003/08/18 Fixed spelling and grammar errors.
                            Added 'autoconf', 'publish', 'tagandchangelog'
                            and 'reconfig' makefile targets to list.
smansfield       2003/08/13 Removed 'Environment Variables' section.
                            Added instructions for '--with-buildrc' switch.
                            Added section discussing build rc files, and
                            how to make and use a *custom.rc* file.
                            Corrected a couple of spelling errors.
                            General documentation refresh to capture changes
                            over the past couple of months.
                            Cleaned up the formatting a bit, need a little
                            more love though.
mevans           2003/07/15 Converted to RST.
smansfield       2003/04/28 Added 'Environment Variables' section.
smansfield       2003/04/07 Added Ed's comments about build- and
                            publish-types. Added information about
                            --enable-mediator-build configure switch.
smansfield       2003/03/24 Added instructions for removing a directory from
                            the build.  Added a short discussion of some of
                            the key environment variables.
smansfield       2003/03/20 First semi-coherent cut.
smansfield       2003/02/15 Collection of jumbled thoughts as the
                            'configure.in' and 'Makefile.in' files are
                            being put together.
================ ========== =====================================================

