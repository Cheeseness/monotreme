#!/bin/bash
#-*-Shell-Script-*- Hint to [X]Emacs on colorization, etc...

# proot () {
#     echo $(dirname $0)
# }

# . $(proot)/tools/penvironment.rc

COMMAND="$(basename $0)"
DIRECTORY="."
PACKAGE="-"
MESSAGE="-"
HELP_MESSAGE="$COMMAND [options] [directory]

  Create a skeletal 'install script' for a package's.

  OPTIONS:
    -h or --help                Display this message.
    -D or --debug               Outputs all script commands being parsed and
                                executed.
    -m or --message message     Add message as a comment to the beginning of
                                the script.
    -g or --generated-message   Output a 'Generated by $COMMAND ...'
                                message.
  ARGUMENTS:
    -p or --package package     Creates the default 'package.install.py'
				install script.
     directory                  The directory to generate output for (and
                                relative to).  Defaults to the current
                                directory.
  EXAMPLES:
  BUGS:
    BUG1:  Need to detect the existance of a script and error exit.
    BUG2:  When BUG1 is fixed, need a -f|--force option.
"

OPTION_SETS_ARG () {
    local variable="$1"
    shift
    local option
    for option in "$@"
    do
        if [ "${argv[$argn]}" == "$option" ]
        then
            argn=$((argn+1))
            arg="${argv[$argn]}"
            if [ $argn -ge $argc ] ||
               [ "${arg:0:1}" == "-" ]
            then
                echo -n "Option \"$option\" requires an argument," >&2
                echo " use $COMMAND --help for valid options." >&2
                exit 1 # Failure
            fi
            eval ${variable}="'$arg'"
            argn=$((argn+1))
            return 0 # Found and set it.
        fi
    done
    return 1 # Not found.
}

OPTION_IS () {
    for option in "$@"
    do
        if [ "${argv[$argn]}" == "$option" ]
        then
            argn=$((argn+1))
            return 0
        fi
    done
    return 1
}

HELP () {
    echo "$HELP_MESSAGE" | more
    exit 0
}

GENERATED_MESSAGE () {
    MESSAGE="Generated by $COMMAND ${argv[@]}"
}

PARSE_ARGS () {
    local argc=$#
    local -a argv
    local argn=0 # The current argument.
    local arg=""
    while [ $argn -lt $argc ]
    do
        argv[$argn]="$1"
        argn="$((argn+1))"
        shift
    done
    argn=0
    while [ $argn -lt $argc ]
    do
        OPTION_IS "-h" "--help" && HELP
        OPTION_IS "-D" "--debug" && set -v -x && continue
        OPTION_IS "-g" "--generated-message" && GENERATED_MESSAGE && continue
        OPTION_SETS_ARG "PACKAGE" "-p" "--package" && continue
        OPTION_SETS_ARG "MESSAGE" "-m" "--message" && continue
        break
    done
    while [ $argn -lt $argc ]
    do
        if [ "$DIRECTORY" != "." ]
        then
            echo "Only one directory may be specified." >&2
            echo "Use $COMMAND --help for valid options." >&2
            exit 1
        fi
        ndir=0
        arg="${argv[$argn]}"
        if [ "${arg:0:1}" == "-" ]
        then
            echo "Option '$arg' where an directory argument was expected." >&2
            echo "Use $COMMAND --help for valid options." >&2
            exit 1
        fi
        DIRECTORY="$arg"
        ndir=$((ndir+1))
        argn=$((argn+1))
    done
}

INSERT_LOADER () {
    echo "#!/usr/bin/env python2.2"
    echo "#-*-Python-*- Hint to [X]Emacs on colorization, etc..."
}

INSERT_MESSAGE () {
    [ "$MESSAGE" != '-' ] && echo "$MESSAGE" | sed 's/^/# /g'
}

INSERT_BODY () {
(
cat <<EOF
import os
import sys

from mpx.install import *
from mpx import properties

class InstallSelf(InstallPackage):
    def __init__(self):
        InstallPackage.__init__(self, 'PACKAGE'
                                '@fixme description: PACKAGE', # Replace
                                ['broadway'])
        return
    def install(self):
        # Add install logic here.
        return 0

def MAIN(args=sys.argv, stdout=sys.stdout, stderr=sys.stderr):
    save_argv=sys.argv
    save_stdout=sys.stdout
    save_stderr=sys.stderr
    sys.argv=args
    sys.stdout=stdout
    sys.stderr=stderr
    try:
        # MAIN()
        ip = InstallSelf()
        return ip.execute()
    finally:
        sys.argv=save_argv
        sys.stdout=save_stdout
        sys.stderr=save_stderr

if __name__ == '__main__':
    MAIN()
EOF
) | sed "s/PACKAGE/$PACKAGE/g"
}

OUTPUT_SCRIPT () {
    if [ "$PACKAGE" == "-" ]
    then
        echo "# Directory: $RELDIR" # Info for standard out.
        cat
    else
        local file="$PACKAGE".install.py
        cat >"$file"
        chmod a+xw "$file"
    fi
}

PARSE_ARGS "$@"
pushd "$DIRECTORY" >/dev/null || continue # Error handling...
(INSERT_LOADER  ;
 INSERT_MESSAGE ;
 INSERT_BODY) |
    OUTPUT_SCRIPT
popd >/dev/null
