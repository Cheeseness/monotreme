#!/bin/bash
#=---------------------------------------------------------------------------
# MAKE_FLASH.SH
#
# A script used by the MOE2 build process to make a MOE-only flash.
#
# Written by S.T. Mansfield (smansfield@envenergy.com)
# $Id: make_flash.sh 20101 2011-03-06 16:02:15Z bhagn $
#=---------------------------------------------------------------------------
# TBD's:
# - Instead of dumping STDOUT and STDERR from binaries to /dev/null, how
#   about redirecting to a log file instead?
#=---------------------------------------------------------------------------
#
# USAGE:
#   make_flash.sh <device> <mount point> <moe tarball>
#
#   Purpose:
#     Initialize a (new) compact flash by re-partitioning, re-formatting,
#     and installing a MOE.  This is a destructive operation and will over-
#     write whatever is on your target flash.
#
#   Where:
#     <device>
#       Is the device node name in the /dev directory.  Specify only
#       the node name, excluding the /dev.  (Ex: sda).
#
#     <mount point>
#       A working directory to mount the flash' partition during the MOE
#       installation phase (tarball extraction, lilo init).
#
#     <moe tarball>
#       Path and filename for the MOE tarball to install on the flash.
#
#     NOTE: All parameters are required.
#
#   Example:
#     ./make_flash.sh sda /mnt/flash ./tarballs/moe-2.1-10rc1.tgz
#
#=---------------------------------------------------------------------------


#=---------------------------------------------------------------------------
# I hate globals, but argument passing in shell scripts looks wacky!

flash_dev=""
flash_ptn=""
flash_mntpt=""
moe_tarball=""

is_partitioned="0"
logfile="/dev/null"


#=---------------------------------------------------------------------------
# generate_lilo_conf
#
# Purpose:
#   Generate a lilo.conf for a mounted compact flash from boilerplate.
#
# Returns:
#   0/1 for success/failure.

function generate_lilo_conf()
{
    echo -n "  Generating ${flash_mntpt}/etc/lilo.conf ..."

    cat >${flash_mntpt}/etc/lilo.conf <<EOLC
# This lilo.conf generated by MOE2 build's most excellent make_flash.sh!

disk=${flash_dev}
bios=0x80
boot=${flash_dev}
map=/boot/map
install=/boot/boot.b
delay=0
timeout=0 
serial=0,38400n8

image=/boot/vmlinuz
	label=linux
	root=/dev/hda1
	append="console=ttyS0,38400"
EOLC

    [ $? = 0 ] || {
        echo " FAILED!"
        return 1
    }

    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# get_flash_geometry
#
# Purpose:
#   Use sfdisk to quiz the compact flash and extract its cylinders, heads,
#   and SPT.
#
# Returns:
#   0/1 for success/failure.

function get_flash_geometry()
{
    local my_geom=""

    my_geom=`/sbin/sfdisk -g ${flash_dev} 2>/dev/null` || {
        echo "ERROR: cannot access compact flash at ${flash_dev}."
        return 1
    }

    ###
    # Might be useful later (???).
    #flash_cyls=`echo ${my_geom} | cut -f 2 -d ' '`
    #flash_heads=`echo ${my_geom} | cut -f 4 -d ' '`
    #flash_spt=`echo ${my_geom} | cut -f 6 -d ' '`

    #
    # See if a partition exists.
    #
    is_partitioned="0"
    /sbin/sfdisk -g ${flash_ptn} 1>/dev/null 2>&1 && {
        is_partitioned="1"
    }

    return 0
}


#=---------------------------------------------------------------------------
# initialize_flash
#
# Purpose:
#   Initialize a (new) CF by creating a bootable partition and formatting
#   said partition.
#
# Returns:
#   0/1 for success/failure.

function initialize_flash()
{
    echo "Initializing compact flash at ${flash_dev}:"

    [ "${is_partitioned}" = "0" ] && {
        echo -n "  Partitioning..."
        /sbin/sfdisk -q ${flash_dev} 1>/dev/null 2>&1 <<EOSFQ
0,,L,*
;
;
;
EOSFQ

        [ $? = 0 ] || {
            echo " FAILED!"
            return 1
        }
        echo " done."
    }

    echo -n "  Formatting ${flash_ptn} (ext3)..."
    /sbin/mke2fs -j ${flash_ptn} -L Mediator 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    #
    # This disables the kernel's "time to fsck" boot-time checks.
    #
    echo -n "  Tuning ${flash_ptn}'s e2fsck parameters..."
    /sbin/tune2fs -c 0 -i 0 ${flash_ptn} 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# install_moe
#
# Purpose:
#   Install (extract) the MOE tarball onto the mounted compact flash.
#
# Returns:
#   0/1 for success/failure.

function install_moe()
{
    echo -n "Installing MOE tarball to ${flash_mntpt} ... "
    tar zxpfC ${moe_tarball} ${flash_mntpt} 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# lilo_config
#
# Purpose:
#   Generate a lilo.conf and invoke LILO to write a boot sector on the
#   mounted compact flash.
#
# Returns:
#   0/1 for success/failure.

function lilo_config()
{
    echo "Configuring LILO:"

    make_flash_devnodes || {
        return 1
    }

    generate_lilo_conf || {
        return 1
    }

    echo -n "  Invoking LILO to write the boot sector..."
    /sbin/lilo -r ${flash_mntpt} 1>/dev/null 2>&1 || {
        echo " FAILED!"
    }
    echo " done."

    echo "Done."

    return 0
}


#=---------------------------------------------------------------------------
# make_flash_devnodes
#
# Purpose:
#   Make the device nodes on the compact flash required for LILO
#   installation and configuration.
#
# Returns:
#   0/1 for success/failure.

function make_flash_devnodes()
{
    local dev_dir="${flash_mntpt}/dev"

    echo -n "  Creating required dev nodes..."

    [ -d ${dev_dir} ] || {
        echo -n " directory..."
        mkdir -m 0755 -p ${dev_dir} 1>/dev/null 2>&1 || {
            echo " FAILED!"
            return 1
        }
    }

    [ -e ${dev_dir}/sda ] || {
        echo -n " sda..."
        mknod ${dev_dir}/sda b 8 0 1>/dev/null 2>&1 || {
            echo " FAILED!"
            return 1
        }
    }

    #
    # Why hde?  Is this an artifact left over from the old labman system?
    #
    [ -e ${dev_dir}/hde ] || {
        echo -n " hde..."
        mknod ${dev_dir}/hde b 33 0 1>/dev/null 2>&1 || {
            echo " FAILED!"
            return 1
        }
    }

    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# mount_flash
#
# Purpose:
#   Mount a compact flash somewhere.
#
# Returns:
#   0/1 for success/failure.

function mount_flash()
{
    echo -n "Mounting ${flash_ptn} on ${flash_mntpt} ..."
    mount ${flash_ptn} ${flash_mntpt} 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# unmount_flash
#
# Purpose:
#   Un-mount a compact flash.
#
# Returns:
#   0/1 for success/failure.

function unmount_flash()
{
    echo -n "Unmounting ${flash_mntpt} (may be slow because of sync)..."
    umount ${flash_mntpt} 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    return 0
}


#=---------------------------------------------------------------------------
# Main "program" entry point.

function run()
{
    #
    # Do some sanity checks before beginning.
    #
    whoami | grep -q root
    [ $? = 0 ] || {
        echo "You need super-user privileges for this."
        return 1
    }

    [ "x${1}" = "x" ] && {
        echo "ERROR: missing compact flash device node (ex: sda)."
        return 1
    }

    [ "x${2}" = "x" ] && {
        echo "ERROR: missing compact flash mount point (ex: /mnt/flash)."
        return 1
    }

    [ -d ${2} ] || {
        echo "ERROR: specified flash mount point does not exist."
        return 1
    }

    [ "x${3}" = "x" ] && {
        echo "ERROR: missing MOE tarball path/name."
        return 1
    }

    [ -f ${3} ] || {
        echo "ERROR: specified MOE tarball does not exist."
        return 1
    }

    # Too paranoid?
    echo -n "Testing MOE tarball integrity..."
    gzip -t ${3} 1>/dev/null 2>&1 || {
        echo " FAILED!"
        return 1
    }
    echo " done."

    flash_dev="/dev/${1}"
    flash_ptn="/dev/${1}1"
    flash_mntpt="${2}"
    moe_tarball="${3}"

    echo -n "Insert a compact flash in your burner and press enter (^C aborts)..."
    read </dev/stdin

    #
    # Not as useless as it seems.  This will fail out if there's no flash
    # at the specified dev node.
    #
    get_flash_geometry || {
        return 1
    }

    initialize_flash || {
        return 1
    }

    mount_flash || {
        return 1
    }

    install_moe || {
        return 1
    }

    lilo_config || {
        return 1
    }

    unmount_flash || {
        return 1
    }

    echo "Complete, you may remove the compact flash."

    return 0
}


#=---------------------------------------------------------------------------
# Ok GO!

run $*
exit $?

#=- EOF ---------------------------------------------------------------------
