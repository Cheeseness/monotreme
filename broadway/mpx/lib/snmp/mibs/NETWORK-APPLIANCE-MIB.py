"""
Copyright (C) 2008 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# ============================================================================
# Created manually using smidump and RZ's custom version of libsmi2pysnmp
# which was part of broadway/mpx/lib/snmp/mibs at the time of
# execution.  Essentially::
#   $ smidump -f smiv2 netapp.mib >netapp.smiv2
#   $ smidump -f python netapp.smiv2 | ./libsmi2pysnmp >NETWORK-APPLIANCE-MIB.py
# @note The MIB is named NETWORK-APPLIANCE-MIB because that is the internal
#       name in netapp.mib
# --------------------------------------------------------------------------
# smidump: module `netapp.smiv2' contains errors, expect flawed output
# --------------------------------------------------------------------------
# PySNMP SMI module. Autogenerated from smidump -f python NETWORK-APPLIANCE-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Tue Dec  2 12:24:43 2008,
# Python version (2, 5, 2, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( PhysAddress, ) = mibBuilder.importSymbols('RFC1213-MIB', 'PhysAddress')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'MibIdentifier', 'NotificationType', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises')
( DisplayString, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString')

# Objects

netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('eisa-based', 1), ('pci-based', 2), ))).setMaxAccess('readonly').setDescription('The product type representing the target platform.')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Version String for the Software Running on\nthis platform.')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The System ID of this system.')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('netapp', 1), ('dell', 2), ('ibm', 3), ))).setMaxAccess('readonly').setDescription('The vendor id of this system, indicating the company\nthat has supplied the product.')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The model name of the system.  Examples\nare FAS980 and FAS3050.')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('Version string for the Firmware running on\nthis platform.')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The complete URL used to access the administrative GUI\nfor a browser-based interface.')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('The complete URL used to access the administrative API\nfor a programmatic interface.')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('The product serial number. Returns unknown if it \ncannot be determined.')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription("The partner's serial number, not applicable\nif there is no partner, and unknown if it\ncannot be determined.")
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,3,1,)).subtype(namedValues=namedval.NamedValues(('x86', 1), ('alpha', 2), ('mips', 3), ('sparc', 4), ))).setMaxAccess('readonly').setDescription('The CPU architecture type of this appliance')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('This returns a static string. This object is used\nas a placeholder for enterprise traps.')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess('readonly').setDescription('The machine type of the system.  Examples\nare FAS980 and FAS3050.')
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess('readonly').setDescription('The time (in hundredths of a second) that the\nCPU has been up since the last boot.')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess('readonly').setDescription('The time (in hundredths of a second) that the\nCPU has been doing useful work since the last\nboot.')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The percent of time that the CPU has been doing\nuseful work since the last time a client requested\nthe cpuBusyTimePerCent.')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess('readonly').setDescription('The time (in hundredths of a second) that the\nCPU has been idle since the last boot.')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The percent of time that the CPU has been idle\nsince the last time a client requested the\ncpuBusyTimePerCent.')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2))).setMaxAccess('readonly').setDescription('The number of CPUs in the system.')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of sk_switch invocations.')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of hardware context switches.')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of interrupts during a CP.')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of interrupts not during a CP.')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription(' The percentage of time handling CP interrupts.')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription(' The percentage of time handling non-cp interrupts.')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess('readonly').setDescription(' The total number of Domain Switches.')
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The total number of Server side NFS calls since\nthe last boot')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The total number of KBytes received on all the\nnetwork interfaces, since the last boot.')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The total number of KBytes transmitted on all the\nnetwork interfaces, since the last boot.')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,5,4,6,)).subtype(namedValues=namedval.NamedValues(('other', 1), ('unknown', 2), ('ok', 3), ('nonCritical', 4), ('critical', 5), ('nonRecoverable', 6), ))).setMaxAccess('readonly').setDescription('This indicates the overall status of the appliance.\nThe algorithm to determine the value uses both\nhardware status (e.g. the number of failed fans) and\nvolume status (e.g. number of volumes that are full).\nThe algorithm is subject to change in future releases,\nbut the range of values will not change.')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('The total number of Server side NFS calls since\nthe last boot.  This object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('The total number of Server side NFS calls since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess('readonly').setDescription('The total number of Server side CIFS calls since\nthe last boot.  This object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess('readonly').setDescription('The total number of Server side CIFS calls since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('The total number of HTTP operations received\nsince the last boot.  This object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess('readonly').setDescription('The total number of HTTP operations received\nsince the last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes received on all the\nnetwork interfaces, since the last boot.  This\nobject returns the most significant 32 bits\nof the 64 bit unsigned integer.')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes received on all the\nnetwork interfaces, since the last boot.  This\nobject returns the least significant 32 bits\nof the 64 bit unsigned integer.')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes transmitted on all the\nnetwork interfaces, since the last boot.  This\nobject returns the most significant 32 bits\nof the 64 bit unsigned integer.')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes transmitted on all the\nnetwork interfaces, since the last boot.  This\nobject returns the least significant 32 bits\nof the 64 bit unsigned integer.')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from disk\nsince the last boot.  This object returns\nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from disk since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to disk\nsince the last boot.  This object returns\nthe most significant 32 bits of the 64 bit unsigned\ninteger.')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to disk since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from tape\nsince the last boot.  This object returns\nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from tape since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to tape\nsince the last boot.  This object returns\nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to tape since\nthe last boot.  This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess('readonly').setDescription("Age in minutes of the oldest read-only blocks\nin the buffer cache.  This indicates how fast\nread operations are cycling through system\nmemory; when the appliance is reading very\nlarge files (larger than the machine's memory\nsize), buffer cache age will be very low.")
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess('readonly').setDescription('Number of corrected machine checks since\nthe last boot.')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess('readonly').setDescription('A string describing the global status,\nincluding a description of the condition (if\nany) that caused the status to be anything\nother than ok(3).')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess('readonly').setDescription('The version number of Windows Setup Wizard \nrequired to configure the appliance.  Windows\nSetup Wizard with a version number lower than \nthis integer is not capable of configuring the \nappliance.')
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,5,2,3,4,)).subtype(namedValues=namedval.NamedValues(('notConfigured', 1), ('enabled', 2), ('disabled', 3), ('takeoverByPartnerDisabled', 4), ('thisNodeDead', 5), ))).setMaxAccess('readonly').setDescription('Clustered Failover configuration settings.\nThe value notConfigured(1) indicates that the\ncluster is not licensed. The thisNodeDead(5)\nsetting indicates that this node has been \ntaken over.')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,1,)).subtype(namedValues=namedval.NamedValues(('dead', 1), ('canTakeover', 2), ('cannotTakeover', 3), ('takeover', 4), ))).setMaxAccess('readonly').setDescription('Clustered Failover state.')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,1,4,2,6,3,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('unknownReason', 2), ('disabledByOperator', 3), ('interconnectOffline', 4), ('disabledByPartner', 5), ('takeoverFailed', 6), ))).setMaxAccess('readonly').setDescription('The reason this node cannot takeover its\npartner')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('maybeDown', 1), ('ok', 2), ('dead', 3), ))).setMaxAccess('readonly').setDescription('This is the status last returned by the\nClustered Failover partner.')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess('readonly').setDescription('If non-zero, the absolute time of the last\nupdate from the Clustered Failover partner.')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess('readonly').setDescription('Hostname for Clustered Failover partner.')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('System ID for Clustered Failover partner.')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('down', 2), ('partialFailure', 3), ('up', 4), ))).setMaxAccess('readonly').setDescription('The current status of the interconnect.\nThe partialFailure(3) status indicates that\none of the links in the interconnect hardware\nis down.')
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('no', 1), ('yes', 2), ))).setMaxAccess('readonly').setDescription('An indication of whether the hardware is\ncurrently operating outside of its recommended\ntemperature range.  The hardware will shutdown\nif the temperature exceeds critical thresholds.')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('Count of the number of chassis fans which\nare not operating within the recommended\nRPM range.')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess('readonly').setDescription('Text message describing the current condition of\nchassis fans.  This is useful only if\nenvFailedFanCount is not zero.')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('Count of the number of power supplies which\nare in degraded mode.')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess('readonly').setDescription('Text message describing the state of any\npower supplies which are currently degraded.\nThis is useful only if envFailedPowerSupplyCount\nis not zero.')
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,5,6,7,9,3,2,8,4,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('partiallyDischarged', 2), ('fullyDischarged', 3), ('notPresent', 4), ('nearEndOfLife', 5), ('atEndOfLife', 6), ('unknown', 7), ('overCharged', 8), ('fullyCharged', 9), ))).setMaxAccess('readonly').setDescription("An indication of the current status of the\nNVRAM battery or batteries.  Batteries which\nare fully or partially discharged may not\nfully protect the system during a crash.\n\nThe end-of-life status values are based on\nthe manufacturer's recommended life for the\nbatteries.")
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess('readonly').setDescription('The time (in hundredths of a second) since boot\nduring which the system has had a consistency point\n(cp) operation in progress.')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by timer.')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by snapshot operation.')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by low water mark.')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by high water mark.')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by nv-log full.')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of back to back consistency point \noperations since boot.')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess('readonly').setDescription('The total number of consistency point operations\nsince boot.')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by flushing unlogged write data.')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by file system sync requests.')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by low virtual buffers.')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of back to back consistency point\noperations since boot that were deferred.')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of consistency point operations since boot\nthat were caused by low datavecs.')
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,5,4,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('smtpFailure', 2), ('postFailure', 3), ('smtp-postFailure', 4), ('unknown', 5), ))).setMaxAccess('readonly').setDescription('An indication of the current status of\nautosupport on the appliance.  describes\nthe success or failure of most recent \nattempts to send autosupports.')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess('readonly').setDescription('A string describing the autosupport status,\nincluding a description of the condition (if\nany) that caused the status to be anything\nother than ok(1).')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess('readonly').setDescription('Count of the number of autosupport messages\nsuccessfully sent since the last reset.')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess('readonly').setDescription('Count of the number of autosupport messages\nnot sent successfully since the last reset.')
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The total number of RPC calls received, since\nthe last time the statistics were cleared.')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of calls rejected by the RPC\nlayer, since the last time the statistics were\ncleared.')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of times an RPC call was not available\nwhen it was thought to be received, since the\nlast time the statistics were cleared.')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received with a length\nshorter than a minimum-sized RPC call, since the\nlast time the statistics were cleared.')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received whose header\ncould not be XDR decoded, since the last time\nthe statistics were cleared.')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The total number of RPC calls received for the\nTCP protocol, since the last time the statistics\nwere cleared.')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The total number of calls rejected by the RPC\nlayer for the TCP protocol, since the last \ntime the statistics were cleared.')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of times an RPC call for the TCP \nprotocol was not available when it was thought \nto be received, since the last time the \nstatistics were cleared.')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls for the TCP protocol\nreceived with a length shorter than a minimum-sized \nRPC call, since the last time the statistics \nwere cleared.')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls for the TCP protocol\nreceived whose header could not be XDR decoded, \nsince the last time the statistics were cleared.')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The total number of RPC calls received for the\nUDP protocol, since the last time the statistics\nwere cleared.')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The total number of calls rejected by the RPC\nlayer for the UDP protocol, since the last \ntime the statistics were cleared.')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of times an RPC call for the UDP \nprotocol was not available when it was thought \nto be received, since the last time the \nstatistics were cleared.')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls for the UDP protocol\nreceived with a length shorter than a minimum-sized \nRPC call, since the last time the statistics \nwere cleared.')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls for the UDP protocol\nreceived whose header could not be XDR decoded, \nsince the last time the statistics were cleared.')
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The total number of NFS calls received, since\nthe last time the statistics were cleared.')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of received NFS calls rejected,\nsince the last time the statistics were cleared.')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nsince the last time the statistics were cleared.')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, since the last time the statistics\nwere cleared.')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, since the last time the statistics\nwere cleared.')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, since the last time the statistics\nwere cleared.')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, since the last time the statistics\nwere cleared.')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, since the last time the\nstatistics were cleared.')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, since the last time the statistics\nwere cleared.')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, since the last time the statistics\nwere cleared.')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure, since the last time the statistics\nwere cleared.')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, since the last time\nthe statistics were cleared.')
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure\nas a percentage of total NFS calls received,\nsince the last time the statistics were cleared.')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure as a percentage of total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure as a percentage of\ntotal NFS calls received, since the last\ntime the statistics were cleared.')
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, that did not result\nin the filesystem blocking to read from disk,\nsince the last time the statistics were cleared.')
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, that did not result\nin the filesystem blocking to read from\ndisk, as a percentage of the total number\nof calls received for this procedure, since\nthe last time the statistics were cleared.')
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nsince the last time the statistics were cleared.')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, since the last time the statistics\nwere cleared.')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, since the last time the statistics\nwere cleared.')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, since the last time the statistics\nwere cleared.')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, since the last time the statistics\nwere cleared.')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, since the last time the\nstatistics were cleared.')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, since the last time the statistics\nwere cleared.')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, since the last time the statistics\nwere cleared.')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, since the last time the statistics\nwere cleared.')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, since the last time the\nstatistics were cleared.')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, since the last time the\nstatistics were cleared.')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, since the last time the statistics\nwere cleared.')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, since the last time\nthe statistics were cleared.')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, since the last time the\nstatistics were cleared.')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, since the last time the statistics\nwere cleared.')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, since the last\ntime the statistics were cleared.')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, since the\nlast time the statistics were cleared.')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, since the last time\nthe statistics were cleared.')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, since the last time\nthe statistics were cleared.')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, since\nthe last time the statistics were cleared.')
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nas a percentage of the total NFS calls\nreceived, since the last time the statistics\nwere cleared.')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access\nPermission) procedure, as a percentage of\nthe total NFS calls received, since the\nlast time the statistics were cleared.')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, as a percentage of the total\nNFS calls received, since the last time the\nstatistics were cleared.')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, as a percentage of the total\nNFS calls received, since the last time the\nstatistics were cleared.')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, as a percentage of the\ntotal NFS calls received, since the last\ntime the statistics were cleared.')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, as a percentage of\nthe total NFS calls received, since the\nlast time the statistics were cleared.')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, as a percentage of\nthe total NFS calls received, since the\nlast time the statistics were cleared.')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last time the\nstatistics were cleared.')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, as a percentage\nof the total NFS calls received, since the\nlast time the statistics were cleared.')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, as a percentage\nof the total NFS calls received, since the\nlast time the statistics were cleared.')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, as a percentage of the\ntotal NFS calls received, since the last time\nthe statistics were cleared.')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, as a percentage of the\ntotal NFS calls received, since the last time\nthe statistics were cleared.')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, as a\npercentage of the total NFS calls received,\nsince the last time the statistics were cleared.')
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last\ntime the statistics were cleared.')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, that did not result in\nthe filesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, that did not result in\nthe filesystem blocking to read from disk, since\nthe last time the statistics were cleared.')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read\nfrom disk, since the last time the statistics\nwere cleared.')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read\nfrom disk, since the last time the statistics\nwere cleared.')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nsince the last time the statistics were cleared.')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, that did\nnot result in the filesystem blocking to read\nfrom disk, since the last time the statistics\nwere cleared.')
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last time the\nstatistics were cleared.')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, that did not result in\nthe filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read from\ndisk, as a percentage of the total number of\ncalls received for this procedure, since the\nlast time the statistics were cleared.')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last\ntime the statistics were cleared.')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, that\ndid not result in the filesystem blocking to\nread from disk, as a percentage of the total\nnumber of calls received for this procedure,\nsince the last time the statistics were cleared.')
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped,\nfor calls already in progress, since the last\ntime the statistics were cleared.')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped,\nfor replies already generated within a short\ninterval, since the last time the statistics\nwere cleared. These stats are deprecated.\nA value of zero will always be returned\nfor these stats.')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for which\nthere were no corresponding entries already in\nthe Reply Cache, since the last time the\nstatistics were cleared.')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received that\nresulted in replies being replayed from\nthe Reply Cache, since the last time the\nstatistics were cleared.')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for calls\nthat resulted in this request being processed\nas a new request even when a corresponding\nentry existed in the Reply Cache, since the\nlast time the statistics were cleared.')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the TCP protocol, for calls already in\nprogress, since the last time the statistics\nwere cleared.')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the TCP protocol, for replies already\ngenerated within a short interval, since the\nlast time the statistics were cleared. These \nstats are deprecated. A value of zero will \nalways be returned for these stats.')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol for which there were no\ncorresponding entries already in the Reply\nCache, since the last time the statistics\nwere cleared.')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol that resulted in replies being\nreplayed from the Reply Cache, since the last\ntime the statistics were cleared.')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol for calls that resulted in this\nrequest being processed as a new request even\nwhen a corresponding entry existed in the Reply\nCache, since the last time the statistics were\ncleared.')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the UDP protocol, for calls already in\nprogress, since the last time the statistics\nwere cleared.')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the UDP protocol, for replies already\ngenerated within a short interval, since the\nlast time the statistics were cleared. These \nstats are deprecated. A value of zero will \nalways be returned for these stats.')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol for which there were no\ncorresponding entries already in the Reply\nCache, since the last time the statistics\nwere cleared.')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol that resulted in replies being\nreplayed from the Reply Cache, since the last\ntime the statistics were cleared.')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol for calls that resulted in this\nrequest being processed as a new request even\nwhen a corresponding entry existed in the Reply\nCache, since the last time the statistics were\ncleared.')
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 0-511 bytes.')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 512-1023 bytes.')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 1K-2047 bytes.')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 2K-4095 bytes.')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 4K-8191 bytes.')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 8K-16383 bytes.')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 16K-32767 bytes.')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 32K-65535 bytes.')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last zeroing\nwith request sizes between 64K-131071 bytes.')
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 0-511 bytes.')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 512-1023 bytes.')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 1K-2047 bytes.')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 2K-4095 bytes.')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 4K-8191 bytes.')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 8K-16383 bytes.')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 16K-32767 bytes.')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 32K-65535 bytes.')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last zeroing\nwith request sizes between 64K-131071 bytes.')
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 0-511 bytes.')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 512-1023 bytes.')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 1K-2047 bytes.')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 2K-4095 bytes.')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 4K-8191 bytes.')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 8K-16383 bytes.')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 16K-32767 bytes.')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 32K-65535 bytes.')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last zeroing\nwith request sizes between 64K-131071 bytes.')
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 0-511 bytes.')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 512-1023 bytes.')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 1K-2047 bytes.')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 2K-4095 bytes.')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 4K-8191 bytes.')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 8K-16383 bytes.')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 16K-32767 bytes.')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 32K-65535 bytes.')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last zeroing\nwith request sizes between 64K-131071 bytes.')
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1)).setDescription('Provide a report of per-client NFS statistics\nsince the last time the statistics were cleared.')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'pclIpAddr')).setDescription('Provide a report of NFS statistics for the\nreferenced NFS client since the last time the\nstatistics were cleared.')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess('readonly').setDescription('The IP address of the referenced client.')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of RPC calls received from\nthe referenced client, since the last time the\nstatistics were cleared.')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of calls received from the\nreferenced client that were rejected by the\nRPC layer, since the last time the\nstatistics were cleared.')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of times an RPC call was not available\nwhen it was thought to be received from\nreferenced client, since the last time the\nstatistics were cleared.')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received from the\nreferenced client with a length shorter\nthan a minimum-sized RPC call, since the\nlast time the statistics were cleared.')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received from the\nreferenced client whose header could not\nbe XDR decoded, since the last time the\nstatistics were cleared.')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The total number of NFS calls received from\nthe referenced client, since the last time\nthe statistics were cleared.')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The total number of NFS calls received from\nthe referenced client that were rejected, since\nthe last time the statistics were cleared.')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_NULL\n(Do Nothing) procedure, since the last time the\nstatistics were cleared.')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_GETATTR\n(Get File Attributes) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_SETATTR\n(Set File Attributes) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_ROOT\n(Get Filesystem Root) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_LOOKUP\n(Look Up File Name) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_READLINK\n(Read From Symbolic Link) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_READ\n(Read From File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_WRITECACHE\n(Write to Cache) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_WRITE\n(Write to File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_CREATE\n(Create File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_REMOVE\n(Remove File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_RENAME\n(Rename File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_LINK\n(Create Link to File) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_SYMLINK\n(Create Symbolic Link) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_MKDIR\n(Create Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_RMDIR\n(Remove Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_READDIR\n(Read From Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfrom the referenced client for the NFSPROC_STATFS\n(Get Filesystem Attributes) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_NULL\n(Do Nothing) procedure, since the last time the\nstatistics were cleared.')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_GETATTR\n(Get File Attributes) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_SETATTR\n(Set File Attributes) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_LOOKUP\n(Lookup Filename) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_ACCESS\n(Check Access Permission) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_READLINK\n(Read from Symbolic Link) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_READ\n(Read From File) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_WRITE\n(Write to File) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_CREATE\n(Create a File) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_MKDIR\n(Create a Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_SYMLINK\n(Create a Symbolic Link) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_MKNOD\n(Create a Special Device) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_REMOVE\n(Remove a File) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_RMDIR\n(Remove a Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_RENAME\n(Rename a File or Directory) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_LINK\n(Create Link to an Object) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_READDIR\n(Read From Directory) procedure, since the last\ntime the statistics were cleared.')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the\nNFSPROC3_READDIRPLUS (Extended Read from\nDirectory) procedure, since the last time\nthe statistics were cleared.')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_FSSTAT\n(Get Dynamic File System Information) procedure,\nsince the last time the statistics were cleared.')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_FSINFO\n(Get Static File System Information) procedure,\nsince the last time the statistics were cleared.')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_PATHCONF\n(Retrieve POSIX Information) procedure, since the\nlast time the statistics were cleared.')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfrom the referenced client for the NFSPROC3_COMMIT\n(Commit Cached Data on a Server to Stable Storage)\nprocedure, since the last time the statistics were\ncleared.')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of the total NFS calls for the\nreferenced client as a percentage of the\ntotal NFS calls received from all\nclients, since the last time the\nstatistics were cleared.')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_NULL (Do Nothing) procedure,\nas a percentage of the total calls\nreceived from this client, since the\nlast time the statistics were cleared.')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_GETATTR (Get File Attributes)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_SETATTR (Set File Attributes)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_ROOT (Get Filesystem Root)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_LOOKUP (Look Up File Name)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_READLINK (Read From Symbolic\nLink) procedure, as a percentage of the\ntotal calls received from this client,\nsince the last time the statistics were\ncleared.')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_READ (Read From File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_WRITECACHE (Write to Cache)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_WRITE (Write to File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_CREATE (Create File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_REMOVE (Remove File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_RENAME (Rename File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_LINK (Create Link to File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_MKDIR (Create Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_RMDIR (Remove Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_READDIR (Read From Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls\nreceived from the referenced client for\nthe NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, as a percentage\nof the total calls received from this\nclient, since the last time the\nstatistics were cleared.')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_NULL (Do Nothing) \nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_GETATTR (Get File Attributes)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_SETATTR (Set File Attributes)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_ACCESS (Check Access Permission)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_READ (Read From File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_WRITE (Write to File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_CREATE (Create a File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_MKDIR (Create a Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, as a percentage of the\ntotal calls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_MKNOD (Create a Special\nDevice) procedure, as a percentage of the\ntotal calls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_REMOVE (Remove a File)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_RMDIR (Remove a Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, as a percentage of\nthe total calls received from this client,\nsince the last time the statistics were\ncleared.')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_LINK (Create Link to an Object) \nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_READDIR (Read From Directory)\nprocedure, as a percentage of the total\ncalls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_READDIRPLUS (Extended Read from\nDirectory) procedure, as a percentage of the\ntotal calls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, as a\npercentage of the total calls received\nfrom this client, since the last time\nthe statistics were cleared.')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, as a percentage of the\ntotal calls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, as a percentage of the\ntotal calls received from this client, since\nthe last time the statistics were cleared.')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls\nreceived from the referenced client for\nthe NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, as\na percentage of the total calls received\nfrom this client, since the last time the\nstatistics were cleared.')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 0-511 bytes \nreceived from this client.')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 512-1023 bytes \nreceived from this client.')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 1K-2047 bytes \nreceived from this client.')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 2K-4095 bytes \nreceived from this client.')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 4K-8191 bytes \nreceived from this client.')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 8K-16383 bytes \nreceived from this client.')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 16K-32767 bytes \nreceived from this client.')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 32K-65535 bytes \nreceived from this client.')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls \nwith request sizes between 64K-131071 bytes \nreceived from this client.')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 0-511 bytes\nreceived from this client.')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 512-1023 bytes\nreceived from this client.')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 1K-2047 bytes\nreceived from this client.')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 2K-4095 bytes\nreceived from this client.')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 4K-8191 bytes\nreceived from this client.')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 8K-16383 bytes\nreceived from this client.')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 16K-32767 bytes\nreceived from this client.')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 32K-65535 bytes\nreceived from this client.')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nwith request sizes between 64K-131071 bytes\nreceived from this client.')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 0-511 bytes\nreceived from this client.')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 512-1023 bytes\nreceived from this client.')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 1K-2047 bytes\nreceived from this client.')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 2K-4095 bytes\nreceived from this client.')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 4K-8191 bytes\nreceived from this client.')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 8K-16383 bytes\nreceived from this client.')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 16K-32767 bytes\nreceived from this client.')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 32K-65535 bytes\nreceived from this client.')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nwith request sizes between 64K-131071 bytes\nreceived from this client.')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 0-511 bytes\nreceived from this client.')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 512-1023 bytes\nreceived from this client.')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 1K-2047 bytes\nreceived from this client.')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 2K-4095 bytes\nreceived from this client.')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 4K-8191 bytes\nreceived from this client.')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 8K-16383 bytes\nreceived from this client.')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 16K-32767 bytes\nreceived from this client.')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 32K-65535 bytes\nreceived from this client.')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nwith request sizes between 64K-131071 bytes\nreceived from this client.')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the pclTable table.')
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The total number of RPC calls received,\nsince the last boot.')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of calls rejected by the RPC\nlayer, since the last boot.')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of times an RPC call was not\navailable when it was thought to be received,\nsince the last boot.')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received with a length\nshorter than a minimum-sized RPC call, since\nthe last boot.')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of RPC calls received whose header\ncould not be XDR decoded, since the last boot.')
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The total number of NFS calls received, since\nlast boot.')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of received NFS calls rejected,\nsince last boot.')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nsince the last boot.')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, since the last boot.')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, since the the last boot.')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, since the last boot.')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, since the last boot.')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, since the last boot.')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, since the last boot.')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, since the last boot.')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, since the last boot.')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, since the last boot.')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, since the last boot.')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, since the last boot.')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, since the last boot.')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure, since the last boot.')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, since the last boot.')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, since the last boot.')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, since the last boot.')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, since the last boot.')
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure\nas a percentage of total NFS calls received,\nsince the last boot.')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure as a percentage of total NFS\ncalls received, since the last boot.')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure as a percentage of total NFS calls\nreceived, since the last boot.')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure as a percentage of\ntotal NFS calls received, since the last boot.')
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nthat did not result in the filesystem blocking\nto read from disk, since the last boot.')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, \nsince the last boot.')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, \nsince the last boot.')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic Link)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, that did not result\nin the filesystem blocking to read from disk,\nsince the last boot.')
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_GETATTR (Get File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SETATTR (Set File Attributes)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_ROOT (Get Filesystem Root)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LOOKUP (Look Up File Name)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READLINK (Read From Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITECACHE (Write to Cache)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_CREATE (Create File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_REMOVE (Remove File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RENAME (Rename File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_LINK (Create Link to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_SYMLINK (Create Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_MKDIR (Create Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_RMDIR (Remove Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 2 calls received\nfor the NFSPROC_STATFS (Get Filesystem\nAttributes) procedure, that did not result\nin the filesystem blocking to read from\ndisk, as a percentage of the total number\nof calls received for this procedure, \nsince the last boot.')
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nsince the last boot.')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, since the last boot.')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, since the last boot.')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, since the last boot.')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, since the last boot.')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, since the last boot.')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, since the last boot.')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, since the last boot.')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, since the last boot.')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, since the last boot.')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, since the last boot.')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, since the last boot.')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, since the last boot.')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, since the last boot.')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, since the last boot.')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, since the last boot.')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, since the last boot.')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, since the last boot.')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, since the\nlast boot.')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, since the last boot.')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, since the last boot.')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, since\nthe last boot.')
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nas a percentage of the total NFS calls\nreceived, since the last boot.')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access\nPermission) procedure, as a percentage of\nthe total NFS calls received, since the last boot.')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, as a percentage of the total\nNFS calls received, since the last boot.')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, as a percentage of the total\nNFS calls received, since the last boot.')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, as a percentage of the\ntotal NFS calls received, since the last boot.')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, as a percentage of\nthe total NFS calls received, since the\nlast boot.')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, as a percentage of\nthe total NFS calls received, since the\nlast boot.')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, as a percentage of the total NFS\ncalls received, since the last boot.')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, as a percentage\nof the total NFS calls received, since the\nlast boot.')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, as a percentage\nof the total NFS calls received, since the\nlast boot.')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, as a percentage of the\ntotal NFS calls received, since the last boot.')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, as a percentage of the\ntotal NFS calls received, since the last boot.')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, as a\npercentage of the total NFS calls received,\nsince the last boot.')
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nthat did not result in the filesystem blocking\nto read from disk, since the last boot.')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last boot.')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, that did not result in the filesystem\nblocking to read from disk, since the last boot.')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last boot.')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, that did not result in the\nfilesystem blocking to read from disk, since\nthe last boot.')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, \nsince the last boot.')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk,\nsince the last boot.')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk,\nsince the last boot.')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, that did not result in\nthe filesystem blocking to read from disk, \nsince the last boot.')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk, \nsince the last boot.')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIRPLUS (Extended Read\nfrom Directory) procedure, that did not result in\nthe filesystem blocking to read from disk, \nsince the last boot.')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read\nfrom disk, since the last boot.')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read\nfrom disk, since the last boot.')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nsince the last boot.')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, that did\nnot result in the filesystem blocking to read\nfrom disk, since the last boot.')
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_NULL (Do Nothing) procedure,\nthat did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_GETATTR (Get File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SETATTR (Set File Attributes)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LOOKUP (Lookup Filename)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_ACCESS (Check Access Permission)\nprocedure, that did not result in the filesystem\nblocking to read from disk, as a percentage\nof the total number of calls received for\nthis procedure, since the last boot.')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READLINK (Read from Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last\nlast boot.')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READ (Read From File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_WRITE (Write to File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_CREATE (Create a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKDIR (Create a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_SYMLINK (Create a Symbolic\nLink) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_MKNOD (Create a Special\nDevice) procedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_REMOVE (Remove a File)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RMDIR (Remove a Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_RENAME (Rename a File or\nDirectory) procedure, that did not result in\nthe filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_LINK (Create Link to an\nObject) procedure, that did not result in\nthe filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READDIR (Read From Directory)\nprocedure, that did not result in the\nfilesystem blocking to read from disk, as a\npercentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_READIRPLUS (Extended Read\nfrom Directory) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSSTAT (Get Dynamic File\nSystem Information) procedure, that did not\nresult in the filesystem blocking to read from\ndisk, as a percentage of the total number of\ncalls received for this procedure, since the\nlast boot.')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_FSINFO (Get Static File System\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_PATHCONF (Retrieve POSIX\nInformation) procedure, that did not result\nin the filesystem blocking to read from disk,\nas a percentage of the total number of calls\nreceived for this procedure, since the last boot.')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of NFS Version 3 calls received\nfor the NFSPROC3_COMMIT (Commit Cached Data on\na Server to Stable Storage) procedure, that\ndid not result in the filesystem blocking to\nread from disk, as a percentage of the total\nnumber of calls received for this procedure,\nsince the last boot.')
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped, for\ncalls already in progress, since the last boot.')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped,\nfor replies already generated within a short\ninterval, since the last boot. These stats are \ndeprecated. A value of zero will always be \nreturned for these stats.')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for which\nthere were no corresponding entries already in\nthe Reply Cache, since the last boot.')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received that\nresulted in replies being replayed from\nthe Reply Cache, since the last boot.')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for calls\nthat resulted in this request being processed\nas a new request even when a corresponding\nentry existed in the Reply Cache, since the\nlast boot.')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the TCP protocol, for calls already in\nprogress, since the last boot.')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the TCP protocol, for replies already\ngenerated within a short interval, since the\nlast boot. These stats are deprecated. A value \nof zero will always be returned for these stats.')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol for which there were no corresponding\nentries already in the Reply Cache, since the\nlast boot.')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol that resulted in replies being\nreplayed from the Reply Cache, since the\nlast boot.')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nTCP protocol for calls that resulted in this\nrequest being processed as a new request even\nwhen a corresponding entry existed in the Reply\nCache, since the last boot.')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the UDP protocol, for calls already in\nprogress, since the last boot.')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests that were dropped\nfor the UDP protocol, for replies already\ngenerated within a short interval, since the\nlast boot. These stats are deprecated. A value \nof zero will always be returned for these stats.')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol for which there were no corresponding\nentries already in the Reply Cache, since the\nlast boot.')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol that resulted in replies being\nreplayed from the Reply Cache, since the\nlast boot.')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS requests received for the\nUDP protocol for calls that resulted in this\nrequest being processed as a new request even\nwhen a corresponding entry existed in the Reply\nCache, since the last boot.')
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 0-511 bytes.')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 512-1023 bytes.')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 1K-2047 bytes.')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 2K-4095 bytes.')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 4K-8191 bytes.')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 8K-16383 bytes.')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 16K-32767 bytes.')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 32K-65535 bytes.')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 read calls\nreceived by the server since last boot\nwith request sizes between 64K-131071 bytes.')
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 0-511 bytes.')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 512-1023 bytes.')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 1K-2047 bytes.')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 2K-4095 bytes.')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 4K-8191 bytes.')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 8K-16383 bytes.')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 16K-32767 bytes.')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 32K-65535 bytes.')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 2 write calls\nreceived by the server since last boot\nwith request sizes between 64K-131071 bytes.')
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 0-511 bytes.')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 512-1023 bytes.')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 1K-2047 bytes.')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 2K-4095 bytes.')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 4K-8191 bytes.')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 8K-16383 bytes.')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 16K-32767 bytes.')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 32K-65535 bytes.')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 read calls\nreceived by the server since last boot\nwith request sizes between 64K-131071 bytes.')
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 0-511 bytes.')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 512-1023 bytes.')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 1K-2047 bytes.')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 2K-4095 bytes.')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 4K-8191 bytes.')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 8K-16383 bytes.')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 16K-32767 bytes.')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 32K-65535 bytes.')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of NFS Version 3 write calls\nreceived by the server since last boot\nwith request sizes between 64K-131071 bytes.')
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the nfs protocol is licensed on the\nfiler.')
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('quotaStateOff', 1), ('quotaStateOn', 2), ('quotaStateInit', 3), ))).setMaxAccess('readonly').setDescription("Indicates whether the root volume's quotas are ON, \nOFF or initializing.  This object is deprecated -\nuse qvStateTable.qvStateStat instead.")
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('Indicates percentage of root volume quota \ncomputation done while quotas are in initializing \nstate. This object is deprecated - use \nqvStateTable.qvInitPercent instead.')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3)).setDescription('Provide a report of the current file and\nspace consumption for each user or group with\na quota in /etc/quotas.  All quotas are displayed\nregardless of volume, and no volume information\nis given.  This table is deprecated - use qrVTable \ninstead.')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'qrIndex')).setDescription('Provide a report of the current file and\nspace consumption for a referenced entry\nwith a quota in the file /etc/quotas.\nAll quotas are displayed regardless of volume, \nand no volume information is given.  This object is \ndeprecated - use qrVEntry instead.')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry in the\nfile /etc/quotas.')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('qrTypeUser', 1), ('qrTypeGroup', 2), ('qrTypeTree', 3), ('qrTypeUnknown', 4), ))).setMaxAccess('readonly').setDescription('Identifies the kind of quota for this qrEntry.')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The UID (user's numerical ID) or the GID (numerical\nID of  the  group  that a user belongs to), as\napplicable, associated with this qrEntry.")
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The current number of KBytes used for this\nqrEntry.')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrEntry.')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The current number of files used for this\nqrEntry.')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The limit of files that can be used for this\nqrEntry.')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A textual string that contains the path\ncorresponding to this qrEntry.')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4)).setDescription('Provide a report of the current quota state of\neach volume in the system.')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'qvStateVolume')).setDescription('Provide a report of the current quota state of\neach volume in the system.')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies this volume.  The mapping\nof this number to actual volumes may change if \nvolumes are added or deleted.  Use qvStateName to \nunambiguously identify a volume.  The mapping\nestablished by this object is the same as \nthe mapping of qrVVolume (below) to actual volumes.\nFor instance, if a qvStateVolume value of '5'\nrepresents the volume 'vol2', a value of '5'\nin qrVVolume also represents the volume 'vol2'.")
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Indicates the name of this volume.')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('quotaStateOff', 1), ('quotaStateOn', 2), ('quotaStateInit', 3), ))).setMaxAccess('readonly').setDescription('Indicates whether quotas are ON, OFF or\ninitializing.')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('Indicates percentage of quota computation done\nwhile quotas are in initializing state.')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5)).setDescription('Provide a report of the current file and\nspace consumption for each user or group with\na quota in /etc/quotas.')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'qrVVolume'), (0, 'NETWORK-APPLIANCE-MIB', 'qrVIndex')).setDescription('Provide a report of the current file and\nspace consumption for a referenced entry\nwith a quota in the file /etc/quotas.  Indices\nselect the volume of the quota and the quota entry\nitself.')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry in the\nfile /etc/quotas in the given volume.')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,6,2,1,5,4,)).subtype(namedValues=namedval.NamedValues(('qrVTypeUser', 1), ('qrVTypeGroup', 2), ('qrVTypeTree', 3), ('qrVTypeUserDefault', 4), ('qrVTypeGroupDefault', 5), ('qrVTypeUnknown', 6), ))).setMaxAccess('readonly').setDescription('Identifies the kind of quota for this qrVEntry.')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The UID (user's numerical ID) or the GID (numerical\nID of  the  group  that a user belongs to), as\napplicable, associated with this qrVEntry. Check\nthe qrVIdType field to see if this field is valid.")
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The current number of KBytes used for this\nqrVEntry.')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrVEntry.')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The current number of files used for this\nqrVEntry.')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The limit of files that can be used for this\nqrVEntry.')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A textual string that contains the path\ncorresponding to this qrVEntry.')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the volume for which\nthis quota is in effect on.  The volume that this\nvalue represents can be determined by checking\nthe value of qvStateName (above) with \nqvStateVolume set to the value found here.')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('A string that indicates which qtree this quota\nbelongs to.')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('qrVIdValid', 1), ('qrVSidValid', 2), ))).setMaxAccess('readonly').setDescription('A value that indicates which ID field is valid.')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('The one or more IDs associated with this qrVEntry.\nIf the qrVentry is associated with a Windows ID, the\n text form of the Windows ID (the SID) is here. If\n the qrVEntry is associated with more than one id,\n this contains a blank separated list of those IDs.\nCheck the qrVIdType field to see if this field is\nvalid.')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('A number of KBytes that when used by this entry\nproduces a warning message.')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrVEntry before a warning message and SNMP\ntrap is produced.')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The limit of files that can be used for this\nqrVEntry before a warning message and SNMP\ntrap is produced.')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6)).setDescription('Provide a report of the current file and\nspace consumption for each user or group with\na quota in /etc/quotas.')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'qrV2Volume'), (0, 'NETWORK-APPLIANCE-MIB', 'qrV2Index')).setDescription('Provide a report of the current file and\nspace consumption for a referenced entry\nwith a quota in the file /etc/quotas.  Indices\nselect the volume of the quota and the quota entry\nitself.')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry in the\nfile /etc/quotas in the given volume.')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,5,4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('qrV2TypeUser', 1), ('qrV2TypeGroup', 2), ('qrV2TypeTree', 3), ('qrV2TypeUserDefault', 4), ('qrV2TypeGroupDefault', 5), ('qrV2TypeUnknown', 6), ))).setMaxAccess('readonly').setDescription('Identifies the kind of quota for this qrV2Entry.')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The UID (user's numerical ID) or the GID (numerical\nID of  the  group  that a user belongs to), as\napplicable, associated with this qrV2Entry. Check\nthe qrV2IdType field to see if this field is valid.")
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The current number of KBytes used for this\nqrV2Entry. This object returns the most significant\n32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The current number of KBytes used for this\nqrV2Entry. This object returns the least significant\n32 bits of the 64 bit unsigned integer.')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This flag designates whether or not the\nsize based quota limit for this qrV2Entry is unlimited.\nIf false(1) then qrV2HighKBytesLimit and\nqrV2LowKBytesLimit are valid, if true(0) both\nqrV2HighKBytesLimit and qrV2LowKBytesLimit are unused\nand will return 0.')
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrV2Entry. This object returns the most significant\n32 bits of the 64 bit unsigned integer. This will \nreturn 0 if qrV2QuotaUnlimited is true.')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrV2Entry. This object returns the least significant\n32 bits of the 64 bit unsigned integer. This will \nreturn 0 if qrV2QuotaUnlimited is true.')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The current number of files used for this\nqrV2Entry.')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This flag designates whether or not the\nfile based quota limit for this qrV2Entry is unlimited.\nIf false(1) then qrV2FileLimit is valid, if true(0)\nqrV2FileLimit will return 0.')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The limit of files that can be used for this\nqrV2Entry.')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('A textual string that contains the path\ncorresponding to this qrV2Entry.')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the volume for which\nthis quota is in effect on.  The volume that this\nvalue represents can be determined by checking\nthe value of qvStateName (above) with \nqvStateVolume set to the value found here.')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('A string that indicates which qtree this quota\nbelongs to.')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('qrV2IdValid', 1), ('qrV2SidValid', 2), ))).setMaxAccess('readonly').setDescription('A value that indicates which ID field is valid.')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('The one or more IDs associated with this qrV2Entry.\nIf the qrV2entry is associated with a Windows ID, the\n text form of the Windows ID (the SID) is here. If\n the qrV2Entry is associated with more than one id,\n this contains a blank separated list of those IDs.\nCheck the qrV2IdType field to see if this field is\nvalid.')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This flag designates whether or not the\nsize based threshold limit for this qrV2Entry is \nunlimited. If false(1) then qrV2HighKBytesThreshold and\nqrV2LowKBytesThreshold are valid, if true(0) both\nqrV2HighKBytesThreshold and qrV2LowKBytesThreshold \nare unused and will return 0.')
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('A number of KBytes that when used by this entry\nproduces a warning message. This object returns the \nmost significant 32 bits of the 64 bit unsigned \ninteger. This will return 0 if qrV2ThresholdUnlimited\nis true.')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess('readonly').setDescription('A number of KBytes that when used by this entry\nproduces a warning message. This object returns the \nleast significant 32 bits of the 64 bit unsigned \ninteger. This will return 0 if qrV2ThresholdUnlimited\nis true.')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This flag designates whether or not the\nsize based soft quota limit for this qrV2Entry is \nunlimited. If false(1) then qrV2HighKBytesSoftLimit and\nqrV2LowKBytesSoftLimit are valid, if true(0) both\nqrV2HighKBytesSoftLimit and qrV2LowKBytesSoftLimit \nare unused and will return 0.')
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrV2Entry before a warning message and SNMP\ntrap is produced. This object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess('readonly').setDescription('The limit of KBytes that can be used for this\nqrV2Entry before a warning message and SNMP\ntrap is produced. This object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This flag designates whether or not the\nfile based soft quota limit for this qrV2Entry is \nunlimited. If false(1) then qrV2SoftFileLimit is valid,\nif true(0) qrV2SoftFileLimit is unused and will \nreturn 0.')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess('readonly').setDescription('The limit of files that can be used for this\nqrV2Entry before a warning message and SNMP\ntrap is produced. This will return 0 if \nqrV2SoftFileQuotaUnlimited is true.')
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The count of the maximum number of\nfiles allowable on the root volume.  This\nobject is deprecated - use \ndfEntry.dfMaxFilesAvail instead.')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess('readonly').setDescription('The count of the number of files\ncurrently in use on the root volume.  \nThis object is deprecated - use\ndfEntry.dfMaxFilesUsed instead.')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess('readonly').setDescription('The largest value to which the\nfilesysMaxfilesAvail parameter above can\nbe increased by reconfiguration on the\nroot volume.  This object is deprecated -\nuse dfEntry.dfMaxFilesPossible.')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4)).setDescription('Provide a report of the available disk space\non the file systems. The tables shows the\navailable disk space for volumes as well as\naggregates.')
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'dfIndex')).setDescription('Provide a report of the available disk space on\nthe referenced file system.')
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced file system.')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name for the referenced file system.')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The total capacity in KBytes for the\nreferenced file system.')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is in use\non the referenced file system.')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is\nfree for use on the referenced file system.')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The percentage of disk space currently\nin use on the referenced file system.')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The total number of inodes in use on the\nreferenced file system.')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The total number of inodes that are\navailable for use on the referenced\nfile system.')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The percentage of disk space currently\nin use based on inode counts, on the\nreferenced file system.')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name of the file on which this file\nsystem is mounted.')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The count of the maximum number of\nfiles allowable on the referenced file\nsystem.')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The count of the number of files\ncurrently in use on the referenced file\nsystem.')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The largest value to which the\nfilesysMaxfilesAvail parameter above can\nbe increased by reconfiguration on the\nreferenced file system.')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The total capacity in KBytes for the\nreferenced file system.  This object returns\nthe most significant 32 bits of the 64 bit \nunsigned integer.')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The total capacity in KBytes for the\nreferenced file system.  This object returns\nthe least significant 32 bits of the 64 bit \nunsigned integer.')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is in use\non the referenced file system.  This object\nreturns the most significant 32 bits of the\n64 bit unsigned integer.')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is in use\non the referenced file system.  This object\nreturns the least significant 32 bits of the\n64 bit unsigned integer.')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is free\nfor use on the referenced file system.\nThis object returns the most significant\n32 bits of the 64 bit unsigned integer.')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is free\nfor use on the referenced file system.\nThis object returns the least significant\n32 bits of the 64 bit unsigned integer.')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,5,3,6,9,7,4,8,1,2,)).subtype(namedValues=namedval.NamedValues(('unmounted', 1), ('replayed', 10), ('mounted', 2), ('frozen', 3), ('destroying', 4), ('creating', 5), ('mounting', 6), ('unmounting', 7), ('nofsinfo', 8), ('replaying', 9), ))).setMaxAccess('readonly').setDescription('The status of the file system.')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,9,6,1,3,5,8,7,10,)).subtype(namedValues=namedval.NamedValues(('invalid', 1), ('limbo', 10), ('uninitialized', 2), ('needcpcheck', 3), ('cpcheckwait', 4), ('unmirrored', 5), ('normal', 6), ('degraded', 7), ('resyncing', 8), ('failed', 9), ))).setMaxAccess('readonly').setDescription('Overall mirror status of the file system.')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess('readonly').setDescription('Number of plexes in this file system.')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('traditionalVolume', 1), ('flexibleVolume', 2), ('aggregate', 3), ))).setMaxAccess('readonly').setDescription('Indicates the type of container.')
dfHighSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 24), Integer32()).setMaxAccess('readonly').setDescription('The total amount of data in KBytes that is\nshared by more that one instance on the\nreferenced file system.  This object returns\nthe most significant 32 bits of the 64 bit\nunsigned integer.')
dfLowSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 25), Integer32()).setMaxAccess('readonly').setDescription('The total amount of data in KBytes that is\nshared by more that one instance on the\nreferenced file system.  This object returns\nthe least significant 32 bits of the 64 bit\nunsigned integer.')
dfHighSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 26), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is saved\nby storing only one copy of the duplicated\nblocks on the referenced file system.  The\nobject returns the most significant 32 bits\nof the 64 bit unsigned integer.')
dfLowSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 27), Integer32()).setMaxAccess('readonly').setDescription('The total disk space in KBytes that is saved\nby storing only one copy of the duplicated\nblocks on the referenced file system.  The\nobject returns the least significant 32 bits\nof the 64 bit unsigned integer.')
dfPerCentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 28), Integer32()).setMaxAccess('readonly').setDescription('The percentage of disk space saved by\neliminating the duplicated blocks on the\nreferenced file system.')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1)).setDescription('Provide a report of the snapshots on the\nroot volume.  This table is deprecated - use\nslVTable instead.')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'slIndex')).setDescription('Provide a report on a given snapshot on the\nroot volume.  This object is deprecated - use\nslVEntry instead.')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced file system.')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,10,3,8,9,5,1,6,4,12,7,11,)).subtype(namedValues=namedval.NamedValues(('january', 1), ('october', 10), ('november', 11), ('december', 12), ('february', 2), ('march', 3), ('april', 4), ('may', 5), ('june', 6), ('july', 7), ('august', 8), ('september', 9), ))).setMaxAccess('readonly').setDescription('The month in which the snapshot was created.')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 31))).setMaxAccess('readonly').setDescription('The day on which the snapshot was created.')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 23))).setMaxAccess('readonly').setDescription('The hour in which the snapshot was created.')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 59))).setMaxAccess('readonly').setDescription('The minute in which the snapshot was created.')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The name of the referenced snapshot.')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2)).setDescription('Provide a report of the snapshots on the\nfile systems.')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'slVVolume'), (0, 'NETWORK-APPLIANCE-MIB', 'slVIndex')).setDescription('Provide a report on a given snapshot on the\nfile system.  Indices select the volume of\nthe snapshot and the snapshot entry itself.')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced file system.')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,10,3,8,9,5,1,6,4,12,7,11,)).subtype(namedValues=namedval.NamedValues(('january', 1), ('october', 10), ('november', 11), ('december', 12), ('february', 2), ('march', 3), ('april', 4), ('may', 5), ('june', 6), ('july', 7), ('august', 8), ('september', 9), ))).setMaxAccess('readonly').setDescription('The month in which the snapshot was created.')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 31))).setMaxAccess('readonly').setDescription('The day on which the snapshot was created.')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 23))).setMaxAccess('readonly').setDescription('The hour in which the snapshot was created.')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 59))).setMaxAccess('readonly').setDescription('The minute in which the snapshot was created.')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The name of the referenced snapshot.')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the volume  / aggregate that \ncontains this snapshot.')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Number of snapshots for this volume / aggregate.')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('The name of the volume / aggregate. This does not \nhave a /vol/ prefix.')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('traditionalVolume', 1), ('flexibleVolume', 2), ('aggregate', 3), ))).setMaxAccess('readonly').setDescription('Indicates the type of container for this\nsnapshot.')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3)).setDescription('Provide a report of the snapshots and their contents\non the file systems.')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'slQVolume'), (0, 'NETWORK-APPLIANCE-MIB', 'slQQtree'), (0, 'NETWORK-APPLIANCE-MIB', 'slQIndex')).setDescription('Provide a report on a given snapshot for a given \nqtree on the file system.  Indices select the volume \nand qtree of the snapshot and the snapshot entry \nitself.')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced file system.')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the volume that contains\nthis snapshot.')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the qtree that contains\nthis snapshot.')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the referenced snapshot.')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Time of the snapshot on the system. The time in \nseconds since January 1, 1970.')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A string that indicates which qtree is in this \nsnapshot')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('replica', 1), ('transitioning', 2), ('original', 3), ))).setMaxAccess('readonly').setDescription('The content of the qtree tree')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("The source of this qtree for a replicated qtree.\n'-' for a original qtree.")
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('Time of the source snapshot for a replicated qtree.\nTime of the current snapshot for an original qtree.\nThe time in seconds since January 1, 1970. 0 if the \nqtree is in a transitioning stage')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name of the volume. This does not have a /vol/\nprefix.')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the dfTable table.')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('nearlyFull', 2), ('full', 3), ))).setMaxAccess('readonly').setDescription("An indication of overall file system\nhealth.  'ok' indicates that all file systems\nhave adequate space.  'nearlyFull' means\nthat one or more is nearly full (more than\n95% full). 'full' means that one or more\nare more than 98% full.")
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess('readonly').setDescription('A string indicating any file systems which\nare full or nearly full.')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The percentage of space currently in use\nby the file system which is most full.')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The percentage of inodes currently in use\nby the file system which is most full.')
fsMaxUsedReservedPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The percentage of reserved space currently \nin use by the file system which is most full.')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8)).setDescription('List the volumes defined on the system,\nincluding offline volumes.')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'volIndex')).setDescription('Provide details about a particular volume.')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2048))).setMaxAccess('readonly').setDescription('A number that identifies this volume.  The\nvolIndex is not related to any other table\ndefined in this MIB, and may change as\nvolumes are created and destroyed.')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Name of the volume.  This includes no /vol/\nprefix.')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Unique identifier for this volume.')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('local', 1), ('partner', 2), ))).setMaxAccess('readonly').setDescription('Indication of which host owns this volume.')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription("State of the volume, such as 'online' or\n'offline'.")
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription("Status of the volume, such as 'normal' or\n'reconstructing'. May include several values\nseparated by comma and space.")
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription("Options associated with the volume, such \nas 'root' and 'nosnapdir=off'. May include\nseveral values separated by comma.")
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A unique id associated with the volume.')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('Name of the aggregate this flexible volume is a\npart of.')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('traditional', 1), ('flexible', 2), ))).setMaxAccess('readonly').setDescription('Type of this volume, older volumes are\ntraditional while newer volumes contained in\naggregates are flexible.')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('True indicates flexible volume is a clone.')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('Name of flexible volume this flexible volume is\na clone of.')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess('readonly').setDescription('Name of original cloned snapshot.')
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2048))).setMaxAccess('readonly').setDescription('Number of volumes in the volTable.')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10)).setDescription('Provide a list of the qtrees on the system.')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'qtreeVolume'), (0, 'NETWORK-APPLIANCE-MIB', 'qtreeIndex')).setDescription('Provide details about a particular qtree.')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess('readonly').setDescription('Index into the qtree table.')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the volume that contains\nthis qtree.')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The name of the volume that contains this qtree. \nThis includes no /vol/prefix.')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 255))).setMaxAccess('readonly').setDescription('The Id number of the qtree.')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The name of the qtree.')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('unix', 1), ('ntfs', 2), ('mixed', 3), ))).setMaxAccess('readonly').setDescription('The security style of the qtree.')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('snapmirrored', 2), ('snapvaulted', 3), ))).setMaxAccess('readonly').setDescription('The status of the qtree.')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabled', 1), ('disabled', 2), ))).setMaxAccess('readonly').setDescription('An indication of whether the oplocks is enabled or not\nfor this qtree.')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11)).setDescription('List the aggregates defined on the system,\nincluding offline aggregates.')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'aggrIndex')).setDescription('Provide details about a particular aggregate.')
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2048))).setMaxAccess('readonly').setDescription('A number that identifies this aggregate.  The\naggrIndex is not related to any other table\ndefined in this MIB, and may change as\naggregates are created and destroyed.')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Name of the aggregate.  This includes no /vol/\nprefix.')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Unique identifier for this aggregate.')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('local', 1), ('partner', 2), ))).setMaxAccess('readonly').setDescription('Indication of which host owns this aggregate.')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription("State of the aggregate, such as 'online' or\n'offline'.")
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription("Status of the aggregate, such as 'normal' or\n'reconstructing'. May include several values\nseparated by comma and space.")
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('Options associated with the aggregate.')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A unique id associated with the aggregate.')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 1024))).setMaxAccess('readonly').setDescription('List of all the flexible volumes within this\naggregate.')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('traditional', 1), ('aggregate', 2), ))).setMaxAccess('readonly').setDescription('Type of this container, containers\ncontaining flexible volumes are aggregate.')
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2048))).setMaxAccess('readonly').setDescription('Number of aggregates in the aggrTable.')
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1)).setDescription('Display RAID configuration information for the\nroot volume.  This table is deprecated - use\nraidVTable instead.')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'raidIndex')).setDescription('Display RAID configuration information for\nthe referenced disk drive.  This only works for\ndisks contained within the root volume, and will\ninclude spare drives.  This object is \ndeprecated - use raidVEntry instead.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced disk drive.')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced disk drive.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,9,4,6,3,5,8,1,10,7,)).subtype(namedValues=namedval.NamedValues(('active', 1), ('offline', 10), ('reconstructionInProgress', 2), ('parityReconstructionInProgress', 3), ('parityVerificationInProgress', 4), ('scrubbingInProgress', 5), ('failed', 6), ('addingSpare', 7), ('spare', 8), ('prefailed', 9), ))).setMaxAccess('readonly').setDescription('The status of the referenced disk drive.')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced disk\ndrive.')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced disk drive.')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced disk drive\non the referenced SCSI adapter.')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes currently in use on\nthe referenced disk drive.')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks currently in use on\nthe referenced disk drive.')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced disk drive.')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced disk drive.')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('In the case when reconstruction/adding a\nspare, verification or scrubbing is in progress,\nthe percent of such reconstruction, verification\nor scrubbing that has been completed on the\nreferenced disk drive.')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2)).setDescription('Display RAID configuration information.')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'raidVVol'), (0, 'NETWORK-APPLIANCE-MIB', 'raidVGroup'), (0, 'NETWORK-APPLIANCE-MIB', 'raidVIndex')).setDescription('Display RAID configuration information for\nthe referenced volume, raid group, and disk drive.')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this disk drive within \nthe given volume and RAID group.')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced disk drive.')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,9,4,6,3,5,1,10,)).subtype(namedValues=namedval.NamedValues(('active', 1), ('offline', 10), ('reconstructionInProgress', 2), ('parityReconstructionInProgress', 3), ('parityVerificationInProgress', 4), ('scrubbingInProgress', 5), ('failed', 6), ('prefailed', 9), ))).setMaxAccess('readonly').setDescription('The status of the referenced disk drive.')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced disk\ndrive.')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced disk drive.')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced disk drive\non the referenced SCSI adapter.')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes currently in use on\nthe referenced disk drive.')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks currently in use on\nthe referenced disk drive.')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced disk drive.')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced disk drive.')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('In the case when rapid raid recovery, disk copy,\nreconstruction/adding a spare, verification or \nscrubbing is in progress, the percent of such \ncopy, reconstruction, verification or scrubbing \nthat has been completed on the referenced disk \ndrive.')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies the volume that this entry\nbelongs to.  The first volume is '1'.")
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies the RAID group within the\ngiven volume that this entry belongs to.  The\nfirst RAID group is '1', and number across all plexes.")
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The number of disks within this RAID group.')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The number of RAID groups within this volume.')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the primary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the secondary path to\nthe referenced disk drive.')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the secondary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the shelf where the disk\nis located.')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the disk bay within\nthe shelf where the disk is located.')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess('readonly').setDescription("A number that identifies the plex within the\ngiven volume that this entry belongs to.  The\nfirst plex is '1'.")
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess('readonly').setDescription("A number that identifies the RAID group within\nthe given plex that this entry belongs to.  The\nfirst RAID group is '1'.")
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2))).setMaxAccess('readonly').setDescription('The number of plexes within this volume.\nThis number is always 1 or 2.')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess('readonly').setDescription("A name that identifies the plex that this entry\nbelongs to.  A plex name can be anything, but\nis usually a string like 'plex0' or 'plex1'.")
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess('readonly').setDescription("A number that specifies bytes per sector\nfor this entry.  Values are '512' or '520'.")
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess('readonly').setDescription('Serial number of the referenced disk drive.')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess('readonly').setDescription('The vendor of the referenced disk drive.')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess('readonly').setDescription('Model string of the referenced disk drive.')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess('readonly').setDescription('Firmware revision number of the referenced disk drive.')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess('readonly').setDescription('RPM of the referenced disk drive.')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess('readonly').setDescription('Interface type of the referenced disk drive. e.g SCSI, \nor ATA.')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess('readonly').setDescription('A name that identifies the disk pool that this entry \nbelongs to.')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess('readonly').setDescription('When raidVStatus value is prefailed, this string identifies \nthe name of the disk which is the copy target of the \nreferenced prefailed disk.')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3)).setDescription('Display spare disk configuration information.')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'spareIndex')).setDescription('Display configuration information for\nthe referenced spare disk drive.')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced disk drive in the list of spare disk\ndrives.')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced spare disk \ndrive.')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,10,2,)).subtype(namedValues=namedval.NamedValues(('spare', 1), ('offline', 10), ('addingspare', 2), ('bypassed', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription('The status of the referenced spare disk drive.')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced spare disk\ndrive.')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced spare disk drive.')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced spare disk drive\non the referenced SCSI adapter.')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced spare disk drive.')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced spare disk drive.')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the primary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the secondary path to\nthe referenced disk drive.')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the secondary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the shelf where the disk\nis located.')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the disk bay within\nthe shelf where the disk is located.')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('A name that identifies the disk pool that this\nentry belongs to.')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess('readonly').setDescription("A number that specifies bytes per sector\nfor this entry.  Values are '512' or '520'.")
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('Serial number of the referenced disk drive.')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess('readonly').setDescription('The vendor of the referenced disk drive.')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess('readonly').setDescription('Model string of the referenced disk drive.')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess('readonly').setDescription('Firmware revision number of the referenced disk drive.')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess('readonly').setDescription('RPM of the referenced disk drive.')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess('readonly').setDescription('Interface type of the referenced disk drive. e.g SCSI, \nor ATA.')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The total number of disks on the system.')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of disks which are currently active,\nincluding parity disks.')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of disks which are\ncurrently being reconstructed.')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('The number of parity disks which are\ncurrently being reconstructed.')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('The number of parity disks which are\ncurrently being verified.')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of disks which are\ncurrently being scrubbed.')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of disks which are\ncurrently broken.')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of available spare disks.')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of spare disks which are\ncurrently being added into a RAID group.')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess('readonly').setDescription('If diskFailedCount is non-zero, this is\na string describing the failed disk or \ndisks.  Each failed disk is described with\na sentence like\n\nParity disk in volume vol0, RAID group 1, failed.\n\nor\n\nDisk on adapter 8a, shelf 1, bay 0, failed.')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess('readonly').setDescription('The number of disks which are prefailed and marked\nfor rapid raid recovery.')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the raidVTable table.\nThis is the number of volumes in the system.')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the spareTable table.')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the otherDiskTable table.')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the raidPTable table.\nThis is the number of volumes in the system.')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9)).setDescription('Display out-of-service disk configuration information.')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'otherDiskIndex')).setDescription('Display configuration information for\nthe referenced disk drive.')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced disk drive in the list of out-of-service\ndiskdrives. Out-of-service disks include all disks\nthat are not in service in a raid group or available\nas a spare disk.')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced disk \ndrive.')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('broken', 1), ('bypassed', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The status of the referenced disk drive.')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced disk\ndrive.')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced disk drive.')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced disk drive\non the referenced SCSI adapter.')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced disk drive.')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced disk drive.')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the primary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the secondary path to\nthe referenced disk drive.')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the secondary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the shelf where the disk\nis located.')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the disk bay within\nthe shelf where the disk is located.')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('A name that identifies the disk pool that this\nentry belongs to.')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess('readonly').setDescription("A number that specifies bytes per sector\nfor this entry.  Values are '512' or '520'.")
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('Serial number of the referenced disk drive.')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess('readonly').setDescription('The vendor of the referenced disk drive.')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess('readonly').setDescription('Model string of the referenced disk drive.')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess('readonly').setDescription('Firmware revision number of the referenced disk drive.')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess('readonly').setDescription('RPM of the referenced disk drive.')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess('readonly').setDescription('Interface type of the referenced disk drive. e.g SCSI, \nor ATA.')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10)).setDescription('Display RAID configuration information.')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'raidPVol'), (0, 'NETWORK-APPLIANCE-MIB', 'raidPPlex'), (0, 'NETWORK-APPLIANCE-MIB', 'raidPGroup'), (0, 'NETWORK-APPLIANCE-MIB', 'raidPIndex')).setDescription('Display RAID configuration information for\nthe referenced volume, plex, raid group, and disk drive.')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this disk drive within \nthe given volume and RAID group.')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,9,4,6,3,5,1,10,)).subtype(namedValues=namedval.NamedValues(('active', 1), ('offline', 10), ('reconstructionInProgress', 2), ('parityReconstructionInProgress', 3), ('parityVerificationInProgress', 4), ('scrubbingInProgress', 5), ('failed', 6), ('prefailed', 9), ))).setMaxAccess('readonly').setDescription('The status of the referenced disk drive.')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies the volume that this entry\nbelongs to. The first volume is '1'.")
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies the plex that this entry\nbelongs to. The first plex is '1'.")
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A number that identifies the RAID group within the\ngiven plex that this entry belongs to. The\nfirst RAID group is '1'.")
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2))).setMaxAccess('readonly').setDescription('The number of plexes within this volume.\nThis number is always 1 or 2.')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of RAID groups within this plex.')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 100))).setMaxAccess('readonly').setDescription('The number of disks within this RAID group.')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription("A name that identifies the plex that this entry\nbelongs to.  A plex name can be anything, but\nis usually a string like 'plex0' or 'plex1'.")
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced disk drive.')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the primary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the secondary path to\nthe referenced disk drive.')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the secondary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced disk drive.')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced disk drive\non the referenced SCSI adapter.')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced disk\ndrive.')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the shelf where the disk\nis located.')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the disk bay within\nthe shelf where the disk is located.')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess('readonly').setDescription("A number that specifies bytes per sector\nfor this entry.  Values are '512' or '520'.")
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes currently in use on\nthe referenced disk drive.')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks currently in use on\nthe referenced disk drive.')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced disk drive.')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced disk drive.')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('In the case when rapid raid recovery, disk copy,\nreconstruction or adding a spare, verification or \nscrubbing is in progress, the percent of such copy, \nreconstruction, verification or scrubbing that has \nbeen completed on the referenced disk drive.')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess('readonly').setDescription('Serial number of the referenced disk drive.')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess('readonly').setDescription('The vendor of the referenced disk drive.')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess('readonly').setDescription('Model string of the referenced disk drive.')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess('readonly').setDescription('Firmware revision number of the referenced disk drive.')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess('readonly').setDescription('RPM of the referenced disk drive.')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess('readonly').setDescription('Interface type of the referenced disk drive. e.g SCSI, \nor ATA.')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess('readonly').setDescription('A name that identifies the disk pool that this entry \nbelongs to.')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess('readonly').setDescription('When raidPStatus value is prefailed, this string identifies \nthe name of the disk which is the copy target of the \nreferenced prefailed disk.')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11)).setDescription('A table containing plex specific information.')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'plexIndex')).setDescription('Provide a report on file system plexes.')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced plex.')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the plex.')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The volume to which this plex belongs.')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('offline', 1), ('resyncing', 2), ('online', 3), ))).setMaxAccess('readonly').setDescription('The status of the plex.')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('If the plex is resyncing, the percent \ncompletion of the resync.')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess('readonly').setDescription('Number of entries in the outOfDateDiskTable table.')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13)).setDescription('Display out-of-date disk information.')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'outOfDateDiskIndex')).setDescription('Display information for the referenced\nout-of-date disk.')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nreferenced disk drive in the list of out-of-date\ndiskdrives.')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the referenced disk \ndrive.')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The disk identifier for the referenced disk\ndrive.')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The identifier of the SCSI adapter for the\nreferenced disk drive.')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The identifier for the referenced disk drive\non the referenced SCSI adapter.')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of MBytes physically available\non the referenced disk drive.')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of Blocks physically available\non the referenced disk drive.')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the primary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('The name identifying the secondary path to\nthe referenced disk drive.')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('portA', 1), ('portB', 2), ('portSingle', 3), ('portNone', 4), ))).setMaxAccess('readonly').setDescription('A number that indicates which port of the\ndisk is being used by the secondary path to the disk.\nFor a dual-ported disk, values of portA and portB\nindicate which port is being used.\nIf the disk only has a single port, the value\nis portSingle, and if the port is not active, \nthe value is portNone.')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the shelf where the disk\nis located.')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Number identifying the disk bay within\nthe shelf where the disk is located.')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess('readonly').setDescription('A name that identifies the disk pool that this\nentry belongs to.')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess('readonly').setDescription("A number that specifies bytes per sector\nfor this entry.  Values are '512' or '520'.")
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess('readonly').setDescription('Serial number of the referenced disk drive.')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('The vendor of the referenced disk drive.')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess('readonly').setDescription('Model string of the referenced disk drive.')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess('readonly').setDescription('Firmware revision number of the referenced disk drive.')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess('readonly').setDescription('RPM of the referenced disk drive.')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess('readonly').setDescription('Interface type of the referenced disk drive. e.g SCSI, \nor ATA.')
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the CIFS protocol is active on the\nfiler.')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether new CIFS connections to the filer\nare currently allowed.')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The host name used by the CIFS protocol on this\nfiler.')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('Alternate names recognized by the filer.')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Has the filer joined an NT domain?\nIf this value is true, cifsDomainName\nwill contain the name of the domain.\nOtherwise, the filer may have joined\na WorkGroup, and cifsWGName will contain\nthe name of the WorkGroup. ')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The domain name used by the CIFS \nprotocol on this filer.')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The workgroup name (if any) used by \nthe CIFS protocol on this filer.')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('The name of the Domain Controller used by\nthis filer to authenticate users and file\nrequests.')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('True if WINS name resolution is enabled\non the filer.')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The name(s) of the WINS servers registered\nwith the filer.')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('unix', 1), ('pc', 2), ))).setMaxAccess('readonly').setDescription('Which type of authentication semantics\n(Unix or PC) are in use for PC access to \nUnix files on the filer. If Unix semantics\nare in use, no ACL on a Unix file is ever \nchecked. If PC semantics are in use, the \nshare level ACL on the share containing the \nfile is used for authentication instead of \nthe group portion of the permissions on \nthe file.')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('The name of the generic PC user, if any.  This\nusername is used for CIFS access by Unix users\nwho have not authenticated through CIFS or NT.')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('not-enabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('Whether oplocks are enabled on the filer.')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('not-enabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('Whether level 2 oplocks are enabled on the filer.')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('no-preserve-case', 1), ('preserve-case', 2), ))).setMaxAccess('readonly').setDescription('If this option is set to preserve-case\n(the default), all filename references\nwill be case preserving.  Otherwise,\nthey are forced to lowercase.')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('not-enabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('If this option is enabled, CIFS accesses will\nfollow symbolic links using Unix semantics.')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('not-enabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('If this option is enabled, CIFS accesses will\nthrough symbolic links will check for cycles\nin the link graph.')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the CIFS protocol is licensed on the\nfiler.')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('True when cifs.per_client_stats are\nbeing collected.')
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('Encoding of CIFS startup state on the filer.')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('Does the administrative password need \nto be set before start?')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('Time remaining until CIFS shutdown')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of simultaneous CIFS \nconnections allowed on the filer.')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of simultaneous CIFS\ntrees allowed on the filer.')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of simultaneous CIFS\nshares allowed on the filer.')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of concurrently open CIFS\nfiles and directories allowed on the filer.')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('This object is deprecated, and always has a\nvalue of 0.')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('The current number of CIFS users on the\nfiler.')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess('readonly').setDescription('The current number of CIFS trees on the\nfiler.')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess('readonly').setDescription('The current number of CIFS shares on the\nfiler.')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess('readonly').setDescription('The current number of active CIFS sessions\non the filer.')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of open CIFS files and directories\non the filer.')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of open CIFS directories on the\nfiler.')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of open files waiting for oplock\nbreak messages to be sent.')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of open files waiting for \nacknowledgements to oplock break messages.')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess('readonly').setDescription('A smoothed average of the number of events \nper second of the type frequently seen\nduring virus attacks.')
cifsNDomainControllers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 19), Integer32()).setMaxAccess('readonly').setDescription('The number of Domain Controllers found.')
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of CIFS operations done by the filer,\nsince the last time the statistics were cleared.')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of CIFS calls received, since\nthe last time the statistics were cleared.  This\nis the number of cifsTotalOps plus the number of\nmiscellaneous operations that are not logged\nwhich were received in that time period.')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of received CIFS calls rejected,\nsince the last time the statistics were cleared.')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The total number of CIFS operations to get\nthe attributes on a file or directory, since\nthe last time the statistics were reset.')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The total number of CIFS Read operations on\na file or directory, since the last time the\nstatistics were reset.')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The total number of CIFS write operations on\na file or directory, since the last time the\nstatistics were reset.')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of CIFS file locking requests\nsince the last time the statistics were reset.')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of calls, via CIFS, to open\na file or directory, since the last time\nthe statistics were reset.')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of CIFS directory operations,\nsince the last time the statistics were reset.')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess('readonly').setDescription("The number of CIFS operations, since the\nlast time the statistics were reset, that\ndon't fall into the categories for GetAttr,\nRead, Write, Lock, DirOp and Open.")
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NEGOTIATE requests,\nsince the last time the statistics were cleared.')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB SESSION_SETUP_ANDX requests,\nsince the last time the statistics were cleared.')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB LOGOFF_ANDX requests,\nsince the last time the statistics were cleared.')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TREE_CONNECT_ANDX requests,\nsince the last time the statistics were cleared.')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TREE_DISCONNECT requests,\nsince the last time the statistics were cleared.')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\nrequests, since the last time the statistics \nwere cleared.')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB ECHO requests,\nsince the last time the statistics were cleared.')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests, since the\nlast time the statistics were cleared.')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_CREATE_ANDX requests,\nsince the last time the statistics were cleared.')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_CREATE requests,\nsince the last time the statistics were cleared.')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess('readonly').setDescription('The SMB CREATE_TEMPORARY operation is not presently\nsupported, so this value should always be zero.')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB READ_ANDX requests,\nsince the last time the statistics were cleared.')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB WRITE_ANDX requests,\nsince the last time the statistics were cleared.')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB LOCKING_ANDX requests,\nsince the last time the statistics were cleared.')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB SEEK requests,\nsince the last time the statistics were cleared.')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB FLUSH requests,\nsince the last time the statistics were cleared.')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB CLOSE requests,\nsince the last time the statistics were cleared.')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB DELETE requests,\nsince the last time the statistics were cleared.')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB RENAME requests,\nsince the last time the statistics were cleared.')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess('readonly').setDescription('The SMB MOVE request is not presently supported,\nso this value should always be zero.')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess('readonly').setDescription('The SMB COPY request is not presently supported,\nso this value should always be zero.')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\nrequests, since the last time the statistics \nwere cleared.')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\nrequests, since the last time the statistics \nwere cleared.')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\nrequests, since the last time the statistics \nwere cleared.')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\nrequests, since the last time the statistics \nwere cleared.')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB DELETE_DIRECTORY requests,\nsince the last time the statistics were cleared.')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess('readonly').setDescription('The SMB COPY request is not presently supported,\nso this value should always be zero.')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\nsince the last time the statistics were cleared.')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\nsince the last time the statistics were cleared.')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB FIND_CLOSE2 requests,\nsince the last time the statistics were cleared.')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\nrequests, since the last time the statistics \nwere cleared.')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess('readonly').setDescription('The SMB TRANS2_GET_DFS_REFERRAL request is \nnot presently supported, so this value should \nalways be zero.')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess('readonly').setDescription('The SMB TRANS2_REPORT_DFS_INCONSISTENCY request is \nnot presently supported, so this value should \nalways be zero.')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess('readonly').setDescription('The SMB OPEN_PRINT_FILE request is not supported,\nso this value should always be zero.')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess('readonly').setDescription('The SMB GET_PRINT_QUEUE request is not supported,\nso this value should always be zero.')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\nsince the last time the statistics were cleared.')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\nrequests, since the last time the statistics \nwere cleared.')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\nrequests, since the last time the statistics \nwere cleared.')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \nrequests, since the last time the statistics \nwere cleared.')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests against\nchange notifications since the last time\nthe statistics were cleared.')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests against\noperations other than change notifications,\nsince the last time the statistics\nwere cleared.')
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NEGOTIATE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB SESSION_SETUP_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB LOGOFF_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TREE_CONNECT_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TREE_DISCONNECT_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB ECHO requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_CREATE_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_CREATE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CREATE_TEMPORARY requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB READ_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB LOCKING_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB SEEK requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB FLUSH requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CLOSE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB DELETE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB RENAME requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB MOVE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB COPY requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB DELETE_DIRECTORY requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CHECK_DIRECTORY requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB FIND_CLOSE2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_GET_DFS_REFERRAL\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_REPORT_DFS_INCONSISTENCY\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB OPEN_PRINT_FILE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB GET_PRINT_QUEUE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests against\nchange notifications, as a percentage of\ntotal CIFS calls received, since the last\ntime the statistics were cleared.')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB NT_CANCEL requests against\ncalls other than change notifications, as \na percentage of total CIFS calls received, \nsince the last time the statistics were \ncleared.')
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB CLOSE_PRINT_FILE requests,\nsince the last time the statistics were cleared.')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB CREATE requests,\nsince the last time the statistics were cleared.')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB CREATE_DIRECTORY requests,\nsince the last time the statistics were cleared.')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB CREATE_NEW requests,\nsince the last time the statistics were cleared.')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB LOCK_AND_READ requests,\nsince the last time the statistics were cleared.')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB LOCK_BYTE_RANGE requests,\nsince the last time the statistics were cleared.')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB OPEN requests,\nsince the last time the statistics were cleared.')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB OPEN_ANDX requests,\nsince the last time the statistics were cleared.')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB PROCESS_EXIT requests,\nsince the last time the statistics were cleared.')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION requests,\nsince the last time the statistics were cleared.')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION2 requests,\nsince the last time the statistics were cleared.')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB READ requests,\nsince the last time the statistics were cleared.')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess('readonly').setDescription('The SMB READ_MPX request is not supported,\nso this value should always be zero.')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB READ_RAW requests,\nsince the last time the statistics were cleared.')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB SEARCH requests,\nsince the last time the statistics were cleared.')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB SET_INFORMATION requests,\nsince the last time the statistics were cleared.')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB SET_INFORMATION2 requests,\nsince the last time the statistics were cleared.')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION_DISK\nrequests, since the last time the statistics \nwere cleared.')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_OPEN2 requests,\nsince the last time the statistics were cleared.')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB TREE_CONNECT requests,\nsince the last time the statistics were cleared.')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\nsince the last time the statistics were cleared.')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB WRITE requests,\nsince the last time the statistics were cleared.')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB WRITE_AND_UNLOCK requests,\nsince the last time the statistics were cleared.')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB WRITE_AND_CLOSE requests,\nsince the last time the statistics were cleared.')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess('readonly').setDescription('The SMB WRITE_MPX request is not supported,\nso this value should always be zero.')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess('readonly').setDescription('The SMB WRITE_PRINT_FILE request is not supported,\nso this value should always be zero.')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess('readonly').setDescription('The number of SMB WRITE_RAW requests,\nsince the last time the statistics were cleared.')
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CLOSE_PRINT_FILE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CREATE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CREATE_DIRECTORY requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB CREATE_NEW requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB LOCK_AND_READ requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB LOCK_BYTE_RANGE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB OPEN requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB OPEN_ANDX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB PROCESS_EXIT requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB READ requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB READ_MPX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB READ_RAW requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB SEARCH requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB SET_INFORMATION requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB SET_INFORMATION2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB QUERY_INFORMATION_DISK\nrequests, as a percentage of total CIFS calls\nreceived, since the last time the statistics \nwere cleared.')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TRANS2_OPEN2 requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB TREE_CONNECT requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_AND_UNLOCK requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_AND_CLOSE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_MPX requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_PRINT_FILE requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The number of SMB WRITE_RAW requests,\nas a percentage of total CIFS calls received,\nsince the last time the statistics were cleared.')
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess('readonly').setDescription('Undocumented')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('no', 1), ('yes', 2), ))).setMaxAccess('readonly').setDescription('This indicates whether the cifs clients are \nusing clear text passwords when authenticating \nwith the filer. If cifsDomainJoined is false and\nthis variable is also false, then the filer is\nusing NT Security from a local user list.')
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Netcache is enabled on this system.')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Netcache is licensed on this system.')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Domain Name System (DNS)\nis enabled on this system.')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether HTTP is enabled on this system.')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether NNTP is enabled on this system.')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether NNTP is licensed on this system.')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Microsoft Media Services (MMS)\nis enabled on this system.')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Microsoft Windows Media Service (MMS)\nis licensed on this system.')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Microsoft Windows Media Service Pro (MMS)\nis licensed on this system.')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Real Time Streaming Protocol (RTSP)\nis enabled on this system.')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether QuickTime is licensed on this system.')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Real Media streaming is licensed on \nthis system.')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Microsoft Windows Media Service Ultra (MMS)\nis licensed on this system.')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Real Media Pro streaming is licensed on \nthis system.')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Real Media Ultra streaming is licensed on \nthis system.')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether ICAP v0.95 is enabled on this system.')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether ICAP is licensed on this system.')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether ICAP v1.0 is enabled on this system.')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Global Request Manager (GRM) Server\nis enabled on this system.')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Global Request Manager (GRM) Server\nis licensed on this system.')
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Global Request Manager (GRM) Agent\nenabled on this system.')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the Global Request Manager (GRM) Agent\nis licensed on this system.')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether Content Director is enabled on this system.')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether HTTPS is enabled on this system.')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether HTTPS is licensed on this system.')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether CMS is enabled on this system.')
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess('readonly').setDescription('The Netcache version string.')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('Netcache Admin Port number - this\nis the first in the list of admin\nports configured for the NetCache.')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the acceleration monitor table.')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('togglea', 1), ('toggleb', 2), ))).setMaxAccess('readonly').setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the acceleration \nservers that netcache is probing.')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess('readonly').setDescription("Used in conjunction with amMonitor. This returns a string\nin format of: 'IP:port status' which reports the status\nof all the servers netcache is accelerating as of last\nstatus change.")
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4)).setDescription('A list of acceleration server and port entries. The\nnumber of entries is given by the value of amNumber.')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'amIndex')).setDescription('An acceleration monitor entry contains: the server\nIP address, server port and the status.')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription(' A unique value for each entry in the acceleration monitor\ntable.')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess('readonly').setDescription('The IP address of the acceleration server the NetCache\nis monitoring.')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess('readonly').setDescription('The corresponding port on the server that NetCache is\nmonitoring.')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('active', 1), ('up', 2), ('down', 3), ('inactive', 4), ))).setMaxAccess('readonly').setDescription('The status of the service running on the server.\nactive -  in queue but no probes done yet.\nup - the server is reachable and responding to probes.\ndown - the server is unreachable.\ninactive - monitoring is disabled.')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the local configuration file on NetCache\nwas changed without using DFM configuration management.')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess('readonly').setDescription("The current cache configuration's version.")
grmmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('togglea', 1), ('toggleb', 2), ))).setMaxAccess('readonly').setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the GRM \nagents reporting to this GRM server.')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess('readonly').setDescription("Used in conjunction with grmMonitor. This returns a string\nin format of: 'IP status.' which reports the status\nof all the GRM agents reporting to this GRM server as of last\nstatus change.")
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess('readonly').setDescription('Indicates the list of interfaces and their corresponding IP\naddresses of the partner NetCache that this appliance has taken \t\t over.')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,1,3,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('takingover', 2), ('takenover', 3), ('giveback', 4), ))).setMaxAccess('readonly').setDescription('Indicates the current takeover mode of this appliance.')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('up', 1), ('unknown', 2), ('failed', 3), ))).setMaxAccess('readonly').setDescription("Indicates the current status of the takeover partner of \nthis appliance. up(1) indicates that the takeover partner is \nreachable. unknown(2) indicates that an unknown error occured.\nfailed(3) indicates that the partner has failed, takeoverAddrs\nindicates the partner's IP address this appliance has taken\nover.")
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The total number of objects stored currently.')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess('readonly').setDescription('Total bytes sent to clients')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess('readonly').setDescription('Total bytes received from clients')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess('readonly').setDescription('Total bytes sent to servers')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess('readonly').setDescription('Total bytes received from servers')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess('readonly').setDescription('Total HTTP requests so far')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess('readonly').setDescription('HTTP requests that resulted in hits so far')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess('readonly').setDescription('HTTP requests that resulted in misses so far')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to HTTP servers (active and idle)')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to HTTP clients (active and idle)')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for HTTP requests')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess('readonly').setDescription('Object Hitrate HTTP requests')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess('readonly').setDescription('Response time in milliseconds per byte for HTTP requests.')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for all HTTP requests.')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for HTTP hit requests.')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for HTTP miss requests.')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for all HTTP requests during the last 60 seconds.')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for HTTP hit requests during the last 60 seconds.')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess('readonly').setDescription('Average response time in milliseconds for HTTP miss requests during the last 60 seconds.')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP requests')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP HIT requests')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP MISS requests')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess('readonly').setDescription('Total HTTP bytes sent to clients')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess('readonly').setDescription('Total HTTP bytes received from clients')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess('readonly').setDescription('Total HTTP bytes sent to servers')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess('readonly').setDescription('Total HTTP bytes received from servers')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP requests.\nThis object returns the most significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP requests.\nThis object returns the least significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP HIT requests.\nThis object returns the most significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP HIT requests.\nThis object returns the least significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP MISS requests.\nThis object returns the most significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess('readonly').setDescription('Total fetch time in milliseconds for HTTP MISS requests.\nThis object returns the least significant 32 bits \nof the 64 bit unsigned integer.')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess('readonly').setDescription('Request Rate for HTTP requests')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess('readonly').setDescription('HTTP object hit rate in the last 1 minute.')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess('readonly').setDescription('HTTP object hit rate in the last 5 minutes.')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess('readonly').setDescription('HTTP byte hit rate in the last 1 minute.')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess('readonly').setDescription('HTTP byte hit rate in the last 5 minutes.')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for HTTP requests in the last\n1 minute')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for HTTP requests in the last\n5 minutes')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to HTTP servers')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to HTTP clients')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37)).setDescription('Number of kilobytes sent to and recieved from the client side\nper acceleration rule')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'ncHttpAccelIndex')).setDescription('Each entry contains the number of kilobytes sent and\nreceived to/from the clients side per acceleration \nrule')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 513))).setMaxAccess('readonly').setDescription('A unique value for each entry in the http acceleration\nstats table')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes received from the client\nfor this acceleration rule')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes sent to the client for\nthis acceleration rule')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess('readonly').setDescription(' The number of times this acceleration rule has been hit')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38)).setDescription('Number of kilobytes sent to and recieved from the client side\nper acceleration rule')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'ncHttpsAccelIndex')).setDescription('Each entry contains the number of kilobytes sent and\nreceived to/from the clients side per acceleration\n\trule')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 513))).setMaxAccess('readonly').setDescription('A unique value for each entry in the http acceleration\nstats table')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes received from the client\nfor this acceleration rule')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes sent to the client for\nthis acceleration rule')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess('readonly').setDescription(' The number of times this acceleration rule has been hit')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess('readonly').setDescription('NNTP total requests so far')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess('readonly').setDescription('NNTP requests that were cacheable')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess('readonly').setDescription('NNTP requests that were non-cacheable')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to NNTP servers (active and idle)')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to NNTP clients (active and idle)')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for NNTP requests')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess('readonly').setDescription('Response time per byte for NNTP requests')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess('readonly').setDescription('Total NNTP bytes sent to clients')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess('readonly').setDescription('Total NNTP bytes received from clients')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess('readonly').setDescription('Total NNTP bytes sent to servers')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess('readonly').setDescription('Total NNTP bytes received from servers')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess('readonly').setDescription('Object Hitrate of NNTP requests')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to NNTP servers')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to NNTP clients')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess('readonly').setDescription('FTP total requests so far')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess('readonly').setDescription('FTP requests that resulted in hits so far')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess('readonly').setDescription('FTP requests that resulted in misses so far')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to FTP servers (active and idle)')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to FTP clients (active and idle)')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for FTP requests')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess('readonly').setDescription('Response time per byte for FTP requests')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess('readonly').setDescription('Total FTP bytes sent to clients')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess('readonly').setDescription('Total FTP bytes received from clients')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess('readonly').setDescription('Total FTP bytes sent to servers')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess('readonly').setDescription('Total FTP bytes received from servers')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess('readonly').setDescription('Object Hitrate of FTP requests')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to FTP servers')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to FTP clients')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to streaming servers (active and idle)')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to streaming clients (active and idle)')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all streaming requests')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess('readonly').setDescription('Response time per byte for all streaming requests')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess('readonly').setDescription('STREAMING requests that resulted in hits so far')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess('readonly').setDescription('STREAMING requests that resulted in misses so far')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess('readonly').setDescription('STREAMING total requests so far')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Live bytes sent to clients')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Live bytes received from clients')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Live bytes sent to servers')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Live bytes received from servers')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Proxy bytes sent to clients')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Proxy bytes received from clients')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Proxy bytes sent to servers')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Proxy bytes received from servers')
ncStreamingOndemandBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Ondemand bytes sent to clients')
ncStreamingOndemandBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Ondemand bytes received from clients')
ncStreamingOndemandBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Ondemand bytes sent to servers')
ncStreamingOndemandBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Ondemand bytes received from servers')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess('readonly').setDescription('Object Hitrate of Streaming requests')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Real bytes sent to clients')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Real bytes received from clients')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Real bytes sent to servers')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Real bytes received from servers')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Mms bytes sent to clients')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Mms bytes received from clients')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Mms bytes sent to servers')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Mms bytes received from servers')
ncStreamingQuickTimeBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming QuickTime bytes sent to clients')
ncStreamingQuickTimeBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming QuickTime bytes received from clients')
ncStreamingQuickTimeBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming QuickTime bytes sent to servers')
ncStreamingQuickTimeBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming QuickTime bytes received from servers')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all Live streaming requests')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all VOD streaming requests')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all Real streaming requests')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all MMS streaming requests')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all QuickTime streaming requests')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to streaming servers')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess('readonly').setDescription('Number of currently active TCP/IP connections to streaming clients')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Windows Media RTSP bytes sent to clients')
ncStreamingRtspWMBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Windows Media RTSP bytes received from clients')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Windows Media RTSP bytes sent to servers')
ncStreamingRtspWMBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess('readonly').setDescription('Total Streaming Windows Media RTSP bytes received from servers')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for all Windows Media RTSP streaming requests')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45)).setDescription('Number of kilobytes sent to and recieved from the \nclient side per acceleration rule')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'ncStreamingAccelIndex')).setDescription('Each entry contains the number of kilobytes sent and\nreceived to/from the clients side per acceleration\nrule')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 513))).setMaxAccess('readonly').setDescription('A unique value for each entry in the streaming\nacceleration  stats table')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes received from the client\nfor this acceleration rule')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of kilobytes sent to the client for\nthis acceleration rule')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess('readonly').setDescription(' The number of times this acceleration rule has \nbeen hit')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess('readonly').setDescription('Number of clients delayed because of a Bandwidth Limit')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess('readonly').setDescription('Total Bandwidth savings for HTTP, FTP, NNTP, and Streaming protocols')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess('readonly').setDescription('Total DNS requests received from clients')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess('readonly').setDescription('Hits on the DNS cache.  This includes hits\nfor DNS lookups generated by NetCache internally')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess('readonly').setDescription('Misses on the DNS cache.  This includes misses\nfor DNS lookups generated by NetCache internally')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess('readonly').setDescription('Forward DNS lookups that are successful')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess('readonly').setDescription('Forward DNS lookups that failed')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess('readonly').setDescription('Forward DNS lookups that are in progress')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess('readonly').setDescription('Reverse DNS lookups that are successful')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess('readonly').setDescription('Reverse DNS lookups that failed')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess('readonly').setDescription('Reverse DNS lookups that are in progress')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Has Full Service Resolver been enabled')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Has Full Service Resolver initalised')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess('readonly').setDescription("Full Service Resolver's Forward Lookups")
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess('readonly').setDescription("Full Service Resolver's Pending Forward Lookups")
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess('readonly').setDescription("Full Service Resolver's Reverse Lookups")
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess('readonly').setDescription("Full Service Resolver's Pending Reverse Lookups")
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription("Whether a possible ntlm problem is detected \nin the appliance's domain environment.")
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Total memory in kilobytes available for \nallocations after boot. It does not imply \nthe total system memory.')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Current free memory in kilobytes available \nfor allocations.')
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether snapmirror has been turned on\nor not.')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of active SnapMirror restores.')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess('readonly').setDescription('Number of scheduled SnapMirror restores.')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of active SnapMirror backups.')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess('readonly').setDescription('Number of SnapMirror backups which completed.\nReset on reboot.')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess('readonly').setDescription('Number of SnapMirror restores which completed.\nReset on reboot.')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess('readonly').setDescription('Number of SnapMirror backup transfers which have\naborted. Reset on reboot.')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess('readonly').setDescription('Number of SnapMirror restore temporary aborts.\nReset on reboot.')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess('readonly').setDescription('Number of SnapMirror restore permanent aborts.\nReset on reboot.')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess('readonly').setDescription('Number of Megabytes written by SnapMirror.\nReset on reboot.')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess('readonly').setDescription('Number of Megabytes read by SnapMirror.\nReset on reboot.')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess('readonly').setDescription('Number of active SnapMirror destination.')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess('readonly').setDescription('Number of active SnapMirror Source.')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful snapmirror transfers to\nthe destination. Persistent across reboot.')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful snapmirror transfers\nfrom the source. Persistent across reboot.')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed SnapMirror transfers on\nthe source. Persistent across reboot.')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed SnapMirror transfers on\nthe destination. Persistent across reboot.')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess('readonly').setDescription('Total number of deferred snapmirror transfer on\nthe destination. Persistent across reboot.')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the snapmirror is licensed on the filer.')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20)).setDescription('provide a list of snapmirror status.')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'snapmirrorIndex')).setDescription('Provide a report of current status of snapmirror.')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the snapmirror status table.')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Source of the snapmirror. <filer>:<vol> or\n<filer>:/vol/<qtree_name>')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Destination of the snapmirror.\n<filer>:<vol> or <filer>:/vol/<qtree_name>')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,4,6,9,2,8,1,7,5,3,)).subtype(namedValues=namedval.NamedValues(('idle', 1), ('in-sync', 10), ('transferring', 2), ('pending', 3), ('aborting', 4), ('migrating', 5), ('quiescing', 6), ('resyncing', 7), ('waiting', 8), ('syncing', 9), ))).setMaxAccess('readonly').setDescription('Current transfer status of the snapmirror.')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,6,5,2,)).subtype(namedValues=namedval.NamedValues(('uninitialized', 1), ('snapmirrored', 2), ('broken-off', 3), ('quiesced', 4), ('source', 5), ('unknown', 6), ))).setMaxAccess('readonly').setDescription('Current state of the snapmirror.')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess('readonly').setDescription('How far behind from the source the destination is.')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful transfer since the snapmirror\nis initialized. Persistent across reboot.')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful restarted transfer since\nthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed or aborted transfer since\nthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('Total number of deferment since the snapmirror\nis initialized. Persistent across reboot.')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('Total transfer size in MB for the snapmirror.\nReset on reboot.')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('Total number of seconds spent in successful transfer for the \nsnapmirror. Reset on reboot.')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Current throttle value for the snapmirror.')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('Timestamp of the last snapshot successfully transferred from \nthe source to the destination.')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess('readonly').setDescription('The name of the current base snapshot for the snapmirror.')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('The type of the previous successful transfer.')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('Last successful transfer size in MB for the snapmirror.')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('Duration of last successful transfer in seconds for the\nsnapmirror.')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess('readonly').setDescription('Update schedule for the snapmirror in conf file format.')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess('readonly').setDescription('Description of the update schedule for the snapmirror.')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess('readonly').setDescription('Arguments for the snapmirror in conf file format.')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of times changing from sync mode to async mode \nsince the snapmirror is initialized. Persistent across reboot.')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21)).setDescription('Provide a list of snapmirror connection definitions.')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'snapmirrorConnIndex')).setDescription('Provide a report of a defined multipath connection.')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the snapmirror multipath connection table.')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the snapmirror multipath connection.')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('multi', 1), ('failover', 2), ))).setMaxAccess('readonly').setDescription('The type of the snapmirror multipath connection.')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the source for the first path.')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The name of the destination for the first path.')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The name of the source for the second path.')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The name of the destination for the second path.')
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether ndmpd has been turned on or not.')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess('readonly').setDescription('Total number of ndmpd sessions currently opened.\nSessions may be running backups, restores or neither.')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess('readonly').setDescription('Number of ndmpd backups currently active.')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of ndmpd restores currently active.')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of tape drives currently active.')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess('readonly').setDescription('Number of ndmpd backups that succeeded.')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess('readonly').setDescription('Number of ndmpd restores that succeeded.')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess('readonly').setDescription('Number of ndmpd backups that failed.')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess('readonly').setDescription('Number of ndmpd restores that failed.')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess('readonly').setDescription('When the ndmpBackupFailures value is non-zero, this string\ndescribes the reason for the most recent backup failure.')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess('readonly').setDescription('When the ndmpRestoreFailures value is non-zero, this string\ndescribes the reason for the most recent restore failure.')
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of distinct fabrics present.')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2)).setDescription('Provide a list of fabrics.')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'fabricIndex')).setDescription('Provide a report of current configuration and\nstatus of fabrics.')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this fabric entry.')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('faulty', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('This indicates the overall status of the SAN fabric(s).')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A string describing the fabric status,\nincluding a description of the condition (if\nany) that caused the status to be anything\nother than ok(3).')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess('readonly').setDescription('This is the WWN of the fabric.')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('netapp', 1), ('other', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('This indicates who owns the management of\nthe fabric.')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3)).setDescription('Provide a list of switches and hubs\nconnected to the fabric.')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'switchFabricIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'switchIndex')).setDescription('Provide a report of current configuration and\nstatus of fabric interconnect elements.  This\ninclude switches and hubs.')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this switch entry.')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess('readonly').setDescription('This is the WWN of the switch.')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('This is the symbolic name of the switch.')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('hub', 1), ('switch', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The type of the switch.')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The domain identifier of the switch.')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The in-band management identifier of the switch.')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,5,4,6,)).subtype(namedValues=namedval.NamedValues(('other', 1), ('unknown', 2), ('ok', 3), ('nonCritical', 4), ('critical', 5), ('nonRecoverable', 6), ))).setMaxAccess('readonly').setDescription('The current status of the switch.')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A string describing the switch status,\nincluding a description of the condition (if\nany) that caused the status to be anything\nother than ok(3).')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The link speed of the switch.  The value is an integer\nwhose units are Gbits (for example, a value of 2 represents\na link speed of 2 Gbit).')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('Number of Packets successfully processed\nsince the last reboot/reset of the switch.\nThis object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('Number of Packets successfully processed\nsince the last reboot/reset of the switch.\nThis object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('Number of Packets rejected\nsince the last reboot/reset of the switch.\nThis object returns the most\nsignificant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('Number of Packets rejected\nsince the last reboot/reset of the switch.\nThis object returns the least\nsignificant 32 bits of the 64 bit unsigned integer.')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('The index of the fabric on which this switch\nresides.  The value ranges from 1 to the value\nof fabricInstances.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4)).setDescription('Provide a list of ports\nconnected to the fabric.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'portFabricIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'portSwitchIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'portIndex')).setDescription('Provide a report of current configuration and\nstatus of ports in the fabric.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this port entry.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess('readonly').setDescription('This is the WWN of the port.')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('The index of the switch on which this port\nresides.  The value ranges from 1 to the number of\nof switches.')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess('readonly').setDescription('This is the WWN of the switch to which\nthe port is attached.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The port number on the switch.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,1,2,4,3,6,5,)).subtype(namedValues=namedval.NamedValues(('unidentified', 1), ('n-port', 2), ('nl-port', 3), ('f-port', 4), ('fl-port', 5), ('e-port', 6), ('b-port', 7), ))).setMaxAccess('readonly').setDescription('The type of the port.')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,1,2,4,)).subtype(namedValues=namedval.NamedValues(('online', 1), ('offline', 2), ('testing', 3), ('faulty', 4), ('unknown', 5), ))).setMaxAccess('readonly').setDescription('The current state of the port.')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('The index of the fabric on which this port\nresides.  The value ranges from 1 to the value\nof fabricInstances.')
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the dafs protocol is licensed on the filer.\nData OnTap Specific')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Server wide maximum number of concurrent requests\nData OnTap Specific')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Server maximum number of concurrent requests per session\nData OnTap Specific')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Server maximum size of an inline request')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Server maximum size of an inline response')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Server wide maximum number of requests that can queue\nwaiting for resources Data OnTap Specific')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Server uses checksums')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Server default number of request demons per Nic.\nData OnTap Specific')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Allow the server to acception connections with\nauthentication type NONE.')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Current status of the DAFS server. If true, the DAFS\nserver is running.')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('Default client User ID if anonymously connected.')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Default client Group ID if anonymously connected.')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of disconnected sessions for which the\nDAFS server will retain response cache data.')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of seconds server will keep a session\nopen without hearing from the client.')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2)).setDescription('A table containing DAFS NIC specific\ninformation.')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'dafsNicIndex')).setDescription('Information about a particular current DAFS\nnic.  An object of this type is transient,\nin that it ceases to exist when (or soon after)\nthe nic is detached.')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A unique value for each interface.  Its value\nranges between 1 and the value of DafsNicNumber.  The\nvalue for each interface must remain constant at\nleast from one re-initialization of the entity's\nnetwork management system to the next re-\ninitialization.")
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing the logical name \nunder which the nic has been attached.')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing the physical name\nof the nic that has been attached.')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('up', 1), ('down', 2), ('testing', 3), ))).setMaxAccess('readonly').setDescription('Current state of DAFS nic')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Transport specific address structure giving the\nDAFS listen address for this NIC.')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Number of request demons assigned to this Nic\nto handle Nic related events. Data OnTap Specific')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes, include DMA, received on\nthis interface')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes read directly from the\npeer memory through this interface')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes, include DMA, sent on\nthis interface')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes written directly to the\npeer memory through this interface')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Server wide current number of requests that are\nqueued waiting for resources Data OnTap Specific')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Server wide current number of active requests\nData OnTap Specific')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess('readonly').setDescription('Total number of DAFS calls since last reboot')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess('readonly').setDescription('Total number of Client Auth calls since last reboot')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess('readonly').setDescription('Total number of Client Connect calls since last reboot')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess('readonly').setDescription('Total number of Client Connect Auth calls since last reboot')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess('readonly').setDescription('Total number of Connect Bind calls since last reboot')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess('readonly').setDescription('Total number of Disconnect calls since last reboot')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess('readonly').setDescription('Total number of Register Credential calls since last reboot')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess('readonly').setDescription('Total number of Release Credential calls since last reboot')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess('readonly').setDescription('Total number of Secinfo calls since last reboot')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess('readonly').setDescription('Total number of Server Auth calls since last reboot')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess('readonly').setDescription('Total number of Check Response calls since last reboot')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess('readonly').setDescription('Total number of Fetch Response calls since last reboot')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess('readonly').setDescription('Total number of Discard Responses calls since last reboot')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess('readonly').setDescription('Total number of Access calls since last reboot')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess('readonly').setDescription('Total number of Cache Hint calls since last reboot')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess('readonly').setDescription('Total number of Close calls since last reboot')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess('readonly').setDescription('Total number of Commit calls since last reboot')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess('readonly').setDescription('Total number of Create calls since last reboot')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess('readonly').setDescription('Total number of Delegate Purge calls since last reboot')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess('readonly').setDescription('Total number of Delegate Return calls since last reboot')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess('readonly').setDescription('Total number of Get Fsattr  calls since last reboot')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess('readonly').setDescription('Total number of Get Root Handle calls since last reboot')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess('readonly').setDescription('Total number of Getattr Inline calls since last reboot')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess('readonly').setDescription('Total number of Getattr Direct calls since last reboot')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess('readonly').setDescription('Total number of Link calls since last reboot')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess('readonly').setDescription('Total number of Lock calls since last reboot')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess('readonly').setDescription('Total number of LockT calls since last reboot')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess('readonly').setDescription('Total number of LockU calls since last reboot')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess('readonly').setDescription('Total number of LookUp calls since last reboot')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess('readonly').setDescription('Total number of LookUpp calls since last reboot')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess('readonly').setDescription('Total number of Null calls since last reboot')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess('readonly').setDescription('Total number of Nverify calls since last reboot')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess('readonly').setDescription('Total number of Open calls since last reboot')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess('readonly').setDescription('Total number of Open Downgrade calls since last reboot')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess('readonly').setDescription('Total number of Openattr calls since last reboot')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess('readonly').setDescription('Total number of Read Inline calls since last reboot')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess('readonly').setDescription('Total number of Read Direct calls since last reboot')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess('readonly').setDescription('Total number of Readdir Inline calls since last reboot')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess('readonly').setDescription('Total number of Readdir Direct calls since last reboot')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess('readonly').setDescription('Total number of Readlink Inline calls since last reboot')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess('readonly').setDescription('Total number of Readlink Direct calls since last reboot')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess('readonly').setDescription('Total number of Remove calls since last reboot')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess('readonly').setDescription('Total number of Rename calls since last reboot')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess('readonly').setDescription('Total number of Setattr Inline calls since last reboot')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess('readonly').setDescription('Total number of Setattr Direct calls since last reboot')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess('readonly').setDescription('Total number of Verify calls since last reboot')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess('readonly').setDescription('Total number of Batch Submit calls since last reboot')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess('readonly').setDescription('Total number of Write Inline calls since last reboot')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess('readonly').setDescription('Total number of Write Direct calls since last reboot')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess('readonly').setDescription('Total number of BC Getattr calls since last reboot')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess('readonly').setDescription('Total number of BC Null calls since last reboot')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess('readonly').setDescription('Total number of BC Recall calls since last reboot')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess('readonly').setDescription('Total number of BC Batch Completion calls since\nlast reboot')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess('readonly').setDescription('Total number of Append Inline calls since\nlast reboot')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess('readonly').setDescription('Total number of Append Direct calls since\nlast reboot')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess('readonly').setDescription('Total number of Get Fencing List calls since\nlast reboot')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess('readonly').setDescription('Total number of Set Fencing List calls since\nlast reboot')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess('readonly').setDescription('Total number of Hurry Up calls since\nlast reboot')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes, including DMA, received since the\nlast reboot')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes received directly into memory\nsince last reboot')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes, including DMA, sent since the\nlast reboot')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess('readonly').setDescription('Total number of bytes sent directly into remote memory since\nthe last reboot')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5)).setDescription('A table containing current DAFS client session\ninformation.')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'dafsSessionIndex')).setDescription('Information about a particular DAFS\nsession.  An object of this type is transient,\nin that it ceases to exist when (or soon after)\nthe client disconnects.')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A unique value for each session.')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Session Identifier assigned by the server.')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('bigEndian', 1), ('littleEndian', 2), ))).setMaxAccess('readonly').setDescription('Byte order used on this session.')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Session may use a back control channel.')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Session may use a RDMA read channel.')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Session uses checksums.')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of credientials that can be registered\non this session.')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Maximum size of a DAFS request.')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('Maximum size of a DAFS response.')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of concurrent requests.')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('Size of DAFS headers plus padding to the start of\ndata.  Used to better align inline data.')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess('readonly').setDescription('Client ID string supplied by the client.  Intended to\nuniquely identify that client.')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess('readonly').setDescription('Supplied by the client to uniquely identify an\ninstnce of a client.')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('Current number of credentials registered on this\nsession')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('Current number of active requests on this session')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6)).setDescription('A table containing DAFS Export filesystems.')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'dafsExportIndex')).setDescription('Information about a particular current DAFS\nexport.  An object of this type is transient,\nin that it ceases to exist when (or soon after)\nthe export is deleted.')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A unique value for each export.  Its value\nranges between 1 and the number of exports.  The\nvalue for each export must remain constant at\nleast from one re-initialization of the entity's\nnetwork management system to the next re-\ninitialization.")
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing information about the\nexport.  This is the logical export name.')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing information about the\nexport.  This is the local filesystem path to\n the export.')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This export is available for access.')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('readwrite', 1), ('readmostly', 2), ('readonly', 3), ))).setMaxAccess('readonly').setDescription('Global export mode. This represents the maximum\naccess rights.')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing information about the\nexport.  This is the list of hosts that may\n access the export. If empty, all hosts may\n access the export.')
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A string by which the node is identified in the cluster.')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of VIs created.')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The number of times Connect Request call is made.')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The number of times Connect wait call is made.')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('Number of times VI got disconnected with out any error.')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('Number of times VI connect request got timed out.')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('Number of time VI got connected with out any error.')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess('readonly').setDescription('The number of VIs for which connect request is pending.')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess('readonly').setDescription('The number of VIs for which connect wait request is pending.')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess('readonly').setDescription('The number of VIs for which the current state is CONNECTED.')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess('readonly').setDescription('The number of VIs for which the current state is ERROR')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of VIs which encountered error state.')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The total number of incoming Messages received.')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The total number of incoming RDMA requests received.')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The total number of incoming bytes received, including those \nreceived in error. This count includes bytes received on \ncurrently established connections. This corresponds to the sum\nof bytes received through received messages, incoming RDMA writes \nand RDMA reads issued')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The total number of incoming bytes received through RDMA read, \nincluding those received in error. This count includes bytes \nreceived on currently established connections.')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes received through incoming RDMA writes, \nincluding those received in error. This count includes bytes \nreceived on currently established connections.')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The total number of Messages sent.')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('The total number of RDMA requests sent.')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes sent, including those \nsent in error. This count includes bytes sent on \ncurrently established connections.')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes sent through an incoming \nRDMA read request, including those sent in error. \nThis count includes bytes sent on currently established \nconnections.')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes sent through a RDMA write\noperation, including those sent in error. This count \nincludes bytes sent on currently established connections.')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23)).setDescription('A table containing via connection specific information.')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'viaConnVINumber')).setDescription('A conceptual row of the viaConnTable containing information\nabout a particular current via connection. Each row of this\ntable is transient, and it ceases to exist when the \nconnection makes transition to the CLOSED state.')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('idle', 1), ('pendingConnect', 2), ('connected', 3), ('error', 4), ))).setMaxAccess('readonly').setDescription('The state of this via connection\nLegal States:\n      Idle            1 \n      Pending Connect 2\n      Connected       3\n      Error           4')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number which uniquely defines a     connection.')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess('readonly').setDescription('IP address of the remote system of the connection.')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess('readonly').setDescription('Local IPadress of the connection.')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Remote TCP portnumber of the connection.')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Local TCP Portnumber of the connection.')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('An identifier used by the local process to identify the\nVI connection.')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('An identifier used by the remote process to identify the\nVI connection.')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The local limit on the maximum packet size that can be \ntransfered through the connection.')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The remote limit on the maximum packet size that can be \ntransfered through the connection.')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The value is 1 if remote DMA write is enabled\nin the local system otherwise, it is 0.')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The value is 1 if remote DMA read is enabled\nin the local system otherwise, it is 0.')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The value is 1 if remote DMA write is enabled\nin the remote system otherwise, it is 0.')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The value is 1 if remote DMA read is enabled\nin the remote system otherwise, it is 0.')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('Total number of messages sent through the connection.')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('Total number of rdma read messages sent through the \nconnection.')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('Total number of rdma write messages sent through the \nconnection.')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('Total number of messages received through the connection.')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('Total number of rdma read messages received through the \nconnection.')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('Total number of rdma write messages received through the \nconnection.')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('The total number of descriptors completed in error\nby NIC.')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('The total number of Lost Connection errors. ')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of errors due to an empty receive Queue. ')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('The total number of remote DMA write protection errors. ')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('The total number of remote DMA read protection errors. ')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('The total number of protection errors. ')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess('readwrite').setDescription('Setting this threshold will cause a trap to be enabled\nsuch that if the total error exceeds error threshold set \na viaNodeErrorsTrap trap will be generated.')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1)).setDescription('A table containing via NIC-specific information.')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'viaNicIndex')).setDescription('A conceptual row of the viaNicTable containing information\nabout a particular present VINic.')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('The index of the NIC in the NIC table.')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('The symbolic name of the NIC device.')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('The version of the VINIC described by this MIB.')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('The version of the VI provider.')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess('readonly').setDescription('The Network address of this NIC.')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('1 if synchronisation model is thread safe else 0.')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of bytes that the VI provider allows\nfor a connection descriminator.')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of bytes that can be registered.')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of memory regions that can be registered.')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('Largest contiguous block of memory that can be registered.')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The limit on the total number of VI instances this entity can\nsupport.')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Maximum Descriptors per VI Work Queue that this VI provider\ncan support.')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of segments per descriptor that this VI provider\ncan support.')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of completion queues this VI provider can support.')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('Maximum number of Completion queue entries per completion queue\nthat this VI provider can support.')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('The maximum transfer size supported by the VI Nic. The maximum \ntransfer size is the amount of data that can be described by a \nsingle VI descriptor.')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess('readonly').setDescription('The native MTU size of the underlying network. For frame-based \nnetworks, this could reflect its native frame size. For cell-based \nnetworks, it could reflect the MTU of the appropriate abstraction \nlayer that it supports.')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of protection tags that are supported by this\nVI provider.')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess('readonly').setDescription('Number of bytes registered by the VI user for this\nNIC.')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess('readonly').setDescription('Number of memory regions that is registered by VI user\nfor this NIC.')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess('readonly').setDescription('The current number of VI instances for this NIC.')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess('readonly').setDescription('Current number of completion queues this VI provider\nhas.')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess('readonly').setDescription('Current Number of protection tags this VI provider has.')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess('readonly').setDescription('Port number on which VI server is listening for VI connection\nrequest.')
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of active dump.')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('Number of dump attempted.')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('Number of dump succeeded.')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('Number of dump failed.')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5)).setDescription('Provides a report of dumps on each\ndump subtree.')
dmpSubtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'dmpIndex')).setDescription('Shows statistics of dumps on an unique\ndump subtree.')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the subtree dump table.')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The full path to the dump subtree. In the\nformat of /vol/<volname>/...')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('No. of dump attempted for the subtree.')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('No. of dump succeeded for the subtree.')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('No. of dump failed for the subtree.')
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of active restore.')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('Number of restore attempted.')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('Number of restore succeeded.')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('Number of restore failed.')
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether vfiler  is licensed on the\nfiler.')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess('readonly').setDescription('Number of vfilers in the physical Filer.')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3)).setDescription('Provide a report of per-vfiler general information ')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'vfIndex')).setDescription('Provide a report of per-vfiler information')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the referenced vfiler.')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription(' A textual string that contains the name of the referenced vfiler.')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 36))).setMaxAccess('readonly').setDescription('The UUID of the referenced vfiler.')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The total number of IP addresses for the referenced vfiler.')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The total number of storage paths for the referenced vfiler.')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription(' A textual string that contains the name of the ipspace that the referenced vfiler belongs to.')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Total number of protocols allowed for the referenced vfiler.')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Total number of protocols disallowed for the referenced vfiler.')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('stopped', 1), ('running', 2), ))).setMaxAccess('readonly').setDescription('Status of the vfiler: Running or stopped.')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4)).setDescription('Provide a report of per-vfiler IP addresses information ')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'vfFiIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'vfIpIndex')).setDescription('Provide a report of per-vfiler IP addresses information')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the referenced vfiler.')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies which IP address in the referenced vfiler.')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess('readonly').setDescription('A IP address for the referenced vfiler.')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5)).setDescription('Provide a report of per-vfiler storage path information ')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'vfFsIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'vfSpIndex')).setDescription('Provide a report of per-vfiler storage path information')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the referenced vfiler.')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies which storage path in the referenced vfiler.')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 1024))).setMaxAccess('readonly').setDescription('The storage path name  for the referenced vfiler.')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6)).setDescription('Provide a report of per-vfiler protocol information ')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'vfFpIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'vfProIndex')).setDescription('Provide a report of per-vfiler protocol information')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the referenced vfiler.')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a protocol in the referenced vfiler.')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 1024))).setMaxAccess('readonly').setDescription('A textual string that contains the protocol name  for the referenced vfiler.')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the referenced vfiler protocol  is allowed or disallowed.')
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether FCP access protocols are licensed on the\nfiler.')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether iSCSI access protocols are licensed on the\nfiler.')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read via FCP  \nsince the last boot.  This object returns the \nleast significant 32 bits of the 64 bit unsigned \ninteger.')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read via FCP  \nsince the last boot.  This object returns the \nmost significant 32 bits of the 64 bit unsigned \ninteger.')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written via FCP  \nsince the last boot.  This object returns the \nleast significant 32 bits of the 64 bit unsigned \ninteger.')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written via FCP  \nsince the last boot.  This object returns the \nmost significant 32 bits of the 64 bit unsigned \ninteger.')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read via iSCSI  \nsince the last boot.  This object returns the \nleast significant 32 bits of the 64 bit unsigned \ninteger.')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read via iSCSI  \nsince the last boot.  This object returns the \nmost significant 32 bits of the 64 bit unsigned \ninteger.')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written via iSCSI  \nsince the last boot.  This object returns the \nleast significant 32 bits of the 64 bit unsigned \ninteger.')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written via iSCSI  \nsince the last boot.  This object returns the \nmost significant 32 bits of the 64 bit unsigned \ninteger.')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess('readonly').setDescription('The total number of iSCSI ops handled since the\nlast boot.  This object returns the most significant\n32 bits of the 64 bit unsigned integer.')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess('readonly').setDescription('The total number of iSCSI ops handled since the\nlast boot.  This object returns the least significant\n32 bits of the 64 bit unsigned integer.')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess('readonly').setDescription('The total number of FCP ops handled since the\nlast boot.  This object returns the most significant\n32 bits of the 64 bit unsigned integer.')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess('readonly').setDescription('The total number of FCP ops handled since the\nlast boot.  This object returns the least significant\n32 bits of the 64 bit unsigned integer.')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of LUNs in the Filer.')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2)).setDescription('Provide a report of per-LUN general information ')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'lunIndex')).setDescription('Provide a report of per-LUN information')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the referenced LUN.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the LUN.  This is also the path to the LUN\non the filer.')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The comment, if any, for this LUN.')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Size of the LUN in bytes.  This object returns the \nleast significant 32 bits of the 64 bit unsigned integer.')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Size of the LUN in bytes.  This object returns the \nmost significant 32 bits of the 64 bit unsigned integer.')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('This LUN has been mapped to at least one initiator group.')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The 12 character SCSI serial number of the LUN.')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A string that indicates which qtree this LUN belongs to.')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI ops for \nthis LUN since the stats were last reset.  This object \nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI ops for \nthis LUN since the stats were last reset.  This object \nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from this LUN \nsince the stats were last reset.  This object returns \nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes read from this LUN \nsince the stats were last reset.  This object returns \nthe least significant 32 bits of the 64 bit unsigned \ninteger.')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to this LUN \nsince the stats were last reset.  This object returns \nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The total number of bytes written to this LUN \nsince the stats were last reset.  This object returns \nthe least significant 32 bits of the 64 bit unsigned \ninteger.')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The total number of errors seen on this LUN \nsince the stats were last reset.  This object \nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The total number of errors seen on this LUN \nsince the stats were last reset.  This object \nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the LUN is online.')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether a snapshot of this LUN can be taken.')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('read', 2), ('write', 3), ('all', 4), ))).setMaxAccess('readonly').setDescription('The sharing status for the LUN.')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the LUN has space reservation enabled.')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess('readonly').setDescription("Number of seconds since this LUN's stats were\nlast reset.")
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI read ops for \nthis LUN since the stats were last reset.  This object \nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI read ops for \nthis LUN since the stats were last reset.  This object \nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI write ops for \nthis LUN since the stats were last reset.  This object \nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI write ops for \nthis LUN since the stats were last reset.  This object \nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI ops that are not \nread or write for this LUN since the stats were last \nreset.  This object returns the least significant 32 \nbits of the 64 bit unsigned integer.')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess('readonly').setDescription('The total number of Target side SCSI ops that are not \nread or write for this LUN since the stats were last \nreset. This object returns the most significant 32 \nbits of the 64 bit unsigned integer.')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3)).setDescription('Provide a table listing the initiator group to \nLogical Unit Number mapping for each LUN.')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'lunMapLUNIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'lunMapInitiatorGroupIndex')).setDescription('Provide a per LUN and Initiator group mapping of \nSCSI logical unit numbers.')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the LUN in the table.')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies an initiator group in \nthe table.')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The name of the LUN.')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the initiator group that this LUN is \nmapped to.')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('SCSI Logical Unit Number that this LUN is mapped to \nfor this initiator group.')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1)).setDescription('Provide a report of per-initiator group general \ninformation ')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'initiatorGroupIndex')).setDescription('Provide a report of per-initiator group information')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a specific initiator group.')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the initiator group')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('fcp', 1), ('iSCSI', 2), ))).setMaxAccess('readonly').setDescription('Type of this initiator group, either iSCSI or FCP')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,5,1,256,3,6,4,7,9,8,)).subtype(namedValues=namedval.NamedValues(('default', 1), ('solaris', 2), ('invalid', 256), ('windows', 3), ('hpux', 4), ('aix', 5), ('linux', 6), ('default-partner', 7), ('netware', 8), ('vmware', 9), ))).setMaxAccess('readonly').setDescription('Operating system the clients in this initiator\ngroup run.  This governs  the finer details of \nSCSI protocol interaction with these initiators')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 99))).setMaxAccess('readonly').setDescription('Percentage of filer scsi command blocks reserved for\nthis initiator group')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription("True if this inititiator group is allowed to\nexceed it's throttle settings if more resources\nare needed and otherwise available.  If\ninitiatorGroupThrottleReserve is 0, this value\nis meaningless")
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('The takeover mode for the initiator group.  This is\nonly applicable to FCP initiator groups on clustered\nfilers')
initiatorGroupUseALUA = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('If true this initiator group supports Asymetric Logical\nUnit Access.')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2)).setDescription('Table of individual Initator names in each Initiator \ngroup')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'initiatorGroupMemberIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'initiatorGroupMemberNameIndex')).setDescription('Provide a report of per-initiator group information')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a specific initiator group.')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number the identifies the initiator in the group.')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A textual name for this initiator.')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3)).setDescription('Table of initiators that are connected to the filer.')
initiatorListMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'initiatorListMemberEntryIndex')).setDescription('Provide a report of per-connected-initiator information.')
initiatorListMemberEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies the initiator connected to\nthe target adapter.')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the target adapter in the filer.')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A textual name for this initiator node.')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription("The FibreChannel device's portname. This is FCP only.")
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('fcp', 1), ('iSCSI', 2), ))).setMaxAccess('readonly').setDescription('Type of this init group, either iSCSI or FCP')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The iSCSI isid (initiator session id) for this initiator.\nThis is iSCSI only.')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The iSCSI portal group ID for this initiator. \nThis is iSCSI only.')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1)).setDescription('Provide a report of fcp target adapter general \ninformation ')
fcpTargetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'fcpTargetTableIndex')).setDescription('Provide a report of per fcp target device information')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a specific fcp target device.')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the fcp target device')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The FC WWNN of the fcp target device')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The FC WWPN of the fcp target device')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('speed in gigabits per second. 0 is unknown.')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,5,11,10,1,7,3,6,9,8,)).subtype(namedValues=namedval.NamedValues(('startup', 1), ('offlined-by-user-system', 10), ('unknown', 11), ('uninitialized', 2), ('initializing-fw', 3), ('link-not-connected', 4), ('waiting-for-link-up', 5), ('online', 6), ('link-disconnected', 7), ('resetting', 8), ('offline', 9), ))).setMaxAccess('readonly').setDescription('Status of the fcp target adapter')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether this target adapter is in standby mode.')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('fabric', 2), ('point-to-point', 3), ('loop', 4), ))).setMaxAccess('readonly').setDescription('fibre channel topology for this adapter. ')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,5,4,2,1,)).subtype(namedValues=namedval.NamedValues(('physical', 1), ('local', 2), ('standby', 3), ('partner', 4), ('unknown', 5), ))).setMaxAccess('readonly').setDescription('Responsibility/Type for this adapter.')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,5,2,256,7,6,4,1,3,)).subtype(namedValues=namedval.NamedValues(('mixed', 1), ('standby', 2), ('unknown', 256), ('partner', 3), ('partner-proxy', 4), ('partner-standby', 5), ('local-primary', 6), ('dual-fabric', 7), ('ssi', 8), ))).setMaxAccess('readonly').setDescription('Failover setting for the FCP target cluster.')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1)).setDescription('Provide a report of portset general \ninformation ')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'psetIndex')).setDescription('Provide a report of portset information')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a specific port set.')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the port set')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('fcp', 1), ('iSCSI', 2), ))).setMaxAccess('readonly').setDescription('Type of this port set, either iSCSI or FCP')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2)).setDescription('Table of individual Port names in each Port\nset')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'psetMemberIndex'), (0, 'NETWORK-APPLIANCE-MIB', 'psetMemberNameIndex')).setDescription('Provide a report of portset port information')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies a specific port set.')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number the identifies the port in the set.')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A textual name for this port.')
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether NFS caching is enabled on this system.')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether NFS caching is licensed on this system.')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from clients')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to clients')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from servers')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to servers')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests received')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache hits')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache misses')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests that were cacheable misses')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests that were uncacheable misses')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in object eject due to expiration')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in object verification')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess('readonly').setDescription('Total RPC records received')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('Bandwidth savings for NFS requests')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from clients.  This object\nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from clients.  This object\nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to clients.  This object returns\nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to clients.  This object returns\nthe least significant 32 bits of the 64 bit unsigned \ninteger.')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from servers.  This object\nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes received from servers.  This object\nreturns the least significant 32 bits of the 64 bit\nunsigned integer.')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to servers.  This object\nreturns the most significant 32 bits of the 64 bit \nunsigned integer.')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess('readonly').setDescription('Total NFS bytes sent to servers.  This object\nreturns the least significant 32 bits of the 64 bit \nunsigned integer.')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests received.  This object returns\nthe most significant 32 bits of the 64 bit unsigned \ninteger.')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests received.  This object returns\nthe least significant 32 bits of the 64 bit unsigned \ninteger.')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache hits.  This\nobject returns the most significant 32 bits of the \n64 bit unsigned integer.')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache hits.  This\nobject returns the least significant 32 bits of the\n64 bit unsigned integer.')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache misses.  This\nobject returns the most significant 32 bits of the \n64 bit unsigned integer.')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess('readonly').setDescription('Total NFS requests resulting in cache misses.  This\nobject returns the least significant 32 bits of the\n64 bit unsigned integer.')
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether snapvault has been turned on\nor not.')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of active snapvault destionations.')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess('readonly').setDescription('Number of active snapvault sources.')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful snapvault transfers\nfrom the snapvault primary. Persistent across reboot.')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful snapvault transfers to\nthe snapvault secondary. Persistent across reboot.')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed snapvault transfers on\nthe snapvault primary. Persistent across reboot.')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed snapvault transfers on\nthe snapvault secondary. Persistent across reboot.')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess('readonly').setDescription('Total number of deferred snapvault transfers on\nthe snapvault secondary. Persistent across reboot.')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the snapvault_client(primary) is licensed on the filer.')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the snapvault_server(secondary) is licensed on the filer.')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11)).setDescription('provide a list of snapvault status.')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'svIndex')).setDescription('Provide a report of current status of snapvault.')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the snapvault status table.')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Source of the snapvault relationship.\n<filer>:/vol/<qtree_name>')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Destionation of the snapvault relationship.\n<filer>:/vol/<qtree_name>')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,12,1,7,6,3,)).subtype(namedValues=namedval.NamedValues(('idle', 1), ('paused', 12), ('transferring', 2), ('pending', 3), ('aborting', 4), ('quiescing', 6), ('resyncing', 7), ))).setMaxAccess('readonly').setDescription('Current transfer status of the snapvault relationship.')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,6,2,5,7,)).subtype(namedValues=namedval.NamedValues(('uninitialized', 1), ('snapvaulted', 2), ('broken-off', 3), ('quiesced', 4), ('source', 5), ('unknown', 6), ('restoring', 7), ))).setMaxAccess('readonly').setDescription('Current state of the snapvault relationship.')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess('readonly').setDescription('How far behind from the source the destination is.')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful transfer since the snapvault\nrelationship was established. Persistent across reboot.')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('Total number of successful restarted transfer since\nthe snapvault relationship was established. Persistent \nacross reboot.')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('Total number of failed or aborted transfer since\nthe snapvault relationship was established. Persistent \nacross reboot.')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('Total number of deferment since the snapvault\nrelationship was established. Persistent across reboot.')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('Total transfer size in MB for the snapvault.\nReset on reboot.')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('Total number of seconds spent in successful transfer for the \nsnapvault relationship. Reset on reboot.')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Current throttle value for the snapvault relationship.')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('Time when the source snapshot was created. The time in \nseconds since January 1, 1970. The source snapshot here \nis the last snapshot successfully transferred from the \nsource to the destination.')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess('readonly').setDescription('The name of the current base snapshot for the \nsnapvault relationship.')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess('readonly').setDescription('The type of the previous successful transfer.')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess('readonly').setDescription('Last successful transfer size in MB for the snapvault \nrelationship.')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('Duration of last successful transfer in seconds for the\nsnapvault relationship.')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12)).setDescription('Provide a list of remote snapvault hosts.')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'svHostIndex')).setDescription('Provide snapvault statistics for a remote host\nwhich has one or more current established \nrelationships with the local snapvault system.')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the snapvault remote host table.')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the remote snapvault host.')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('primary', 1), ('secondary', 2), ))).setMaxAccess('readonly').setDescription('The type of the remote snapvault host.')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Total number of successful snapvault transfers\nfor all current established relationships between\nthe local snapvault system and the given remote host.')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Total number of failed snapvault transfers\nfor all current established relationships between\nthe local snapvault system and the given remote host.')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Total number of deferred snapvault transfers for\nall current established relationships between\nthe local snapvault system and the given remote host.\n0 for snapvault client host.')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13)).setDescription('Provide a list of snapvault schedules.')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'svSchedIndex')).setDescription('Provide a report of schedules of snapvault.')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Index into the snapvault schedule table.')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the volume on the snapvault for the \nsnapvault schedule. This does not have a /vol/ prefix.')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The name of the snapshot for the snapvault schedule.')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(('idle', 1), ('queued', 2), ('active', 3), ('aborting', 4), ))).setMaxAccess('readonly').setDescription('Current status of the snapvault schedule.')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('undef', 1), ('xfer', 2), ('create', 3), ))).setMaxAccess('readonly').setDescription('The type of the snapvault schedule.')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The update schedule of the snapvault.')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Whether the snapvault disaster recovery primary is\nlicensed on the filer.')
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether ftpd has been turned on or not.')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of currently open TCP/IP connections to ftp daemon (active and idle)')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess('readonly').setDescription('Number of maximum simultaneous TCP/IP connections to ftp daemon')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess('readonly').setDescription('Number of total TCP/IP connections to ftp daemon')
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of storage enclosures in the storage subsystem.')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2)).setDescription('Display disk enclosure environmental information for fiber\nchannel shelves and NearStore SCSI shelves.  Shelves that do not\nsupport SCSI Enclosure Services, such as DEC Storage Shelf,\nEurologic XL8 are not supported.')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'enclIndex')).setDescription('Display disk enclosure (shelf) environmental\ninformation for the referenced disk enclosure.')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A number that identifies this enclosure among the\npossible monitored enclosures.  This number normally\nuniquely identifies one shelf within one boot,\nbut may it change between boots.  The number may\nalso change within a boot if shelves are removed\nand added.')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,4,1,3,2,5,)).subtype(namedValues=namedval.NamedValues(('initializing', 1), ('transitioning', 2), ('active', 3), ('inactive', 4), ('reconfiguring', 5), ('nonexistent', 6), ))).setMaxAccess('readonly').setDescription('The state of the communication between the filer or storage\nengine and the enclosure monitoring device in the enclosure.')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The adapter number or switch name and the port number\n(together, called the channel), and shelf ID of this\nenclosure.  Examples are 8a.1 and switch:5.1.')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The logical identifier of this enclosure.  This a form of the\nWorld-Wide Name (WWN).')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The product ID of the shelf hardware module that provides\nthe enclosure monitoring function.  Example is LRC.')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The name of the vendor of this enclosure.  Example is Xyratex.')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The model name of this enclosure.  Example is DiskShelf14.')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('The revision number of this enclosure.')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of this enclosure.')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of disk bays in this enclosure.')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess('readonly').setDescription('The list of disks present by bay number in this enclosure.')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of power supplies in this enclosure.')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess('readonly').setDescription('The list of power supplies present in the enclosure.  \nNumbering is from left to right in their intended location\nin the shelf, while facing the supplies.')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess('readonly').setDescription('The list of serial numbers of power supplies present\nin the enclosure.  Not all shelves are able to report the\npower supply serial number.  Communication errors may\nmake the serial number unavailable.  Numbering is from left\nto right in their intended location in the shelf, while\nfacing the supplies.')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess('readonly').setDescription('The list of failed power supplies in this enclosure, numbered as\nin enclPowerSuppliesPresent.')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of fans or fan modules monitored by this\nenclosure.  R100/R150 shelf power supply fans are not included\nin this number.')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess('readonly').setDescription('The list of fans or fan modules present and for which status\nis known in this enclosure.  Fans are numbered left-to-right as\nfacing the fans.  R100/R150 shelf power supply fans are\nnot included in this list.')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess('readonly').setDescription('The list of failed fans or fan modules in this enclosure.  Fans\nare numbered as described in enclFansPresent.')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of temperature sensors monitored\nby this enclosure.')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperature sensors present and for which\nstatus is known in this enclosure.  Temperature sensors are\nnumbered top-to-bottom and left-to-right, beginning with\nthe front of the enclosure, then the rear, as the modules\ncontaining them are faced.')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperature sensors reporting\novertemperature failure in this enclosure.  Sensors are\nnumbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperature sensors reporting overtemperature\nwarning in this enclosure.  Sensors are numbered as in\nTempSensorsPresent.')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperature sensors reporting undertemperature\nfailure in this enclosure.  Sensors are numbered as in\nTempSensorsPresent.')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperature sensors reporting undertemperature\nwarning in this enclosure.  Sensors are numbered as in\nTempSensorsPresent.')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess('readonly').setDescription('The list of temperatures reported by all temperature sensors in\nthe enclosure, including the ambient temperature.  Sensors are\nnumbered as in TempSensorsPresent.')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess('readonly').setDescription('The list of overtemperature failure thresholds for all\ntemperature sensors in the enclosure.  Sensors are\nnumbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess('readonly').setDescription('The list of overtemperature warning thresholds for all\ntemperature sensors in the enclosure.  Sensors are\nnumbered as in TempSensorsPresent.')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess('readonly').setDescription('The list of undertemperature failure thresholds for all\ntemperature sensors in the enclosure.  Sensors are numbered as\nin TempSensorsPresent.')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess('readonly').setDescription('The list of undertemperature warning thresholds for all\ntemperature sensors in the enclosure.   Sensors are numbered as\nin TempSensorsPresent.')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess('readonly').setDescription('The number of enclosure services electronics modules that it is\npossible for this enclosure to detect and/or monitor.')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess('readonly').setDescription('The list those enclosure services electronics modules present in\nthis enclosure.  Numbering is from left-to-right or top-to-bottom\nin their intended location in the shelf, while facing the\nelectronics modules.  It is normal for the R200 FC-AT module to be\nreported as the second module.')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess('readonly').setDescription('The list of serial numbers of the enclosure services electronics\nmodules present in this enclosure.  The order follows that of\nenclElectronicsPresent.')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess('readonly').setDescription('The list of failed electronics elements.  Valid only if\nenclElectronicsPresent shows that some are present.')
enclVoltSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 34), Integer32()).setMaxAccess('readonly').setDescription('The number of voltage sensors monitored by\nthis enclosure.')
enclVoltSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 35), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltage sensors present and for which\nstatus is known in this enclosure.  Voltage sensors are\nnumbered top-to-bottom and left-to-right, beginning with\nthe front of the enclosure, then the rear, as the modules\ncontaining them are faced.')
enclVoltSensorsOverVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 36), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltage sensors reporting\novervoltage failure in this enclosure.  Sensors are\nnumbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 37), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltage sensors reporting overvoltage\nwarning in this enclosure.  Sensors are numbered as in\nVoltSensorsPresent.')
enclVoltSensorsUnderVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 38), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltage sensors reporting undervoltage\nfailure in this enclosure.  Sensors are numbered as in\nVoltSensorsPresent.')
enclVoltSensorsUnderVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 39), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltage sensors reporting undervoltage\nwarning in this enclosure.  Sensors are numbered as in\nVoltSensorsPresent.')
enclVoltSensorsCurrentVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 40), DisplayString()).setMaxAccess('readonly').setDescription('The list of voltages reported by all voltage sensors in\nthe enclosure, Sensors are\nnumbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 41), DisplayString()).setMaxAccess('readonly').setDescription('The list of overvoltage failure thresholds for all\nvoltage sensors in the enclosure.  Sensors are\nnumbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 42), DisplayString()).setMaxAccess('readonly').setDescription('The list of overvoltage warning thresholds for all\nvoltage sensors in the enclosure.  Sensors are\nnumbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 43), DisplayString()).setMaxAccess('readonly').setDescription('The list of undervoltage failure thresholds for all\nvoltage sensors in the enclosure.  Sensors are numbered as\nin VoltSensorsPresent.')
enclVoltSensorsUnderVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 44), DisplayString()).setMaxAccess('readonly').setDescription('The list of undervoltage warning thresholds for all\nvoltage sensors in the enclosure.   Sensors are numbered as\nin VoltSensorsPresent.')
enclCurSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 45), Integer32()).setMaxAccess('readonly').setDescription('The number of current sensors monitored by\nthis enclosure.')
enclCurSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 46), DisplayString()).setMaxAccess('readonly').setDescription('The list of current sensors present and for which\nstatus is known in this enclosure.  Current sensors are\nnumbered top-to-bottom and left-to-right, beginning with\nthe front of the enclosure, then the rear, as the modules\ncontaining them are faced.')
enclCurSensorsOverCurFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 47), DisplayString()).setMaxAccess('readonly').setDescription('The list of current sensors reporting\novercurrent failure in this enclosure.  Sensors are\nnumbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 48), DisplayString()).setMaxAccess('readonly').setDescription('The list of current sensors reporting overcurrent\nwarning in this enclosure.  Sensors are numbered as in\nCurSensorsPresent.')
enclCurSensorsCurrentCur = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 49), DisplayString()).setMaxAccess('readonly').setDescription('The list of currents reported by all current sensors in\nthe enclosure, Sensors are\nnumbered as in CurSensorsPresent.')
enclCurSensorsOverCurFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 50), DisplayString()).setMaxAccess('readonly').setDescription('The list of overcurrent failure thresholds for all\ncurrent sensors in the enclosure.  Sensors are\nnumbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 51), DisplayString()).setMaxAccess('readonly').setDescription('The list of overcurrent warning thresholds for all\ncurrent sensors in the enclosure.  Sensors are\nnumbered as in CurSensorsPresent.')
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of network interfaces (regardless of\ntheir current state) present on this system.')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2)).setDescription('A list of interface entries.  The number of\nentries is given by the value of netifNumber.')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'netifIndex')).setDescription('An interface entry containing objects at the\nsubnetwork layer and below for a particular\ninterface.')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription("A unique value for each interface.  Its value\nranges between 1 and the value of ifNumber.  The\nvalue for each interface must remain constant at\nleast from one re-initialization of the entity's\nnetwork management system to the next re-\ninitialization.")
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readonly').setDescription('A textual string containing information about the\ninterface.  This string should include the name of\nthe manufacturer, the product name and the version\nof the hardware interface.')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The total number of octets received on the\ninterface, including framing characters.\n This object returns the most significant 32 bits of\n the 64 bit unsigned integer.')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The total number of octets received on the\ninterface, including framing characters.\n This object returns the least significant 32 bits of\n the 64 bit unsigned integer.')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of subnetwork-unicast packets\ndelivered to a higher-layer protocol.\n This object returns the most significant 32 bits of\n the 64 bit unsigned integer.')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of subnetwork-unicast packets\ndelivered to a higher-layer protocol.\n This object returns the least significant 32 bits of\n the 64 bit unsigned integer.')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess('readonly').setDescription('The number of non-unicast (i.e., subnetwork-\nbroadcast or subnetwork-multicast) packets\ndelivered to a higher-layer protocol.\n This object returns the most significant 32 bits of \n the 64 bit unsigned integer.')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess('readonly').setDescription('The number of non-unicast (i.e., subnetwork-\nbroadcast or subnetwork-multicast) packets\ndelivered to a higher-layer protocol.\n This object returns the least significant 32 bits of\n the 64 bit unsigned integer.')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess('readonly').setDescription('The number of inbound packets which were chosen\nto be discarded even though no errors had been\ndetected to prevent their being deliverable to a\nhigher-layer protocol.  One possible reason for\ndiscarding such a packet could be to free up\nbuffer space. This object returns the most \n significant 32 bits of the 64 bit unsigned integer.')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('The number of inbound packets which were chosen\nto be discarded even though no errors had been\ndetected to prevent their being deliverable to a\nhigher-layer protocol.  One possible reason for\ndiscarding such a packet could be to free up\nbuffer space. This object returns the least \n significant 32 bits of the 64 bit unsigned integer.')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess('readonly').setDescription('The number of inbound packets that contained\nerrors preventing them from being deliverable to a\nhigher-layer protocol. This object returns the \n most significant 32 bits of the 64 bit unsigned integer.')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess('readonly').setDescription('The number of inbound packets that contained\nerrors preventing them from being deliverable to a\nhigher-layer protocol. This object returns the \n least significant 32 bits of the 64 bit unsigned integer.')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess('readonly').setDescription('The number of packets received via the interface\nwhich were discarded because of an unknown or\nunsupported protocol. This object returns the \n most significant 32 bits of the 64 bit unsigned integer.')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess('readonly').setDescription('The number of packets received via the interface\nwhich were discarded because of an unknown or\nunsupported protocol. This object returns the \n least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess('readonly').setDescription('The total number of octets transmitted out of the\ninterface, including framing characters.\nThis object returns the most significant 32 bits of the\n 64 bit unsigned integer.')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess('readonly').setDescription('The total number of octets transmitted out of the\ninterface, including framing characters.\nThis object returns the least significant 32 bits of\n the 64 bit unsigned integer.')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess('readonly').setDescription('The total number of packets that higher-level\nprotocols requested be transmitted to a\nsubnetwork-unicast address, including those that\nwere discarded or not sent. This object returns \n the most significant 32 bits of the 64 bit unsigned \n integer.')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess('readonly').setDescription('The total number of packets that higher-level\nprotocols requested be transmitted to a\nsubnetwork-unicast address, including those that\nwere discarded or not sent. This object returns \n the least significant 32 bits of the 64 bit unsigned \n integer.')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess('readonly').setDescription('The total number of packets that higher-level\nprotocols requested be transmitted to a non-\nunicast (i.e., a subnetwork-broadcast or\nsubnetwork-multicast) address, including those\nthat were discarded or not sent. This object returns \n the most significant 32 bits of the 64 bit unsigned \n integer.')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess('readonly').setDescription('The total number of packets that higher-level\nprotocols requested be transmitted to a non-\nunicast (i.e., a subnetwork-broadcast or\nsubnetwork-multicast) address, including those\nthat were discarded or not sent. This object returns \n the least significant 32 bits of the 64 bit unsigned \n integer.')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess('readonly').setDescription('The number of outbound packets which were chosen\nto be discarded even though no errors had been\ndetected to prevent their being transmitted.  One\npossible reason for discarding such a packet could\nbe to free up buffer space. This object returns \n the most significant 32 bits of the 64 bit unsigned \n integer.')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess('readonly').setDescription('The number of outbound packets which were chosen\nto be discarded even though no errors had been\ndetected to prevent their being transmitted.  One\npossible reason for discarding such a packet could\nbe to free up buffer space. This object returns \n the least significant 32 bits of the 64 bit unsigned \n integer.')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess('readonly').setDescription('The number of outbound packets that could not be\ntransmitted because of errors. This object returns \n the most significant 32 bits of the 64 bit unsigned \n integer.')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess('readonly').setDescription('The number of outbound packets that could not be\ntransmitted because of errors. This object returns \n the least significant 32 bits of the 64 bit unsigned \n integer.')
sis = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 23))
sisIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 23, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('false', 1), ('true', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether Advanced SIS is licensed on the\nfiler.')
sisTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 23, 2)).setDescription('Provide a list of the SIS volumes on the\nsystem.')
sisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1)).setIndexNames((0, 'NETWORK-APPLIANCE-MIB', 'sisIndex')).setDescription('Provide details about a particular SIS volume.')
sisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('A number that identifies this entry for the\nSIS volume.')
sisPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The path to the SIS volume.')
sisState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether SIS is enabled on the\nvolume or not.')
sisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('idle', 1), ('active', 2), ('undoing', 3), ('pending', 4), ))).setMaxAccess('readonly').setDescription('Current status of the SIS volume.')
sisProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The progress of the current SIS operation.')
sisType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('regular', 1), ('snapvault', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether it is a regular or\nsnapvaulted SIS volume.')
sisSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The schedule for the SIS opertions.')
sisLastOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('The starting time of the last completed SIS\nopertion.')
sisLastOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('The ending time of the last completed SIS\noperation.')
sisHighLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The total amount of data in KBytes that the\nlast completed SIS operation had processed.\nThis object returns the most significant 32\nbits of the 64 bit unsigned integer.')
sisLowLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The total amount of data in KBytes that the\nlast completed SIS operation had processed.\nThis object returns the least significant 32\nbits of the 64 bit unsigned integer.')
sisLastOpError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 12), DisplayString()).setMaxAccess('readonly').setDescription('The error that the last SIS operation\nencountered if it failed.')
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))

# Augmentions

# Notifications

maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 485)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 246)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 45)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 394)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 7)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 135)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 195)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
lunCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 626)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 96)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 63)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 297)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 142)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
waflDirNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 186)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
upsLinePowerRetored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 146)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 406)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 204)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 314)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 91)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 255)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 396)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 391)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 62)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 454)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 75)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 43)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 86)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 26)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 115)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'miscGlobalStatusMessage'), )
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 153)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 245)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
cifsStatsExhaustMemCtrlBlk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 497)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 383)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 397)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 414)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 371)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
lunCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 627)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 155)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 145)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 257)).setObjects()
chassisSensorFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 595)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 11)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 15)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPSUsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 505)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 324)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
snapAutoDelete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 656)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 254)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 344)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 106)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
lunSnapRestoreStatus = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 606)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 413)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 31)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 151)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 511)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 55)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 256)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
flexCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 636)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 56)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 206)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 76)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 187)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 424)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 177)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 366)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 294)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 386)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 157)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 162)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 392)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 12)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 16)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 103)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 238)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 2)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 113)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'miscGlobalStatusMessage'), )
appError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 154)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 395)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPSUwrongInput = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 515)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 21)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 95)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 275)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 134)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 144)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 192)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 266)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 33)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 226)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 127)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 158)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 72)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 18)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 435)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 304)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 85)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 334)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 17)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 296)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 82)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 6)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 416)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskMultipathOneSwitch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 562)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 22)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
hbaOfflineInformation = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 587)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 482)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 283)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfSESElectronicsInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 467)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 136)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 376)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
driveDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 574)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 354)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 166)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 116)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'miscGlobalStatusMessage'), )
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 36)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 375)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 13)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPSRemovedxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 501)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 224)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 167)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 403)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 381)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 444)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
flexCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 637)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 222)).setObjects()
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 237)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 284)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfSESElectronicsFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 464)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfIFModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 475)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 156)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 152)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 14)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 35)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeAutogrow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 666)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
dcPasswdChangeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 436)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfIFModuleInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 477)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 393)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskMultipathNoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 563)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 646)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 298)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
lunCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 616)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
shelfIFModuleFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 473)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 176)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 372)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 46)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
diskMultipathWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 565)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 412)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 143)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 126)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 111)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'miscGlobalStatusMessage'), )
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 415)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
powerSupplyFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 521)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 274)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 41)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 216)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 364)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumesStillFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 87)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 276)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 272)).setObjects(('NETWORK-APPLIANCE-MIB', 'productSerialNum'), ('NETWORK-APPLIANCE-MIB', 'productTrapData'), )

# Exports

# Objects
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', netapp=netapp, netapp1=netapp1, product=product, productType=productType, productVersion=productVersion, productId=productId, productVendor=productVendor, productModel=productModel, productFirmwareVersion=productFirmwareVersion, productGuiUrl=productGuiUrl, productApiUrl=productApiUrl, productSerialNum=productSerialNum, productPartnerSerialNum=productPartnerSerialNum, productCPUArch=productCPUArch, productTrapData=productTrapData, productMachineType=productMachineType, sysStat=sysStat, cpu=cpu, cpuUpTime=cpuUpTime, cpuBusyTime=cpuBusyTime, cpuBusyTimePerCent=cpuBusyTimePerCent, cpuIdleTime=cpuIdleTime, cpuIdleTimePerCent=cpuIdleTimePerCent, cpuCount=cpuCount, cpuSwitchInvocations=cpuSwitchInvocations, cpuContextSwitches=cpuContextSwitches, cpuInterrupts=cpuInterrupts, cpuNonCPInterrupts=cpuNonCPInterrupts, cpuCPInterruptPercent=cpuCPInterruptPercent, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, cpuTotalDomainSwitches=cpuTotalDomainSwitches, misc=misc, miscNfsOps=miscNfsOps, miscNetRcvdKB=miscNetRcvdKB, miscNetSentKB=miscNetSentKB, miscGlobalStatus=miscGlobalStatus, miscHighNfsOps=miscHighNfsOps, miscLowNfsOps=miscLowNfsOps, miscHighCifsOps=miscHighCifsOps, miscLowCifsOps=miscLowCifsOps, miscHighHttpOps=miscHighHttpOps, miscLowHttpOps=miscLowHttpOps, miscHighNetRcvdBytes=miscHighNetRcvdBytes, miscLowNetRcvdBytes=miscLowNetRcvdBytes, miscHighNetSentBytes=miscHighNetSentBytes, miscLowNetSentBytes=miscLowNetSentBytes, miscHighDiskReadBytes=miscHighDiskReadBytes, miscLowDiskReadBytes=miscLowDiskReadBytes, miscHighDiskWriteBytes=miscHighDiskWriteBytes, miscLowDiskWriteBytes=miscLowDiskWriteBytes, miscHighTapeReadBytes=miscHighTapeReadBytes, miscLowTapeReadBytes=miscLowTapeReadBytes, miscHighTapeWriteBytes=miscHighTapeWriteBytes, miscLowTapeWriteBytes=miscLowTapeWriteBytes, miscCacheAge=miscCacheAge, miscCorrectedMachineChecks=miscCorrectedMachineChecks, miscGlobalStatusMessage=miscGlobalStatusMessage, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, cf=cf, cfSettings=cfSettings, cfState=cfState, cfCannotTakeoverCause=cfCannotTakeoverCause, cfPartnerStatus=cfPartnerStatus, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, cfPartnerName=cfPartnerName, cfPartnerSysid=cfPartnerSysid, cfInterconnectStatus=cfInterconnectStatus, environment=environment, envOverTemperature=envOverTemperature, envFailedFanCount=envFailedFanCount, envFailedFanMessage=envFailedFanMessage, envFailedPowerSupplyCount=envFailedPowerSupplyCount, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, nvram=nvram, nvramBatteryStatus=nvramBatteryStatus, cp=cp, cpTime=cpTime, cpFromTimerOps=cpFromTimerOps, cpFromSnapshotOps=cpFromSnapshotOps, cpFromLowWaterOps=cpFromLowWaterOps, cpFromHighWaterOps=cpFromHighWaterOps, cpFromLogFullOps=cpFromLogFullOps, cpFromCpOps=cpFromCpOps, cpTotalOps=cpTotalOps, cpFromFlushOps=cpFromFlushOps, cpFromSyncOps=cpFromSyncOps, cpFromLowVbufOps=cpFromLowVbufOps, cpFromCpDeferredOps=cpFromCpDeferredOps, cpFromLowDatavecsOps=cpFromLowDatavecsOps, autosupport=autosupport, autosupportStatus=autosupportStatus, autosupportStatusMessage=autosupportStatusMessage, autosupportSuccessfulSends=autosupportSuccessfulSends, autosupportFailedSends=autosupportFailedSends, nfs=nfs, curNfs=curNfs, rpcServ=rpcServ, rpcCalls=rpcCalls, rpcBadCalls=rpcBadCalls, rpcNullRecvs=rpcNullRecvs, rpcBadLens=rpcBadLens, rpcServXDRCalls=rpcServXDRCalls, rcpTcpCalls=rcpTcpCalls, rcpTcpBadCalls=rcpTcpBadCalls, rcpTcpNullRecvs=rcpTcpNullRecvs, rcpTcpBadLens=rcpTcpBadLens, rcpTcpServXDRCalls=rcpTcpServXDRCalls, rpcUdpCalls=rpcUdpCalls, rpcUdpBadCalls=rpcUdpBadCalls, rpcUdpNullRecvs=rpcUdpNullRecvs, rpcUdpBadLens=rpcUdpBadLens, rpcUdpServXDRCalls=rpcUdpServXDRCalls, nfsServ=nfsServ, nfsCalls=nfsCalls, nfsServBadCalls=nfsServBadCalls, nfsV2=nfsV2, v2Calls=v2Calls, v2cNulls=v2cNulls, v2cGetattrs=v2cGetattrs, v2cSetattrs=v2cSetattrs, v2cRoots=v2cRoots, v2cLookups=v2cLookups, v2cReadlinks=v2cReadlinks, v2cReads=v2cReads, v2cWrcaches=v2cWrcaches, v2cWrites=v2cWrites)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', v2cCreates=v2cCreates, v2cRemoves=v2cRemoves, v2cRenames=v2cRenames, v2cLinks=v2cLinks, v2cSymlinks=v2cSymlinks, v2cMkdirs=v2cMkdirs, v2cRmdirs=v2cRmdirs, v2cReaddirs=v2cReaddirs, v2cStatfss=v2cStatfss, v2Percent=v2Percent, v2pNulls=v2pNulls, v2pGetattrs=v2pGetattrs, v2pSetattrs=v2pSetattrs, v2pRoots=v2pRoots, v2pLookups=v2pLookups, v2pReadlinks=v2pReadlinks, v2pReads=v2pReads, v2pWrcaches=v2pWrcaches, v2pWrites=v2pWrites, v2pCreates=v2pCreates, v2pRemoves=v2pRemoves, v2pRenames=v2pRenames, v2pLinks=v2pLinks, v2pSymlinks=v2pSymlinks, v2pMkdirs=v2pMkdirs, v2pRmdirs=v2pRmdirs, v2pReaddirs=v2pReaddirs, v2pStatfss=v2pStatfss, v2CachedCalls=v2CachedCalls, v2ccNulls=v2ccNulls, v2ccGetattrs=v2ccGetattrs, v2ccSetattrs=v2ccSetattrs, v2ccRoots=v2ccRoots, v2ccLookups=v2ccLookups, v2ccReadlinks=v2ccReadlinks, v2ccReads=v2ccReads, v2ccWrcaches=v2ccWrcaches, v2ccWrites=v2ccWrites, v2ccCreates=v2ccCreates, v2ccRemoves=v2ccRemoves, v2ccRenames=v2ccRenames, v2ccLinks=v2ccLinks, v2ccSymlinks=v2ccSymlinks, v2ccMkdirs=v2ccMkdirs, v2ccRmdirs=v2ccRmdirs, v2ccReaddirs=v2ccReaddirs, v2ccStatfss=v2ccStatfss, v2CachedPerCent=v2CachedPerCent, v2cpNulls=v2cpNulls, v2cpGetattrs=v2cpGetattrs, v2cpSetattrs=v2cpSetattrs, v2cpRoots=v2cpRoots, v2cpLookups=v2cpLookups, v2cpReadlinks=v2cpReadlinks, v2cpReads=v2cpReads, v2cpWrcaches=v2cpWrcaches, v2cpWrites=v2cpWrites, v2cpCreates=v2cpCreates, v2cpRemoves=v2cpRemoves, v2cpRenames=v2cpRenames, v2cpLinks=v2cpLinks, v2cpSymlinks=v2cpSymlinks, v2cpMkdirs=v2cpMkdirs, v2cpRmdirs=v2cpRmdirs, v2cpReaddirs=v2cpReaddirs, v2cpStatfss=v2cpStatfss, nfsV3=nfsV3, v3Calls=v3Calls, v3cNulls=v3cNulls, v3cGetattrs=v3cGetattrs, v3cSetattrs=v3cSetattrs, v3cLookups=v3cLookups, v3cAccesss=v3cAccesss, v3cReadlinks=v3cReadlinks, v3cReads=v3cReads, v3cWrites=v3cWrites, v3cCreates=v3cCreates, v3cMkdirs=v3cMkdirs, v3cSymlinks=v3cSymlinks, v3cMknods=v3cMknods, v3cRemoves=v3cRemoves, v3cRmdirs=v3cRmdirs, v3cRenames=v3cRenames, v3cLinks=v3cLinks, v3cReaddirs=v3cReaddirs, v3cReaddirPluss=v3cReaddirPluss, v3cFsstats=v3cFsstats, v3cFsinfos=v3cFsinfos, v3cPathconfs=v3cPathconfs, v3cCommits=v3cCommits, v3Percent=v3Percent, v3pNulls=v3pNulls, v3pGetattrs=v3pGetattrs, v3pSetattrs=v3pSetattrs, v3pLookups=v3pLookups, v3pAccesss=v3pAccesss, v3pReadlinks=v3pReadlinks, v3pReads=v3pReads, v3pWrites=v3pWrites, v3pCreates=v3pCreates, v3pMkdirs=v3pMkdirs, v3pSymlinks=v3pSymlinks, v3pMknods=v3pMknods, v3pRemoves=v3pRemoves, v3pRmdirs=v3pRmdirs, v3pRenames=v3pRenames, v3pLinks=v3pLinks, v3pReaddirs=v3pReaddirs, v3pReaddirPluss=v3pReaddirPluss, v3pFsstats=v3pFsstats, v3pFsinfos=v3pFsinfos, v3pPathconfs=v3pPathconfs, v3pCommits=v3pCommits, v3CachedCalls=v3CachedCalls, v3ccNulls=v3ccNulls, v3ccGetattrs=v3ccGetattrs, v3ccSetattrs=v3ccSetattrs, v3ccLookups=v3ccLookups, v3ccAccesss=v3ccAccesss, v3ccReadlinks=v3ccReadlinks, v3ccReads=v3ccReads, v3ccWrites=v3ccWrites, v3ccCreates=v3ccCreates, v3ccMkdirs=v3ccMkdirs, v3ccSymlinks=v3ccSymlinks, v3ccMknods=v3ccMknods, v3ccRemoves=v3ccRemoves)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', v3ccRmdirs=v3ccRmdirs, v3ccRenames=v3ccRenames, v3ccLinks=v3ccLinks, v3ccReaddirs=v3ccReaddirs, v3ccReaddirPluss=v3ccReaddirPluss, v3ccFsstats=v3ccFsstats, v3ccFsinfos=v3ccFsinfos, v3ccPathconfs=v3ccPathconfs, v3ccCommits=v3ccCommits, v3CachedPerCent=v3CachedPerCent, v3cpNulls=v3cpNulls, v3cpGetattrs=v3cpGetattrs, v3cpSetattrs=v3cpSetattrs, v3cpLookups=v3cpLookups, v3cpAccesss=v3cpAccesss, v3cpReadlinks=v3cpReadlinks, v3cpReads=v3cpReads, v3cpWrites=v3cpWrites, v3cpCreates=v3cpCreates, v3cpMkdirs=v3cpMkdirs, v3cpSymlinks=v3cpSymlinks, v3cpMknods=v3cpMknods, v3cpRemoves=v3cpRemoves, v3cpRmdirs=v3cpRmdirs, v3cpRenames=v3cpRenames, v3cpLinks=v3cpLinks, v3cpReaddirs=v3cpReaddirs, v3cpReaddirPluss=v3cpReaddirPluss, v3cpFsstats=v3cpFsstats, v3cpFsinfos=v3cpFsinfos, v3cpPathconfs=v3cpPathconfs, v3cpCommits=v3cpCommits, replyCache=replyCache, rcInProgressHits=rcInProgressHits, rcDelayHits=rcDelayHits, rcMisses=rcMisses, rcNonIdemDoneHits=rcNonIdemDoneHits, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, rcTcpInProgressHits=rcTcpInProgressHits, rcTcpDelayHits=rcTcpDelayHits, rcTcpMisses=rcTcpMisses, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, rcUdpInProgressHits=rcUdpInProgressHits, rcUdpDelayHits=rcUdpDelayHits, rcUdpMisses=rcUdpMisses, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, nfsrwStats=nfsrwStats, v2ReadStats=v2ReadStats, v2Read512Calls=v2Read512Calls, v2Read1KCalls=v2Read1KCalls, v2Read2KCalls=v2Read2KCalls, v2Read4KCalls=v2Read4KCalls, v2Read8KCalls=v2Read8KCalls, v2Read16KCalls=v2Read16KCalls, v2Read32KCalls=v2Read32KCalls, v2Read64KCalls=v2Read64KCalls, v2Read128KCalls=v2Read128KCalls, v2WriteStats=v2WriteStats, v2Write512Calls=v2Write512Calls, v2Write1KCalls=v2Write1KCalls, v2Write2KCalls=v2Write2KCalls, v2Write4KCalls=v2Write4KCalls, v2Write8KCalls=v2Write8KCalls, v2Write16KCalls=v2Write16KCalls, v2Write32KCalls=v2Write32KCalls, v2Write64KCalls=v2Write64KCalls, v2Write128KCalls=v2Write128KCalls, v3ReadStats=v3ReadStats, v3Read512Calls=v3Read512Calls, v3Read1KCalls=v3Read1KCalls, v3Read2KCalls=v3Read2KCalls, v3Read4KCalls=v3Read4KCalls, v3Read8KCalls=v3Read8KCalls, v3Read16KCalls=v3Read16KCalls, v3Read32KCalls=v3Read32KCalls, v3Read64KCalls=v3Read64KCalls, v3Read128KCalls=v3Read128KCalls, v3WriteStats=v3WriteStats, v3Write512Calls=v3Write512Calls, v3Write1KCalls=v3Write1KCalls, v3Write2KCalls=v3Write2KCalls, v3Write4KCalls=v3Write4KCalls, v3Write8KCalls=v3Write8KCalls, v3Write16KCalls=v3Write16KCalls, v3Write32KCalls=v3Write32KCalls, v3Write64KCalls=v3Write64KCalls, v3Write128KCalls=v3Write128KCalls, nfsPerClient=nfsPerClient, pclTable=pclTable, pclEntry=pclEntry, pclIpAddr=pclIpAddr, pclRpcCalls=pclRpcCalls, pclRpcBadCalls=pclRpcBadCalls, pclRpcNullRecvs=pclRpcNullRecvs, pclRpcBadLens=pclRpcBadLens, pclRpcServXDRCalls=pclRpcServXDRCalls, pclNfsCalls=pclNfsCalls, pclNfsServBadCalls=pclNfsServBadCalls, pclNfsV2Nulls=pclNfsV2Nulls, pclNfsV2Getattrs=pclNfsV2Getattrs, pclNfsV2Setattrs=pclNfsV2Setattrs, pclNfsV2Roots=pclNfsV2Roots, pclNfsV2Lookups=pclNfsV2Lookups, pclNfsV2Readlinks=pclNfsV2Readlinks, pclNfsV2Reads=pclNfsV2Reads, pclNfsV2Wrcaches=pclNfsV2Wrcaches, pclNfsV2Writes=pclNfsV2Writes, pclNfsV2Creates=pclNfsV2Creates, pclNfsV2Removes=pclNfsV2Removes, pclNfsV2Renames=pclNfsV2Renames, pclNfsV2Links=pclNfsV2Links, pclNfsV2Symlinks=pclNfsV2Symlinks, pclNfsV2Mkdirs=pclNfsV2Mkdirs, pclNfsV2Rmdirs=pclNfsV2Rmdirs, pclNfsV2Readdirs=pclNfsV2Readdirs, pclNfsV2Statfss=pclNfsV2Statfss, pclNfsV3Nulls=pclNfsV3Nulls, pclNfsV3Getattrs=pclNfsV3Getattrs, pclNfsV3Setattrs=pclNfsV3Setattrs, pclNfsV3Lookups=pclNfsV3Lookups, pclNfsV3Accesss=pclNfsV3Accesss, pclNfsV3Readlinks=pclNfsV3Readlinks, pclNfsV3Reads=pclNfsV3Reads, pclNfsV3Writes=pclNfsV3Writes, pclNfsV3Creates=pclNfsV3Creates)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', pclNfsV3Mkdirs=pclNfsV3Mkdirs, pclNfsV3Symlinks=pclNfsV3Symlinks, pclNfsV3Mknods=pclNfsV3Mknods, pclNfsV3Removes=pclNfsV3Removes, pclNfsV3Rmdirs=pclNfsV3Rmdirs, pclNfsV3Renames=pclNfsV3Renames, pclNfsV3Links=pclNfsV3Links, pclNfsV3Readdirs=pclNfsV3Readdirs, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, pclNfsV3Fsstats=pclNfsV3Fsstats, pclNfsV3Fsinfos=pclNfsV3Fsinfos, pclNfsV3Pathconfs=pclNfsV3Pathconfs, pclNfsV3Commits=pclNfsV3Commits, pclPerCent=pclPerCent, pclNfsV2NullPerCent=pclNfsV2NullPerCent, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, pclNfsV2RootPerCent=pclNfsV2RootPerCent, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, pclNfsV2WritePerCent=pclNfsV2WritePerCent, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent, pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, pclNfsV3NullPerCent=pclNfsV3NullPerCent, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, pclNfsV3WritePerCent=pclNfsV3WritePerCent, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, pclNfsV2Read512Calls=pclNfsV2Read512Calls, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, pclNfsV2Write512Calls=pclNfsV2Write512Calls, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, pclNfsV3Read512Calls=pclNfsV3Read512Calls, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, pclNfsV3Write512Calls=pclNfsV3Write512Calls, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, pclNumber=pclNumber, totNfs=totNfs, trpcServ=trpcServ, trpcCalls=trpcCalls, trpcBadCalls=trpcBadCalls, trpcNullRecvs=trpcNullRecvs, trpcBadLens=trpcBadLens, trpcServXDRCalls=trpcServXDRCalls, tnfsServ=tnfsServ, tnfsCalls=tnfsCalls, tnfsServBadCalls=tnfsServBadCalls, tnfsV2=tnfsV2, tv2Calls=tv2Calls, tv2cNulls=tv2cNulls, tv2cGetattrs=tv2cGetattrs, tv2cSetattrs=tv2cSetattrs, tv2cRoots=tv2cRoots, tv2cLookups=tv2cLookups, tv2cReadlinks=tv2cReadlinks, tv2cReads=tv2cReads, tv2cWrcaches=tv2cWrcaches, tv2cWrites=tv2cWrites, tv2cCreates=tv2cCreates, tv2cRemoves=tv2cRemoves, tv2cRenames=tv2cRenames, tv2cLinks=tv2cLinks, tv2cSymlinks=tv2cSymlinks, tv2cMkdirs=tv2cMkdirs, tv2cRmdirs=tv2cRmdirs, tv2cReaddirs=tv2cReaddirs, tv2cStatfss=tv2cStatfss, tv2Percent=tv2Percent, tv2pNulls=tv2pNulls, tv2pGetattrs=tv2pGetattrs, tv2pSetattrs=tv2pSetattrs, tv2pRoots=tv2pRoots, tv2pLookups=tv2pLookups)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', tv2pReadlinks=tv2pReadlinks, tv2pReads=tv2pReads, tv2pWrcaches=tv2pWrcaches, tv2pWrites=tv2pWrites, tv2pCreates=tv2pCreates, tv2pRemoves=tv2pRemoves, tv2pRenames=tv2pRenames, tv2pLinks=tv2pLinks, tv2pSymlinks=tv2pSymlinks, tv2pMkdirs=tv2pMkdirs, tv2pRmdirs=tv2pRmdirs, tv2pReaddirs=tv2pReaddirs, tv2pStatfss=tv2pStatfss, tv2CachedCalls=tv2CachedCalls, tv2ccNulls=tv2ccNulls, tv2ccGetattrs=tv2ccGetattrs, tv2ccSetattrs=tv2ccSetattrs, tv2ccRoots=tv2ccRoots, tv2ccLookups=tv2ccLookups, tv2ccReadlinks=tv2ccReadlinks, tv2ccReads=tv2ccReads, tv2ccWrcaches=tv2ccWrcaches, tv2ccWrites=tv2ccWrites, tv2ccCreates=tv2ccCreates, tv2ccRemoves=tv2ccRemoves, tv2ccRenames=tv2ccRenames, tv2ccLinks=tv2ccLinks, tv2ccSymlinks=tv2ccSymlinks, tv2ccMkdirs=tv2ccMkdirs, tv2ccRmdirs=tv2ccRmdirs, tv2ccReaddirs=tv2ccReaddirs, tv2ccStatfss=tv2ccStatfss, tv2CachedPerCent=tv2CachedPerCent, tv2cpNulls=tv2cpNulls, tv2cpGetattrs=tv2cpGetattrs, tv2cpSetattrs=tv2cpSetattrs, tv2cpRoots=tv2cpRoots, tv2cpLookups=tv2cpLookups, tv2cpReadlinks=tv2cpReadlinks, tv2cpReads=tv2cpReads, tv2cpWrcaches=tv2cpWrcaches, tv2cpWrites=tv2cpWrites, tv2cpCreates=tv2cpCreates, tv2cpRemoves=tv2cpRemoves, tv2cpRenames=tv2cpRenames, tv2cpLinks=tv2cpLinks, tv2cpSymlinks=tv2cpSymlinks, tv2cpMkdirs=tv2cpMkdirs, tv2cpRmdirs=tv2cpRmdirs, tv2cpReaddirs=tv2cpReaddirs, tv2cpStatfss=tv2cpStatfss, tnfsV3=tnfsV3, tv3Calls=tv3Calls, tv3cNulls=tv3cNulls, tv3cGetattrs=tv3cGetattrs, tv3cSetattrs=tv3cSetattrs, tv3cLookups=tv3cLookups, tv3cAccesss=tv3cAccesss, tv3cReadlinks=tv3cReadlinks, tv3cReads=tv3cReads, tv3cWrites=tv3cWrites, tv3cCreates=tv3cCreates, tv3cMkdirs=tv3cMkdirs, tv3cSymlinks=tv3cSymlinks, tv3cMknods=tv3cMknods, tv3cRemoves=tv3cRemoves, tv3cRmdirs=tv3cRmdirs, tv3cRenames=tv3cRenames, tv3cLinks=tv3cLinks, tv3cReaddirs=tv3cReaddirs, tv3cReaddirPluss=tv3cReaddirPluss, tv3cFsstats=tv3cFsstats, tv3cFsinfos=tv3cFsinfos, tv3cPathconfs=tv3cPathconfs, tv3cCommits=tv3cCommits, tv3Percent=tv3Percent, tv3pNulls=tv3pNulls, tv3pGetattrs=tv3pGetattrs, tv3pSetattrs=tv3pSetattrs, tv3pLookups=tv3pLookups, tv3pAccesss=tv3pAccesss, tv3pReadlinks=tv3pReadlinks, tv3pReads=tv3pReads, tv3pWrites=tv3pWrites, tv3pCreates=tv3pCreates, tv3pMkdirs=tv3pMkdirs, tv3pSymlinks=tv3pSymlinks, tv3pMknods=tv3pMknods, tv3pRemoves=tv3pRemoves, tv3pRmdirs=tv3pRmdirs, tv3pRenames=tv3pRenames, tv3pLinks=tv3pLinks, tv3pReaddirs=tv3pReaddirs, tv3pReaddirPluss=tv3pReaddirPluss, tv3pFsstats=tv3pFsstats, tv3pFsinfos=tv3pFsinfos, tv3pPathconfs=tv3pPathconfs, tv3pCommits=tv3pCommits, tv3CachedCalls=tv3CachedCalls, tv3ccNulls=tv3ccNulls, tv3ccGetattrs=tv3ccGetattrs, tv3ccSetattrs=tv3ccSetattrs, tv3ccLookups=tv3ccLookups, tv3ccAccesss=tv3ccAccesss, tv3ccReadlinks=tv3ccReadlinks, tv3ccReads=tv3ccReads, tv3ccWrites=tv3ccWrites, tv3ccCreates=tv3ccCreates, tv3ccMkdirs=tv3ccMkdirs, tv3ccSymlinks=tv3ccSymlinks, tv3ccMknods=tv3ccMknods, tv3ccRemoves=tv3ccRemoves, tv3ccRmdirs=tv3ccRmdirs, tv3ccRenames=tv3ccRenames, tv3ccLinks=tv3ccLinks, tv3ccReaddirs=tv3ccReaddirs, tv3ccReaddirPluss=tv3ccReaddirPluss, tv3ccFsstats=tv3ccFsstats, tv3ccFsinfos=tv3ccFsinfos, tv3ccPathconfs=tv3ccPathconfs, tv3ccCommits=tv3ccCommits, tv3CachedPerCent=tv3CachedPerCent, tv3cpNulls=tv3cpNulls, tv3cpGetattrs=tv3cpGetattrs, tv3cpSetattrs=tv3cpSetattrs, tv3cpLookups=tv3cpLookups, tv3cpAccesss=tv3cpAccesss)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', tv3cpReadlinks=tv3cpReadlinks, tv3cpReads=tv3cpReads, tv3cpWrites=tv3cpWrites, tv3cpCreates=tv3cpCreates, tv3cpMkdirs=tv3cpMkdirs, tv3cpSymlinks=tv3cpSymlinks, tv3cpMknods=tv3cpMknods, tv3cpRemoves=tv3cpRemoves, tv3cpRmdirs=tv3cpRmdirs, tv3cpRenames=tv3cpRenames, tv3cpLinks=tv3cpLinks, tv3cpReaddirs=tv3cpReaddirs, tv3cpReaddirPluss=tv3cpReaddirPluss, tv3cpFsstats=tv3cpFsstats, tv3cpFsinfos=tv3cpFsinfos, tv3cpPathconfs=tv3cpPathconfs, tv3cpCommits=tv3cpCommits, treplyCache=treplyCache, trcInProgressHits=trcInProgressHits, trcDelayHits=trcDelayHits, trcMisses=trcMisses, trcNonIdemDoneHits=trcNonIdemDoneHits, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, trcTcpInProgressHits=trcTcpInProgressHits, trcTcpDelayHits=trcTcpDelayHits, trcTcpMisses=trcTcpMisses, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, trcUdpInProgressHits=trcUdpInProgressHits, trcUdpDelayHits=trcUdpDelayHits, trcUdpMisses=trcUdpMisses, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, tnfsrwStats=tnfsrwStats, tv2ReadStats=tv2ReadStats, tv2Read512Calls=tv2Read512Calls, tv2Read1KCalls=tv2Read1KCalls, tv2Read2KCalls=tv2Read2KCalls, tv2Read4KCalls=tv2Read4KCalls, tv2Read8KCalls=tv2Read8KCalls, tv2Read16KCalls=tv2Read16KCalls, tv2Read32KCalls=tv2Read32KCalls, tv2Read64KCalls=tv2Read64KCalls, tv2Read128KCalls=tv2Read128KCalls, tv2WriteStats=tv2WriteStats, tv2Write512Calls=tv2Write512Calls, tv2Write1KCalls=tv2Write1KCalls, tv2Write2KCalls=tv2Write2KCalls, tv2Write4KCalls=tv2Write4KCalls, tv2Write8KCalls=tv2Write8KCalls, tv2Write16KCalls=tv2Write16KCalls, tv2Write32KCalls=tv2Write32KCalls, tv2Write64KCalls=tv2Write64KCalls, tv2Write128KCalls=tv2Write128KCalls, tv3ReadStats=tv3ReadStats, tv3Read512Calls=tv3Read512Calls, tv3Read1KCalls=tv3Read1KCalls, tv3Read2KCalls=tv3Read2KCalls, tv3Read4KCalls=tv3Read4KCalls, tv3Read8KCalls=tv3Read8KCalls, tv3Read16KCalls=tv3Read16KCalls, tv3Read32KCalls=tv3Read32KCalls, tv3Read64KCalls=tv3Read64KCalls, tv3Read128KCalls=tv3Read128KCalls, tv3WriteStats=tv3WriteStats, tv3Write512Calls=tv3Write512Calls, tv3Write1KCalls=tv3Write1KCalls, tv3Write2KCalls=tv3Write2KCalls, tv3Write4KCalls=tv3Write4KCalls, tv3Write8KCalls=tv3Write8KCalls, tv3Write16KCalls=tv3Write16KCalls, tv3Write32KCalls=tv3Write32KCalls, tv3Write64KCalls=tv3Write64KCalls, tv3Write128KCalls=tv3Write128KCalls, nfsOptions=nfsOptions, nfsIsLicensed=nfsIsLicensed, quota=quota, quotaState=quotaState, quotaInitPercent=quotaInitPercent, qrTable=qrTable, qrEntry=qrEntry, qrIndex=qrIndex, qrType=qrType, qrId=qrId, qrKBytesUsed=qrKBytesUsed, qrKBytesLimit=qrKBytesLimit, qrFilesUsed=qrFilesUsed, qrFileLimit=qrFileLimit, qrPathName=qrPathName, qvStateTable=qvStateTable, qvStateEntry=qvStateEntry, qvStateVolume=qvStateVolume, qvStateName=qvStateName, qvStateStat=qvStateStat, qvStateInitPercent=qvStateInitPercent, qrVTable=qrVTable, qrVEntry=qrVEntry, qrVIndex=qrVIndex, qrVType=qrVType, qrVId=qrVId, qrVKBytesUsed=qrVKBytesUsed, qrVKBytesLimit=qrVKBytesLimit, qrVFilesUsed=qrVFilesUsed, qrVFileLimit=qrVFileLimit, qrVPathName=qrVPathName, qrVVolume=qrVVolume, qrVTree=qrVTree, qrVIdType=qrVIdType, qrVSid=qrVSid, qrVKBytesThreshold=qrVKBytesThreshold, qrVKBytesLimitSoft=qrVKBytesLimitSoft, qrVFileLimitSoft=qrVFileLimitSoft, qrV2Table=qrV2Table, qrV2Entry=qrV2Entry, qrV2Index=qrV2Index, qrV2Type=qrV2Type, qrV2Id=qrV2Id, qrV2HighKBytesUsed=qrV2HighKBytesUsed, qrV2LowKBytesUsed=qrV2LowKBytesUsed, qrV2QuotaUnlimited=qrV2QuotaUnlimited, qrV2HighKBytesLimit=qrV2HighKBytesLimit, qrV2LowKBytesLimit=qrV2LowKBytesLimit, qrV2FilesUsed=qrV2FilesUsed, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, qrV2FileLimit=qrV2FileLimit, qrV2PathName=qrV2PathName, qrV2Volume=qrV2Volume)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', qrV2Tree=qrV2Tree, qrV2IdType=qrV2IdType, qrV2Sid=qrV2Sid, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, qrV2SoftFileLimit=qrV2SoftFileLimit, filesys=filesys, filesysMaxfilesAvail=filesysMaxfilesAvail, filesysMaxfilesUsed=filesysMaxfilesUsed, filesysMaxfilesPossible=filesysMaxfilesPossible, dfTable=dfTable, dfEntry=dfEntry, dfIndex=dfIndex, dfFileSys=dfFileSys, dfKBytesTotal=dfKBytesTotal, dfKBytesUsed=dfKBytesUsed, dfKBytesAvail=dfKBytesAvail, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, dfInodesUsed=dfInodesUsed, dfInodesFree=dfInodesFree, dfPerCentInodeCapacity=dfPerCentInodeCapacity, dfMountedOn=dfMountedOn, dfMaxFilesAvail=dfMaxFilesAvail, dfMaxFilesUsed=dfMaxFilesUsed, dfMaxFilesPossible=dfMaxFilesPossible, dfHighTotalKBytes=dfHighTotalKBytes, dfLowTotalKBytes=dfLowTotalKBytes, dfHighUsedKBytes=dfHighUsedKBytes, dfLowUsedKBytes=dfLowUsedKBytes, dfHighAvailKBytes=dfHighAvailKBytes, dfLowAvailKBytes=dfLowAvailKBytes, dfStatus=dfStatus, dfMirrorStatus=dfMirrorStatus, dfPlexCount=dfPlexCount, dfType=dfType, dfHighSisSharedKBytes=dfHighSisSharedKBytes, dfLowSisSharedKBytes=dfLowSisSharedKBytes, dfHighSisSavedKBytes=dfHighSisSavedKBytes, dfLowSisSavedKBytes=dfLowSisSavedKBytes, dfPerCentSaved=dfPerCentSaved, snapshot=snapshot, slTable=slTable, slEntry=slEntry, slIndex=slIndex, slMonth=slMonth, slDay=slDay, slHour=slHour, slMinutes=slMinutes, slName=slName, slVTable=slVTable, slVEntry=slVEntry, slVIndex=slVIndex, slVMonth=slVMonth, slVDay=slVDay, slVHour=slVHour, slVMinutes=slVMinutes, slVName=slVName, slVVolume=slVVolume, slVNumber=slVNumber, slVVolumeName=slVVolumeName, slVType=slVType, slQTable=slQTable, slQEntry=slQEntry, slQIndex=slQIndex, slQVolume=slQVolume, slQQtree=slQQtree, slQSnapshotName=slQSnapshotName, slQSnapshotTime=slQSnapshotTime, slQQtreeName=slQQtreeName, slQQtreeContent=slQQtreeContent, slQSource=slQSource, slQSourceTime=slQSourceTime, slQVolumeName=slQVolumeName, dfNumber=dfNumber, fsStatus=fsStatus, fsOverallStatus=fsOverallStatus, fsStatusMessage=fsStatusMessage, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, fsMaxUsedReservedPerCent=fsMaxUsedReservedPerCent, volTable=volTable, volEntry=volEntry, volIndex=volIndex, volName=volName, volFSID=volFSID, volOwningHost=volOwningHost, volState=volState, volStatus=volStatus, volOptions=volOptions, volUUID=volUUID, volAggrName=volAggrName, volType=volType, volClone=volClone, volCloneOf=volCloneOf, volCloneSnap=volCloneSnap, volNumber=volNumber, qtreeTable=qtreeTable, qtreeEntry=qtreeEntry, qtreeIndex=qtreeIndex, qtreeVolume=qtreeVolume, qtreeVolumeName=qtreeVolumeName, qtreeId=qtreeId, qtreeName=qtreeName, qtreeStyle=qtreeStyle, qtreeStatus=qtreeStatus, qtreeOplock=qtreeOplock, aggrTable=aggrTable, aggrEntry=aggrEntry, aggrIndex=aggrIndex, aggrName=aggrName, aggrFSID=aggrFSID, aggrOwningHost=aggrOwningHost, aggrState=aggrState, aggrStatus=aggrStatus, aggrOptions=aggrOptions, aggrUUID=aggrUUID, aggrFlexvollist=aggrFlexvollist, aggrType=aggrType, aggrNumber=aggrNumber, raid=raid, raidTable=raidTable, raidEntry=raidEntry)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', raidIndex=raidIndex, raidDiskName=raidDiskName, raidStatus=raidStatus, raidDiskId=raidDiskId, raidScsiAdapter=raidScsiAdapter, raidScsiId=raidScsiId, raidUsedMb=raidUsedMb, raidUsedBlocks=raidUsedBlocks, raidTotalMb=raidTotalMb, raidTotalBlocks=raidTotalBlocks, raidCompletionPerCent=raidCompletionPerCent, raidVTable=raidVTable, raidVEntry=raidVEntry, raidVIndex=raidVIndex, raidVDiskName=raidVDiskName, raidVStatus=raidVStatus, raidVDiskId=raidVDiskId, raidVScsiAdapter=raidVScsiAdapter, raidVScsiId=raidVScsiId, raidVUsedMb=raidVUsedMb, raidVUsedBlocks=raidVUsedBlocks, raidVTotalMb=raidVTotalMb, raidVTotalBlocks=raidVTotalBlocks, raidVCompletionPerCent=raidVCompletionPerCent, raidVVol=raidVVol, raidVGroup=raidVGroup, raidVDiskNumber=raidVDiskNumber, raidVGroupNumber=raidVGroupNumber, raidVDiskPort=raidVDiskPort, raidVSecondaryDiskName=raidVSecondaryDiskName, raidVSecondaryDiskPort=raidVSecondaryDiskPort, raidVShelf=raidVShelf, raidVBay=raidVBay, raidVPlex=raidVPlex, raidVPlexGroup=raidVPlexGroup, raidVPlexNumber=raidVPlexNumber, raidVPlexName=raidVPlexName, raidVSectorSize=raidVSectorSize, raidVDiskSerialNumber=raidVDiskSerialNumber, raidVDiskVendor=raidVDiskVendor, raidVDiskModel=raidVDiskModel, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, raidVDiskRPM=raidVDiskRPM, raidVDiskType=raidVDiskType, raidVDiskPool=raidVDiskPool, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, spareTable=spareTable, spareEntry=spareEntry, spareIndex=spareIndex, spareDiskName=spareDiskName, spareStatus=spareStatus, spareDiskId=spareDiskId, spareScsiAdapter=spareScsiAdapter, spareScsiId=spareScsiId, spareTotalMb=spareTotalMb, spareTotalBlocks=spareTotalBlocks, spareDiskPort=spareDiskPort, spareSecondaryDiskName=spareSecondaryDiskName, spareSecondaryDiskPort=spareSecondaryDiskPort, spareShelf=spareShelf, spareBay=spareBay, sparePool=sparePool, spareSectorSize=spareSectorSize, spareDiskSerialNumber=spareDiskSerialNumber, spareDiskVendor=spareDiskVendor, spareDiskModel=spareDiskModel, spareDiskFirmwareRevision=spareDiskFirmwareRevision, spareDiskRPM=spareDiskRPM, spareDiskType=spareDiskType, diskSummary=diskSummary, diskTotalCount=diskTotalCount, diskActiveCount=diskActiveCount, diskReconstructingCount=diskReconstructingCount, diskReconstructingParityCount=diskReconstructingParityCount, diskVerifyingParityCount=diskVerifyingParityCount, diskScrubbingCount=diskScrubbingCount, diskFailedCount=diskFailedCount, diskSpareCount=diskSpareCount, diskAddingSpareCount=diskAddingSpareCount, diskFailedMessage=diskFailedMessage, diskPrefailedCount=diskPrefailedCount, raidVNumber=raidVNumber, spareNumber=spareNumber, otherDiskNumber=otherDiskNumber, raidPNumber=raidPNumber, otherDiskTable=otherDiskTable, otherDiskEntry=otherDiskEntry, otherDiskIndex=otherDiskIndex, otherDiskDiskName=otherDiskDiskName, otherDiskStatus=otherDiskStatus, otherDiskDiskId=otherDiskDiskId, otherDiskScsiAdapter=otherDiskScsiAdapter, otherDiskScsiId=otherDiskScsiId, otherDiskTotalMb=otherDiskTotalMb, otherDiskTotalBlocks=otherDiskTotalBlocks, otherDiskDiskPort=otherDiskDiskPort, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, otherDiskShelf=otherDiskShelf, otherDiskBay=otherDiskBay, otherDiskPool=otherDiskPool, otherDiskSectorSize=otherDiskSectorSize, otherDiskSerialNumber=otherDiskSerialNumber, otherDiskVendor=otherDiskVendor, otherDiskModel=otherDiskModel, otherDiskFirmwareRevision=otherDiskFirmwareRevision, otherDiskRPM=otherDiskRPM, otherDiskType=otherDiskType, raidPTable=raidPTable, raidPEntry=raidPEntry, raidPIndex=raidPIndex, raidPStatus=raidPStatus, raidPVol=raidPVol, raidPPlex=raidPPlex, raidPGroup=raidPGroup, raidPPlexNumber=raidPPlexNumber, raidPGroupNumber=raidPGroupNumber, raidPDiskNumber=raidPDiskNumber, raidPPlexName=raidPPlexName, raidPDiskName=raidPDiskName, raidPDiskPort=raidPDiskPort, raidPSecondaryDiskName=raidPSecondaryDiskName, raidPSecondaryDiskPort=raidPSecondaryDiskPort, raidPScsiAdapter=raidPScsiAdapter, raidPScsiId=raidPScsiId, raidPDiskId=raidPDiskId, raidPShelf=raidPShelf)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', raidPBay=raidPBay, raidPSectorSize=raidPSectorSize, raidPUsedMb=raidPUsedMb, raidPUsedBlocks=raidPUsedBlocks, raidPTotalMb=raidPTotalMb, raidPTotalBlocks=raidPTotalBlocks, raidPCompletionPerCent=raidPCompletionPerCent, raidPDiskSerialNumber=raidPDiskSerialNumber, raidPDiskVendor=raidPDiskVendor, raidPDiskModel=raidPDiskModel, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, raidPDiskRPM=raidPDiskRPM, raidPDiskType=raidPDiskType, raidPDiskPool=raidPDiskPool, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, plexTable=plexTable, plexEntry=plexEntry, plexIndex=plexIndex, plexName=plexName, plexVolName=plexVolName, plexStatus=plexStatus, plexPercentResyncing=plexPercentResyncing, outOfDateDiskCount=outOfDateDiskCount, outOfDateDiskTable=outOfDateDiskTable, outOfDateDiskEntry=outOfDateDiskEntry, outOfDateDiskIndex=outOfDateDiskIndex, outOfDateDiskDiskName=outOfDateDiskDiskName, outOfDateDiskDiskId=outOfDateDiskDiskId, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, outOfDateDiskScsiId=outOfDateDiskScsiId, outOfDateDiskTotalMb=outOfDateDiskTotalMb, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, outOfDateDiskDiskPort=outOfDateDiskDiskPort, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, outOfDateDiskShelf=outOfDateDiskShelf, outOfDateDiskBay=outOfDateDiskBay, outOfDateDiskPool=outOfDateDiskPool, outOfDateDiskSectorSize=outOfDateDiskSectorSize, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, outOfDateDiskVendor=outOfDateDiskVendor, outOfDateDiskModel=outOfDateDiskModel, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, outOfDateDiskRPM=outOfDateDiskRPM, outOfDateDiskType=outOfDateDiskType, cifs=cifs, cifsOptions=cifsOptions, cifsIsEnabled=cifsIsEnabled, cifsIsLoginEnabled=cifsIsLoginEnabled, cifsHostName=cifsHostName, cifsAltNames=cifsAltNames, cifsDomainJoined=cifsDomainJoined, cifsDomainName=cifsDomainName, cifsWGName=cifsWGName, cifsDCName=cifsDCName, cifsIsWinsEnabled=cifsIsWinsEnabled, cifsWinsServers=cifsWinsServers, cifsSecurityModel=cifsSecurityModel, cifsPCGenericUser=cifsPCGenericUser, cifsOplocksEnabled=cifsOplocksEnabled, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, cifsPreserveCase=cifsPreserveCase, cifsSymlinksEnabled=cifsSymlinksEnabled, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, cifsIsLicensed=cifsIsLicensed, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, cifsInfo=cifsInfo, cifsStatus=cifsStatus, cifsNeedPW=cifsNeedPW, cifsTimeToShutdown=cifsTimeToShutdown, cifsMaxConnections=cifsMaxConnections, cifsMaxTrees=cifsMaxTrees, cifsMaxShares=cifsMaxShares, cifsMaxFiles=cifsMaxFiles, cifsMaxACLs=cifsMaxACLs, cifsConnectedUsers=cifsConnectedUsers, cifsNTrees=cifsNTrees, cifsNShares=cifsNShares, cifsNSessions=cifsNSessions, cifsNOpenFiles=cifsNOpenFiles, cifsNOpenDirs=cifsNOpenDirs, cifsNOplockBreakWaits=cifsNOplockBreakWaits, cifsNOplockAckWaits=cifsNOplockAckWaits, cifsSuspectOps=cifsSuspectOps, cifsNDomainControllers=cifsNDomainControllers, cifsStats=cifsStats, cifsServ=cifsServ, cifsOps=cifsOps, cifsTotalOps=cifsTotalOps, cifsTotalCalls=cifsTotalCalls, cifsBadCalls=cifsBadCalls, cifsGetAttrs=cifsGetAttrs, cifsReads=cifsReads, cifsWrites=cifsWrites, cifsLocks=cifsLocks, cifsOpens=cifsOpens, cifsDirOps=cifsDirOps, cifsOthers=cifsOthers, cifsReqs=cifsReqs, smbNegProts=smbNegProts, smbSessionSetupAndXs=smbSessionSetupAndXs, smbLogoffAndXs=smbLogoffAndXs, smbTreeConnectAndXs=smbTreeConnectAndXs, smbTreeDisconnects=smbTreeDisconnects, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, smbEchos=smbEchos, smbNTCancels=smbNTCancels, smbNTCreateAndXs=smbNTCreateAndXs, smbNTTransactCreates=smbNTTransactCreates, smbCreateTemporaries=smbCreateTemporaries, smbReadAndXs=smbReadAndXs, smbWriteAndXs=smbWriteAndXs, smbLockingAndXs=smbLockingAndXs, smbSeeks=smbSeeks, smbFlushes=smbFlushes, smbCloses=smbCloses, smbDeletes=smbDeletes, smbRenames=smbRenames, smbMoves=smbMoves, smbCopies=smbCopies, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, smbTrans2SetPathInfos=smbTrans2SetPathInfos, smbTrans2SetFileInfos=smbTrans2SetFileInfos, smbDeleteDirs=smbDeleteDirs, smbCheckDirs=smbCheckDirs, smbTrans2FindFirst2s=smbTrans2FindFirst2s)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', smbTrans2FindNext2s=smbTrans2FindNext2s, smbFindClose2s=smbFindClose2s, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, smbOpenPrintFiles=smbOpenPrintFiles, smbGetPrintQueues=smbGetPrintQueues, smbNTTransactIoctls=smbNTTransactIoctls, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, smbTrans2CreateDirs=smbTrans2CreateDirs, smbNTCancelCNs=smbNTCancelCNs, smbNTCancelOthers=smbNTCancelOthers, cifsPercent=cifsPercent, smbNegProtPct=smbNegProtPct, smbSessionSetupAndXPct=smbSessionSetupAndXPct, smbLogoffAndXPct=smbLogoffAndXPct, smbTreeConnectAndXPct=smbTreeConnectAndXPct, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, smbEchoPct=smbEchoPct, smbNTCancelPct=smbNTCancelPct, smbCreateAndXPct=smbCreateAndXPct, smbTransactCreatePct=smbTransactCreatePct, smbCreateTemporaryPct=smbCreateTemporaryPct, smbReadAndXPct=smbReadAndXPct, smbWriteAndXPct=smbWriteAndXPct, smbLockingAndXPct=smbLockingAndXPct, smbSeekPct=smbSeekPct, smbFlushPct=smbFlushPct, smbClosePct=smbClosePct, smbDeletePct=smbDeletePct, smbRenamePct=smbRenamePct, smbMovePct=smbMovePct, smbCopyPct=smbCopyPct, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct, smbDeleteDirPct=smbDeleteDirPct, smbCheckDirPct=smbCheckDirPct, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, smbFindClose2Pct=smbFindClose2Pct, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, smbOpenPrintFilePct=smbOpenPrintFilePct, smbGetPrintQueuePct=smbGetPrintQueuePct, smbNTTransactIoctlPct=smbNTTransactIoctlPct, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, smbTrans2CreateDirPct=smbTrans2CreateDirPct, smbNTCancelCNPct=smbNTCancelCNPct, smbNTCancelOtherPct=smbNTCancelOtherPct, cifsObsReqs=cifsObsReqs, obsSmbClosePrintFiles=obsSmbClosePrintFiles, obsSmbCreates=obsSmbCreates, obsSmbCreateDirs=obsSmbCreateDirs, obsSmbCreateNews=obsSmbCreateNews, obsSmbLockAndReads=obsSmbLockAndReads, obsSmbLockByteRanges=obsSmbLockByteRanges, obsSmbOpens=obsSmbOpens, obsSmbOpenAndXs=obsSmbOpenAndXs, obsSmbProcessExits=obsSmbProcessExits, obsSmbQueryInfos=obsSmbQueryInfos, obsSmbQueryInfo2s=obsSmbQueryInfo2s, obsSmbReads=obsSmbReads, obsSmbReadMPXs=obsSmbReadMPXs, obsSmbReadRaws=obsSmbReadRaws, obsSmbSearchs=obsSmbSearchs, obsSmbSetInfos=obsSmbSetInfos, obsSmbSetInfo2s=obsSmbSetInfo2s, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, obsSmbTrans2Open2s=obsSmbTrans2Open2s, obsSmbTreeConnects=obsSmbTreeConnects, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, obsSmbWrites=obsSmbWrites, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, obsSmbWriteAndCloses=obsSmbWriteAndCloses, obsSmbWriteMPXs=obsSmbWriteMPXs, obsSmbWritePrintFiles=obsSmbWritePrintFiles, obsSmbWriteRaws=obsSmbWriteRaws, cifsObsPercent=cifsObsPercent, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, obsSmbCreatePct=obsSmbCreatePct, obsSmbCreateDirPct=obsSmbCreateDirPct, obsSmbCreateNewPct=obsSmbCreateNewPct, obsSmbLockAndReadPct=obsSmbLockAndReadPct, obsSmbLockByteRangePct=obsSmbLockByteRangePct, obsSmbOpenPct=obsSmbOpenPct, obsSmbOpenAndXPct=obsSmbOpenAndXPct, obsSmbProcessExitPct=obsSmbProcessExitPct, obsSmbQueryInfoPct=obsSmbQueryInfoPct, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, obsSmbReadPct=obsSmbReadPct, obsSmbReadMPXPct=obsSmbReadMPXPct, obsSmbReadRawPct=obsSmbReadRawPct, obsSmbSearchPct=obsSmbSearchPct, obsSmbSetInfoPct=obsSmbSetInfoPct, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, obsSmbTreeConnectPct=obsSmbTreeConnectPct, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, obsSmbWritePct=obsSmbWritePct, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, obsSmbWriteMPXPct=obsSmbWriteMPXPct, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, obsSmbWriteRawPct=obsSmbWriteRawPct, cifsMisc=cifsMisc, cifsCancelLocks=cifsCancelLocks, cifsWaitLocks=cifsWaitLocks, cifsCopyToAligns=cifsCopyToAligns, cifsAlignedSmalls=cifsAlignedSmalls, cifsAlignedLarges=cifsAlignedLarges, cifsAlignedSmallRels=cifsAlignedSmallRels, cifsAlignedLargeRels=cifsAlignedLargeRels, cifsMbufWaits=cifsMbufWaits, cifsNbtWaits=cifsNbtWaits, cifsCwaWaits=cifsCwaWaits, cifsMultipleVCs=cifsMultipleVCs, cifsPDCUpcalls=cifsPDCUpcalls, cifsQueuedWriteRaws=cifsQueuedWriteRaws, cifsNBTDisconnects=cifsNBTDisconnects, cifsSMBDisconnects=cifsSMBDisconnects)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', cifsDupDisconnects=cifsDupDisconnects, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, cifsOpLkBatchToNones=cifsOpLkBatchToNones, cifsOpLkL2ToNones=cifsOpLkL2ToNones, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, cifsSharingErrorRetries=cifsSharingErrorRetries, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, cifsClearTextPasswd=cifsClearTextPasswd, netcache=netcache, ncOptions=ncOptions, ncIsEnabled=ncIsEnabled, ncIsLicensed=ncIsLicensed, ncDnsOptions=ncDnsOptions, ncDnsIsEnabled=ncDnsIsEnabled, ncHttpOptions=ncHttpOptions, ncHttpIsEnabled=ncHttpIsEnabled, ncNntpOptions=ncNntpOptions, ncNntpIsEnabled=ncNntpIsEnabled, ncNntpIsLicensed=ncNntpIsLicensed, ncStreamingOptions=ncStreamingOptions, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, ncIcapOptions=ncIcapOptions, ncIcapIsEnabled=ncIcapIsEnabled, ncIcapIsLicensed=ncIcapIsLicensed, ncIcapv1IsEnabled=ncIcapv1IsEnabled, ncGrmOptions=ncGrmOptions, ncGrmServerOptions=ncGrmServerOptions, ncGrmServerIsEnabled=ncGrmServerIsEnabled, ncGrmServerIsLicensed=ncGrmServerIsLicensed, ncGrmAgentOptions=ncGrmAgentOptions, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, ncCdOptions=ncCdOptions, ncCdIsEnabled=ncCdIsEnabled, ncHttpsProxyOptions=ncHttpsProxyOptions, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, ncCmsOptions=ncCmsOptions, ncCmsIsEnabled=ncCmsIsEnabled, ncInfo=ncInfo, ncVersion=ncVersion, ncAdminPort=ncAdminPort, accelmonitor=accelmonitor, amNumber=amNumber, amMonitor=amMonitor, amMonitorString=amMonitorString, amTable=amTable, amEntry=amEntry, amIndex=amIndex, amAddress=amAddress, amPort=amPort, amStatus=amStatus, ncLocalConfigChanged=ncLocalConfigChanged, ncLocalConfigVersion=ncLocalConfigVersion, grmmonitor=grmmonitor, grmMonitor=grmMonitor, grmMonitorString=grmMonitorString, takeoverinfo=takeoverinfo, takeoverAddrs=takeoverAddrs, takeoverMode=takeoverMode, takeoverStatus=takeoverStatus, ncStats=ncStats, ncObjectsStored=ncObjectsStored, ncBytesToClients=ncBytesToClients, ncBytesFromClients=ncBytesFromClients, ncBytesToServers=ncBytesToServers, ncBytesFromServers=ncBytesFromServers, ncHttp=ncHttp, ncHttpTotalRequests=ncHttpTotalRequests, ncHttpHitRequests=ncHttpHitRequests, ncHttpMissRequests=ncHttpMissRequests, ncHttpServConns=ncHttpServConns, ncHttpCliConns=ncHttpCliConns, ncHttpBWSavings=ncHttpBWSavings, ncHttpObjHitrate=ncHttpObjHitrate, ncHttpRespTimePerByte=ncHttpRespTimePerByte, ncHttpAvgRespTime=ncHttpAvgRespTime, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, ncHttpTotalRespTime=ncHttpTotalRespTime, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, ncHttpBytesToClients=ncHttpBytesToClients, ncHttpBytesFromClients=ncHttpBytesFromClients, ncHttpBytesToServers=ncHttpBytesToServers, ncHttpBytesFromServers=ncHttpBytesFromServers, ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, ncHttpReqRate=ncHttpReqRate, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, ncHttpActiveServConns=ncHttpActiveServConns, ncHttpActiveCliConns=ncHttpActiveCliConns, ncHttpAccelTable=ncHttpAccelTable, ncHttpAccelEntry=ncHttpAccelEntry, ncHttpAccelIndex=ncHttpAccelIndex, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, ncHttpAccelHits=ncHttpAccelHits, ncHttpsAccelTable=ncHttpsAccelTable, ncHttpsAccelEntry=ncHttpsAccelEntry, ncHttpsAccelIndex=ncHttpsAccelIndex)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, ncHttpsAccelHits=ncHttpsAccelHits, ncNntp=ncNntp, ncNntpTotalRequests=ncNntpTotalRequests, ncNntpCacheableRequests=ncNntpCacheableRequests, ncNntpProxyRequests=ncNntpProxyRequests, ncNntpServConns=ncNntpServConns, ncNntpCliConns=ncNntpCliConns, ncNntpBWSavings=ncNntpBWSavings, ncNntpRespTimePerByte=ncNntpRespTimePerByte, ncNntpBytesToClients=ncNntpBytesToClients, ncNntpBytesFromClients=ncNntpBytesFromClients, ncNntpBytesToServers=ncNntpBytesToServers, ncNntpBytesFromServers=ncNntpBytesFromServers, ncNntpObjHitrate=ncNntpObjHitrate, ncNntpActiveServConns=ncNntpActiveServConns, ncNntpActiveCliConns=ncNntpActiveCliConns, ncFtp=ncFtp, ncFtpTotalRequests=ncFtpTotalRequests, ncFtpHitRequests=ncFtpHitRequests, ncFtpMissRequests=ncFtpMissRequests, ncFtpServConns=ncFtpServConns, ncFtpCliConns=ncFtpCliConns, ncFtpBWSavings=ncFtpBWSavings, ncFtpRespTimePerByte=ncFtpRespTimePerByte, ncFtpBytesToClients=ncFtpBytesToClients, ncFtpBytesFromClients=ncFtpBytesFromClients, ncFtpBytesToServers=ncFtpBytesToServers, ncFtpBytesFromServers=ncFtpBytesFromServers, ncFtpObjHitrate=ncFtpObjHitrate, ncFtpActiveServConns=ncFtpActiveServConns, ncFtpActiveCliConns=ncFtpActiveCliConns, ncStreaming=ncStreaming, ncStreamingServConns=ncStreamingServConns, ncStreamingCliConns=ncStreamingCliConns, ncStreamingBWSavings=ncStreamingBWSavings, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, ncStreamingHitRequests=ncStreamingHitRequests, ncStreamingMissRequests=ncStreamingMissRequests, ncStreamingTotalRequests=ncStreamingTotalRequests, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, ncStreamingOndemandBytesToClients=ncStreamingOndemandBytesToClients, ncStreamingOndemandBytesFromClients=ncStreamingOndemandBytesFromClients, ncStreamingOndemandBytesToServers=ncStreamingOndemandBytesToServers, ncStreamingOndemandBytesFromServers=ncStreamingOndemandBytesFromServers, ncStreamingObjHitrate=ncStreamingObjHitrate, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, ncStreamingQuickTimeBytesToClients=ncStreamingQuickTimeBytesToClients, ncStreamingQuickTimeBytesFromClients=ncStreamingQuickTimeBytesFromClients, ncStreamingQuickTimeBytesToServers=ncStreamingQuickTimeBytesToServers, ncStreamingQuickTimeBytesFromServers=ncStreamingQuickTimeBytesFromServers, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, ncStreamingRealBWSavings=ncStreamingRealBWSavings, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, ncStreamingActiveServConns=ncStreamingActiveServConns, ncStreamingActiveCliConns=ncStreamingActiveCliConns, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, ncStreamingRtspWMBytesFromClients=ncStreamingRtspWMBytesFromClients, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, ncStreamingRtspWMBytesFromServers=ncStreamingRtspWMBytesFromServers, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, ncStreamingAccelTable=ncStreamingAccelTable, ncStreamingAccelEntry=ncStreamingAccelEntry, ncStreamingAccelIndex=ncStreamingAccelIndex, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, ncStreamingAccelHits=ncStreamingAccelHits, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, ncTotalBWSavings=ncTotalBWSavings, ncDns=ncDns, ncDnsRequestsReceived=ncDnsRequestsReceived, ncDnsCacheHits=ncDnsCacheHits, ncDnsCacheMisses=ncDnsCacheMisses, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, ncDnsIres=ncDnsIres, ncDnsIresIsEnabled=ncDnsIresIsEnabled, ncDnsIresIsInitialised=ncDnsIresIsInitialised, ncDnsIresForwardLookups=ncDnsIresForwardLookups, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, ncDnsIresReverseLookups=ncDnsIresReverseLookups, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, ncAuth=ncAuth, ncNtlm=ncNtlm, ncNtlmPossibleProblem=ncNtlmPossibleProblem, ncRM=ncRM, ncRMMem=ncRMMem, ncRMMemTotal=ncRMMemTotal, ncRMMemFree=ncRMMemFree, snapmirror=snapmirror, snapmirrorOn=snapmirrorOn, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, snapmirrorBackupNumber=snapmirrorBackupNumber, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, snapmirrorBackupAborts=snapmirrorBackupAborts, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, snapmirrorWrittenBytes=snapmirrorWrittenBytes, snapmirrorReadBytes=snapmirrorReadBytes, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, snapmirrorIsLicensed=snapmirrorIsLicensed, snapmirrorStatusTable=snapmirrorStatusTable, snapmirrorStatusEntry=snapmirrorStatusEntry, snapmirrorIndex=snapmirrorIndex, snapmirrorSrc=snapmirrorSrc, snapmirrorDst=snapmirrorDst, snapmirrorStatus=snapmirrorStatus, snapmirrorState=snapmirrorState, snapmirrorLag=snapmirrorLag, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, snapmirrorTotalFailures=snapmirrorTotalFailures, snapmirrorTotalDeferments=snapmirrorTotalDeferments, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, snapmirrorThrottleValue=snapmirrorThrottleValue, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, snapmirrorLastTransType=snapmirrorLastTransType, snapmirrorLastTransMBs=snapmirrorLastTransMBs, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds, snapmirrorSchedule=snapmirrorSchedule, snapmirrorScheduleDesc=snapmirrorScheduleDesc, snapmirrorArguments=snapmirrorArguments, snapmirrorSyncToAsync=snapmirrorSyncToAsync, snapmirrorConnTable=snapmirrorConnTable, snapmirrorConnEntry=snapmirrorConnEntry, snapmirrorConnIndex=snapmirrorConnIndex, snapmirrorConnName=snapmirrorConnName, snapmirrorConnType=snapmirrorConnType, snapmirrorConnSrc1=snapmirrorConnSrc1, snapmirrorConnDst1=snapmirrorConnDst1, snapmirrorConnSrc2=snapmirrorConnSrc2, snapmirrorConnDst2=snapmirrorConnDst2, ndmp=ndmp, ndmpOn=ndmpOn, ndmpSessionOpened=ndmpSessionOpened, ndmpBackupActive=ndmpBackupActive, ndmpRestoreActive=ndmpRestoreActive, ndmpTapeActive=ndmpTapeActive, ndmpBackupSuccesses=ndmpBackupSuccesses, ndmpRestoreSuccesses=ndmpRestoreSuccesses, ndmpBackupFailures=ndmpBackupFailures, ndmpRestoreFailures=ndmpRestoreFailures, ndmpBackupFailureReason=ndmpBackupFailureReason, ndmpRestoreFailureReason=ndmpRestoreFailureReason, fabric=fabric, fabricInstances=fabricInstances, fabricTable=fabricTable, fabricEntry=fabricEntry, fabricIndex=fabricIndex, fabricStatus=fabricStatus, fabricStatusMessage=fabricStatusMessage, fabricName=fabricName, fabricOwner=fabricOwner, switchTable=switchTable, switchEntry=switchEntry, switchIndex=switchIndex, switchName=switchName, switchSymbolicName=switchSymbolicName, switchType=switchType, switchDomain=switchDomain, switchManagementId=switchManagementId, switchStatus=switchStatus, switchStatusMessage=switchStatusMessage, switchLinkSpeed=switchLinkSpeed, switchHighPacketsProcessed=switchHighPacketsProcessed, switchLowPacketsProcessed=switchLowPacketsProcessed, switchHighPacketsRejected=switchHighPacketsRejected, switchLowPacketsRejected=switchLowPacketsRejected, switchFabricIndex=switchFabricIndex, portTable=portTable, portEntry=portEntry, portIndex=portIndex, portName=portName, portSwitchIndex=portSwitchIndex, portSwitchName=portSwitchName, portNumber=portNumber, portType=portType, portState=portState, portFabricIndex=portFabricIndex, dafs=dafs, dafsOptions=dafsOptions, dafsIsLicensed=dafsIsLicensed, dafsMaxRequestsServer=dafsMaxRequestsServer, dafsMaxRequests=dafsMaxRequests, dafsMaxRequestSize=dafsMaxRequestSize, dafsMaxResponseSize=dafsMaxResponseSize, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, dafsUseChecksums=dafsUseChecksums, dafsNicNumRequestDemons=dafsNicNumRequestDemons, dafsAnonymousAuthentication=dafsAnonymousAuthentication, dafsServerEnabled=dafsServerEnabled, dafsDefaultUid=dafsDefaultUid, dafsDefaultGid=dafsDefaultGid, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, dafsMaxIdleSeconds=dafsMaxIdleSeconds, dafsNicTable=dafsNicTable, dafsNicEntry=dafsNicEntry, dafsNicIndex=dafsNicIndex, dafsNicName=dafsNicName, dafsNicDevice=dafsNicDevice, dafsNicState=dafsNicState, dafsNicListenAddr=dafsNicListenAddr, dafsNicNumRqstDemons=dafsNicNumRqstDemons, dafsNicInBytes=dafsNicInBytes, dafsNicDirectInBytes=dafsNicDirectInBytes, dafsNicOutBytes=dafsNicOutBytes, dafsNicDirectOutBytes=dafsNicDirectOutBytes, curDafs=curDafs, dafsPendingRequests=dafsPendingRequests, dafsCurrentRequests=dafsCurrentRequests, totDafs=totDafs, dafsCalls=dafsCalls, dafsClientAuths=dafsClientAuths, dafsClientConnects=dafsClientConnects, dafsClientConnectAuths=dafsClientConnectAuths, dafsConnectBinds=dafsConnectBinds, dafsDisconnects=dafsDisconnects, dafsRegisterCreds=dafsRegisterCreds, dafsReleaseCreds=dafsReleaseCreds, dafsSecinfos=dafsSecinfos, dafsServerAuths=dafsServerAuths, dafsCheckResponses=dafsCheckResponses, dafsFetchResponses=dafsFetchResponses)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', dafsDiscardResponses=dafsDiscardResponses, dafsAccesses=dafsAccesses, dafsCacheHints=dafsCacheHints, dafsCloses=dafsCloses, dafsCommits=dafsCommits, dafsCreates=dafsCreates, dafsDelegPurges=dafsDelegPurges, dafsDelegReturns=dafsDelegReturns, dafsGetFsattrs=dafsGetFsattrs, dafsGetRootHandles=dafsGetRootHandles, dafsGetattrInlines=dafsGetattrInlines, dafsGetattrDirects=dafsGetattrDirects, dafsLinks=dafsLinks, dafsLocks=dafsLocks, dafsLockts=dafsLockts, dafsLockus=dafsLockus, dafsLookUps=dafsLookUps, dafsLookUpps=dafsLookUpps, dafsNulls=dafsNulls, dafsNverifys=dafsNverifys, dafsOpens=dafsOpens, dafsOpenDowngrades=dafsOpenDowngrades, dafsOpenattrs=dafsOpenattrs, dafsReadInlines=dafsReadInlines, dafsReadDirects=dafsReadDirects, dafsReaddirInlines=dafsReaddirInlines, dafsReaddirDirects=dafsReaddirDirects, dafsReadlinkInlines=dafsReadlinkInlines, dafsReadlinkDirects=dafsReadlinkDirects, dafsRemoves=dafsRemoves, dafsRenames=dafsRenames, dafsSetattrInlines=dafsSetattrInlines, dafsSetattrDirects=dafsSetattrDirects, dafsVerifys=dafsVerifys, dafsBatchSubmits=dafsBatchSubmits, dafsWriteInlines=dafsWriteInlines, dafsWriteDirects=dafsWriteDirects, dafsBcGetattrs=dafsBcGetattrs, dafsBcNulls=dafsBcNulls, dafsBcRecalls=dafsBcRecalls, dafsBcBatchCompletions=dafsBcBatchCompletions, dafsAppendInlines=dafsAppendInlines, dafsAppendDirects=dafsAppendDirects, dafsGetFencingLists=dafsGetFencingLists, dafsSetFencingLists=dafsSetFencingLists, dafsHurryUps=dafsHurryUps, dafsInBytes=dafsInBytes, dafsDirectInBytes=dafsDirectInBytes, dafsOutBytes=dafsOutBytes, dafsDirectOutBytes=dafsDirectOutBytes, dafsSessionTable=dafsSessionTable, dafsSessionEntry=dafsSessionEntry, dafsSessionIndex=dafsSessionIndex, dafsSessionId=dafsSessionId, dafsSessionEndian=dafsSessionEndian, dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, dafsSessionUseChecksums=dafsSessionUseChecksums, dafsSessionMaxCredentials=dafsSessionMaxCredentials, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, dafsSessionMaxRequests=dafsSessionMaxRequests, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, dafsSessionClientIdString=dafsSessionClientIdString, dafsSessionClientVerifier=dafsSessionClientVerifier, dafsSessionNumCredentials=dafsSessionNumCredentials, dafsSessionNumRequests=dafsSessionNumRequests, dafsExportTable=dafsExportTable, dafsExportEntry=dafsExportEntry, dafsExportIndex=dafsExportIndex, dafsExportName=dafsExportName, dafsExportPath=dafsExportPath, dafsExportEnabled=dafsExportEnabled, dafsExportRwMode=dafsExportRwMode, dafsExportAccessList=dafsExportAccessList, vi=vi, viaNodeConnection=viaNodeConnection, viaNodeSystemName=viaNodeSystemName, viaCreated=viaCreated, viaConnectRequest=viaConnectRequest, viaConnectWait=viaConnectWait, viaDisconnect=viaDisconnect, viaConnectTimeOut=viaConnectTimeOut, viaConnected=viaConnected, viaCurrConnectPending=viaCurrConnectPending, viaCurrConnectWaitPending=viaCurrConnectWaitPending, viaCurrConnected=viaCurrConnected, viaCurrError=viaCurrError, viaTotalError=viaTotalError, viaInMsgs=viaInMsgs, viaInRdma=viaInRdma, viaInBytes=viaInBytes, viaInRDMAReadBytes=viaInRDMAReadBytes, viaInRDMAWriteBytes=viaInRDMAWriteBytes, viaOutMsgs=viaOutMsgs, viaOutRdma=viaOutRdma, viaOutBytes=viaOutBytes, viaOutRDMAReadBytes=viaOutRDMAReadBytes, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, viaConnTable=viaConnTable, viaConnEntry=viaConnEntry, viaConnState=viaConnState, viaConnVINumber=viaConnVINumber, viaConnRemoteNetAddress=viaConnRemoteNetAddress, viaConnLocalNetAddress=viaConnLocalNetAddress, viaConnRemotePortNumber=viaConnRemotePortNumber, viaConnLocalPortNumber=viaConnLocalPortNumber, viaConnLocalDescriminator=viaConnLocalDescriminator, viaConnRemoteDescriminator=viaConnRemoteDescriminator, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, viaConnSentMessages=viaConnSentMessages, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages, viaConnRcvdMessages=viaConnRcvdMessages, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, viaErrors=viaErrors, viaErrPostDesc=viaErrPostDesc, viaErrConnLost=viaErrConnLost, viaErrRecvQEmpty=viaErrRecvQEmpty, viaErrRdmawProt=viaErrRdmawProt, viaErrRdmarProt=viaErrRdmarProt)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', viaErrCompProt=viaErrCompProt, viaErrorThreshold=viaErrorThreshold, viaNicAttributes=viaNicAttributes, viaNicTable=viaNicTable, viaNicEntry=viaNicEntry, viaNicIndex=viaNicIndex, viaName=viaName, viaHardwareVersion=viaHardwareVersion, viaProviderVersion=viaProviderVersion, viaNicAddress=viaNicAddress, viaThreadSafe=viaThreadSafe, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, viaMaxRegisterBytes=viaMaxRegisterBytes, viaMaxRegisterRegions=viaMaxRegisterRegions, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, viaMaxVI=viaMaxVI, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, viaMaxCQ=viaMaxCQ, viaMaxCQEntries=viaMaxCQEntries, viaMaxTransferSize=viaMaxTransferSize, viaNativeMTU=viaNativeMTU, viaMaxPTags=viaMaxPTags, viaCurrRegisterBytes=viaCurrRegisterBytes, viaCurrRegisterRegions=viaCurrRegisterRegions, viaCurrVI=viaCurrVI, viaCurrCQ=viaCurrCQ, viaCurrPTags=viaCurrPTags, viaConnectionListenPort=viaConnectionListenPort, backup=backup, dump=dump, dmpActives=dmpActives, dmpAttempts=dmpAttempts, dmpSuccesses=dmpSuccesses, dmpFailures=dmpFailures, dmpTable=dmpTable, dmpSubtreeEntry=dmpSubtreeEntry, dmpIndex=dmpIndex, dmpStPath=dmpStPath, dmpStAttempts=dmpStAttempts, dmpStSuccesses=dmpStSuccesses, dmpStFailures=dmpStFailures, restore=restore, rstActives=rstActives, rstAttempts=rstAttempts, rstSuccesses=rstSuccesses, rstFailures=rstFailures, vfiler=vfiler, vfilerIsLicensed=vfilerIsLicensed, vfFilers=vfFilers, vfTable=vfTable, vfEntry=vfEntry, vfIndex=vfIndex, vfName=vfName, vfUuid=vfUuid, vfIpAddresses=vfIpAddresses, vfStoragePaths=vfStoragePaths, vfIpSpace=vfIpSpace, vfAllowedProtocols=vfAllowedProtocols, vfDisallowedProtocols=vfDisallowedProtocols, vfState=vfState, vfIpTable=vfIpTable, vfIpEntry=vfIpEntry, vfFiIndex=vfFiIndex, vfIpIndex=vfIpIndex, vfIpAddr=vfIpAddr, vfSpTable=vfSpTable, vfSpEntry=vfSpEntry, vfFsIndex=vfFsIndex, vfSpIndex=vfSpIndex, vfSpName=vfSpName, vfProTable=vfProTable, vfProEntry=vfProEntry, vfFpIndex=vfFpIndex, vfProIndex=vfProIndex, vfProName=vfProName, vfProStatus=vfProStatus, blocks=blocks, fcpIsLicensed=fcpIsLicensed, iscsiIsLicensed=iscsiIsLicensed, fcpLowReadBytes=fcpLowReadBytes, fcpHighReadBytes=fcpHighReadBytes, fcpLowWriteBytes=fcpLowWriteBytes, fcpHighWriteBytes=fcpHighWriteBytes, iscsiLowReadBytes=iscsiLowReadBytes, iscsiHighReadBytes=iscsiHighReadBytes, iscsiLowWriteBytes=iscsiLowWriteBytes, iscsiHighWriteBytes=iscsiHighWriteBytes, iscsiHighOps=iscsiHighOps, iscsiLowOps=iscsiLowOps, fcpHighOps=fcpHighOps, fcpLowOps=fcpLowOps, lun=lun, lunCount=lunCount, lunTable=lunTable, lunEntry=lunEntry, lunIndex=lunIndex, lunName=lunName, lunComment=lunComment, lunSizeLow=lunSizeLow, lunSizeHigh=lunSizeHigh, lunMapped=lunMapped, lunSerialNumber=lunSerialNumber, lunQtreeName=lunQtreeName, lunHighOps=lunHighOps, lunLowOps=lunLowOps, lunHighReadBytes=lunHighReadBytes, lunLowReadBytes=lunLowReadBytes, lunHighWriteBytes=lunHighWriteBytes, lunLowWriteBytes=lunLowWriteBytes, lunHighErrors=lunHighErrors, lunLowErrors=lunLowErrors, lunOnline=lunOnline, lunSnapStatus=lunSnapStatus, lunShareStatus=lunShareStatus, lunSpaceReserved=lunSpaceReserved, lunStatsResetTime=lunStatsResetTime, lunHighReadOps=lunHighReadOps, lunLowReadOps=lunLowReadOps, lunHighWriteOps=lunHighWriteOps, lunLowWriteOps=lunLowWriteOps, lunHighOtherOps=lunHighOtherOps, lunLowOtherOps=lunLowOtherOps, lunMapTable=lunMapTable, lunMapEntry=lunMapEntry, lunMapLUNIndex=lunMapLUNIndex, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', lunMapLUNName=lunMapLUNName, lunMapInitiatorGroupName=lunMapInitiatorGroupName, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, initiator=initiator, initiatorGroupTable=initiatorGroupTable, initiatorGroupEntry=initiatorGroupEntry, initiatorGroupIndex=initiatorGroupIndex, initiatorGroupName=initiatorGroupName, initiatorGroupType=initiatorGroupType, initiatorGroupOS=initiatorGroupOS, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, initiatorGroupUsePartner=initiatorGroupUsePartner, initiatorGroupUseALUA=initiatorGroupUseALUA, initiatorGroupMemberTable=initiatorGroupMemberTable, initiatorGroupMemberEntry=initiatorGroupMemberEntry, initiatorGroupMemberIndex=initiatorGroupMemberIndex, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, initiatorName=initiatorName, initiatorListTable=initiatorListTable, initiatorListMemberEntry=initiatorListMemberEntry, initiatorListMemberEntryIndex=initiatorListMemberEntryIndex, targetAdapterName=targetAdapterName, connectedInitiatorNodeName=connectedInitiatorNodeName, connectedInitiatorPortName=connectedInitiatorPortName, connectedInitiatorType=connectedInitiatorType, connectedInitiatorIsid=connectedInitiatorIsid, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, fcpTarget=fcpTarget, fcpTargetTable=fcpTargetTable, fcpTargetTableEntry=fcpTargetTableEntry, fcpTargetTableIndex=fcpTargetTableIndex, fcpTargetName=fcpTargetName, fcpTargetNN=fcpTargetNN, fcpTargetPN=fcpTargetPN, fcpTargetSpeed=fcpTargetSpeed, fcpTargetStatus=fcpTargetStatus, fcpTargetStandby=fcpTargetStandby, fcpTargetTopology=fcpTargetTopology, fcpTargetType=fcpTargetType, fcpCfMode=fcpCfMode, pset=pset, psetTable=psetTable, psetEntry=psetEntry, psetIndex=psetIndex, psetName=psetName, psetType=psetType, psetMemberTable=psetMemberTable, psetMemberEntry=psetMemberEntry, psetMemberIndex=psetMemberIndex, psetMemberNameIndex=psetMemberNameIndex, psetPortName=psetPortName, nfscache=nfscache, nfsCacheOptions=nfsCacheOptions, nfsCacheIsEnabled=nfsCacheIsEnabled, nfsCacheIsLicensed=nfsCacheIsLicensed, nfsCacheStats=nfsCacheStats, nfsCacheBytesFromClients=nfsCacheBytesFromClients, nfsCacheBytesToClients=nfsCacheBytesToClients, nfsCacheBytesFromServers=nfsCacheBytesFromServers, nfsCacheBytesToServers=nfsCacheBytesToServers, nfsCacheTotalRequests=nfsCacheTotalRequests, nfsCacheHitRequests=nfsCacheHitRequests, nfsCacheMissRequests=nfsCacheMissRequests, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, nfsCacheEjectRequests=nfsCacheEjectRequests, nfsCacheVerifyRequests=nfsCacheVerifyRequests, nfsCacheRpcRecords=nfsCacheRpcRecords, nfsCacheBWSavings=nfsCacheBWSavings, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, nfsCacheHighHitRequests=nfsCacheHighHitRequests, nfsCacheLowHitRequests=nfsCacheLowHitRequests, nfsCacheHighMissRequests=nfsCacheHighMissRequests, nfsCacheLowMissRequests=nfsCacheLowMissRequests, snapvault=snapvault, svOn=svOn, svSystemActiveDstNumber=svSystemActiveDstNumber, svSystemActiveSrcNumber=svSystemActiveSrcNumber, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, svPrimaryIsLicensed=svPrimaryIsLicensed, svSecondaryIsLicensed=svSecondaryIsLicensed, snapvaultStatusTable=snapvaultStatusTable, snapvaultStatusEntry=snapvaultStatusEntry, svIndex=svIndex, svSrc=svSrc, svDst=svDst, svStatus=svStatus, svState=svState, svLag=svLag, svTotalSuccesses=svTotalSuccesses, svTotalRestartSuccesses=svTotalRestartSuccesses, svTotalFailures=svTotalFailures, svTotalDeferments=svTotalDeferments, svTotalTransMBs=svTotalTransMBs, svTotalTransTimeSeconds=svTotalTransTimeSeconds, svThrottleValue=svThrottleValue, svSrcSnapshotTime=svSrcSnapshotTime, svBaseSnapshot=svBaseSnapshot, svLastTransType=svLastTransType, svLastTransMBs=svLastTransMBs, svLastTransTimeSeconds=svLastTransTimeSeconds, snapvaultHostTable=snapvaultHostTable, snapvaultHostEntry=snapvaultHostEntry, svHostIndex=svHostIndex, svHostName=svHostName, svHostType=svHostType, svHostTotalSuccesses=svHostTotalSuccesses, svHostTotalFailures=svHostTotalFailures, svHostTotalDeferments=svHostTotalDeferments, snapvaultSchedTable=snapvaultSchedTable, snapvaultSchedEntry=snapvaultSchedEntry, svSchedIndex=svSchedIndex, svSchedVolume=svSchedVolume)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', svSchedSnapshot=svSchedSnapshot, svSchedStatus=svSchedStatus, svSchedType=svSchedType, svSchedSchedule=svSchedSchedule, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, ftpd=ftpd, ftpdOn=ftpdOn, ftpdCurrentConns=ftpdCurrentConns, ftpdMaxConns=ftpdMaxConns, ftpdTotalConns=ftpdTotalConns, storage=storage, enclosure=enclosure, enclNumber=enclNumber, enclTable=enclTable, enclEntry=enclEntry, enclIndex=enclIndex, enclContactState=enclContactState, enclChannelShelfAddr=enclChannelShelfAddr, enclProductLogicalID=enclProductLogicalID, enclProductID=enclProductID, enclProductVendor=enclProductVendor, enclProductModel=enclProductModel, enclProductRevision=enclProductRevision, enclProductSerialNo=enclProductSerialNo, enclNumberDiskBays=enclNumberDiskBays, enclDisksPresent=enclDisksPresent, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, enclPowerSuppliesPresent=enclPowerSuppliesPresent, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, enclPowerSuppliesFailed=enclPowerSuppliesFailed, enclFansMaximum=enclFansMaximum, enclFansPresent=enclFansPresent, enclFansFailed=enclFansFailed, enclTempSensorsMaximum=enclTempSensorsMaximum, enclTempSensorsPresent=enclTempSensorsPresent, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, enclElectronicsMaximum=enclElectronicsMaximum, enclElectronicsPresent=enclElectronicsPresent, enclElectronicsSerialNos=enclElectronicsSerialNos, enclElectronicsFailed=enclElectronicsFailed, enclVoltSensorsMaximum=enclVoltSensorsMaximum, enclVoltSensorsPresent=enclVoltSensorsPresent, enclVoltSensorsOverVoltFail=enclVoltSensorsOverVoltFail, enclVoltSensorsOverVoltWarn=enclVoltSensorsOverVoltWarn, enclVoltSensorsUnderVoltFail=enclVoltSensorsUnderVoltFail, enclVoltSensorsUnderVoltWarn=enclVoltSensorsUnderVoltWarn, enclVoltSensorsCurrentVolt=enclVoltSensorsCurrentVolt, enclVoltSensorsOverVoltFailThr=enclVoltSensorsOverVoltFailThr, enclVoltSensorsOverVoltWarnThr=enclVoltSensorsOverVoltWarnThr, enclVoltSensorsUnderVoltFailThr=enclVoltSensorsUnderVoltFailThr, enclVoltSensorsUnderVoltWarnThr=enclVoltSensorsUnderVoltWarnThr, enclCurSensorsMaximum=enclCurSensorsMaximum, enclCurSensorsPresent=enclCurSensorsPresent, enclCurSensorsOverCurFail=enclCurSensorsOverCurFail, enclCurSensorsOverCurWarn=enclCurSensorsOverCurWarn, enclCurSensorsCurrentCur=enclCurSensorsCurrentCur, enclCurSensorsOverCurFailThr=enclCurSensorsOverCurFailThr, enclCurSensorsOverCurWarnThr=enclCurSensorsOverCurWarnThr, network=network, netInterfaces=netInterfaces, netifNumber=netifNumber, netifTable=netifTable, netifEntry=netifEntry, netifIndex=netifIndex, netifDescr=netifDescr, ifHighInOctets=ifHighInOctets, ifLowInOctets=ifLowInOctets, ifHighInUcastPkts=ifHighInUcastPkts, ifLowInUcastPkts=ifLowInUcastPkts, ifHighInNUcastPkts=ifHighInNUcastPkts, ifLowInNUcastPkts=ifLowInNUcastPkts, ifHighInDiscards=ifHighInDiscards, ifLowInDiscards=ifLowInDiscards, ifHighInErrors=ifHighInErrors, ifLowInErrors=ifLowInErrors, ifHighInUnknownProtos=ifHighInUnknownProtos, ifLowInUnknownProtos=ifLowInUnknownProtos, ifHighOutOctets=ifHighOutOctets, ifLowOutOctets=ifLowOutOctets, ifHighOutUcastPkts=ifHighOutUcastPkts, ifLowOutUcastPkts=ifLowOutUcastPkts, ifHighOutNUcastPkts=ifHighOutNUcastPkts, ifLowOutNUcastPkts=ifLowOutNUcastPkts, ifHighOutDiscards=ifHighOutDiscards, ifLowOutDiscards=ifLowOutDiscards, ifHighOutErrors=ifHighOutErrors, ifLowOutErrors=ifLowOutErrors, sis=sis, sisIsLicensed=sisIsLicensed, sisTable=sisTable, sisEntry=sisEntry, sisIndex=sisIndex, sisPath=sisPath, sisState=sisState, sisStatus=sisStatus, sisProgress=sisProgress, sisType=sisType, sisSchedule=sisSchedule, sisLastOpBeginTime=sisLastOpBeginTime, sisLastOpEndTime=sisLastOpEndTime, sisHighLastOpSize=sisHighLastOpSize, sisLowLastOpSize=sisLowLastOpSize, sisLastOpError=sisLastOpError, netappProducts=netappProducts, netappFiler=netappFiler, netappNetCache=netappNetCache, netappClusteredFiler=netappClusteredFiler, netappDataFabricManager=netappDataFabricManager, netappSupportConsole=netappSupportConsole)

# Notifications
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', maxDirSizeWarning=maxDirSizeWarning, vfStarted=vfStarted, powerSupplyWarning=powerSupplyWarning, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, dhmNoticePFAEvent=dhmNoticePFAEvent, autosupportConfigurationError=autosupportConfigurationError, eccMasked=eccMasked, lunCloneSplitStart=lunCloneSplitStart, overTempRepaired=overTempRepaired, nvramBatteryLow=nvramBatteryLow, volumeRemoteRestored=volumeRemoteRestored, upsLinePowerOff=upsLinePowerOff, waflDirNearlyFull=waflDirNearlyFull, upsLinePowerRetored=upsLinePowerRetored, chassisPowerOk=chassisPowerOk, ftpdError=ftpdError, volumeOfflineTooBig=volumeOfflineTooBig, overTempShutdown=overTempShutdown, vscanDisConnection=vscanDisConnection, chassisPowerSuppliesOk=chassisPowerSuppliesOk, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, nvramBatteryDischarged=nvramBatteryDischarged, plexOffline=plexOffline, clusterNodeTakenOver=clusterNodeTakenOver, powerSupplyFailed=powerSupplyFailed, volumeRepaired=volumeRepaired, diskRepaired=diskRepaired, globalStatusNonCritical=globalStatusNonCritical, appCritical=appCritical, vfStopped=vfStopped, cifsStatsExhaustMemCtrlBlk=cifsStatsExhaustMemCtrlBlk, chassisCPUFanSlow=chassisCPUFanSlow, chassisPowerSupplyOk=chassisPowerSupplyOk, chassisFanStopped=chassisFanStopped, chassisTemperatureShutdown=chassisTemperatureShutdown, lunCloneSplitComplete=lunCloneSplitComplete, appWarning=appWarning, upsBatteryWarning=upsBatteryWarning, vscanConnection=vscanConnection, chassisSensorFailed=chassisSensorFailed, emergencyTrap=emergencyTrap, warningTrap=warningTrap, chassisPSUsMismatch=chassisPSUsMismatch, volumeOffline=volumeOffline, snapAutoDelete=snapAutoDelete, vscanVirusDetectedError=vscanVirusDetectedError, volumeDegradedDirty=volumeDegradedDirty, shelfRepaired=shelfRepaired, lunSnapRestoreStatus=lunSnapRestoreStatus, chassisFanRemoved=chassisFanRemoved, fanFailureShutdown=fanFailureShutdown, appEmergency=appEmergency, chassisFanFailxMinShutdown=chassisFanFailxMinShutdown, cpuTooBusy=cpuTooBusy, vscanConfigurationChange=vscanConfigurationChange, flexCloneSplitStart=flexCloneSplitStart, cpuOk=cpuOk, ftpdMaxConnNotice=ftpdMaxConnNotice, clusterNodeRepaired=clusterNodeRepaired, waflDirFull=waflDirFull, writeVerificationFailed=writeVerificationFailed, quotaNormal=quotaNormal, snapmirrorSyncOk=snapmirrorSyncOk, volumeRemoteUnreachable=volumeRemoteUnreachable, chassisCPUFanOk=chassisCPUFanOk, appInfo=appInfo, alfFilewrap=alfFilewrap, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, alertTrap=alertTrap, notificationTrap=notificationTrap, shelfFault=shelfFault, vifAllLinksFailed=vifAllLinksFailed, userDefined=userDefined, globalStatusCritical=globalStatusCritical, appError=appError, chassisPowerSupplyOff=chassisPowerSupplyOff, chassisPSUwrongInput=chassisPSUwrongInput, diskFailedShutdown=diskFailedShutdown, overTemp=overTemp, volumeStateChanged=volumeStateChanged, autosupportSendError=autosupportSendError, upsShuttingDown=upsShuttingDown, eccSummary=eccSummary, vscanServerUpgrade=vscanServerUpgrade, fanFailed=fanFailed, scsitgtThrottleNotice=scsitgtThrottleNotice, softQuotaNormal=softQuotaNormal, appTrap=appTrap, clusterNodeFailed=clusterNodeFailed, dbgTrap=dbgTrap, domainControllerDisconnect=domainControllerDisconnect, volumeRestrictedRootConflict=volumeRestrictedRootConflict, volumeNearlyFull=volumeNearlyFull, volumeRestricted=volumeRestricted, informationalTrap=informationalTrap, volumeRemoteOk=volumeRemoteOk, volumeFull=volumeFull, dhmNoticeDegradedIO=dhmNoticeDegradedIO, chassisFanOk=chassisFanOk, diskMultipathOneSwitch=diskMultipathOneSwitch, diskFailed=diskFailed, hbaOfflineInformation=hbaOfflineInformation, maxDirSizeAlert=maxDirSizeAlert, rmcCardNeedsReplacement=rmcCardNeedsReplacement, shelfSESElectronicsInfo=shelfSESElectronicsInfo, autosupportSent=autosupportSent, chassisTemperatureOk=chassisTemperatureOk, driveDisableErr=driveDisableErr, volumeError=volumeError, alfFileSaved=alfFileSaved, globalStatusOk=globalStatusOk, fanRepaired=fanRepaired, chassisTemperatureUnknown=chassisTemperatureUnknown, criticalTrap=criticalTrap, chassisPSRemovedxMinShutdown=chassisPSRemovedxMinShutdown, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, alfFileNearlyFull=alfFileNearlyFull, chassisPowerDegraded=chassisPowerDegraded, chassisCPUFanStopped=chassisCPUFanStopped, plexFailed=plexFailed, flexCloneSplitComplete=flexCloneSplitComplete, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, vifPrimaryLinkFailed=vifPrimaryLinkFailed, rmcCardMissingCables=rmcCardMissingCables, shelfSESElectronicsFailed=shelfSESElectronicsFailed, shelfIFModuleWarning=shelfIFModuleWarning)
mibBuilder.exportSymbols('NETWORK-APPLIANCE-MIB', appNotice=appNotice, appAlert=appAlert, errorTrap=errorTrap, fanWarning=fanWarning, volumeAutogrow=volumeAutogrow, dcPasswdChangeFailed=dcPasswdChangeFailed, shelfIFModuleInfo=shelfIFModuleInfo, chassisPowerSupplyFailed=chassisPowerSupplyFailed, diskMultipathNoTakeover=diskMultipathNoTakeover, volumeCloneCreate=volumeCloneCreate, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, lunCloneCreate=lunCloneCreate, shelfIFModuleFailed=shelfIFModuleFailed, quotaExceeded=quotaExceeded, chassisTemperatureWarning=chassisTemperatureWarning, powerSupplyRepaired=powerSupplyRepaired, diskMultipathWarning=diskMultipathWarning, chassisFanDegraded=chassisFanDegraded, upsBatteryCritical=upsBatteryCritical, softQuotaExceeded=softQuotaExceeded, globalStatusNonRecoverable=globalStatusNonRecoverable, chassisFanWarning=chassisFanWarning, powerSupplyFanFailxMinShutdown=powerSupplyFanFailxMinShutdown, volumeInconsistentUmount=volumeInconsistentUmount, powerSupplyFailureShutdown=powerSupplyFailureShutdown, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, snapmirrorSyncFailed=snapmirrorSyncFailed, volumesStillFull=volumesStillFull, volumeOnline=volumeOnline, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo)

