"""
Copyright (C) 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# smidump -f python mmblade.mib | ./libsmi2pysnmp >BLBLADE-MIB.py
# -----------------------------------------------------------------
# PySNMP SMI module. Autogenerated from smidump -f python BLADE-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Mon Aug  3 17:59:24 2009,
# Python version (2, 5, 1, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'ModuleIdentity', 'MibIdentifier', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises')
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString', 'TextualConvention')

# Types

class EntryStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(3,2,1,4,)
    namedValues = namedval.NamedValues(('valid', 1), ('createRequest', 2), ('underCreation', 3), ('invalid', 4), )
    pass

class InetAddressIPv6(TextualConvention, OctetString):
    displayHint = '2x:2x:2x:2x:2x:2x:2x:2x'
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(16,16)
    fixedLength = 16
    pass


# Objects

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
netfinitySupportProcessorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51))
bladeCenterSnmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 3, 51, 2)).setRevisions(('2009-07-31 01:45','2008-10-31 00:01',))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1))
planarTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1))
mmTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("Management module temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
ambientTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5))
frontPanelTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 1), OctetString()).setMaxAccess('readonly').setDescription("The front panel temperature in degrees centigrade(C).\nThis is surrounding temperature where the system is installed.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
frontPanel2Temp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 2), OctetString()).setMaxAccess('readonly').setDescription("The front panel 2 temperature in degrees centigrade(C).\nThis is surrounding temperature where the system is installed.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nNOTE: This MIB object is for BladeCenter HT only")
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2))
planarVolt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1))
plus5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 1), OctetString()).setMaxAccess('readonly').setDescription("+5 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
plus3Pt3Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("+3.3 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
plus12Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription("+12 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
minus5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription("-5 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
plus2Pt5Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("+2.5 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
plus1Pt8Volt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("+1.8 Volt power supply voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
blowers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3))
blower1speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 1), OctetString()).setMaxAccess('readonly').setDescription("Blower 1 speed expressed in percent(%) of maximum RPM.\nAn octet string expressed as 'ddd% of maximum' where:\nd is a decimal digit or blank space for a leading zero.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower2speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 2), OctetString()).setMaxAccess('readonly').setDescription("Blower 2 speed expressed in percent(%) of maximum RPM.\nAn octet string expressed as 'ddd% of maximum' where:\nd is a decimal digit or blank space for a leading zero.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower3speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 3), OctetString()).setMaxAccess('readonly').setDescription("Blower 3 speed expressed in percent(%) of maximum RPM.\nAn octet string expressed as 'ddd% of maximum' where:\nd is a decimal digit or blank space for a leading zero.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower4speed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 4), OctetString()).setMaxAccess('readonly').setDescription("Blower 4 speed expressed in percent(%) of maximum RPM.\nAn octet string expressed as 'ddd% of maximum' where:\nd is a decimal digit or blank space for a leading zero.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower1State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for blower 1.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower2State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for blower 2.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower3State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for blower 3.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower4State = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for blower 4.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower1speedRPM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 20), OctetString()).setMaxAccess('readonly').setDescription("Blower 1 speed expressed in RPM.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for AMM installed in BladeCenter H only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower2speedRPM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 21), OctetString()).setMaxAccess('readonly').setDescription("Blower 2 speed expressed in RPM.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for AMM installed in BladeCenter H only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower3speedRPM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 22), OctetString()).setMaxAccess('readonly').setDescription("Blower 3 speed expressed in RPM.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for AMM installed in BladeCenter HT only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower4speedRPM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 23), OctetString()).setMaxAccess('readonly').setDescription("Blower 4 speed expressed in RPM.\nIf the blower is determined not to be running or\nthe blower speed cannot be determined, the string will\nindicate 'Offline'.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\n\nNOTE: This MIB object is for AMM installed in BladeCenter HT only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
blower1ControllerState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 30), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('operational', 0), ('flashing', 1), ('notPresent', 2), ('unknown', 255), ('communicationError', 3), ))).setMaxAccess('readonly').setDescription('The health state for the controller for blower 1.\n\nNOTE: This MIB object is for AMM installed in BladeCenter H only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower2ControllerState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 31), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('operational', 0), ('flashing', 1), ('notPresent', 2), ('unknown', 255), ('communicationError', 3), ))).setMaxAccess('readonly').setDescription('The health state for the controller for blower 2.\n\nNOTE: This MIB object is for AMM installed in BladeCenter H only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower3ControllerState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 32), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('operational', 0), ('flashing', 1), ('notPresent', 2), ('unknown', 255), ('communicationError', 3), ))).setMaxAccess('readonly').setDescription('The health state for the controller for blower 3.\n\nNOTE: This MIB object is for AMM installed in BladeCenter HT only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower4ControllerState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 33), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('operational', 0), ('flashing', 1), ('notPresent', 2), ('unknown', 255), ('communicationError', 3), ))).setMaxAccess('readonly').setDescription('The health state for the controller for blower 4.\n\nNOTE: This MIB object is for AMM installed in BladeCenter HT only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower1ExhaustTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 40), OctetString()).setMaxAccess('readonly').setDescription('The exhaust temperature in degrees Celsius for blower 1.\n\nNOTE: This MIB object is for BCS only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower2ExhaustTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 41), OctetString()).setMaxAccess('readonly').setDescription('The exhaust temperature in degrees Celsius for blower 2.\n\nNOTE: This MIB object is for BCS only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower3ExhaustTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 42), OctetString()).setMaxAccess('readonly').setDescription('The exhaust temperature in degrees Celsius for blower 3.\n\nNOTE: This MIB object is for BCS only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower4ExhaustTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 43), OctetString()).setMaxAccess('readonly').setDescription('The exhaust temperature in degrees Celsius for blower 4.\n\nNOTE: This MIB object is for BCS only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
powerModuleHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4))
powerModuleHealthTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1)).setDescription('Table of power module health information.  Contains\nthe power health information for each power module.')
powerModuleHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'powerModuleIndex')).setDescription('Power Module health entry')
powerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power module sequence index.')
powerModuleExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the power module specified exists or not.')
powerModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,4,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('notAvailable', 3), ('critical', 4), ))).setMaxAccess('readonly').setDescription('The health state for the power module.')
powerModuleDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('The details for this power module.')
spStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5))
mmBistAndChassisStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2))
bistSdram = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST DRAM test result.')
bistRs485Port1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST RS 485 legacy test result.')
bistRs485Port2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST RS 485 local bus test result.')
bistNvram = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST NVRAM test result.')
bistRtc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Real Time Clock test result.')
bistLocalI2CBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Local I2C bus test result.')
bistPrimaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Primary Main Application Firmware test result.')
bistSecondaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Secondary Main Application test result.')
bistBootRomFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Boot Firmware test result.')
bistEthernetPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST external ethernet port test result.')
bistEthernetPort2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST internal ethernet port test result.')
bistInternalPCIBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST PCI bus test result.')
bistExternalI2CDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST external I2C devices test result.')
bistUSBController = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST USB controller test result.')
bistVideoCompressorBoard = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Video Compressor Board test result.')
bistRemoteVideo = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Remote Video test result.')
bistPrimaryBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST primary mid-plane bus test result.')
bistInternalEthernetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST internal external switch test result.')
bistVideoCapture = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST video capture test result.')
bistUSBKeyboardMouseEmulation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST USB keyboard and mouse test result.')
bistUSBMassStorageEmulation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST mass storage emulation test result.')
bistUSBKeyboardMouseFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST USB keyboard and mouse firmware test result.')
bistUSBMassStorageFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST USB keyboard mouse firmware test result.')
bistPrimaryCore = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST primary core test result.')
bistSecondaryCore = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST secondary core test result.')
bistInternalIOExpander = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 27), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST internal IO expander test result.')
bistRemoteControlFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 28), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Remote Control firmware test result.')
bistPhysicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 29), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Physical Network Link test result.')
bistLogicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 30), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('MM BIST Logical Network Link test result.')
bistBladesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 33), OctetString()).setMaxAccess('readonly').setDescription("The blades that are installed on the chassis.\nThe blades are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blades supported.  If a blade is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if blades\nare installed in bays 1, 5, and 13, and 14 blades are supported,\nthe string would look like '10001000000010'.")
bistBladesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 49), OctetString()).setMaxAccess('readonly').setDescription("The blades that are communicating on the chassis.\nThe blades are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blades supported.  If a blade installed in a\nbay is communicating, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif blades are communicating in bays 1, 5, and 13, and 14 blades\nare supported, the string would look like '10001000000010'.")
bistBlowersInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 65), OctetString()).setMaxAccess('readonly').setDescription("The blowers that are installed on the chassis.\nThe blowers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blowers supported.  If a blower is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if a blower\nis installed in bay 1, and 2 blowers are supported, the string\nwould look like '10'.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
bistBlowersFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 73), OctetString()).setMaxAccess('readonly').setDescription("The blowers installed on the chassis that are functional.\nThe blowers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blowers supported.  If a blower is installed and\nfunctional in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif a blower is installed and functional only in bay 1, and 2 blowers\nare supported, the string would look like '10'.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
bistMediaTrayInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 74), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a media tray is installed on the chassis.')
bistMediaTrayCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 75), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a media tray is communicating.')
bistOtherMMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 76), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a redundant MM is installed.')
bistOtherMMCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 77), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a redundant MM is communicating.')
bistPowerModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 81), OctetString()).setMaxAccess('readonly').setDescription("The power modules that are installed on the chassis.\nThe power modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of power modules supported.  If a power module is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif power modules are installed in bays 1 and 3, and 4 power modules\nare supported, the string would look like '1010'.")
bistPowerModulesFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 89), OctetString()).setMaxAccess('readonly').setDescription("The power modules that are functional on the chassis.\nThe power modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of power modules supported.  If a power module is\ninstalled and functioning in a bay, a 1 is present in the string\nin the position representing the bay ID as read from left to right.\nFor example, if power modules are installed and functioning in bays\n1 and 3, and 4 power modules are supported, the string would look\nlike '1010'.")
bistSwitchModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 97), OctetString()).setMaxAccess('readonly').setDescription("The switch modules that are installed on the chassis.\nThe switch modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of switch modules supported.  If a switch module is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif switch modules are installed in bays 1 and 3, and 4 switch modules\nare supported, the string would look like '1011' for BladeCenter and \nBladeCenter T and '1011000000' for BladeCenter H and BladeCenter HT.")
bistSwitchModulesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 113), OctetString()).setMaxAccess('readonly').setDescription("The switch modules that are communicating on the chassis.\nThe switch modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of switch modules supported.  If a switch module is\ninstalled and functioning in a bay, a 1 is present in the string\nin the position representing the bay ID as read from left to right.\nFor example, if switch modules are installed and functioning in bays\n1 and 3, and 4 switch modules are supported, the string would look\nlike for BladeCenter and BladeCenter T and '1011000000' for \nBladeCenter H and BladeCenter HT.")
bistLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 200), OctetString()).setMaxAccess('readonly').setDescription('It is the time when the primary MM updated the last BIST results.')
rmmBistAndChassisStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3))
rbistRs485Port1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST RS 485 legacy test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistRs485Port2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST RS 485 local bus test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistRtc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Real Time Clock test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistLocalI2CBus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Local I2C bus test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistPrimaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Primary Main Application Firmware test result. \nThe time of the last update can be obtained by querying rbistUpdateTime object.')
rbistSecondaryMainAppFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Secondary Main Application test result. \nThe time of the last update can be obtained by querying rbistUpdateTime object.')
rbistBootRomFlashImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Boot Firmware test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistEthernetPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST external ethernet port test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistExternalI2CDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST external I2C devices test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistInternalEthernetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST internal external switch test result. \nThe time of the last update can be obtained by querying rbistUpdateTime object.')
rbistVideoCapture = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST video capture test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistUSBKeyboardMouseEmulation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST USB keyboard and mouse test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistUSBMassStorageEmulation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST mass storage emulation test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistUSBKeyboardMouseFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST USB keyboard and mouse firmware test result \ncollected when the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistUSBMassStorageFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST USB keyboard mouse firmware test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistPrimaryCore = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST primary core test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistSecondaryCore = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST secondary core test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistInternalIOExpander = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 27), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST internal IO expander test result. The time of the last update \ncan be obtained by querying rbistUpdateTime object.')
rbistRemoteControlFirmware = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 28), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Remote Control firmware test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistPhysicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 29), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Physical Network Link test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistLogicalNetworkLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 30), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('testSucceeded', 0), ('testFailed', 1), ))).setMaxAccess('readonly').setDescription('Standby MM BIST Logical Network Link test result collected \nwhen the standby MM was primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistBladesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 33), OctetString()).setMaxAccess('readonly').setDescription("The blades that were installed on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe blades are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blades supported.  If a blade is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if blades\nare installed in bays 1, 5, and 13, and 14 blades are supported,\nthe string would look like '10001000000010'. ")
rbistBladesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 49), OctetString()).setMaxAccess('readonly').setDescription("The blades that were communicating on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe blades are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blades supported.  If a blade installed in a\nbay is communicating, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif blades are communicating in bays 1, 5, and 13, and 14 blades\nare supported, the string would look like '10001000000010'.")
rbistBlowersInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 65), OctetString()).setMaxAccess('readonly').setDescription("The blowers that were installed on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe blowers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blowers supported.  If a blower is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if a blower\nis installed in bay 1, and 2 blowers are supported, the string\nwould look like '10'.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
rbistBlowersFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 73), OctetString()).setMaxAccess('readonly').setDescription("The blowers installed on the chassis that were functional when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe blowers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blowers supported.  If a blower is installed and\nfunctional in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif a blower is installed and functional only in bay 1, and 2 blowers\nare supported, the string would look like '10'.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
rbistMediaTrayInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 74), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a media tray was installed on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistMediaTrayCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 75), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a media tray was communicating when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistOtherMMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 76), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether a standby MM was installed when the \nstandby MM was once primary.The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.')
rbistOtherMMCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 77), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription("Indicates whether a standby MM was communicating when the \nstandby MM was once primary. The time of the last update can be\ngotten from the object 'rbistUpdateTimePrimary'.")
rbistPowerModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 81), OctetString()).setMaxAccess('readonly').setDescription("The power modules that were installed on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe power modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of power modules supported.  If a power module was\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif power modules were installed in bays 1 and 3, and 4 power modules\nwere supported, the string would look like '1010'.")
rbistPowerModulesFunctional = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 89), OctetString()).setMaxAccess('readonly').setDescription("The power modules that were functional on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe power modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of power modules supported.  If a power module was\ninstalled and functioning in a bay, a 1 is present in the string\nin the position representing the bay ID as read from left to right.\nFor example, if power modules were installed and functioning in bays\n1 and 3, and 4 power modules were supported, the string would look\nlike '1010'.")
rbistSwitchModulesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 97), OctetString()).setMaxAccess('readonly').setDescription("The switch modules that were installed on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe switch modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of switch modules supported.  If a switch module was\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif switch modules were installed in bays 1 and 3, and 4 switch modules\nwere supported, the string would look like '1011' for BladeCenter and \nBladeCenter T and '1011000000' for BladeCenter H and BladeCenter HT.")
rbistSwitchModulesCommunicating = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 113), OctetString()).setMaxAccess('readonly').setDescription("The switch modules that are communicating on the chassis when the \nstandby MM was once primary. The time of the last update \ncan be obtained by querying rbistUpdateTimePrimary object.\nThe switch modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of switch modules supported.  If a switch module was\ninstalled and functioning in a bay, a 1 is present in the string\nin the position representing the bay ID as read from left to right.\nFor example, if switch modules were installed and functioning in bays\n1 and 3, and 4 switch modules were supported, the string would look\nlike for BladeCenter and BladeCenter T and '1011000000' for \nBladeCenter H and BladeCenter HT.")
rbistUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 200), OctetString()).setMaxAccess('readonly').setDescription('It is the time when the standby MM updated the last BIST results.')
rbistLastUpdatePrimary = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 201), OctetString()).setMaxAccess('readonly').setDescription('It is the time when the standby MM updated the last BIST results \nwhen it was still primary.')
fanPack = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6))
fanPackTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1)).setDescription('Table of fan pack information.  Contains\nthe information for each fan pack.\n\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.')
fanPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'fanPackIndex')).setDescription('Fan Pack entry')
fanPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Fan Pack sequence index.')
fanPackExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the fan pack specified exists or not.')
fanPackState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for the fan pack.\n0 = unknown, 1 = good, 2 = warning, 3 = bad.')
fanPackFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,)).subtype(namedValues=namedval.NamedValues(('unknown', 255), ))).setMaxAccess('readonly').setDescription('The number of fans in the fan pack.')
fanPackAverageSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription("The average speed of all fans in the fan pack expressed in percent(%) \nof maximum RPM. If the fan pack is determined not to be running or\nthe fan pack speed cannot be determined, the string will\nindicate 'Offline'.  The string 'Not Readable!' indicates that the \ngiven monitor is not supported on this system.")
fanPackAverageSpeedRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("The average speed of all fans in the fan pack expressed in RPM.  \nIf the fan pack is determined not to be running or the fan pack speed \ncannot be determined, the string will indicate 'Offline'. The string \n'Not Readable!' indicates that the given monitor is not supported on \nthis system.")
fanPackControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('operational', 0), ('flashing', 1), ('notPresent', 2), ('unknown', 255), ('communicationError', 3), ))).setMaxAccess('readonly').setDescription('The health state for the controller for the fan pack.\n0 = operational, 1 = flashing in progress, 2 = not present, 3 = communication error, \n255 = unknown')
systemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7))
systemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,0,2,255,)).subtype(namedValues=namedval.NamedValues(('critical', 0), ('nonCritical', 2), ('normal', 255), ('systemLevel', 4), ))).setMaxAccess('readonly').setDescription("Indicates status of system health for the\nsystem in which the MM resides.\nValue of 'critical' indicates a severe error has occurred\nand the system may not be functioning. A value of\n'nonCritical' indicates that a error has occurred but\nthe system is currently functioning properly.  A value of\n'systemLevel' indicates that a condition has occurred\nthat may change the state of the system in the future but currently\nthe system is working properly. A value of\n'normal' indicates that the system is operating normally.")
systemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2)).setDescription('Table of System Health summary. Contains more detailed\ninformation about the reasons for the overall system\nhealth status.\n\nNOTE: This MIB object is for BladeCenter only.')
systemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'systemHealthSummaryIndex')).setDescription('System Health Summary entry\n\nNOTE: This MIB object is for BladeCenter only.')
systemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('System health summary index.\n\nNOTE: This MIB object is for BladeCenter only.')
systemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('System health summary severity.\n\nNOTE: This MIB object is for BladeCenter only.')
systemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('System health summary description.\n\nNOTE: This MIB object is for BladeCenter only.')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8))
frontPanelLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1))
systemErrorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the front panel system error LED is on or off.\n\nNOTE: This MIB object is for BladeCenter only.')
informationLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readwrite').setDescription('Indicates whether the front panel system information LED\nis on or off.  For Write access, the LED can be turned off \nonly.\n\nNOTE: This MIB object is for BladeCenter only.')
temperatureLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the front panel temperature LED is on or off.\n\nNOTE: This MIB object is for BladeCenter only.')
identityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ('notAvailable', 3), ))).setMaxAccess('readwrite').setDescription('Indicates whether the front panel identity LED is on or off.\n\nNOTE: This MIB object is for BladeCenter only.')
bladeLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2))
bladeLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1)).setDescription('Table of blade status information.')
bladeLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeStatusIndex')).setDescription('Blade system status entry')
ledBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade LED table index.')
ledBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
ledBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
ledBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
ledBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,1,0,6,11,2,7,3,5,8,9,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('insufficientPower', 10), ('powerDenied', 11), ('warning', 2), ('critical', 3), ('kernelMode', 4), ('discovering', 5), ('commError', 6), ('noPower', 7), ('flashing', 8), ('initFailure', 9), ))).setMaxAccess('readonly').setDescription("The system health state for the blade.\n\nUnknown: Blade is in an undefined state.\nGood: Blade is operating normally.\nWarning: One or more outstanding warnings exist for this blade.\nCritical: One or more outstanding critical events for this blade.\nKernel Mode: Blade is in kernel mode.\nDiscovering: The AMM is currently in the process of discovering this blade.\nCommunications Error: The AMM failed to communicate with this blade.\nNo Power: No power to the blade's domain.\nFlashing: Flashing in progress.\nInitialization Failure: Blade failed to initialized.\nInsufficient Power: Not enough power is left in the blade's domain to power the blade.\nPower Denied: Power was denied to the blade.")
ledBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
ledBladeSystemError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade system error LED is on or off.')
ledBladeInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readwrite').setDescription('Indicates whether the blade information LED is on or off.  \nFor Write access, the LED can be turned off only.')
ledBladeKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade KVM LED is on, off, or blinking.')
ledBladeMediaTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade media tray LED is on, off, or blinking.')
ledBladeIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ))).setMaxAccess('readwrite').setDescription('Indicates whether the blade identify LED is on, off, or blinking.')
bladeLEDsDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2)).setDescription('Table of blade LEDs detailed information.')
bladeLEDsDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'ledIndex')).setDescription('Blade LEDs Details entry')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The LED index number.  \nFor consistent results, view as a table and not as individual entries.')
ledBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The bay number of the main server blade that the LED is grouped into.\nFor consistent results, view as a table and not as individual entries.')
ledBladeComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Type of the component/subcomponent grouping for this LED.\nFor consistent results, view as a table and not as individual entries.')
ledBladeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Text label for a LED.  \nFor consistent results, view as a table and not as individual entries.')
ledBladeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ))).setMaxAccess('readonly').setDescription('Text description which denotes color or on/off/blink state for a LED.\nFor consistent results, view as a table and not as individual entries.')
ledBladeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Location of this LED.  \nFor consistent results, view as a table and not as individual entries.')
telcoPanelLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3))
criticalLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the BladeCenter T Panel CRT (Critical) LED is on or off.\n\nNOTE: This MIB object is for BladeCenter T only.')
majorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the BladeCenter T Panel MJR (Major) LED is on or off.\n\nNOTE: This MIB object is for BladeCenter T only.')
minorLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the BladeCenter T Panel MNR (Minor) LED is on or off.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoIdentityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ('notAvailable', 3), ))).setMaxAccess('readwrite').setDescription('Indicates whether the BladeCenter T Panel identity LED is on or off.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoColorSel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('amber', 0), ('red', 1), ))).setMaxAccess('readwrite').setDescription('Indicates whether the BladeCenter T Critical and Major LEDs are displayed in amber or red color.\n\nNOTE: This MIB object is for BladeCenter T only.')
criticalityAssertionMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Indicates whether the BladeCenter T Criticality Assertion Mode is enabled or disabled.\n\nNOTE: This MIB object is for BladeCenter T only.')
smLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4))
smLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1)).setDescription('Table of switch module LEDs information.')
smLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledSMIndex')).setDescription('Switch module LEDs information entry')
ledSMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Switch module LEDs table index.  ')
ledSMLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess('readonly').setDescription("A bitmap of LEDs information on the selected switch module.  The \nbitmap is a string containing a list of 1's and 0's.  Every 4 bytes\nare used to represent a led state. The first 64 bytes represent the \nstatus of the external LEDs while the last 64 bytes represent the \nstatus of the internal port connections from the switch module to \nblades.  Each nibble of data is presented in the bitmap format (0000) \nand is encoded as followed\n   - 0000: LED is not present\n   - 0001: LED is off\n   - 0010: LED is on \n   \nNOTE: The data is read from left to right, starting out with blade \nserver 1 and so on.")
blowerLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5))
blowerLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1)).setDescription('Table of blower LEDs information.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledBlowerIndex')).setDescription('Blower LEDs information entry')
ledBlowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Blower LEDs table index.  ')
ledBlowerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('blower1', 1), ('blower2', 2), ('blower3', 3), ('blower4', 4), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
ledBlowerExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blower specified exists or not.')
ledBlowerError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('notAvailable', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the blower error LED is on, off, or not available.')
fanPackLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6))
fanPackLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1)).setDescription('Table of fan pack LEDs information.\n\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.')
fanPackLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledFanPackIndex')).setDescription('Fan Pack LEDs information entry')
ledFanPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Fan Pack LEDs table index.  ')
ledFanPackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('fanPack1', 1), ('fanPack2', 2), ('fanPack3', 3), ('fanPack4', 4), ))).setMaxAccess('readonly').setDescription('The numeric fan pack ID.')
ledFanPackExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Indicates whether the fan pack specified exists or not.')
ledFanPackError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Indicates whether the fan pack error LED is on or off.')
mtStatusLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7))
mtStatusLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1)).setDescription('Table of Media Tray Status LEDs information.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mtStatusLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledMediaTrayIndex')).setDescription('Media Tray Status LEDs information entry.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMediaTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Media Tray Status LEDs table index.  \n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMediaTrayId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('topmediatray', 1), ('botmediatray', 2), ))).setMaxAccess('readonly').setDescription('The numeric Media Tray ID.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMediaTrayExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Media Tray exists or not.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMediaTrayFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Media Tray Fault LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
tapStatusLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8))
tapExists = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Alarm Panel exists or not.\n\nNOTE: This MIB object is for BladeCenter HT only.')
tapFRRLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Alarm Panel Safe To Remove LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
tapFaultLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Alarm Panel Fault LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncStatusLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9))
ncStatusLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1)).setDescription('Table of Network Clock Status LEDs information.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncStatusLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledNetworkClockIndex')).setDescription('Network Clock Status LEDs information entry.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledNetworkClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Network Clock Status LEDs table index.  \n\nNOTE: This MIB object is for BladeCenter HT only.')
ledNetworkClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('networkclock1', 1), ('networkclock2', 2), ))).setMaxAccess('readonly').setDescription('The numeric Network Clock ID.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledNetworkClockExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Network Clock exists or not.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledNetworkClockFRR = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Network Clock Safe To Remove LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledNetworkClockFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Network Clock Fault LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mxStatusLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10))
mxStatusLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1)).setDescription('Table of Multiplexer Expansion Module Status LEDs information.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mxStatusLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledMuxIndex')).setDescription('Multiplexer Expansion Module Status LEDs information entry.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module Status LEDs table index.  \n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMuxId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('mux1', 1), ('mux2', 2), ))).setMaxAccess('readonly').setDescription('The numeric Multiplexer Expansion Module ID.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMuxExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Multiplexer Expansion Module exists or not.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMuxFRR = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Multiplexer Expansion Module Safe To Remove LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ledMuxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the Multiplexer Expansion Module Fault LED is on or off.\n\nNOTE: This MIB object is for BladeCenter HT only.')
storageLEDs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11))
storageLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1)).setDescription('Table of storage module LEDs information.')
storageLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ledStorageIndex')).setDescription('Storage Module LEDs information entry')
ledStorageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Storage Module LEDs table index.')
ledStorageId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('storage1', 1), ('storage2', 2), ))).setMaxAccess('readonly').setDescription('The numeric storage module ID.')
ledStorageExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the storage module specified exists or not.')
ledStorageError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('blinking', 2), ))).setMaxAccess('readonly').setDescription('Indicates the status of the storage module error LED.')
telcoSystemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9))
telcoSystemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,3,2,255,4,5,1,)).subtype(namedValues=namedval.NamedValues(('minor', 1), ('minor-power', 2), ('normal', 255), ('major', 3), ('major-power', 4), ('critical', 5), ('critical-power', 6), ))).setMaxAccess('readonly').setDescription("Indicates status of system health for the system in which the \nMM resides. Value of 'critical' indicates a non-recoverable \nservice affecting condition has occurred that requires an \nimmediate action. A value of 'major' indicates a critical \nservice affecting condition has occurred that requires an urgent\naction. A value of 'minor' indicates a non-service affecting \ncondition has occurred. Corrective action should be taken in \norder to prevent a more serious fault. A value of 'normal' \nindicates that the system is operating normally. Severity level\nwith '-power' indicates the failure relates to the power resource.\n\nNOTE: This MIB object is for BladeCenter T only.")
telcoSystemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2)).setDescription("Table of System Health summary. Contains more detailed\ninformation about the reasons for the overall system\nhealth status.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: This table may contain one entry if no alarms are in progress.  That one entry,\n     if present, contains no alarms but a message of 'Good' in the severity object.")
telcoSystemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'telcoSystemHealthSummaryIndex')).setDescription('BladeCenter T System Health Summary entry.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoSystemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('BladeCenter T System Health Summary Index.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoSystemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("BladeCenter T System Health Summary Severity. The values \nand meanings are as follows:\n   0x06 Critical-Power\n   0x05 Critical \n   0x04 Major-Power\n   0x03 Major \n   0x02 Minor-Power\n   0x01 Minor \n   0xFF Normal\n   \nNOTE: This MIB object is for BladeCenter T only.\nNOTE: If no alarms are in progress, this object contains 'Good'.")
telcoSystemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription("BladeCenter T System Health Summary Description.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: If no alarms are in progress, this object contains 'No alarm events'.")
telcoSystemHealthSummaryEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('BladeCenter T System Health Summary Event Name.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoSystemHealthSummaryEventKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription("BladeCenter T System Health Summary Event Key ID. An octet string \nexpressed as 'mmm:ggg:iii:aaa:sss' where: \n   m : Module ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   g : Gen ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   i : GenInfo ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s)\n   a : Alarm ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s) \n   s : Alarm severity value of decimal digits(1-255) or\n       blank space(s) for leading zero(s) \n\n        \nNOTE: This MIB object is for BladeCenter T only.\nNOTE: If no alarms are in progress, this object contains 'No alarm events'.")
telcoSystemHealthSummaryAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('unacknowledged', 0), ('acknowledged', 1), ))).setMaxAccess('readonly').setDescription('BladeCenter T System Health Summary Acknowledge. Indicates whether the\nalarm event is acknowledged or unacknowledged.\n\nNOTE: This MIB object is for BladeCenter T only.')
telcoSystemHealthSummaryAssertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("BladeCenter T System Health Summary Assert Time.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: If no alarms are in progress, this object contains 'No alarm events'.")
fuelGauge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10))
fuelGaugeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1))
fuelGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1)).setDescription('Table of Fuel Gauge information.')
fuelGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'fuelGaugeIndex')).setDescription('Fuel Gauge entry')
fuelGaugeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Fuel Gauge Table Index.')
fuelGaugePowerDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('powerDomain1', 1), ('powerDomain2', 2), ))).setMaxAccess('readonly').setDescription('Fuel Gauge Table Power Domain Number.')
fuelGaugeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Fuel Gauge Table Status for the power domain.  \nThe response will start out with a numeric value (0 = unknown, \n1 = good, 2 = warning, and 3: bad), followed by a text message.')
fuelGaugeFirstPowerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Fuel Gauge Table First Power Module capacity in Watts in the power domain.  \n\nNOTE: First power module in power domain 1 and 2 is in bay 1 \nand 3 respectively.')
fuelGaugeSecondPowerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Fuel Gauge Table Second Power Module capacity in Watts in the power domain.\n\nNOTE: Second power module in power domain 1 and 2 is in bay 2 \nand 4 respectively.')
fuelGaugePowerManagementPolicySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,0,3,1,255,4,)).subtype(namedValues=namedval.NamedValues(('redundantWithoutPerformanceImpact', 0), ('redundantWithPerformanceImpact', 1), ('nonRedundant', 2), ('notApplicable', 255), ('redundantACPowerSource', 3), ('acPowerSourceWithBladeThrottlingAllowed', 4), ))).setMaxAccess('readonly').setDescription('Fuel Gauge Table for the Power Management Policy Setting for each power domain.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nA new powerPolicyTable has been added which provides more detailed \ninformation regarding a domains power policy information. This table \nalso has the capability to SET the power policy for a given domain.\n\nIn addition, note that the first three enumerated choices above are \nreferred to with updated nomenclature, as follows:\n\n  redundantWithoutPerformanceImpact(0) equals Redundant Power Modules \n  redundantWithPerformanceImpact(1) equals Power Modules with Blade\n                                           Throttling Allowed  \n  nonRedundant(2) equals Basic Power Management')
fuelGaugeTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('This field displays the total available power for each power domain based on \ninstalled power modules and the current Power Management Policy Setting.                 \nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
fuelGaugeAllocatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('This field displays the power that has been reserved in each power domain.                   \nNOTE: 1) Power is always reserved in domain 1 for two management modules and \ntwo I/O modules.  2) Power is reserved for I/O modules installed in bay 3 and \n4  (Powered on or standby). 3) Power is reserved for each installed Blade. \nBlades in a standby state (not powered on) will reserve a certain amount power.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
fuelGaugeRemainingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('This field displays the remaining power available in each domain. \nRemaining Power = Total Power minus Power In Use \nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
fuelGaugePowerInUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('This field displays the total power being used in each power domain.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
powerDomain1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2))
powerDomain1Table = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1)).setDescription('Table of Power Domain 1.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.')
powerDomain1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'pd1Index')).setDescription('Fuel Gauge entry')
pd1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Index.')
pd1BayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Table Bay Number.\nThe following Bay Number IDs are used in the BladeCenter:\n notApplicable(1), \n notApplicable(2), \n blowerBay1(3), \n blowerBay2(4), \n managementModuleBay1(5), \n managementModuleBay2(6),\n switchModuleBay1(7), \n switchModuleBay2(8),\n switchModuleBay3(9),\n switchModuleBay4(10),\n serverBladeBay1(11),  \n serverBladeBay2(12),  \n serverBladeBay3(13),  \n serverBladeBay4(14),  \n serverBladeBay5(15),  \n serverBladeBay6(16),\n notApplicable(17)\nThe following Bay Number IDs are used in the BladeCenter H:\n notApplicable(1), \n notApplicable(2), \n fanPackBay1(3), \n fanPackBay2(4), \n fanPackBay3(5), \n fanPackBay4(6), \n managementModuleBay1(7), \n managementModuleBay2(8),\n ioModuleBay1(9), \n ioModuleBay2(10),\n ioModuleBay3(11),\n ioModuleBay4(12),\n ioModuleBay7(13),\n ioModuleBay8(14),\n ioModuleBay9(15),\n ioModuleBay10(16),\n serverBladeBay1(17),  \n serverBladeBay2(18),  \n serverBladeBay3(19),  \n serverBladeBay4(20),  \n serverBladeBay5(21),  \n serverBladeBay6(22),\n serverBladeBay7(23),\n notApplicable(24)\nThe following Bay Number IDs are used in the BladeCenter T:\n notApplicable(1), \n notApplicable(2), \n blowerBay1(3), \n blowerBay2(4), \n blowerBay3(5) (if Power Domain 2 is not available),\n blowerBay4(6) (if Power Domain 2 is not available),\n managementModuleBay1(7), \n managementModuleBay2(8),\n switchModuleBay1(9), \n switchModuleBay2(10),\n switchModuleBay3(11),\n switchModuleBay4(12),\n serverBladeBay1(13),  \n serverBladeBay2(14),  \n serverBladeBay3(15),  \n serverBladeBay4(16),  \n notApplicable(17)\nThe following Bay Number IDs are used in the BladeCenter HT:\n notApplicable(1),       \n mediatrayBay1(2),       \n mediatrayBay2(3),       \n fanPackBay1(4),         \n fanPackBay2(5),         \n fanPackBay3(6),         \n fanPackBay4(7),         \n blowerBay1(8),          \n blowerBay2(9),          \n blowerBay3(10),         \n blowerBay4(11),         \n networkclockBay1(12),   \n networkclockBay2(13),   \n midplaneelectroBay1(14),\n midplaneelectroBay2(15),\n notApplicable(16),      \n managementModuleBay1(17),\n managementModuleBay2(18),\n ioModuleBay1(19),       \n ioModuleBay2(20),       \n ioModuleBay3(21),       \n ioModuleBay4(22),       \n serverBladeBay1(23),    \n serverBladeBay2(24),    \n serverBladeBay3(25),    \n serverBladeBay4(26),    \n serverBladeBay5(27),    \n serverBladeBay6(28),    \n notApplicable(29)                   \nThe following Bay Number IDs are used in the BladeCenter S:\n notApplicable(1),       \n notApplicable(2),       \n fanPackBay1(3),       \n fanPackBay2(4),         \n fanPackBay3(5),         \n fanPackBay4(6),         \n blowerBay1(7),         \n blowerBay2(8),          \n blowerBay3(9),          \n blowerBay4(10),         \n storageModuleBay1(11),         \n storageModuleBay2(12),   \n managementModuleBay(13),   \n ioModuleBay1(14),\n ioModuleBay2(15),\n ioModuleBay3(16),      \n ioModuleBay4(17),\n serverBladeBay1(18),\n serverBladeBay2(19),       \n serverBladeBay3(20),       \n serverBladeBay4(21),       \n serverBladeBay5(22),       \n serverBladeBay6(23),    \n notApplicable(24)')
pd1BladePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Blade Primary Slot can be useful \nwhen a server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.')
pd1ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,255,2,)).subtype(namedValues=namedval.NamedValues(('insufficientPower', 0), ('moduleIsThrottling', 1), ('moduleNotThrottling', 2), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module Throttle Status.')
pd1ModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module Name.')
pd1ModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,0,255,2,)).subtype(namedValues=namedval.NamedValues(('standby', 0), ('on', 1), ('notPresent', 2), ('notApplicable', 255), ('off', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module State.')
pd1ModuleAllocatedPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Table Allocated Power Current indicates the current power  \nallocation for the module in Watts. When a 1200W or 1400W power module is \ninstalled in the domain the power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the current power allocation for the module is equally \ndivided among the slots.')
pd1ModuleAllocatedPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Table Allocated Power Max indicates the maximum power \nallocation for the module in Watts.  It is indicative of the maximum \namount of power the module will consume in the domain when it is \nfully populated with memory chips, expansion cards, etc. \nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the maximum power allocation for the module is equally \ndivided among the slots.')
pd1ModuleAllocatedPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Table Allocated Power Min indicates the minumum power \nallocation for the module in Watts.  It is indicative of the minumum \npower consumption of the component in the domain based on its \nmaximum throttle limit. When a 1200W or 1400W power module is installed \nin the domain the power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the minimum power allocation for the module is equally \ndivided among the slots.')
pd1ModuleCPUDutyCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("Power Domain 1 Table Module CPUs Duty Cycles applies to blade \nservers only.  It displays the duty cycle for each CPU on the blade \nas a percentage.  Note that some blades do not report the CPU \nduty cycles.  In this case, 'notApplicable' will be displayed.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: The CPU duty cycles are reported only on a primary slot when \na server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.\nThe CPU duty cycles are reported on slot 3 while 'notApplicable' \nis displayed for slot 4.")
pd1ModuleThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module Throttle indicates whether the \nserver blade may be allowed to throttle or not.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
pd1ModulePowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,2,3,4,0,255,1,5,)).subtype(namedValues=namedval.NamedValues(('noAbility', 0), ('staticPowerManagement', 1), ('fixedPowerManagement', 2), ('notApplicable', 255), ('dynamicPowerManagement', 3), ('dynamicPowerMeasurement1', 4), ('dynamicPowerMeasurement2', 5), ('dynamicPowerMeasurementWithPowerCapping', 6), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module Power Capabilities.\n\nstaticPowerManagement: the module with the static worst \n    case power values.\nfixedPowermanagement: the module with the static power values but\n    ability to throttle.\ndynamicPowerManagement: the module with power meter capability,\n    measurement enabled, but capping disabled.\ndynamicPowerMeasurement1: the module with power meter capability,\n    measurement enabled, phase 1 only\ndynamicPowerMeasurement2: the module with power meter capability,\n    measurement enabled, phase 2 or higher\ndynamicPowerMeasurementWithPowerCapping: the module with power\n    meter capability, both measurement and capping enabled, \n    phase 2 or higher')
pd1ModuleMeasuredOrStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,255,0,)).subtype(namedValues=namedval.NamedValues(('static', 0), ('measured', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 1 Table Module Measured Or Static.')
powerDomain1PowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3))
pd1PowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period for power domain 1 power trending information \ntable view.\n\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Power Domain.')
pd1PowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10)).setDescription('Table of Power Domain 1 Power Trending Information.')
pd1PowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'pd1PowerTrendingSampleIndex')).setDescription('Power Domain 1 Power Trending Sample entry.')
pd1PowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power Domain 1 Power Trending Sample Table Index.')
pd1PowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Power Trending Sample Table Timestamp.')
pd1PowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 1 Power Trending Table Average Power.')
powerDomain2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3))
powerDomain2Table = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1)).setDescription('Table of Power Domain 2.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.')
powerDomain2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'pd2Index')).setDescription('Fuel Gauge entry')
pd2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Index.')
pd2BayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Table Bay Number.\nThe following Bay Number IDs are used in the BladeCenter:\n serverBladeBay7(1),  \n serverBladeBay8(2),  \n serverBladeBay9(3),  \n serverBladeBay10(4), \n serverBladeBay11(5), \n serverBladeBay12(6),\n serverBladeBay13(7), \n serverBladeBay14(8),\n notApplicable(9)\nThe following Bay Number IDs are used in the BladeCenter H:\n notApplicable(1), \n notApplicable(2), \n fanPackBay1(3), \n fanPackBay2(4), \n fanPackBay3(5), \n fanPackBay4(6), \n managementModuleBay1(7), \n managementModuleBay2(8),\n ioModuleBay1(9), \n ioModuleBay2(10),\n ioModuleBay3(11),\n ioModuleBay4(12),\n ioModuleBay7(13),\n ioModuleBay8(14),\n ioModuleBay9(15),\n ioModuleBay10(16),\n serverBladeBay1(17),  \n serverBladeBay2(18),  \n serverBladeBay3(19),  \n serverBladeBay4(20),  \n serverBladeBay5(21),  \n serverBladeBay6(22),\n serverBladeBay7(23),\n notApplicable(24)\nThe following Bay Number IDs are used in the BladeCenter T:\n blowerBay3(1), \n blowerBay4(2), \n serverBladeBay5(3),  \n serverBladeBay6(4),  \n serverBladeBay7(5),  \n serverBladeBay8(6),  \n notApplicable(7),  \n notApplicable(8),  \n notApplicable(9)\nThe following Bay Number IDs are used in the BladeCenter HT:\n fanPackBay1(1),    \n fanPackBay2(2),    \n fanPackBay3(3),    \n fanPackBay4(4),    \n blowerBay1(5),     \n blowerBay2(6),     \n blowerBay3(7),     \n blowerBay4(8),     \n ioModuleBay7(9),   \n ioModuleBay8(10),  \n ioModuleBay9(11),  \n ioModuleBay10(12), \n serverBladeBay7(13),\n serverBladeBay8(14),\n serverBladeBay9(15),\n serverBladeBay10(16),\n serverBladeBay11(17),\n serverBladeBay12(18),\n notApplicable(19)')
pd2BladePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Blade Primary Slot can be useful \nwhen a server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.')
pd2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,255,2,)).subtype(namedValues=namedval.NamedValues(('insufficientPower', 0), ('moduleIsThrottling', 1), ('moduleNotThrottling', 2), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Module throttle status.')
pd2ModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Table Module Name.')
pd2ModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,0,255,2,)).subtype(namedValues=namedval.NamedValues(('standby', 0), ('on', 1), ('notPresent', 2), ('notApplicable', 255), ('off', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Power State.')
pd2ModuleAllocatedPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Table Allocated Power Current indicates the current power \nallocation for the module. When a 1200W or 1400W power module is \ninstalled in the domain the power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the current power allocation for the module is equally \ndivided among the slots.')
pd2ModuleAllocatedPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Table Allocated Power Max indicates the maximum power \nallocation for the module in Watts.  It is indicative of the maximum \namount of power the module will consume in the domain when it is \nfully populated with memory chips, expansion cards, etc.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. In addition \nthe power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the maximum power allocation for the module is equally \ndivided among the slots.')
pd2ModuleAllocatedPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Table Allocated Power Min indicates the minumum power \nallocation for the module in Watts.  It is indicative of the minumum \npower consumption of the component in the domain based on its \nmaximum throttle limit. When a 1200W or 1400W power module is \ninstalled in the domain the power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: When a server blade spans multiple slots (e.g. double wide or \ntriple wide), the minimum power allocation for the module is equally \ndivided among the slots.')
pd2ModuleCPUDutyCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("Power Domain 2 Table Module CPUs Duty Cycles applies to blade \nservers only.  It displays the duty cycle for each CPU on the blade \nas a percentage.  Note that some blades do not report the CPU \nduty cycles.  In this case, 'notApplicable' will be displayed.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: The CPU duty cycles are reported only on a primary slot when \na server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.  \nThe CPU duty cycles are reported on slot 3 while 'notApplicable' \nis displayed for slot 4. ")
pd2ModuleThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Module Throttle indicates whether the \nserver blade may be allowed to throttle or not. \nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.')
pd2ModulePowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,2,3,4,0,255,1,5,)).subtype(namedValues=namedval.NamedValues(('noAbility', 0), ('staticPowerManagement', 1), ('fixedPowerManagement', 2), ('notApplicable', 255), ('dynamicPowerManagement', 3), ('dynamicPowerMeasurement1', 4), ('dynamicPowerMeasurement2', 5), ('dynamicPowerMeasurementWithPowerCapping', 6), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Module Power Capabilities.\n\nstaticPowerManagement: the module with the static worst \n    case power values.\nfixedPowermanagement: the module with the static power values but\n    ability to throttle.\ndynamicPowerManagement: the module with power meter capability,\n    measurement enabled, but capping disabled.\ndynamicPowerMeasurement1: the module with power meter capability,\n    measurement enabled, phase 1 only\ndynamicPowerMeasurement2: the module with power meter capability,\n    measurement enabled, phase 2 or higher\ndynamicPowerMeasurementWithPowerCapping: the module with power\n    meter capability, both measurement and capping enabled, \n    phase 2 or higher')
pd2ModuleMeasuredOrStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,255,0,)).subtype(namedValues=namedval.NamedValues(('static', 0), ('measured', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Power Domain 2 Table Module Measured Or Static.')
powerDomain2PowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3))
pd2PowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period for power domain 2 power trending information \ntable view.\n\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Power Domain.')
pd2PowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10)).setDescription('Table of Power Domain 2 Power Trending Sample Information.')
pd2PowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'pd2PowerTrendingSampleIndex')).setDescription('Power Domain 2 Power Trending Sample entry.')
pd2PowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power Domain 2 Power Trending Sample Table Index.')
pd2PowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Power Trending Sample Table Timestamp.')
pd2PowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Power Domain 2 Power Trending Sample Table Average Power.')
moduleInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4))
bladeDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1))
bladeDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1)).setDescription('Table of Blade Module Details.')
bladeDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeDetailsIndex')).setDescription('Blade Module Details entry.')
bladeDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade Module Details Table Index.')
bladeDetailsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('Blade Module Details Table Blade Id.')
bladeDetailsMaxPowerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription("Blade Module Details Table Maximum Power Configuration.\nAllow the user to set the maximum power that can be used by the blade. This\nfunction is also known as power capping.\n\nIf the value of maximum power config is zero, it means the blade doesn't \nsupport the power capping feature")
bladeDetailsEffectiveClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription("Blade Module Details Table Effective CPU Clock Rate applies to DPM  \nblades only.  It displays processor's effective clock rate based  \non sample interval.  Note that some blades do not effective  \nclock rate.  In this case, 'notApplicable' will be displayed.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: The effective clock rate are reported only on a primary slot when \na server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.\nThe effective clock rate are reported on slot 3 while 'notApplicable' \nis displayed for slot 4.")
bladeDetailsMaximumClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription("Blade Module Details Table Maximum CPU Clock Rate applies to DPM  \nblades only.  It displays processor's maximum clock rate based  \non sample interval.  Note that some blades do not maximum  \nclock rate.  In this case, 'notApplicable' will be displayed.\nWhen a 1200W or 1400W power module is installed in the domain \nthe power management policy will not be applicable. \nIn addition the power consumption in this domain will not be monitored.\n\nNOTE: The maximum clock rate are reported only on a primary slot when \na server blade spans multiple slots (e.g. double wide or \ntriple wide).  For example if the blade is double wide and \nis installed in slot 3 and 4.  3 is primary slot while 4 is not.\nThe maximum clock rate are reported on slot 3 while 'notApplicable' \nis displayed for slot 4.")
bladeDetailsPowerSaverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription('When enabled, the static low power saver mode allows the blade to selectively\nalter its operating voltage and frequency to reduce power consumption.\nThis feature is not available on all blade types.  Please refer to the blade documentation for details.\nIf a blade does not support the static low power saver mode, this object will return notApplicable (255).\n\nUnder certain rare circumstances, the enabling of the static low power saver mode\nmay not complete successfully due to interactions with other\nblade functions, such as BIOS. Therefore, it is highly recommended that \nthe user perform a GET of this object after performing a SET, in order\nto verify the completion of the intended operation.')
bladeDetailsDynamicPowerSaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription('When enabled, Dynamic Power Saver allows the voltage and frequency of the CPUs on the blade \nto be controlled based on how busy the CPU is.  This feature is not available on all blade types.  \nPlease refer to the blade documentation for details.  If a blade does not support the dynamic power \nsaver, this object will return notApplicable (255).\n\nUnder certain rare circumstances, the enabling of the dynamic power saver may not complete \nsuccessfully due to interactions with other blade functions, such as BIOS. Therefore, it is \nhighly recommended that the user perform a GET of this object after performing a SET, in order\nto verify the completion of the intended operation.')
bladeDetailsDynamicPowerFavorPerformanceOverPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription('When enabled, Dynamic Power Favor Performance Over Power supports a max performance mode that pushes the \nsystem past its nominal CPU frequency when CPU and memory utilization implies it would help and the \nsystem allows it.  Dynamic Power Performance Over Power can be active on the blade only after Dynamic \nPower Saver is enabled.  This feature is not available on all blade types.  Please refer to the \nblade documentation for details.  If a blade does not support the dynamic power saver, this object \nwill return notApplicable (255).\n\nUnder certain rare circumstances, the enabling of the dynamic power favor performance over power\nmay not complete successfully due to interactions with other blade functions, such as BIOS. \nTherefore, it is highly recommended that the user perform a GET of this object after performing a SET, \nin order to verify the completion of the intended operation.')
bladePowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3))
bladePowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period for blade module power trending information table view.\n\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Blade Module.')
bladePowerTrendingBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readwrite').setDescription('Blade Module Power Trending Blade Id.\n\nNOTE: The Blade Id should be configured before displaying the \nbladePowerTrendingTable.')
bladePowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10)).setDescription('Table of Blade Module Power Trending Information.')
bladePowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'bladePowerTrendingSampleIndex')).setDescription('Blade Module Power Trending Sample entry.')
bladePowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table Index.')
bladePowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table Blade Id.')
bladePowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table  Timestamp.')
bladePowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table Maximum Power.')
bladePowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table Minimum Power.')
bladePowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade Module Power Trending Sample Table Average Power.')
switchDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2))
switchPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3))
switchPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period for switch module power trending information table view.\n\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Switch Module.')
switchPowerTrendingSwitchId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readwrite').setDescription('Switch Module Power Trending Switch Id.\n\nNOTE: The Switch Id should be configured before displaying the \nswitchPowerTrendingTable.')
switchPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10)).setDescription('Table of Switch Module Power Trending Information.')
switchPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'switchPowerTrendingSampleIndex')).setDescription('Switch Module Power Trending Sample entry.')
switchPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table Index.')
switchPowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table Switch Id.')
switchPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table  Timestamp.')
switchPowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table Maximum Power.')
switchPowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table Minimum Power.')
switchPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Switch Module Power Trending Sample Table Average Power.')
blowerDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3))
blowerPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3))
blowerPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period for blower module power trending information table view.\n\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Blower Module.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerPowerTrendingBlowerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('blower1', 1), ('blower2', 2), ('blower3', 3), ('blower4', 4), ))).setMaxAccess('readwrite').setDescription('Blower Module Power Trending Blower Id.\n\nNOTE: The Blower Id should be configured before displaying the blowerPowerTrendingTable.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10)).setDescription('Table of Blower Module Power Trending Information.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'blowerPowerTrendingSampleIndex')).setDescription('Blower Module Power Trending Sample entry.')
blowerPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Index.')
blowerPowerTrendingSampleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('blower1', 1), ('blower2', 2), ('blower3', 3), ('blower4', 4), ))).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Blower Id.')
blowerPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Timestamp.')
blowerPowerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Maximum Power.')
blowerPowerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Minimum Power.')
blowerPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blower Module Power Trending Sample Table Average Power.')
chassisInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5))
chassisConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1))
chassisTotalDCPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 1), OctetString()).setMaxAccess('readonly').setDescription('Chassis total DC power available, which displays the total DC power available \nfor the entire chassis. It is the sum of the two power domains.')
chassisTotalACPowerInUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Chassis total AC power being used, which displays the total AC power \nbeing consumed by all modules in the chassis. It also includes power \nconsumed by the blowers (chassis oooling devices) for the chassis.')
chassisTotalThermalOutput = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Chassis total thermal output, which displays the thermal output\n(load) in BTUs per hour. It is calculated based on the total AC\npower in use. (1 Watt = 3.412 BTU/hour).')
chassisTrendingSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('Chassis Power and Thermal Trending Sample Interval.\n0 means no trending. the minimum interval is 10 minutes and the maximum \nis 60 minutes, in 5 minute increments.')
chassisPowerService = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,255,1,)).subtype(namedValues=namedval.NamedValues(('volt110', 1), ('volt220', 2), ('notAvailable', 255), ))).setMaxAccess('readonly').setDescription('The chassis power service mode.\n\nNOTE: This MIB object is for BCS only.')
chassisPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3))
chassisPowerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period of power trending information.\nNOTE: This time period should be configured before displaying the\nfollowing Power Trending Information table for Chassis.')
chassisPowerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10)).setDescription('Table of Chassis Power Trending Sample Information in specified time period.')
chassisPowerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'chassisPowerTrendingSampleIndex')).setDescription('Chassis Power Trending Sample entry in specified time period.')
chassisPowerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Chassis Power Trending Sample Index in specified time period.')
chassisPowerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Chassis Power Trending Sample Timestamp in specified time period.')
chassisPowerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Chassis Power Trending Sample Average Power in specified time period.')
chassisThermalTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5))
chassisThermalTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,3,2,)).subtype(namedValues=namedval.NamedValues(('lastHour', 0), ('last6Hours', 1), ('last12Hours', 2), ('last24Hours', 3), ))).setMaxAccess('readwrite').setDescription('Specify time period of thermal trending information.\nNOTE: This time period should be configured before displaying the\nfollowing Thermal Trending Information table for Chassis.')
mt1ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10)).setDescription('Table of Media Tray 1 Thermal Trending Information.')
mt1ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'mt1ThermalTrendingIndex')).setDescription('Media Tray 1 Thermal Trending entry.')
mt1ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Media Tray 1 Thermal Trending Table Index.')
mt1ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Media Tray 1 Thermal Trending Table Sample Timestamp.')
mt1ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Media Tray 1 Thermal Trending Table Temperature.')
mt2ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15)).setDescription('Table of Media Tray 2 Thermal Trending Information.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mt2ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1)).setIndexNames((0, 'BLADE-MIB', 'mt2ThermalTrendingIndex')).setDescription('Media Tray 2 Thermal Trending entry.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mt2ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Media Tray 2 Thermal Trending Table Index.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mt2ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Media Tray 2 Thermal Trending Table Sample Timestamp.\n\nNOTE: This MIB object is for BladeCenter HT only.')
mt2ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Media Tray 2 Thermal Trending Table Temperature.\n\nNOTE: This MIB object is for BladeCenter HT only.')
blower1ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20)).setDescription('Table of Blower 1 Thermal Trending Information.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower1ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1)).setIndexNames((0, 'BLADE-MIB', 'blower1ThermalTrendingIndex')).setDescription('Blower 1 Thermal Trending entry.')
blower1ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower 1 Thermal Trending Table Index.')
blower1ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blower 1 Thermal Trending Table Sample Timestamp.')
blower1ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower 1 Thermal Trending Table Temperature.')
blower2ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30)).setDescription('Table of Blower 2 Thermal Trending Information.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower2ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1)).setIndexNames((0, 'BLADE-MIB', 'blower2ThermalTrendingIndex')).setDescription('Blower Thermal 2 Trending entry.')
blower2ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower 2 Thermal Trending Table Index.')
blower2ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blower 2 Thermal Trending Table Sample Timestamp.')
blower2ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower 2 Thermal Trending Table Temperature.')
blower3ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40)).setDescription('Table of Blower 3 Thermal Trending Information.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower3ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1)).setIndexNames((0, 'BLADE-MIB', 'blower3ThermalTrendingIndex')).setDescription('Blower 3 Thermal Trending entry.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower3ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower 3 Thermal Trending Table Index.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower3ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blower 3 Thermal Trending Table Sample Timestamp.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower3ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower 3 Thermal Trending Table Temperature.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower4ThermalTrendingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50)).setDescription('Table of Blower 4 Thermal Trending Information.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower4ThermalTrendingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1)).setIndexNames((0, 'BLADE-MIB', 'blower4ThermalTrendingIndex')).setDescription('Blower 4 Thermal Trending entry.\n\nNOTE: This MIB object is for BladeCenter T only.\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blower4ThermalTrendingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower 4 Thermal Trending Table Index.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower4ThermalTrendingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blower 4 Thermal Trending Table Sample Timestamp.\n\nNOTE: This MIB object is for BladeCenter T only.')
blower4ThermalTrendingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower 4 Thermal Trending Table Temperature.\n\nNOTE: This MIB object is for BladeCenter T only.')
powerPolicyInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6))
powerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1)).setDescription('Table of Power Policy information for all power domains. Reading this \ntable can tell you about the available power policies that can be \nconfigured for a domain and also which is currently selected. The \npowerPolicyActivate object can also be SET to select which policy \nshould be active for a given power domain.')
powerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'powerPolicyIndex')).setDescription('Power Policy Entry')
powerPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The unique idenitifier of a row in the powerPolicyTable.')
powerPolicyPowerDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('powerDomain1', 1), ('powerDomain2', 2), ))).setMaxAccess('readonly').setDescription('The power domain number which this row is associated with.')
powerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('The short name of the power policy. The following are the possible \nnames and their detailed description:\n\n Power Module Redundancy\n      Intended for a single AC power source into the chassis \n      where each Power Module is on its own dedicated circuit. \n      Total allowed power draw is limited to one less than the \n      number of Power Modules when more than one Power Module is \n      present. One Power Module can fail without affecting blade \n      operation. Multiple Power Module failures can cause \n      the chassis to power off. Note that some blades may not be \n      allowed to power on if doing so would exceed the policy power \n      limit.\n      \n Power Module Redundancy with Blade Throttling Allowed\n      Very similar to the Power Module Redundancy policy. This \n      policy allows you to draw more total power; however, capable \n      blades may be allowed to throttle down if one Power Module fails.\n      \n Basic Power Management\n      Total allowed power is higher than other policies and is limited only  \n      by the total power capacity of all the Power Modules up to the maximum \n      of chassis power rating. This is the least conservative approach, since \n      it does not provide any protection for AC power source or Power Module \n      failure. If any single power supply fails, blade and/or chassis \n      operation may be affected. \n      \n AC Power Source Redundancy\n      Intended for dual AC power sources into the chassis. Total \n      allowed power draw is limited to the capacity of two Power \n      Modules. This is the most conservative approach and is \n      recommended when all four Power Modules are installed. \n      When the chassis is correctly wired with dual AC power \n      sources, one AC power source can fail without affecting \n      blade operation. Note that some blades may not be \n      allowed to power on if doing so would exceed the policy \n      power limit.\n      \n AC Power Source Redundancy with Blade Throttling Allowed\n      Very similar to the AC Power Source Redundancy policy. This policy \n      allows you to draw more total power; however, capable blades \n      may be allowed to throttle down if one AC power source fails.')
powerPolicyPwrSupplyFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The maximum number of power supplies that can fail in a chassis \nwhile still providing redundancy.')
powerPolicyMaxPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The maximum power available (in watts), based on the number of power modules and \nthe Power Management Policy setting.')
powerPolicyEstimatedUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The estimated utilization (as a percentage) based on current power usage.')
powerPolicyActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('When read, this object provides the status of this power policy. If the \nvalue is enabled(1), it means this is the active power policy for the \nassociated domain. When set to a value of enabled(1), the power policy \nwill be made the active one for the associated domain. A set of disabled(0)\nis not allowed.\n\nThe SET may fail when the user goes from a less restrictive policy\nto a more restrictive policy, e.g. no power management to redundant power \nmodules.\n\nThis happens because the AMM might have allocated more power for components \nin the less restrictive policy. Then if a user wants to go to a more restrictive \npolicy, the power available may be lower than what was already allocated. \n\nThe SET should always succeed if a user goes from a more restrictive to \na less restrictive policy.')
frontbezel = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 12))
frontbezelExists = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 12, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the front bezel is installed or not.\n\nNOTE: This MIB object is for BladeCenter HT only.')
users = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17))
mmUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1))
currentlyLoggedInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1)).setDescription('Table of MM users currently logged in.\n\nNOTE: This MIB object is for AMM only.')
currentlyLoggedInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'currentlyLoggedInEntryIndex')).setDescription('MM users currently logged in entries.\n\nNOTE: This MIB object is for AMM only.')
currentlyLoggedInEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for MM users currently logged in.')
currentlyLoggedInEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription("Name for MM users currently logged in.  \nNOTE: 'Default SNMPv1 user' indicates an internal user used by SNMPv1 agent.")
currentlyLoggedInEntryAccMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 32))).setMaxAccess('readonly').setDescription('Access method for MM users currently logged in.')
monitorThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20))
voltageThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2))
voltageThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1)).setDescription('Table of voltage threshold entries.\n\nNOTE: This MIB object is for BladeCenter only.')
voltageThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'voltageThresholdEntryIndex')).setDescription('Voltage threshold entries.\n\nNOTE: This MIB object is for BladeCenter only.')
voltageThresholdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for voltage threshold entry.')
voltageThresholdEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription("Voltage threshold entry null terminated string that\ncontains the power supply's name, for example '+5V'.")
voltageThresholdEntryCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
voltageThresholdEntryWarningHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("Voltage threshold reading expressed in Volts(V).\nIf the voltage rises above this value, a warning\nalert/event, if enabled, will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
voltageThresholdEntryWarningResetHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("Voltage threshold reading expressed in Volts(V).\nIf the voltage rises above this value and\nif a warning alert/event had previously been\ncreated, then the alert/event will be reset.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
voltageThresholdEntryWarningLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("Voltage threshold reading expressed in Volts(V).\nIf the voltage drops below this value, a warning\nalert/event, if enabled, will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
voltageThresholdEntryWarningResetLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription("Voltage threshold reading expressed in Volts(V).\nIf the voltage drops below this value and\nif a warning alert/event had previously been\ncreated, then the alert/event will be reset.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.")
vpdInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21))
chassisVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1))
bladeCenterVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1))
bladeCenterVpdMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 1), OctetString()).setMaxAccess('readwrite').setDescription('Machine type VPD information (from System BIOS).  This field must be four \nalpha numeric characters.')
bladeCenterVpdMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 2), OctetString()).setMaxAccess('readwrite').setDescription('Machine model VPD information (from System BIOS).  This field  must be three \nalpha numeric characters.')
bladeCenterSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 3), OctetString()).setMaxAccess('readwrite').setDescription('Machine serial number VPD information (from System BIOS).  This field must be \nseven alpha numeric characters.')
bladeCenterUUID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 4), OctetString()).setMaxAccess('readwrite').setDescription('Machine UUID (Universal Unique ID information) (from System BIOS).  This field \nmust be 32 alpha numeric characters.')
bladeCenterManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis manufacturing ID.')
bladeCenterHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Machine chassis hardware revision.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeCenterFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis FRU number.')
bladeCenterManufDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis manufacture date.')
bladeCenterPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis part number.')
bladeCenterFruSerial = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis FRU serial number.')
bladeCenterManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis manufacturer ID Number.')
bladeCenterProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis product ID.')
bladeCenterSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis subsystem manufacturer.')
bladeCenterClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis Common Language Equipment Identification (CLEI).')
bladeCenterDirectSerialAttach = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Presence of the Direct Serial Attach Module.\n\nNOTE: This MIB object is for BCS only.')
bladeCenterHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Machine chassis hardware revision in string format.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
mmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2))
mmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1)).setDescription('Table of the management module hardware components.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mmHardwareVpdIndex')).setDescription('Management module hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Management module hardware VPD index.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Management module hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
mmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD manufacture date.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD subsystem manufacturer.\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD Common\nLanguage Equipment Identification (CLEI).\nFor consistent results, view as a table and not as individual entries.')
mmHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Management module hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
mmInpHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2)).setDescription('Table of the management module interposer hardware components.\nFor consistent results, view as a table and not as individual entries.\n          \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'mmInpHardwareVpdIndex')).setDescription('Management module Interposer hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n          \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only. \n      If a hardware revision is programmed in the OEM VPD area for this component,\n      then the HardwareRevisionString version of this MIB object should be used.')
mmInpHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD manufacture date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD Part number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mmInpHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
mmInpHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
mmInpHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD subsystem manufacturer.\nFor consistent results, view as a table and not as individual entries.')
mmInpHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD Common \nLanguage Equipment Identification (CLEI).\nFor consistent results, view as a table and not as individual entries.')
mmInpHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Management module Interposer hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only. \n\n      If a hardware revision is programmed in the OEM VPD area for this component,\n      then this version of this MIB object should be used.')
mmFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3))
mmMainApplVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1)).setDescription('Table of MM Firmware VPD.')
mmMainApplVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mmMainApplVpdIndex')).setDescription('MM Firmware VPD entry.')
mmMainApplVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Firmware VPD index.')
mmMainApplVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD name description.')
mmMainApplVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build identification.')
mmMainApplVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD revision number.')
mmMainApplVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD file name.')
mmMainApplVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build date.')
mmBootROMVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2)).setDescription('Table of MM Firmware VPD.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'mmBootROMVpdIndex')).setDescription('MM Firmware VPD entry.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Firmware VPD index.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD name description.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build identification.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD revision number.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD file name.\n\nNOTE: This MIB object is for MM only.')
mmBootROMVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build date.\n\nNOTE: This MIB object is for MM only.')
mmRemoteControlVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3)).setDescription('Table of MM Firmware VPD. \nNOTE: This MIB object is for MM only.')
mmRemoteControlVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'mmRemoteControlVpdIndex')).setDescription('MM Firmware VPD entry.')
mmRemoteControlVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Firmware VPD index.')
mmRemoteControlVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD name description.')
mmRemoteControlVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build identification.')
mmRemoteControlVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD revision number.')
mmRemoteControlVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD file name.')
mmRemoteControlVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build date.')
mmPS2toUSBConvVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4)).setDescription('Table of MM Firmware VPD. \nNOTE: This MIB object is for MM only.')
mmPS2toUSBConvVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1)).setIndexNames((0, 'BLADE-MIB', 'mmPS2toUSBConvVpdIndex')).setDescription('MM Firmware VPD entry.')
mmPS2toUSBConvVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Firmware VPD index.')
mmPS2toUSBConvVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD name description.')
mmPS2toUSBConvVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build identification.')
mmPS2toUSBConvVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD revision number.')
mmPS2toUSBConvVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD file name.')
mmPS2toUSBConvVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build date.')
mmToUSBIntfVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5)).setDescription('Table of MM Firmware VPD. \nNOTE: This MIB object is for MM only.')
mmToUSBIntfVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1)).setIndexNames((0, 'BLADE-MIB', 'mmToUSBIntfVpdIndex')).setDescription('MM Firmware VPD entry.')
mmToUSBIntfVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Firmware VPD index.')
mmToUSBIntfVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD name description.')
mmToUSBIntfVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build identification.')
mmToUSBIntfVpdRevisonNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD revision number.')
mmToUSBIntfVpdFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD file name.')
mmToUSBIntfVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Firmware VPD build date.')
bladeHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4))
bladeHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1)).setDescription('Table of VPD information for the blade hardware components.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeHardwareVpdIndex')).setDescription('Blade hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade hardware VPD index.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeHardwareVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD machine type.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD machine model.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD Manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladeHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('Blade hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeDaughterVpdCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('networkExpansion', 1), ('storageExpansion', 2), ('pciExpansion', 3), ('genericExpansion', 4), ))).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD type.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 21), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 22), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 23), Integer32()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeDaughterVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 24), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD Serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 25), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD Machine type.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 26), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 27), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD Manufacture date.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 28), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 29), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD FRU Serial.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 30), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 31), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 32), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD subsystem manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 33), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD\nCommon Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladeDaughterVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 34), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeMACAddressVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2)).setDescription('Table of MAC addresses of the blade and its expansion cards (daughter cards).\nFor consistent results, view as a table and not as individual entries.')
bladeMACAddressVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeMACAddressVpdIndex')).setDescription('Blade MAC address entry.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddressVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade index. \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeMACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard1MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 1 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 18), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 19), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 20), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 21), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 22), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 23), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 24), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard2MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 25), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 2 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 26), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 27), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 28), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 29), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 30), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 31), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 32), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard3MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 33), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 3 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 34), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 35), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 36), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 37), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 38), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 39), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 40), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard4MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 41), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 4 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 42), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 43), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 44), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 45), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 46), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 47), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 48), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeDaughterCard5MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 49), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) 5 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 100), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 1.  \nFor consistent results, view  as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 101), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 102), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 103), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 104), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 105), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 106), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeHSDaughterCard1MACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 107), OctetString()).setMaxAccess('readonly').setDescription('Blade high speed expansion card (daughter card) 1 MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress1Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 164), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress2Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 165), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress3Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 166), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress4Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 167), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress5Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 168), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress6Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 169), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress7Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 170), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardMACAddress8Vpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 171), OctetString()).setMaxAccess('readonly').setDescription('Blade side card MAC address 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3)).setDescription('Table of VPD information for the blade expansion board components.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeExpBoardVpdIndex')).setDescription('Blade expansion board VPD entry.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade expansion board VPD index.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade expansion board VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeExpBoardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD machine type.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD machine model.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Product ID.\nFor consistent results, view as a table and\nnot as individual entries.')
bladeExpBoardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 19), OctetString()).setMaxAccess('readonly').setDescription('Blade bay number of the blade expansion board. \nFor consistent results, view as a table and not as individual entries.')
bladeExpBoardVpdCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('storageExpansion', 1), ('pciExpansion', 2), ))).setMaxAccess('readonly').setDescription('Blade expansion board VPD type.\nFor consistent results, view as a table and  not as individual entries.')
bladeExpBoardVpdCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(21,12,0,11,13,2,3,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('bse1', 1), ('peu1', 11), ('peu2', 12), ('peu3', 13), ('bse2', 2), ('bie', 21), ('bse3', 3), ))).setMaxAccess('readonly').setDescription('Blade expansion board VPD subtype. \nDescribes the expansion board type with more granularity.\nbse1,bse2,bse3 = Blade Storage Expansion (1st, 2nd, and 3rd Generations),\npeu1 = PCI Expansion (1st  Generation), \npeu2 = PCI Expansion Unit II,\npeu3 = bpe3 = PCI Express Expansion Unit,\nbie= Blade I/O Expansion\nFor consistent results, view as a table and  not as individual entries.')
bladeExpBoardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 22), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion board VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeSideCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4)).setDescription('Table of VPD information for the blade side card components.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeSideCardVpdIndex')).setDescription('Blade side card VPD entry.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade side card VPD index.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade side card VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeSideCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD machine type.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD machine model.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Product ID.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD Common Language\nEquipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 19), OctetString()).setMaxAccess('readonly').setDescription('Blade bay number of the blade side card.  \nFor consistent results, view as a table and not as individual entries.')
bladeSideCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 20), OctetString()).setMaxAccess('readonly').setDescription('Blade side card VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeExpCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5)).setDescription('Table of VPD information for the blade expansion card components.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeExpCardVpdIndex')).setDescription('Blade expansion card VPD entry.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade expansion card VPD index.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade expansion card VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeExpCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD machine type.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD machine model.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Product ID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 19), OctetString()).setMaxAccess('readonly').setDescription('Blade bay number of the blade expansion card.  \nFor consistent results, view as a table and not as individual entries.')
bladeExpCardVpdCardTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,6,9,10,8,11,7,4,5,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('bladeEthernetExpCard', 1), ('bladeSATAConnectivityCard', 10), ('bladeNetworkCFFzExpCard', 11), ('bladeFiberChannelExpCard', 2), ('serialPortExpCard', 3), ('bladeOpticalPassThrough', 4), ('bladeInfinibandExpCard', 5), ('bladeIscsiExpCard', 6), ('bladeGenericExpCard', 7), ('bladeNetworkCFFeExpCard', 8), ('bladeSASConnectivityCard', 9), ))).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD type code that describes the expansion \ncard.  For consistent results, view as a table and not as individual entries.\n\nNOTE: The CFFe expansion card is also referred to as a CFFh expansion card.')
bladeExpCardVpdHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Blade expansion card (daughter card) VPD high speed that indicates whether the  \nexpansion card is high speed or not.  For consistent results, view as a table and \nnot as individual entries.')
bladeExpCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 23), OctetString()).setMaxAccess('readonly').setDescription('Blade expansion card VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladecKVMCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6)).setDescription('Table of VPD information for the blade\nconcurrent keyboard, video, and mouse (cKVM) card components.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1)).setIndexNames((0, 'BLADE-MIB', 'bladecKVMCardVpdIndex')).setDescription('Blade concurrent keyboard, video, and mouse (cKVM) card VPD entry.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade concurrent keyboard mouse video (cKVM) card VPD index.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladecKVMCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD serial number.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD machine type.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD Part number.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD machine model.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD \nmanufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD \nProduct ID.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD \nsubsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD \nCommon Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
bladecKVMCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('Blade concurrent keyboard video mouse (cKVM) card VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeAndExpCardWwnGuidVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7)).setDescription('Table of World Wide Names (WWN), Global Unique IDs (GUID) and\nSerial Attach SCSI IDs (SAS) of the blade server and its expansion\ncards (daughter cards).\nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeAndExpCardWwnGuidVpdIndex')).setDescription('Blade WWN/GUID entries.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade or expansion card index.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card VPD bay number.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade or expansion card.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpdBladeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 4), OctetString()).setMaxAccess('readonly').setDescription("For expansion cards, it's the blade bay number of the blade \nexpansion card. For blades, it's the bay number of the blade. \nFor consistent results, view as a table and not as individual entries.")
bladeAndExpCardWwnGuidVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,2,1,)).subtype(namedValues=namedval.NamedValues(('notAvailable', 0), ('wwn', 1), ('guid', 2), ('sas', 3), ))).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID/SAS Type.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 1.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 2.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 3.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 4.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 5.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 6.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 7.  \nFor consistent results, view as a table and not as individual entries.')
bladeAndExpCardWwnGuidVpd8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade or expansion card WWN/GUID 8.  \nFor consistent results, view as a table and not as individual entries.')
bladeManagementCardVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8)).setDescription('Table of VPD information for the blade\nmanagement card component.\nFor consistent results, view as a table \nand not as individual entries.')
bladeManagementCardVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeManagementCardVpdIndex')).setDescription('Blade management card VPD entry.\nFor consistent results, view as a table \nand not as individual entries.')
bladeManagementCardVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade management card VPD index.\nFor consistent results, view as a table \nand not as individual entries.')
bladeManagementCardVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD Bay number.\nFor consistent results, view as a table and \nnot as individual entries.')
bladeManagementCardVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD manufacturing ID.\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD FRU number.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blade management card VPD hardware revision.\nFor consistent results, view as a table and not as \nindividual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
bladeManagementCardVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD serial number.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD machine type.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD UUID.\nFor consistent results, view as a table \nand not as individual entries.')
bladeManagementCardVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD Manufacture Date.\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD Part number.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD FRU serial number.\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdMachineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD machine model.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD manufacturer ID.\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD Product ID.\nFor consistent results, view as a table and not \nas individual entries.')
bladeManagementCardVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD Common Language Equipment \nIdentifier (CLEI).\nFor consistent results, view as a table and not as \nindividual entries.')
bladeManagementCardVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('Blade management card VPD hardware revision in string format.\nFor consistent results, view as a table and not as \nindividual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
bladeFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5))
bladeBiosVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1)).setDescription('Table of blade firmware vital product data (VPD) information.')
bladeBiosVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeBiosVpdIndex')).setDescription('Blade firmware VPD table entry')
bladeBiosVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade firmware VPD table index.')
bladeBiosVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladeBiosVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bladeBiosVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bladeBiosVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladeBiosVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The build ID for the blade firmware.')
bladeBiosVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the blade firmware.')
bladeBiosVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('The date of the blade firmware.')
bladeDiagsVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2)).setDescription('Table of blade firmware vital product data (VPD) information.')
bladeDiagsVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeDiagsVpdIndex')).setDescription('Blade firmware VPD table entry')
bladeDiagsVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade firmware VPD table index.')
bladeDiagsVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladeDiagsVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bladeDiagsVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bladeDiagsVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladeDiagsVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The build ID for the blade firmware.')
bladeDiagsVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the blade firmware.')
bladeDiagsVpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('The date of the blade firmware.')
bladeSysMgmtProcVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3)).setDescription('Table of blade firmware vital product data (VPD) information.')
bladeSysMgmtProcVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeSysMgmtProcVpdIndex')).setDescription('Blade firmware VPD table entry')
bladeSysMgmtProcVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade firmware VPD table index.')
bladeSysMgmtProcVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladeSysMgmtProcVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bladeSysMgmtProcVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bladeSysMgmtProcVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladeSysMgmtProcVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The build ID for the blade firmware.')
bladeSysMgmtProcVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the blade firmware.')
bladecKVMVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4)).setDescription('Table of blade firmware vital product data (VPD) information.')
bladecKVMVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1)).setIndexNames((0, 'BLADE-MIB', 'bladecKVMVpdIndex')).setDescription('Blade firmware VPD table entry')
bladecKVMVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade firmware VPD table index.')
bladecKVMVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladecKVMVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade specified exists or not.')
bladecKVMVpdPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bladecKVMVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladecKVMVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the blade firmware.')
smHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6))
smHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1)).setDescription('Table of the switch module hardware components.\nFor consistent results, view as a table and not as\nindividual entries.')
smHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smHardwareVpdIndex')).setDescription('Switch module hardware VPD entry.\nFor consistent results, view as a table and\nnot as individual entries.')
smHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module hardware VPD index.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Switch module hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
smHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD manufacture date.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD FRU Serial.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdWwnGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD World Wide Name or Global Unique ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdWwnGuidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('The WWN/GUID/SAS entry is actually World Wide Name, Global Unique ID\nor Serial Attach SCSI ID.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The width of the switch module hardware.\nFor consistent results, view as a table and not as individual entries.')
smHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 20), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
smInpHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2)).setDescription('Table of the switch interposer hardware components.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'smInpHardwareVpdIndex')).setDescription('Switch Interposer hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
smInpHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD FRU Serial.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD manufacturer ID Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdWwnGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer module hardware VPD World Wide Name or Global Unique ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdWwnGuidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 17), OctetString()).setMaxAccess('readonly').setDescription('The Switch Interposer WWN/GUID/SAS entry is actually World Wide \nName, Global Unique ID or Serial Attach SCSI ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The width of the switch Interposer module hardware.\nFor consistent results, view as a table and not as individual entries.')
smInpHardwareVpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 19), OctetString()).setMaxAccess('readonly').setDescription('The Switch Interposer Name.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.')
smInpHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 20), OctetString()).setMaxAccess('readonly').setDescription('Switch Interposer hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HS only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
smFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7))
smMainAppVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1)).setDescription('Switch module main application VPD information table.')
smMainAppVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smMainAppVpdIndex')).setDescription('Switch module main application VPD table entry')
smMainAppVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module main application VPD entry index.')
smMainAppVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.')
smMainAppVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified exists or not.')
smMainAppVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,6,0,20,30,3,40,1,5,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('highSpeed', 20), ('opm', 3), ('passThrough', 30), ('serialCM', 4), ('sas', 40), ('copperPassThrough', 5), ('infiniband', 6), ))).setMaxAccess('readonly').setDescription('Indicates the type of switch module installed.')
smMainApp1VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build id.')
smMainApp1VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build date.')
smMainApp1VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware revision number.')
smMainApp2VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build id.')
smMainApp2VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build date.')
smMainApp2VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware revision number.')
smMainApp3VpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('I/O Module firmware build id.')
smMainApp3VpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('I/O Module firmware build date.')
smMainApp3VpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('I/O Module firmware revision number.')
smMainAppVpdSwitchSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,0,9,7,1,8,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('infiniband', 6), ('sas', 7), ('raidsas', 8), ('icpm', 9), ))).setMaxAccess('readonly').setDescription('Indicates the subtype of switch module installed.')
smBootRomVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2)).setDescription('Switch module boot ROM VPD information table.')
smBootRomVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'smBootRomVpdIndex')).setDescription('Switch module boot ROM VPD table entry')
smBootRomVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module boot ROM VPD entry index.')
smBootRomVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.')
smBootRomVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified exists or not.')
smBootRomVpdSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,6,0,20,30,3,40,1,5,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('highSpeed', 20), ('opm', 3), ('passThrough', 30), ('serialCM', 4), ('sas', 40), ('copperPassThrough', 5), ('infiniband', 6), ))).setMaxAccess('readonly').setDescription('Indicates the type of switch module installed.')
smBootRomVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build ID.')
smBootRomVpdBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware build date.')
smBootRomVpdRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Switch module firmware revision number.')
smBootRomVpdSwitchSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,0,9,7,1,8,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('infiniband', 6), ('sas', 7), ('raidsas', 8), ('icpm', 9), ))).setMaxAccess('readonly').setDescription('Indicates the subtype of switch module installed.')
pmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8))
pmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1)).setDescription('Table of the power module hardware components.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'pmHardwareVpdIndex')).setDescription('Power module hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Power module hardware VPD index.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Power module hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
pmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD Manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD FRU Serial.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
pmHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Power module hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
mtHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9))
mtHardwareVpdManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 3), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 4), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 5), Integer32()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
mtHardwareVpdUuid = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 8), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 9), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 10), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 11), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 12), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdCF1Capacity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 13), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD CompactFlash card capacity.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdCF2Capacity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 14), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD CompactFlash card capacity.\nFor consistent results, view as a table and not as individual entries.')
mtHardwareVpdBBU1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates the presence of Battery Backup Unit 1.\n\nNOTE: This MIB object is for BCS only.')
mtHardwareVpdBBU2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates the presence of Battery Backup Unit 2.\n\nNOTE: This MIB object is for BCS only.')
mtHardwareVpdHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 17), OctetString()).setMaxAccess('readonly').setDescription('Media tray 1 hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this  MIB object should be used.')
mt2HardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10))
mt2HardwareVpdManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 3), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 4), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 5), Integer32()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
mt2HardwareVpdUuid = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 8), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 9), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 10), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 11), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 12), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdCF1Capacity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 13), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD CompactFlash card capacity.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdCF2Capacity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 14), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD CompactFlash card capacity.\nFor consistent results, view as a table and not as individual entries.')
mt2HardwareVpdHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 17), OctetString()).setMaxAccess('readonly').setDescription('Media tray 2 hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this  MIB object should be used.')
blowerFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12))
blowerControllerVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1)).setDescription('Table of blower controller firmware vital product data (VPD) information.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerControllerVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'blowerControllerVpdIndex')).setDescription('Blower controller firmware VPD table entry')
blowerControllerVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower controller firmware VPD table index.')
blowerControllerVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('blower1', 1), ('blower2', 2), ('blower3', 3), ('blower4', 4), ))).setMaxAccess('readonly').setDescription('The numeric blower ID.')
blowerControllerVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blower specified exists or not.')
blowerControllerVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the blower controller firmware.')
blowerHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13))
blowerHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1)).setDescription('Table of the blower hardware components.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
blowerHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'blowerHardwareVpdIndex')).setDescription('Blower hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blower hardware VPD index.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Blower hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
blowerHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
blowerHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Blower hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
fanPackFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14))
fanPackControllerVPDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1)).setDescription('Table of fan pack controller firmware vital product data (VPD) information.\n\nNOTE: Fan packs are also referred to as Power Module Chassis Cooling Devices.')
fanPackControllerVPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'fanPackControllerVpdIndex')).setDescription('Fan Pack controller firmware VPD table entry')
fanPackControllerVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Fan Pack controller firmware VPD table index.')
fanPackControllerVpdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('fanPack1', 1), ('fanPack2', 2), ('fanPack3', 3), ('fanPack4', 4), ))).setMaxAccess('readonly').setDescription('The numeric fan pack ID.')
fanPackControllerVpdExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the fan pack specified exists or not.')
fanPackControllerVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('The revision of the fan pack controller firmware.')
tapHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15))
tapHardwareVpdManufacturingId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 3), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdFruNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 4), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 5), Integer32()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
tapHardwareVpdUuid = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 8), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdManufDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 9), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 10), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdFruSerial = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 11), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD FRU Serial.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
tapHardwareVpdManufacturingIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 12), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
tapHardwareVpdProductId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 13), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
tapHardwareVpdSubManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 14), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
tapHardwareVpdClei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 15), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
tapHardwareVpdHardwareRevisionString = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 16), OctetString()).setMaxAccess('readonly').setDescription('Telco Alarm Panel hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
ncHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16))
ncHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1)).setDescription('Table of the Network Clock hardware components.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ncHardwareVpdIndex')).setDescription('Network Clock hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Network Clock hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
ncHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD FRU serial number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
ncHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
ncHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
ncHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
ncHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD Common Language Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
ncHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Network Clock hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
mxHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17))
mxHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1)).setDescription('Table of the Multiplexer Expansion Module hardware components.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mxHardwareVpdIndex')).setDescription('Multiplexer Expansion Module hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
mxHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD FRU Serial Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.')
mxHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mxHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
mxHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
mxHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD Common \nLanguage Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
mxHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Multiplexer Expansion Module hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BladeCenter HT only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
stmHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18))
stmHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1)).setDescription('Table of the Storage Module hardware components.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'stmHardwareVpdIndex')).setDescription('Storage Module hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Storage Module hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen the HardwareRevisionString version of this MIB object should be used.')
stmHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD FRU Serial Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
stmHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
stmHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
stmHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
stmHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD Common \nLanguage Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
stmHardwareVpdHardwareRevisionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 16), OctetString()).setMaxAccess('readonly').setDescription('Storage Module hardware VPD hardware revision in string format.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.\n \nIf a hardware revision is programmed in the OEM VPD area for this component,\nthen this MIB object should be used.')
stmFirmwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19))
stmFirmwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1)).setDescription('Table of the Storage Module firmware components.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'stmFirmwareVpdIndex')).setDescription('Storage Module firmware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Storage Module firmware VPD index.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Storage Module firmware VPD type.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdBuildId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Storage Module firmware VPD build ID.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Storage Module firmware VPD release date.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
stmFirmwareVpdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Storage Module firmware VPD revision.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
bbuHardwareVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21))
bbuHardwareVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1)).setDescription('Table of the Battery Backup Unit hardware components.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bbuHardwareVpdIndex')).setDescription('Battery Backup Unit hardware VPD entry.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD index.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD Bay number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD manufacturing ID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD FRU number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD hardware revision.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD UUID.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD manufacture Date.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD Part Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdFruSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD FRU Serial Number.\nFor consistent results, view as a table and not as individual entries.\n            \nNOTE: This MIB object is for BCS only.')
bbuHardwareVpdManufacturingIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bbuHardwareVpdProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 13), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD product ID.\nFor consistent results, view as a table and not as individual entries.')
bbuHardwareVpdSubManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD subsystem manufacturer ID.\nFor consistent results, view as a table and not as individual entries.')
bbuHardwareVpdClei = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 15), OctetString()).setMaxAccess('readonly').setDescription('Battery Backup Unit hardware VPD Common \nLanguage Equipment Identifier (CLEI).\nFor consistent results, view as a table and not as individual entries.')
inventoryManagementActivityVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22)).setDescription('Table of system component hardware VPD activity log.\nFor consistent results, view as a table and not as individual entries.')
inventoryManagementActivityVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1)).setIndexNames((0, 'BLADE-MIB', 'componentLevelActivityVpdIndex')).setDescription('System component hardware VPD activity log entry.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('System component level VPD activity log index.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log FRU number.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log serial number.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log manufacturing ID.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log Bay number.\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log action (added/removed).\nFor consistent results, view as a table and not as individual entries.')
componentLevelActivityVpdTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('System component level VPD activity log timestamp.\nFor consistent results, view as a table and not as individual entries.')
reloadVpdData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23))
reloadAllVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reload all VPD data (firmware, hardware, MAC address, WWN/GUID and other Unique ID).\nNOTE: The value returned for the GET command is meaningless.')
reloadFwVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reload firmware VPD data.\nNOTE: The value returned for the GET command is meaningless.')
reloadHwVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reload hardware VPD data.\nNOTE: The value returned for the GET command is meaningless.')
reloadMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reload blade MAC addresses.\nNOTE: The value returned for the GET command is meaningless.')
reloadWwnGuidVpdData = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reload blade and I/O module WWN/GUID and other VPD data.\nNOTE: The value returned for the GET command is meaningless.')
airFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22))
passiveAirFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1))
passiveAirFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable the passive air filter.  When enabled, sending an enable will reset the replace date.\nNOTE: This MIB object is for BladeCenter S and BladeCenter E Refresh only.')
passiveAirFilterMonthFreq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,3,1,)).subtype(namedValues=namedval.NamedValues(('oneMonth', 1), ('threeMonths', 3), ('sixMonths', 6), ))).setMaxAccess('readwrite').setDescription('The chassis environment.  1 month indicates high dust, 3 months indicates moderate dust and, 6 months indicates low dust.\nNOTE: This MIB object is for BladeCenter S and BladeCenter E Refresh only.')
passiveAirFilterReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 30))).setMaxAccess('readonly').setDescription('The scheduled replacement date of the air filter.\nNOTE: This MIB object is for BladeCenter S and BladeCenter E Refresh only.')
errorLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3))
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4))
readEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2)).setDescription('Table of event log entry information.')
readEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'readEventLogIndex')).setDescription('Event log table entry')
readEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The event log index number.  \nFor consistent results, view as a table and not as individual entries.')
readEventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('A string of data detailing an event.  \nFor consistent results, view as a table and not as individual entries.')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Clear the event log. \n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.')
monitorLogStateEvents = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('If disabled, it means the info LED will not turn on when the log gets full \nand no alerts will be sent out. If enabled, the LED will turn on when the log \ngets full and alerts will be sent out.')
readEnhancedEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6)).setDescription('Table of enhanced event log entry information.')
readEnhancedEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1)).setIndexNames((0, 'BLADE-MIB', 'readEnhancedEventLogNumber')).setDescription('Enhaced Event log table entry, new entries could be added for new items.')
readEnhancedEventLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The event log number for the enhanced event log.  \nFor consistent results, view as a table and not as individual entries.')
readEnhancedEventLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("A string of data detailing an event log's attribute, such as the \nEvent ID and Call Home Flag. The Event ID is a hexadecimal number representing an specific or class of events. \nThe call home flag indicates that the corresponding problem may result in a call home. \nFor consistent results, view as a table and not as individual entries.")
readEnhancedEventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('A string of data detailing an event log message. \nFor consistent results, view as a table and not as individual entries.')
readAuditLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10)).setDescription("Table of audit log entry information. Audit log includes the logs whose source is 'Audit'")
readAuditLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1)).setIndexNames((0, 'BLADE-MIB', 'readAuditLogNumber')).setDescription('Audit log table entry, new entries could be added for new items.')
readAuditLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The audit log number.  \nFor consistent results, view as a table and not as individual entries.')
readAuditLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("A string of data detailing an audit eventlog's attribute.  \nFor consistent results, view as a table and not as individual entries.")
readAuditLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('A string of data detailing an audit event log message.  \nFor consistent results, view as a table and not as individual entries.')
clearAuditLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Clear the audit log. \n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.')
readSystemLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12)).setDescription("Table of system log entry information. System log includes the logs whose source is other than 'Audit'")
readSystemLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1)).setIndexNames((0, 'BLADE-MIB', 'readSystemLogNumber')).setDescription('System log table entry, new entries could be added for new items.')
readSystemLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The system log index number.  \nFor consistent results, view as a table and not as individual entries.')
readSystemLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("A string of data detailing an system event log's attribute.  \nFor consistent results, view as a table and not as individual entries.")
readSystemLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('A string of data detailing an system event log message.  \nFor consistent results, view as a table and not as individual entries.')
clearSystemLog = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Clear the system log. \n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.')
configureSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4))
remoteAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1))
generalRemoteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1))
remoteAlertRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(60,90,120,150,180,210,240,30,0,)).subtype(namedValues=namedval.NamedValues(('noDelay', 0), ('twoMinutes', 120), ('twoAndHalfMinutes', 150), ('threeMinutes', 180), ('threeAndHalfMinutes', 210), ('fourMinutes', 240), ('oneHalfMinute', 30), ('oneMinute', 60), ('oneAndHalfMinutes', 90), ))).setMaxAccess('readwrite').setDescription('Number in seconds to delay between retries if sending a\nremote alert is unsuccessful.')
remoteAlertRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,5,0,7,1,2,3,8,6,)).subtype(namedValues=namedval.NamedValues(('noretry', 0), ('retry1', 1), ('retry2', 2), ('retry3', 3), ('retry4', 4), ('retry5', 5), ('retry6', 6), ('retry7', 7), ('retry8', 8), ))).setMaxAccess('readwrite').setDescription('Number of additional times a remote alert will be\nretried if not successfully sent. A value of zero indicates\nno retries will be attempted.')
remoteAlertEntryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(60,90,120,150,180,210,240,30,0,)).subtype(namedValues=namedval.NamedValues(('noDelay', 0), ('twoMinutes', 120), ('twoAndHalfMinutes', 150), ('threeMinutes', 180), ('threeAndHalfMinutes', 210), ('fourMinutes', 240), ('oneHalfMinute', 30), ('oneMinute', 60), ('oneAndHalfMinutes', 90), ))).setMaxAccess('readonly').setDescription('Number in seconds to delay between entries if sending a\nremote alert is unsuccessful.\n\nNOTE: This object is no longer supported. However, for\ncompatibilities sake, a value of (255) is returned when\nread. Also, write access has been removed.')
remoteAccessTamperDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,0,1,120,2,6,30,3,15,240,4,7,180,60,20,10,)).subtype(namedValues=namedval.NamedValues(('nowait', 0), ('oneMinute', 1), ('tenMinutes', 10), ('oneTwentyMinutes', 120), ('fifteenMinutes', 15), ('oneEightyMinutes', 180), ('twoMinutes', 2), ('twentyMinutes', 20), ('twoFortyMinutes', 240), ('threeMinutes', 3), ('thirtyMinutes', 30), ('fourMinutes', 4), ('fiveMinutes', 5), ('sixMinutes', 6), ('sixtyMinutes', 60), ('sevenMinutes', 7), ))).setMaxAccess('readwrite').setDescription("This value is no longer supported and has been replaced by\n'lockoutPeriod'.")
userAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,0,)).subtype(namedValues=namedval.NamedValues(('localOnly', 0), ('ldapOnly', 1), ('localFirstThenLdap', 2), ('ldapFirstThenLocal', 3), ))).setMaxAccess('readwrite').setDescription('Use this field to specify how users attempting to login should be authenticated. \nThere are two methods: \n   Local authentication. Userid and password are verified by searching the list \n      of users locally configured under Local Login Profiles.\n   LDAP based authentication. Users are authenticated via a remote LDAP server.\nOne or both authentication methods can be selected. If both methods should be \nused, the order must be specified.')
maxSessionsPerLDAPUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('The maximum number of simultaneous active sessions allowed for\neach LDAP user. If the value is 0, this option is disabled. The\nminimum value is 1 and the maximum value is 20.')
authenticationLoggingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,3,7,6,1,0,5,8,9,255,)).subtype(namedValues=namedval.NamedValues(('logAll', 0), ('fiveSeconds', 1), ('thirtySeconds', 2), ('logNone', 255), ('oneMinute', 3), ('fiveMinutes', 4), ('tenMinutes', 5), ('thirtyMinutes', 6), ('oneHour', 7), ('twelveHours', 8), ('oneDay', 9), ))).setMaxAccess('readwrite').setDescription("Use this option to set how long, in seconds, AMM will not log the authentication\nevents for the same user. The default setting is 5 minutes. 0 indicates log all \nauthentication events, 255 indicates don't log any new authentication events.")
trackingIP = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription("This option indicates tracking different IP addresses for the same user is \nenabled or not. If it is enabled then an access every second from \nalternating IP addresses will result in multiple log entries, \nregardless of the time duration set in the 'authenticaionLoggingTimeout'field.\nIf this flag is disabled, multiple accesses by varying IP addresses \nwill only be logged as 'new' accesses if they are out of the \n'authenticationLoggingTimeout'.")
accountSecurityManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20))
accountSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('legacy', 0), ('high', 1), ('custom', 2), ))).setMaxAccess('readwrite').setDescription("The level of security needed for local user login passwords.\nThe legacy level:\n    - no password required\n    - no password expiration\n    - no password re-use restrictions\n    - no frequency of password change restrictions\n    - account is locked for 2 minutes after 5 login failures\n    - simple password rules\n    - no account inactivity monitoring\nThe high level:\n    - password required\n    - factory default 'USERID' account password must be changed on next login\n    - force user to change password on first login\n    - password expires in 90 days\n    - password re-use checking enabled (last 5 passwords kept in history)\n    - minimum 24 hours interval between password changes\n    - account is locked for 60 minutes after 5 login failures\n    - complex password rules with 2 degrees of difference from previous password\n    - alert on account inactivity after 120 days\n    - accounts disabled after 180 days of inactivity\nThe custom level:\n    - set the password settings individually under customSecuritySettings\nThe default value is legacy.")
customSecuritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2))
loginPasswordRequired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('If enabled, all users require a login password to access the AMM.\nIf disabled, empty password is allowed and complex password rules \nwill be disabled automatically.\nThe default value is disabled.')
passwordExpirationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('The number of days before login passwords expire.  The minimum \nvalue is 1 day and the maximum value is 365 days.  The default \nvalue is 90 days.  A value of 0 disables this option.')
defaultAdminPasswordExpired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("If enabled, the factory default 'USERID' account password must \nbe changed on next login.  The default value is disabled.")
minimumPasswordReuseCycle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,4,2,1,5,3,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('onePassword', 1), ('twoPasswords', 2), ('threePasswords', 3), ('fourPasswords', 4), ('fivePasswords', 5), ))).setMaxAccess('readwrite').setDescription('The number of unique passwords a user must choose before\nreusing a password.  The default value is none.')
complexPasswordRules = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("If enabled, the minimum complexity rules will be enforced for all\nlocal login passwords and 'User login password required' rule will be enabled.\nThe rules are as follows:\n     Passwords must be a minimum of eight characters.\n     Passwords must not be a repeat or reverse of the associated login id.\n     Passwords must be no more than three of the same characters used consecutively.\n     Passwords must contain at least three of the following combinations:\n         At least one lower case alphanumeric character.\n         At least one upper case alphanumeric character.\n         At least one numeric character.\n         At least one special character.\nThe default value is disabled.")
minimumDiffCharsPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,9,15,11,10,4,13,14,7,2,5,1,8,12,3,6,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('oneChar', 1), ('tenChars', 10), ('elevenChars', 11), ('twelveChars', 12), ('thirteenChars', 13), ('fourteenChars', 14), ('fifteenChars', 15), ('twoChars', 2), ('threeChars', 3), ('fourChars', 4), ('fiveChars', 5), ('sixChars', 6), ('sevenChars', 7), ('eightChars', 8), ('nineChars', 9), ))).setMaxAccess('readwrite').setDescription('The required minimum number of characters in the new password \ndifferent from the previous password.  The default value is 2.')
changePasswordFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('If enabled, the login user will be forced to change their password on\nthe first access after the account has been established or on\nthe first access after an administrator has changed the password \nfor the user, except for the administrator password for USERID.\nThe default value is disabled.')
inactivityAlertPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 8), Integer32()).setMaxAccess('readwrite').setDescription('The period of time in days before generating an alert for a dormant\naccount. This value applies to all login accounts, including the \nadministrator account.  The minimum value is 1 day and the maximum\nvalue is 365 days.  The default value is 0 which disables this option.\nNOTE: This value must be less than the inactivityAlertDisablePeriod.')
inactivityAlertDisablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 9), Integer32()).setMaxAccess('readwrite').setDescription('The period of time in days before generating an alert and disabling\na dormant account. This value applies to all login accounts, excluding \nthe administrator account.  The minimum value is 1 day and the maximum\nvalue is 365 days.  The default value is 0 which disables this option.\nNOTE: This value must be greater than the inactivityAlertPeriod.')
lockoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 10), Integer32()).setMaxAccess('readwrite').setDescription('The period of time in minutes that a user is locked out after the\nmaximum number of login failures was reached.  The minimum value is \nis 1 minute and the maximum value is 2880 minutes.  The default value\nis 2 minutes for the Legacy security level and 60 minutes for the\nHigh security level.  A value of 0 disables this option.')
maxLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(9,2,0,10,4,3,6,7,1,5,8,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('oneTime', 1), ('tenTimes', 10), ('twoTimes', 2), ('threeTimes', 3), ('fourTimes', 4), ('fiveTimes', 5), ('sixTimes', 6), ('sevenTimes', 7), ('eightTimes', 8), ('nineTimes', 9), ))).setMaxAccess('readwrite').setDescription('The maximum number of login failures before a user account is locked.\nA value of 0 disables this option.  The default value is 5.')
passwordChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 12), Integer32()).setMaxAccess('readwrite').setDescription('A minimum period of time that user is not able to change\ntheir own password. The range of acceptable values will be \nfrom 0 to 1440 (or 60 days). A value of 0 disables this \noption. If the password expiration period is set, it must be\ngreater than the minimum password change interval.')
serialPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2))
portBaud = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,0,1,3,15,23,)).subtype(namedValues=namedval.NamedValues(('baud2400', 0), ('baud4800', 1), ('baud38400', 15), ('baud57600', 23), ('baud9600', 3), ('baud19200', 7), ))).setMaxAccess('readwrite').setDescription('Baud rate for the serial port.')
portParity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,0,7,5,1,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('odd', 1), ('even', 3), ('mark', 5), ('space', 7), ))).setMaxAccess('readwrite').setDescription('Parity setting for the serial port.')
portStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('oneStopbit', 0), ('twoOrOnePtFive', 1), ))).setMaxAccess('readwrite').setDescription('Number of stop bits for the serial port.')
remoteAlertIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3))
remoteAlertIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1)).setDescription('Table of remote alert entries.\nThis table lets you configure remote alert recipients.\nYou can define up to 12 unique recipients.\nNOTE: All selected alert events will be sent to all\nenabled alert recipients.')
remoteAlertIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'remoteAlertIdEntryIndex')).setDescription('Remote alert entries.')
remoteAlertIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Index for remote alert entry.')
remoteAlertIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('invalid', 0), ('disabledAndValid', 1), ('enabledAndValid', 2), ))).setMaxAccess('readwrite').setDescription('Remote alert entry status, invalid means entry\nnot defined yet, disabledAndValid means entry defined\nbut not enabled to send an alert, enabledAndValid means\nentry defined and enabled to send an alert.')
remoteAlertIdEntryIpOrHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription("A null terminated string that either\ncontains an IP address of the form '1.2.3.4'\nor a host name (if DNS is enabled) for the\nalert entry.")
remoteAlertIdEntryTextDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('A null terminated string that contains\na text description of this entry.')
remoteAlertIdEntryNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,8,5,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('snmpOverLan', 4), ('emailOverLan', 5), ('ibmDirectorOverLAN', 8), ))).setMaxAccess('readwrite').setDescription("Remote alert entry notification method.  Types include\nunknown when the type can't be determined (read-only),\nibmDirectorOverLAN for a LAN alert sent over ethernet to\nIBM director, snmpOverLan for an SNMP alert over ethernet,\nand emailOverLan for a E-Mail alert over ethernet.")
remoteAlertIdEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription("A null terminated string that contains an\nE-Mail Address.  For example, 'jeb@us.ibm.com'.\nUsed only for an E-mail over LAN or E-Mail over PPP\nnotification type.")
remoteAlertIdEntrySelectiveAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('critOnlyAlerts', 0), ('allAlerts', 1), ))).setMaxAccess('readwrite').setDescription('Remote alert entry selective alert setting.  A value of\ncritOnlyAlerts will only send critical alerts to this\nremote alert recipient, a value of allAlerts will send\nall alerts to this remote alert recipient.')
generateTestAlert = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 30), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription("Generate a Test Alert.  This will send a test alert to all configured\nand enabled remote alert recipients. The text portion of the alert\nwill contain 'Application Posted Alert to MM'.\n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.\n\n      If user enables Automated FTP/TFTP report of service data, \nreport of service data via FTP/TFTP on the test alert will be made. \nUser can also validate the configurations of Automated FTP/TFTP Report \nof service data.")
remoteAccessIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4))
remoteAccessIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1)).setDescription("Table of remote access profiles.\n\nThis table lets you to configure all login profiles.\nYou can define up to 12 unique profiles.\n\nNOTE: By default, the management module\ncomes configured with one login profile that allows remote\naccess using a login ID of 'USERID' and a password of 'PASSW0RD'\n(the 0 is a zero).  To avoid a potential security exposure,\nwe strongly recommend that you change this default Login\nProfile to values of your choice.")
remoteAccessIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'remoteAccessIdEntryIndex')).setDescription('Remote access entries.')
remoteAccessIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for Remote access entry.')
remoteAccessIdEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription('Remote access entry null terminated string that\ncontains the user-id.  It must not be a duplicate of \nany previously configured ones.')
remoteAccessIdEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription('Remote access password.  The password must\ncontain at least one alphabetic and one\nnon-alphabetic character and be at least 5\ncharacters long, or you can leave the password\nfield blank to set an empty password.\n\nNOTE: Value returned by the GET command is meaningless\nfor this MIB object.')
remoteAccessIdEntryEncodedLoginPw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 36))).setMaxAccess('readwrite').setDescription("Used only for configuration save/restore.\nA null terminated string containing an encoded\nconcatenation of the login ID and password\nseparated by an ':'.")
remoteAccessIdEntryRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Indicates if user has supervisor, operator, or custom access.')
remoteAccessIdEntryLoggedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates if user is currently logged in or not.')
remoteAccessIdEntryLastLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Timestamp for the last successful login by the user.')
remoteAccessIdEntryPwdCompliant = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates if user complies with all of the password\nrules currently in effect.')
remoteAccessIdEntryPwdExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 14), OctetString()).setMaxAccess('readonly').setDescription("The number of days until the user's current password expires.")
remoteAccessIdEntryDormant = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates if the user account has been inactive for a \nspecified amount of time based on inactivityAlertDisablePeriod\nin the customSecuritySettings section.')
remoteAccessIdEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('active', 1), ('locked', 2), ))).setMaxAccess('readonly').setDescription('Indicates the state of the user:\nActive - normal state\nDisabled - user cannot use account until enabled by a\n  supervisor or chassis user account manager.  An account\n  can get disabled after being dormant for a specified\n  amount of time OR as a result of a supervisor or chassis\n  user account manager disabling it.  \nLocked - account is temporarily locked due to repeated\n  unsuccessful login attempts as specified by lockoutPeriod\n  in the customSecuritySettings section.  Account can be\n  unlocked by a supervisor or chassis user account manager\n  OR can be automatically unlocked after the lockoutPeriod expires.\n\nNOTE: The disable action does not apply to supervisor or chassis\n  user account manager accounts.')
remoteAccessIdEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,1,0,2,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ('unlock', 2), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription('Actions that only a supervisor or chassis user account manager \ncan perform for each user id:\n  Enable - enables an account in the Disabled state\n  Disable - disables an account in the Active or Locked state\n  Unlock - unlock an account in the Locked state\n\nNOTE: The disable action does not apply to supervisor or chassis\n    user account manager accounts.\n\nNOTE: Value returned for the GET command is meaningless for this \n    MIB object.')
remoteAccessIdEntrySessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The number of sessions the user is currently logged in to.')
remoteAccessIdEntryMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 19), Integer32()).setMaxAccess('readwrite').setDescription('The maximum number of simultaneous active sessions allowed for\nthe user. If the value is 0, this option is disabled. The\nminimum value is 1 and the maximum value is 20.')
remoteAccessUserAuthorityLevelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2)).setDescription('Table of user authority level profiles.')
remoteAccessUserAuthorityLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'ualIndex')).setDescription('User authority level entries.')
ualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for User Authority Level entry.')
ualId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription('User ID')
ualSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has no restrictions.')
ualReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has only read-only access, and cannot perform any save, modify, \nclear, or state affecting operations (e.g. restart MM, restore defaults, \nupgrade the firmware, etc.).')
ualAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can add/modify/delete users and change the global login settings in \nthe Login Profiles panel.')
ualConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can access the remote console.')
ualConsoleAndVirtualMediaAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can access both the remote console and the virtual media feature.')
ualServerPowerAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can access the power on and restart functions for the remote server. \nThese functions are available via the Power/Restart panel.')
ualAllowClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can clear the event logs. Everyone can look at the \nevent logs, but this particular permission is required to clear the logs.')
ualAdapterBasicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can modify configuration parameters in the System Settings and Alerts \npanels.')
ualAdapterNetworkAndSecurityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can modify configuration parameters in the Security, Network Protocols, \nNetwork Interface, Port Assignments, and Serial Port panels.')
ualAdapterAdvancedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has no restrictions when configuring the adapter. In addition, the \nuser is said to have administrative access to the RSA, meaning that the \nuser can also perform the following advanced functions: firmware upgrades, \nPXE network boot, restore adapter factory defaults, modify and restore \nadapter configuration from a configuration file, and restart/reset the \nadapter.')
remoteAccessRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3)).setDescription('Table of RBS User Role profiles.')
remoteAccessRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'roleIndex')).setDescription('User Role entries.')
roleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for RBS User Role entry.')
roleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription('User ID')
rbsSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has no restrictions.')
rbsOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has read-only access, and cannot perform\nany save, modify, clear, or state affecting operations\n(e.g. restart MM, restore defaults, upgrade the firmware, etc.).')
rbsChassisOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to browse status and properties of\nchassis components (MM, blowers (chassis cooling devices), midplane, power modules,\nmedia tray. Ability to backup MM configuration to a file.\nSaving MM configuration to chassis requires supervisor access.')
rbsChassisAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can add/modify/delete user login profiles. Ability\nto backup MM configuration to a file. Changing global login\nsettings require chassis configuration authority.')
rbsChassisLogManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to clear the MM event log, change log\npolicy settings, and backup MM configuration to a file.')
rbsChassisConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can modify and save any chassis configuration\nparameter (except user profiles and event log settings). \nAbility to restore MM factory defaults if the user also has\nchassis administration permissions. Ability to change the\nglobal login settings, SOL configuration, and backup MM\nconfiguration to a file.')
rbsChassisAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to do MM firmware updates, modify chassis\nLEDs, restore MM factory defaults if the user also has \nchassis configuration permissions. Ability to restart MM \nand backup MM configuration to a file.')
rbsBladeOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to browse status and properties of\nblades.')
rbsBladeRemotePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to access the Remote Control web panel\nand the functions provided on the panel: remote console\n(KVM) and remote disk. The ability to issue the CLI\nconsole command to start an SOL session to a blade will\nalso require this authority.')
rbsBladeConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can modify and save any blade configuration parameter.')
rbsBladeAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can power on/off and restart blades, activate\nstandby blades, do firmware updates, and modify blade LEDs.')
rbsSwitchModuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to browse status and properties of\nI/O Modules, and to ping I/O Modules.')
rbsSwitchModuleConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can modify the I/O Module IP address, configure\nI/O Module Advanced Management parameters, and restore\nfactory defaults on an I/O Module. Note that a user \nrequires both I/O Module configuration and I/O Module \nadministration roles in order to be able to launch a telnet\nor web UI session to an I/O Module, or to restore factory\ndefaults on an I/O Module.')
rbsSwitchModuleAdministration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can power on/off and restart the I/O Modules,\nupdate I/O Module firmware, enable/disable the Fast POST \nand External Ports of an I/O Module. Note that a user \nrequires both I/O Module configuration and I/O Module\nadministration roles in order to be able to launch a telnet\nor web UI session to an I/O Module, or to restore factory \ndefaults on an I/O Module.')
rbsBladeRemotePresenseVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can browser Remote Control web panel and remote blade video.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.')
rbsBladeRemotePresenseKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to access the Remote Control web panel\nand the functions provided on the panel: remote console\n(KVM) and remote disk.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.')
rbsBladeRemotePresenseRdriveR = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can mount remote blade driver, and have read access only.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.')
rbsBladeRemotePresenseRdriveRW = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User can mount remote blade driver and have read/write access.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.')
rbsChassisRemotePresenseRdoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has ability to upload/delete own image to RDOC and also \ncan start remote control web panel.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.')
rbsRemotePresenceSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("User has ability to access the Remote Control web panel\nand the functions provided on the panel: remote console\n(KVM) and remote driver read/write, upload/delete himself \nand other's image to RDOC.\n\nNOTE: This mib object is deprecated.  This level of granularity is available\nvia the LDAP snap-in tool.")
remoteAccessRBSscopeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4)).setDescription('Table of RBS User Scope profiles.')
remoteAccessRBSscopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1)).setIndexNames((0, 'BLADE-MIB', 'scopeIndex')).setDescription('User Scope entries.')
scopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for RBS User Scope Entry.')
scopeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription('User ID')
rbsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the MM and chassis functions.')
rbsBlade1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 1.')
rbsBlade2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 2.')
rbsBlade3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 3.')
rbsBlade4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 4.')
rbsBlade5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 5.')
rbsBlade6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 6.')
rbsBlade7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 7.')
rbsBlade8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 8.')
rbsBlade9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 9.')
rbsBlade10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 10.')
rbsBlade11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 11.')
rbsBlade12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 12.')
rbsBlade13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 13.')
rbsBlade14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to the blade in slot 14.')
rbsSwitch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 1.')
rbsSwitch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 2.')
rbsSwitch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 3.')
rbsSwitch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 4.')
rbsSwitch5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 5.')
rbsSwitch6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 6.')
rbsSwitch7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 7.')
rbsSwitch8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 8.')
rbsSwitch9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 9.')
rbsSwitch10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 27), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('User has access to I/O module 10.')
userInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5))
cli = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,3,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('telnet-only', 1), ('ssh-only', 2), ('enabled', 3), ))).setMaxAccess('readwrite').setDescription('Enable/Disable CLI access to the MM (telnet and SSH).\nThe value enabled(3) means both telnet and ssh are enabled.')
snmp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,3,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('v1-only', 1), ('v3-only', 2), ('enabled', 3), ))).setMaxAccess('readwrite').setDescription('Enable/Disable SNMP v1 and v3 access to the MM.')
tcm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('Enable/Disable TCM access to the MM.\nA value of 0 means disabled, any value from 1 to 20 means enabled.\nNOTE: AMM will provide a max of 20 connections for both \nSecure TCP Command Mode and TCP Command Mode.')
web = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Enable/Disable Web access (HTTP/HTTPS) to the MM. \n\nNOTE: Disabling web access to the MM will cause all\n      currently active web sessions to disconnect, \n      and you will no longer be able to access the \n      MM management functions using a web browser.')
stcm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('Enable/Disable STCM access to the MM.\nA value of 0 means disabled, any value from 1 to 20 means enabled.\nNOTE: AMM will provide a max of 20 connections for both\n      Secure TCP Command Mode and TCP Command Mode.\n      If no valid server certificate is in place, \n      Secure TCP Command Mode will not be allowed to set to enable.')
mmSshClientAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6))
mmSshClientAuthPubKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1)).setDescription('A table that contains client authentication\npublic key information.')
mmSshClientAuthPubKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mmSshClientAuthRemoteAccessIdIndex'), (0, 'BLADE-MIB', 'mmSshClientAuthPubKeyIndex')).setDescription('A information list about a particular SSH \npublic key used for client authentication.\nThe primary table index is the same value as\nthe associated remoteAccessIdEntryIndex.\nThe secondary table index allows selection \nof the Nth public key for that \nremoteAccessIdEntryIndex.')
mmSshClientAuthRemoteAccessIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('noaccess').setDescription('The primary table index is the same value as\nthe associated remoteAccessIdEntryIndex used \nas an index into the remoteAccessIdsTable.')
mmSshClientAuthPubKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('noaccess').setDescription("The secondary table index used to select \none of the client authentication public \nkeys for a particular remote access Id.\nThe index is an integer value from 1 to N\nwhere N is the number of keys associated \nwith a particular remote access Id. \nAn addition always causes the value of N to increase\nby one, effectively adding an entry after the \nexisting keys for that remote access Id.\nIf an entry is deleted from the table by \nsetting mmSshClientAuthPubKeyEntryStatus = invalid,\nthe key associated with that entry is deleted.  \nIf the deleted key was not the last key for \na remote access Id (mmSshClientAuthPubKeyIndex is \nnot the 'last' or Nth entry), the subsequent entries\nare renumbered after the deletion. A deletion \nalways causes the value of N to decrease by one. \nThe underlying SSH server implementation searches\nthe keys in order from 1 to N when attempting public \nkey authentication.\n\nNOTE:A maximum of 4 public keys can be installed\nfor one remote access Id.")
mmSshClientAuthPubKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('sshDss', 1), ('sshRsa', 2), ))).setMaxAccess('readonly').setDescription('The type of the SSH public key represented by\nthis entry.')
mmSshClientAuthPubKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('bits512', 1), ('bits768', 2), ('bits1024', 3), ('bits2048', 4), ('bits4096', 5), ))).setMaxAccess('readonly').setDescription('The size of the SSH public key represented by\nthis entry.')
mmSshClientAuthPubKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The RSA fingerprint of the SSH public key represented \nby this entry.\nThis value can be used with the SSH client to\nverify, on the initial connection, that the Secure Shell\nserver responding to the request is the server running\non the managed entity.  This is the fingerprint of the\noperational host key pair.  If the key pair represented\nby this entry is not operational then sixteen null octets\nmust be returned.')
mmSshClientAuthPubKeyAcceptFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('This is a filter that describes the set of SSH client \nIP addresses and host names that can establish     \nSSH connections to the AMM authenticated by the public key \nrepresented by this entry of the table. The filter is a \ncomma-separated list of IP addresses and/or hostnames. \nA question mark may be used to match any single character.\nAn asterisk may be used to match multiple characters.\nAn exclamation point may preceed an IP address or hostname\nto deny acccess from that IP address or hostname.\n\nThe format of the Accept From specification is:\n            from=PATTERN-LIST\nPATTERN-LIST is the filter, which must be enclosed in \ndouble quotation marks.\n\nNOTE:This MIB object can be manipulated after the\ncorresponding SSH public key is installed.')
mmSshClientAuthPubKeyComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 7), OctetString()).setMaxAccess('readwrite').setDescription('This is a descriptive string that the administrator may \nuse to help identify the public key represented by this entry. \nIt serves no function in the operation of the SSH server.\n\nNOTE:This MIB object can be manipulated after the\ncorresponding SSH public key is installed.')
mmSshClientAuthPubKeyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('import', 1), ('export', 2), ))).setMaxAccess('readwrite').setDescription('import(1) starts the TFTP file transfer of an SSH \nclient authentication public key from the TFTP \nserver to the AMM. The import operation is only \naccepted if the associated RemoteAccessIdsEntry row\nis configured and the current value of \nmmSshClientAuthPubKeyEntryStatus is underCreation(3)\nor valid(1), if the current value of mmSshClientAuthPubKeyEntryStatus\nis valid(1), it will replace the key with a new key, \nIf the import is successful the value of \nmmSshClientAuthPubKeyRowStatus changes to valid(1).\nexport(2) starts the TFTP file transfer of an SSH \nclient authentication public key from the AMM to the TFTP\nserver.  The export operation is only accepted if \nthe current value of mmSshClientAuthPubKeyEntryStatus\nis valid(1).\n  \nNOTE: Users should compare the fingerprint value\nmmSshClientAuthPubKeyFingerprint to the \nfingerprint of client authentication key files \nimported or exported using the TFTP file transfer\nprotocol to guard against possible file corruption.\n\nValue returned for the GET command is meaningless \nfor this MIB object.')
mmSshClientAuthPubKeyEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 9), EntryStatus()).setMaxAccess('readwrite').setDescription('This object manages the creation and deletion of this entry.\nThe steps recommended to install and to activate a new client \nauthorization public key are:\n1. Set values for mmSshClientAuthPubKeyTftpServer,\n   mmSshClientAuthPubKeyFileName, mmSshClientAuthPubKeyFileFormat \n2. Create a new entry in this table \n   mmSshClientAuthPubKeyEntryStatus = createRequest\n3. Import a new key mmSshClientAuthPubKeyAction = import\n   This entry will be valid after mmSshClientAuthPubKeyAction\n   is successfully imported.\n4. Set mmSshClientAuthPubKeyAcceptFrom and\n   mmSshClientAuthPubKeyComment as required. \n\nvalid(1)        - Indicates that the public key pair represented\n                  by this entry is available for use by the Secure\n                  Shell Server for client authentication. \n                     \ncreateRequest(2) - A new entry will be created in this table\n                   for the specified host key pair and the new\n                   entry will transition to the underCreation(3)\n                   state. The operation is only accepted if the\n                   associated RemoteAccessIdsEntry row defining\n                   a local user account is configured.\n\nunderCreation(3) - Indicates that this entry exists in the\n                   agent but is unavailable for use. After completing the\n                   create operation, the agent will set this object to\n                   underCreation(3).\n                      \ninvalid(4)    - Deletes this entry and any client authentication \n                public key that may be associated with it.')
mmSshClientAuthPubKeyUnused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of available storage locations that may be \nused to install additional Client Authentication \nPublic Keys. This number decreases by one when a new\nkey is added to the configuration.')
mmSshClientAuthPubKeyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 3), OctetString()).setMaxAccess('readwrite').setDescription('IP address or host name of the TFTP server where an SSH client\nauthentication public key is to be installed from or exported \nto. The address must be entered in a dotted decimal \nIP string (e.g. 9.37.44.2).')
mmSshClientAuthPubKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 4), OctetString()).setMaxAccess('readwrite').setDescription('File name on the TFTP server of an SSH client\nauthentication public key.')
mmSshClientAuthPubKeyFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('openSSH', 1), ('rfc4716', 2), ))).setMaxAccess('readwrite').setDescription('File format of SSH client authentication public key files \nimported from or exported to the TFTP file server.')
remoteAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2))
remoteAlertsCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1))
critTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the monitored temperature sensors\nin the system exceed their critical threshold.\n\nNOTE: If a critical Temperature condition is detected,\nthe server will automatically be shut down and powered off\nwhether this object is enabled or not.\nNOTE: This mib object will be replaced in a future release.')
critVolt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate a alert if any of the monitored power supply sensors \nin the system fall outside their specified critical \noperational range.\n\nNOTE: If a critical voltage condition is detected, \nthe server will automatically be shut down and powered off \nwhether this object is enabled or not.\nThis mib object will be replaced in a future release.')
critMultiBlower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if multiple blowers used for cooling the system fail.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.\nNOTE: This mib object will be replaced in a future release.')
critPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the system power supplies fail.')
critHardDrive = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of hard disk drives fail.\nNOTE: This mib object will be replaced in a future release.')
critVRM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of VRM (voltage regulator modules) fail.\nNOTE: This mib object will be replaced in a future release.')
critMultipleSwitchModule = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if all switch modules fail or are removed.\nNOTE: This mib object will be replaced in a future release.')
critInvalidConfig = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the hardware configuration is incompatible.\nNOTE: This mib object will be replaced in a future release.')
critBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any critical error condition on a blade.')
critIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any critical error condition on I/O module.')
critStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any critical error condition on a Storage module.\n\nNOTE: This MIB object is for BCS only.')
critChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any critical error condition on chassis.')
critFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any critical error condition on cooling devices.')
remoteAlertsNonCrit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2))
warnSingleBlower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if one blower used for cooling the system fails.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.\nNOTE: This mib object will be replaced in a future release.')
warnTemp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the monitored temperature sensors\nin the system exceed their warning threshold.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.\nNOTE: This mib object will be replaced in a future release.')
warnVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the monitored power supply sensors\nin the system fall outside their specified warning operational range.\nNOTE: This mib object will be replaced in a future release.')
warnRedundantModule = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the switch modules or management\nmodules is failing or removed.\nNOTE: This mib object will be replaced in a future release.')
warnMediaTrayKVMSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system detects a Media Tray or KVM\nswitching failure.\nNOTE: This mib object will be replaced in a future release.')
warnLogFull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system log reaches 100% full.')
warnBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on a blade.')
warnIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on I/O module.')
warnStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on a Storage module.\n\nNOTE: This MIB object is for BCS only.')
warnPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on power module.')
warnChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on chassis.')
warnFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any warning condition on cooling devices.')
remoteAlertsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3))
systemPowerOff = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system is powered off.\nNOTE: This mib object will be replaced in a future release.')
systemPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate a alert if the system is powered on.\nNOTE: This mib object will be replaced in a future release.')
systemPFA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate a alert if the system hardware detects a Predictive\nFailure Analysis(PFA) on PFA enabled hardware.\nNOTE: This mib object will be replaced in a future release.')
systemInventory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the a processor blade or media tray is\nadded or removed.')
systemLog75PctFull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system log reaches 75% full.')
networkChangeNotification = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the SP has restarted and the internal\nnetwork has initialized successfully, or if an IP address\nchange via a source other than the management module.')
systemBladeThrottling = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if any of the server blades are throttling.\nNOTE: This mib object will be replaced in a future release.')
systemPowerManagement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system detects a power oversubscription \ncondition or power supply mismatch in a power domain.\nNOTE: This mib object will be replaced in a future release.')
systemRemoteLogin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert if the system detects a new user logged in from \na remote site.')
systemBlade = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on a blade.')
systemIO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on I/O module.')
systemStorage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on a Storage module.\n\nNOTE: This MIB object is for BCS only.')
systemPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on power module.')
systemChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on chassis.')
systemFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on cooling device.')
systemPWRDO = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Generate an alert for any informational condition on power on and power off.')
alertMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('legacy', 0), ('enhanced', 1), ))).setMaxAccess('readwrite').setDescription('Selects which alert categories will be displayed on the\nweb interface, which alert category objects are accessible\nthrough SNMP, and which SNMP trap type an alert is associated with. \nIf the enhanced option is selected then the component based\ncategory scheme is used. If legacy is selected then the\nalert type based category scheme is used. This object and the\nlegacy alerts will be removed from the MIB in a future release.')
securitySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3))
dataEncryption = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('If enabled, all confidential data will be encrypted. The default value is disabled.\nNOTE: Once the data is encrypted, the only way to reverse this process is to\nreset to default values.')
trespassWarning = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('If enabled, a customizable trespass warning message is displayed via the Web \nand CLI interfaces.')
spClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4))
spClockDateAndTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 1), OctetString()).setMaxAccess('readwrite').setDescription("MM clock date and time setting.\nA date-time specification for the local time of day.\nFor example to set the date and time to\nMarch 4, 2001 at 06:00:00AM, set the value to:'03/04/2001,06:00:00'.\nfield  contents         range\n_____  ________         _____\n  1     month           01..12\n  2     separator       '/'\n  3     day             01..31\n  4     separator       '/'\n  5     year            2000..2089\n  6     separator       ','\n  7     hour            00..23\n  8     separator       ':'\n  9     minutes         00..59\n  10    separator       ':'\n  11    seconds         00..59")
spClockTimezoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 2), OctetString()).setMaxAccess('readwrite').setDescription("MM clock Greenwich Mean Time(GMT) offset and Daylight Saving Time(DST)\nsettings.\n\nThe following table lists GMT offsets and associated DST\ninformation.  DST is not observed in time zones where\nthe 'Observe DST' value does not contain 'yes' in the table.\nAlso, note that in some cases additional information\nis required to determine the clock adjustment when DST is\nobserved.  The additional information is required when the\nGMT offset being written is +2:00 or +10:00.\n\nExamples\n      -to set the GMT offset to +3:30,\n       set the value to:'+3:30,no'\n\n      -for Eastern Standard Time and observing DST,\n       set the value to:'-5:00,yes'\n\n      -for Egypt and observing DST,\n       set the value to:'+2:00,yes,6'\n\n\n GMT    Observe  Additional\nOffset    DST?    DST value\n______  _______  __________\n +0:00  yes|no\n +1:00  yes|no\n +2:00  yes|no   When 'Observe DST?' value is 'yes':\n                 5 (for E.Europe)\n                 4 (for GTB)\n                 6 (for Egypt)\n                 7 (for FLE)\n +3:00  yes|no\n +3:30  yes|no\n +4:00  no\n +4:30  no\n +5:00  yes|no\n +5:30  no\n +6:00  no\n +7:00  no\n +8:00  yes|no\n +9:00  yes|no\n +9:30  yes|no   When 'Observe DST?' value is 'yes':\n                 10 (for South AUS)\n                 9  (for other locations)\n+10:00  yes|no   When 'Observe DST?' value is 'yes':\n                 9  (for AUS Eastern)\n                 10 (for TAS,ACT,NSW,VIC)\n                 4  (for Vladivostok)\n+11:00  no\n+12:00  yes|no\n-12:00  no\n-11:00  no\n-10:00  no\n -9:00  yes|no   When 'Observe DST?' value is 'yes':\n                 12 (for USA and Canada)\n                 1 (for other locations)\n -8:00  yes|no   When 'Observe DST?' value is 'yes':\n                 12 (for USA and Canada)\n                 1 (for other locations)\n -7:00  yes|no   When 'Observe DST?' value is 'yes':\n                 12 (for USA and Canada)\n                 1 (for other locations)\n -6:00  yes|no   When 'Observe DST?' value is 'yes':\n                 12 (for USA and Canada)\n                 1 (for other locations)\n -5:00  yes|no   When 'Observe DST?' value is 'yes':\n                 12 (for USA and Canada)\n                 1 (for other locations)\n -4:00  yes|no   When 'Observe DST' value is 'yes':\n                 12 (for Canada)\n                 1 (for other locations)\n -3:30  yes|no\n -3:00  yes|no\n -2:00  yes|no\n -1:00  yes|no\n ")
spIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5))
spTxtId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription("MM text ID.  \nNOTE: Do not put any 'space characters' at end of the ID.")
networkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1))
extEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1))
extEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription("The type of interface.  Indicates 'Ethernet-1'.")
extEthernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('Contains the 64 byte null terminated DNS host name for this\ninterface.')
extEthernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 4), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address for the ethernet interface.')
extEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,5,3,)).subtype(namedValues=namedval.NamedValues(('enet10Megabit', 3), ('enet100Megabit', 4), ('autoSpeed', 5), ))).setMaxAccess('readwrite').setDescription('Specifies the data transfer rate to be used over the ethernet\ninterface:  10Mb, 100Mb, or Auto.')
extEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('fullDuplex', 1), ('halfDuplex', 2), ('autoDuplex', 3), ))).setMaxAccess('readwrite').setDescription('Specifies the duplex settings for the data transfer rate to be used over\nthe ethernet interface:  Half, Full, or Auto.')
extEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readwrite').setDescription("Specifies the locally administered MAC address.  The locally administered\naddress must be a hexadecimal value between 000000000000 - FFFFFFFFFFFF.  This\nvalue must be in the form XX:XX:XX:XX:XX:XX where 'X' is a number between 0 - 9 and\nA - F.  This MM subsystem does not allow use of a multicast address.  A multicast\naddress has the least significant bit of the first byte set to a 1.  The first\nbyte must, therefore, be an even number.")
extEthernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,2,)).subtype(namedValues=namedval.NamedValues(('dhcpDisabled', 0), ('dhcpEnabled', 1), ('tryDhcpThenTryStatic', 2), ))).setMaxAccess('readwrite').setDescription('Disable or enable DHCP on this interface.')
extEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 9), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address of the gateway/router for the ethernet\ninterface.')
extEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 10), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readonly').setDescription('Specifies the burned-in MAC (BIA) address.')
extEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription('Contains the Maximum Transmission Unit(MTU) for the ethernet\ninterface')
extEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 14), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the subnet mask for the ethernet interface')
dhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16))
dhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription('Contains the 64 byte null terminated DNS host name for this\ninterface, assigned by the DHCP server.')
dhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 2), IpAddress()).setMaxAccess('readonly').setDescription('Contains the IP address for the ethernet interface,\nassigned by the DHCP server.')
dhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 3), IpAddress()).setMaxAccess('readonly').setDescription('Contains the IP address of the gateway/router for the ethernet\ninterface, assigned by the DHCP server.')
dhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 4), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Subnet Mask for the ethernet\ninterface, assigned by the DHCP server.')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 5), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription('Contains the 64 byte null terminated Domain Name for this\ninterface, assigned by the DHCP server.')
dhcpDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 6), IpAddress()).setMaxAccess('readonly').setDescription('Contains the DHCP server IP address used to acquire the\nDHCP settings.')
dhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 7), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Primary DNS server, assigned by the DHCP server.')
dhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 8), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Secondary DNS server, assigned by the DHCP server.')
dhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 9), IpAddress()).setMaxAccess('readonly').setDescription('Contains the tertiary DNS server, assigned by the DHCP server.')
intEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2))
intEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription("The type of interface.  Indicates 'PPP-1'.")
intEthernetInterfaceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('interfaceDisabled', 0), ('interfaceEnabled', 1), ))).setMaxAccess('readwrite').setDescription("Disable or enable the internal ethernet interface.\nNOTE: To alter any of the configuration settings for the\nethernet interface, the following procedure should be used:\n(1) This object should be set to 'interfaceDisabled'\n(2) Make the modifications to other settings\n(3) This object should be set to 'interfaceEnabled'\n(4) Restart the management module\n\nAlso note that when attempting to enable this interface, the\nremote IP address is verified to be nonzero.  If this verification\nfails, an error response will be returned and the internal ethernet\ninterface will be left disabled.")
intEthernetInterfaceLocalIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 4), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address for the MM side of the internal ethernet link.')
intEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,5,3,)).subtype(namedValues=namedval.NamedValues(('enet10Megabit', 3), ('enet100Megabit', 4), ('autoSpeed', 5), ))).setMaxAccess('readonly').setDescription('Specifies the data transfer rate to be used over the ethernet\ninterface:  10Mb, 100Mb, or Auto.')
intEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('fullDuplex', 1), ('halfDuplex', 2), ('autoDuplex', 3), ))).setMaxAccess('readonly').setDescription('Specifies the duplex settings for the data transfer rate to be used over\nthe ethernet interface:  Half, Full, or Auto.')
intEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readwrite').setDescription("Specifies the locally administered MAC address.  The locally administered\naddress must be a hexadecimal value between 000000000000 - FFFFFFFFFFFF.  This\nvalue must be in the form XX:XX:XX:XX:XX:XX where 'X' is a number between 0 - 9 and\nA - F.  This MM subsystem does not allow use of a multicast address.  A multicast\naddress has the least significant bit of the first byte set to a 1.  The first\nbyte must, therefore, be an even number.")
intEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 9), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address of the gateway/router for the ethernet\ninterface.')
intEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 10), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readonly').setDescription('Specifies the burned-in MAC (BIA) address.')
intEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('Contains the Maximum Transmission Unit (MTU) for the ethernet\ninterface')
intEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 14), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the subnet mask for the ethernet interface.')
standbyExtEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3))
standbyExtEthernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription("The type of interface.  Indicates 'Ethernet-1'.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.")
standbyExtEthernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('Contains the 64 byte null terminated DNS host name for this\ninterface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 4), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address for the ethernet interface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,5,3,)).subtype(namedValues=namedval.NamedValues(('enet10Megabit', 3), ('enet100Megabit', 4), ('autoSpeed', 5), ))).setMaxAccess('readwrite').setDescription('Specifies the data transfer rate to be used over the ethernet\ninterface:  10Mb, 100Mb, or Auto.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('fullDuplex', 1), ('halfDuplex', 2), ('autoDuplex', 3), ))).setMaxAccess('readwrite').setDescription('Specifies the duplex settings for the data transfer rate to be used over\nthe ethernet interface:  Half, Full, or Auto.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readwrite').setDescription("Specifies the locally administered MAC address.  The locally administered\naddress must be a hexadecimal value between 000000000000 - FFFFFFFFFFFF.  \nThis value must be in the form XX:XX:XX:XX:XX:XX where 'X' is a number between 0 - 9 and A - F.  \nThis MM subsystem does not allow use of a multicast address.  \nA multicast address has the least significant bit of the first byte set to a 1.  The first\nbyte must, therefore, be an even number.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.")
standbyExtEthernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,2,)).subtype(namedValues=namedval.NamedValues(('dhcpDisabled', 0), ('dhcpEnabled', 1), ('tryDhcpThenTryStatic', 2), ))).setMaxAccess('readwrite').setDescription('Disable or enable DHCP on this interface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 9), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the IP address of the gateway/router for the ethernet\ninterface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 10), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess('readonly').setDescription('Specifies the burned-in MAC (BIA) address.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 13), Integer32()).setMaxAccess('readwrite').setDescription('Contains the Maximum Transmission Unit (MTU) for the ethernet\ninterface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyExtEthernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 14), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the subnet mask for the ethernet interface.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
advancedFailover = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('ipnoswap', 1), ('ipswap', 2), ))).setMaxAccess('readwrite').setDescription('User can enable advanced failover.\noff : no standby network interface\nipswap: Standby network interface, swap IPs during failover\nipnoswap: Standby network interface, no swap IPs during failover.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16))
standbyDhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription('Contains the 64 byte null terminated DNS host name for this\ninterface, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 2), IpAddress()).setMaxAccess('readonly').setDescription('Contains the IP address for the ethernet interface,\nassigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 3), IpAddress()).setMaxAccess('readonly').setDescription('Contains the IP address of the gateway/router for the ethernet\ninterface, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 4), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Subnet Mask for the ethernet\ninterface, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 5), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription('Contains the 64 byte null terminated Domain Name for this\ninterface, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 6), IpAddress()).setMaxAccess('readonly').setDescription('Contains the DHCP server IP address used to acquire the\nDHCP settings.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 7), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Primary DNS server, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 8), IpAddress()).setMaxAccess('readonly').setDescription('Contains the Secondary DNS server, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
standbyDhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 9), IpAddress()).setMaxAccess('readonly').setDescription('Contains the tertiary DNS server, assigned by the DHCP server.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
tcpProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3))
snmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1))
snmpSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 48))).setMaxAccess('readwrite').setDescription('A NULL terminated 48 byte string that contains the\nSNMP agent contact name.')
snmpSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 48))).setMaxAccess('readwrite').setDescription('A NULL terminated 48 byte string that contains the\nSNMP agent location name.')
snmpSystemAgentTrapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('trapsEnabled', 0), ('trapsDisabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable SNMP traps.')
snmpAgentCommunityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1)).setDescription('Table of SNMP Community entries')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'snmpCommunityEntryIndex')).setDescription('SNMP community entries')
snmpCommunityEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for SNMP Agent Community entry.')
snmpCommunityEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 15))).setMaxAccess('readwrite').setDescription('SNMP Community entry name.  If an IP address of 0.0.0.0 is \nconfigured for the first host name in the first community,\nany hosts can query MIB objects using the specified community\nname on a Get.  Likewise, on a Set, any host can have write access.\nNOTE: Set snmpv1SystemAgentEnable to disabled before performing \na Set of this object. IP address of 0.0.0.0 is allowed only for \nthe first host name in the first community and only if the access \ntype of this community is configured as Get or Set.')
snmpCommunityEntryCommunityIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('SNMP Community IP address or host name.\nCan either be a dotted decimal IP string (e.g. 9.37.44.2)\nor if DNS is enabled a host name.  If an IP address of \n0.0.0.0 is configured for the first host name in the first \ncommunity, any hosts can query MIB objects using the specified\ncommunity name.  Likewise, on a Set, any host can have write access.\nNOTE: Set snmpv1SystemAgentEnable to disabled before performing \na Set of this object. IP address of 0.0.0.0 is allowed only for \nthe first host name in the first community and only if the access \ntype of this community is configured as Get or Set.')
snmpCommunityEntryCommunityIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('SNMP Community IP address or host name.\nCan either be a dotted decimal IP string (e.g. 9.37.44.2)\nor, if DNS is enabled, a host name.\nNOTE: Set snmpv1SystemAgentEnable to disabled before performing \na Set of this object.')
snmpCommunityEntryCommunityIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('SNMP Community IP address or host name.\nCan either be a dotted decimal IP string (e.g. 9.37.44.2)\nor if DNS is enabled a host name.\nNOTE: Set snmpv1SystemAgentEnable to disabled before performing \na Set of this object.')
snmpCommunityEntryCommunityViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('read-Traps', 1), ('write-Read-Traps', 2), ('traps-Only', 3), ))).setMaxAccess('readwrite').setDescription('Access Level of the SNMPv1 managers.  Note this parameter \nis set for each community.  Therefore all three managers \nin the same community have the same access level.')
snmpv1SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable the SNMPv1 agent.\n\nNOTE: Restart the management module if this MIB object is changed \nwith respect to the value at system bootup time.  For example the \nSNMPv1 agent was set to disabled at system bootup time and now \nit is enabled.  Then restarting the remote supervisor adaptor is \nrequired.  \n\nAlso note that when attempting to enable this agent,\nthe following are verified:\n(1) Is there a valid system contact\n(2) Is there a valid system name\n(3) Is there at least one valid community name and for that\ncommunity name is there one valid IP address or hostname\n(4) Are all defined community names unique\n\nIf this verification fails an error response will be returned\nand the SNMPv1 agent will be left disabled.')
snmpv3SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable the SNMPv3 agent.\n\nNOTE: Restart the management module if this MIB object is changed \nwith respect to the value at system bootup time.  For example the \nSNMPv3 agent was set to disabled at system bootup time and now \nit is enabled.  Then restarting the remote supervisor adaptor is \nrequired.  \n\nAlso note that when attempting to enable this agent,\nthe following are verified:\n(1) Is there a valid system contact?\n(2) Is there a valid system name?\n\nIf this verification fails an error response will be returned\nand the SNMPv3 agent will be left disabled.')
snmpAgentUserProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9))
snmpUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1)).setDescription('Table of SNMPv3 User Profile entries')
snmpUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'snmpUserProfileEntryIndex')).setDescription('SNMP User Profile entries')
snmpUserProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for SNMPv3 Agent User Profile entry.')
snmpUserProfileEntryContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 31))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - Context name \nfor users to access MIB objects.  Note that context names can be duplicates   \nand can be shared among users.  Empty context names are allowed.  The \ndefault context name is the empty string.')
snmpUserProfileEntryAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('md5', 2), ('sha', 3), ))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - Authentication Protocol \nsupported by the user.')
snmpUserProfileEntryPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,4,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('des', 2), ('aes', 4), ))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - Privacy Protocol \nsupported by the user. The Privacy Password must be set\nand the Authentication Protocol must be md5 or sha\nbefore this field may be set to des or aes.')
snmpUserProfileEntryPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 31))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - Privacy password \nfor the user.\n\nNOTE: Value returned for the GET command is \nmeaningless for this MIB object for security reason.')
snmpUserProfileEntryViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('read-Traps', 1), ('read-Write-Traps', 2), ('traps-Only', 3), ))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - Access level (Get, Set, and \nTraps) of the user. ')
snmpUserProfileEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 9), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('SNMPv3 User Profile entry - IP address or host name.\nCan either be a dotted decimal IP string (e.g. 9.37.44.2)\nor if DNS is enabled a host name.')
dnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2))
dnsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('dnsDisabled', 0), ('dnsEnabled', 1), ))).setMaxAccess('readwrite').setDescription("Disable or enable the DNS agent.\n\nNOTE: To alter any of the configuration settings for the DNS agent,\nthe following procedure should be used:\n(1) This object should be set to 'disabled'\n(2) Make the modifications to other settings\n(3) This object should be set to 'enabled'\n(4) Restart the management module\n\nAlso note that when attempting to enable this agent, it is verified\nthat there is at least one valid DNS server IP address.  If this\nverification fails, an error response will be returned and the DNS\nagent will be left disabled.")
dnsServerIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 2), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the primary DNS server IP address.')
dnsServerIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 3), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the secondary DNS server IP address.')
dnsServerIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 4), IpAddress()).setMaxAccess('readwrite').setDescription('Contains the tertiary DNS server IP address.')
smtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3))
smtpServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('A NULL terminated 64 byte string that contains the\nSMTP server host name or IP address (a.b.c.d).')
attachmentsToEmailAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('noAttachments', 0), ('attachServiceInformation', 1), ))).setMaxAccess('readwrite').setDescription('Indicates if the service information should be attached to\nan email alert.')
tcpApplicationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4))
telnetInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('Default is 120 seconds. Value of zero is no timeout.\nMax value is any positive 4 bytes value. Note that SSH also uses this \ntimeout value to wait before disconnecting inactive SSH connections.')
commandModeInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 2), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time in seconds before the (Secure)TCP Command Mode times out.\nDefault value of 0 means no timeout. Max value is any positive 4 byte value.')
secureCommandModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 3), Integer32()).setMaxAccess('readwrite').setDescription('Set Secure TCP Command Mode number of connections.\nAMM will provide a max of 20 connections for both Secure TCP Command Mode and TCP Command Mode.\nA value of 0 means disabled.\nIf no valid server certificate is in place, Secure TCP Command Mode will not be allowed to set to enable.\n\nNOTE: System Management Software requires this to be enabled for secure communication to the AMM.')
commandModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 4), Integer32()).setMaxAccess('readwrite').setDescription('Set TCP Command Mode number of connections.\nAMM will provide a max of 20 connections for both Secure TCP Command Mode and TCP Command Mode.\nA value of 0 means disabled.\nNOTE: System Management Software requires this to be enabled for non-secure communication to the AMM.')
slpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('multicast', 0), ('broadcast', 1), ))).setMaxAccess('readwrite').setDescription('Set SLP address type to 0 (multicast) or 1 (broadcast). Note that when\nslpAddrType is set to broadcast value then the multicast address set in\nslpMulticastAddr will be ignored.')
slpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 6), IpAddress()).setMaxAccess('readwrite').setDescription('Service Locator Protocol Multicast address')
slpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable Service Location Protocol.\n\nNOTE: Change to Service Location Protocol will take \neffect after the next restart of the MM.')
telnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable telnet.\nNOTE: Change to telnet enable/disable will take effect immediately.')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SSH.')
sshVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('allVersions', 0), ('version2Only', 1), ))).setMaxAccess('readwrite').setDescription('When SSH is enabled, this object allows the user to\nconfigure whether the SSH server accepts all versions\nof client connections or whether it restricts the \nconnectivity to the more secure version 2 only.\n\nNOTE: Only SSH version 2 is supported now.')
sslServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SSL Server.')
sslClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SSL Client.  If no valid client or server certificate is in place, \nSSL client will not be allowed to set to enable.')
ftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable FTP.')
tftpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable TFTP.')
smashTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SMASH CLP (System Management Architecture for \nServer Hardware Command Line Protocol) over Telnet.\nThis option is not available on all systems.')
smashSshEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SMASH CLP (System Management Architecture for \nServer Hardware Command Line Protocol) over SSH. A valid SSH \nserver key must be installed before enabling secure SMASH. \nThis option is not available on all systems.')
tftpCreateEmptyFile = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 22), OctetString()).setMaxAccess('readwrite').setDescription('This MIB object is no longer a requirement for TFTP and has been deprecated.')
ftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 23), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time before FTP times out.  Default is 300 seconds. \nValue of zero is no timeout. Max value is any positive 4 byte value.')
rdEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable Remote Disk.\n\nNOTE: Change to Remote Disk will take effect after the \nnext restart of the MM.')
rdocEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable Remote Disk on Card.\n\nNOTE: Change to Remote Disk on Card will take effect \nafter the next restart of the MM.')
kvmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable KVM.\n\nNOTE: Change to KVM will take effect after the next \nrestart of the MM.')
mmSshServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27))
mmSshServerHostKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1)).setDescription('A table that contains per public/private host key\npair information.')
mmSshServerHostKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mmSshServerHostKeyIndex')).setDescription('A list of information about a particular public/private\nhost key pair.')
mmSshServerHostKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The index of the public/private host key pair.')
mmSshServerHostKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('sshDss', 1), ('sshRsa', 2), ))).setMaxAccess('readonly').setDescription('The type of the public/private host key pair.')
mmSshServerHostKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('bits512', 1), ('bits768', 2), ('bits1024', 3), ('bits2048', 4), ('bits4096', 5), ))).setMaxAccess('readonly').setDescription('The size of the public/private host key pair.\n\nNOTE: The AMM supports only the bits2048 value.')
mmSshServerHostKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('The RSA fingerprint of the public part of the host key\npair.  This value can be used with the SSH client to\nverify, on the initial connection, that the Secure Shell\nserver responding to the request is the server running\non the AMM. ')
mmSshServerHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Initiate the new Host Keys generation process for the \nAMM SSH Server.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
mmSshServerHostKeyGenerateProgress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 3), OctetString()).setMaxAccess('readonly').setDescription('Indicate the progress of the key generation process.')
tcpPortAssignmentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5))
tcpPortsRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all ports to default value.\nhttp: 80\nhttps: 443\ntelnet: 23\nssh: 22\nSNMP agent: 161\nSNMP trap: 162\nTCP Command Mode: 6090\nSecure TCP Command Mode: 6091\nRemote Disk: 1044\nRemote Disk-on-Card: 1045\nRemote KVM: 3900\nFTP: 21\nFTP Data: 20\nTFTP: 69\nSMASH telnet: 50023 \nSMASH ssh: 50022\nSLP: 427\nStorage Description Service: 1046\n\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
httpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription("HTTP port number. Default value is 80. Once changed, the URL's have to \ninclude :port at the end.")
httpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription("SSL port number. Default value is 443. Once changed, the URL's have to \ninclude :port at the end.")
telnetPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 4), Integer32()).setMaxAccess('readwrite').setDescription('Telnet port number. Default value is 23. Port change will take effect immediately.')
sshPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 5), Integer32()).setMaxAccess('readwrite').setDescription('SSH port number. Default value is 22.')
snmpAgentPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 6), Integer32()).setMaxAccess('readwrite').setDescription('SNMP Agent port number. Default value is 161. MM has to be reset for change \nto take effect.')
snmpTrapsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 7), Integer32()).setMaxAccess('readwrite').setDescription('SNMP Traps port number. Default value is 162. MM has to be reset for change \nto take effect.')
commandModePortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 8), Integer32()).setMaxAccess('readwrite').setDescription('TCP Command Mode port number. Default value is 6090. Change will take effect immediately.')
secureCommandModePortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 9), Integer32()).setMaxAccess('readwrite').setDescription('Secure TCP Command Mode port number. Default value is 6091. Change will take effect immediately.')
rdPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 10), Integer32()).setMaxAccess('readwrite').setDescription('Remote Disk port number. Default value is 1044. MM has to be reset for change \nto take effect.\nNOTE: This mib object is deprecated and has been replaced by the rpPortAssignment object. \nAttempts to set the port value for this SNMP object are no longer supported and any\nread of the value associated with this object will return the rpPortAssignment\n(Remote Presence) port information.')
rdocPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 11), Integer32()).setMaxAccess('readwrite').setDescription('Remote Disk-on-Card port number. Default value is 1045. MM has to be reset for\nchange to take effect.\nNOTE: This mib object is deprecated and has been replaced by the rpPortAssignment object. \nAttempts to set the port value for this SNMP object are no longer supported and any\nread of the value associated with this object will return the rpPortAssignment\n(Remote Presence) port information.')
kvmPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 12), Integer32()).setMaxAccess('readwrite').setDescription('Remote KVM port number. Default value is 3900. MM has to be reset for\nchange to take effect.\nNOTE: This mib object is deprecated and has been replaced by the rpPortAssignment object. \nAttempts to set the port value for this SNMP object are no longer supported and any\nread of the value associated with this object will return the rpPortAssignment\n(Remote Presence) port information.')
ftpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 13), Integer32()).setMaxAccess('readwrite').setDescription('FTP port number. Default value is 21. MM has to be reset for change \nto take effect.')
ftpDataPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 14), Integer32()).setMaxAccess('readwrite').setDescription('FTP Data port number. Default value is 20. MM has to be reset for change \nto take effect.')
tftpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 15), Integer32()).setMaxAccess('readwrite').setDescription('TFTP port number. Default value is 69. MM has to be reset for change \nto take effect.')
smashTelnetPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 17), Integer32()).setMaxAccess('readwrite').setDescription('The port number for SMASH CLP (System Management Architecture for Server \nHardware Command Line Protocol) over telnet. Default value is 50023. \nChange will take effect immediately.  \nThis option is not available on all systems.')
smashSshPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 18), Integer32()).setMaxAccess('readwrite').setDescription('The port number for SMASH CLP (System Management Architecture for Server \nHardware Command Line Protocol) over SSH. Default value is 50022.  \nThis option is not available on all systems.')
slpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 19), Integer32()).setMaxAccess('readwrite').setDescription('Service Location Protocol port number. Default value is 427. MM has to be reset for change \nto take effect.\nNOTE: This value is normally required to be 427 to interoperate properly\nwith other SLP enabled applications.')
sdsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 20), Integer32()).setMaxAccess('readwrite').setDescription('Storage description service port number. Default value is 1046. MM has to be reset for \nchange to take effect.\nNOTE: This mib object is deprecated and has been replaced by the rpPortAssignment object. \nAttempts to set the port value for this SNMP object are no longer supported and any\nread of the value associated with this object will return the rpPortAssignment\n(Remote Presence) port information.')
rpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 21), Integer32()).setMaxAccess('readwrite').setDescription('Remote Presence port. Default value is 3900. This port cannot be disabled since it is\nthe single service entry point for all the services provided by AMM RPServ to clients.')
ldapClientCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6))
ldapServer1NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 1), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('A NULL terminated 64 byte string that contains the\nLDAP server host name or IP address (a.b.c.d).')
ldapServer1PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 2), Integer32()).setMaxAccess('readwrite').setDescription('LDAP server port number.')
ldapServer2NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('A NULL terminated 64 byte string that contains the\nLDAP server host name or IP address (a.b.c.d).')
ldapServer2PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 4), Integer32()).setMaxAccess('readwrite').setDescription('LDAP server port number.')
ldapServer3NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 5), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('A NULL terminated 64 byte string that contains the\nLDAP server host name or IP address (a.b.c.d).')
ldapServer3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 6), Integer32()).setMaxAccess('readwrite').setDescription('LDAP server port number.')
ldapRootDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('Distinguished Name for root entry of directory tree. \nAn example might look like dn=foobar,dn=com.')
ldapUserSearchBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 8), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('As part of the user authentication process, it is necessary to search \nthe LDAP server for one or more attributes associated with a particular \nuser. Any search request must specify the base DN for the actual search. \nThis field specifies the base DN which should be used to search the User \ndirectory. An example might look like cn=users,dn=foobar,dn=com. If this \nfield is left blank, the Root DN will be used as the search base instead.\nAs mentioned, user searches are part of the authentication process. They \nare carried out to retrieve information about the user such as login \npermissions, callback number, and group memberships. For Version 2.0 LDAP \nclients, it is strongly encouraged that this parameter be configured, \notherwise a search using the root DN may not succeed (as seen on Active \nDirectory servers).\n\nNOTE: This MIB object is for MM only.')
ldapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 9), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('This filter is used for group authentication. It specifies what group or \ngroups that this MM belongs to. If left blank, group authentication is \ndisabled. Otherwise, group authentication will be performed against the \nfilter. The filter can be a specific group name (e.g. RSAWest), a wildcard (*) \nwhich matches everything, or a wildcard with a prefix (e.g. RSA*). The default \nfilter is RSA*. \nAfter user authentication, group authentication will take place, whereby an \nattempt will be made to match the group or groups (that the user belongs to) \nto the group filter defined here. If there is no match, the user will not pass \nauthentication and will be blocked. If there is a match, the login permissions \nfor the user will be retrieved from the matched group(s), unless the user \nalready has login permissions assigned directly from the user record retrieved \nfrom the LDAP server.')
ldapBindingMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,0,1,)).subtype(namedValues=namedval.NamedValues(('anonymousAuthentication', 0), ('clientAuthentication', 1), ('userPrincipalName', 2), ('strictUserPrincipalName', 3), ))).setMaxAccess('readwrite').setDescription("On initial binds to the LDAP server during user authentication, there are \nthree options:\nAnonymous authentication: Bind attempt is made without a client DN or password. \nIf the bind is successful, a search will be requested in order to find an entry \non the LDAP server for the user attempting to login. If an entry is found, a \nsecond attempt to bind will be attempted, this time with the user's DN and \npassword. If this succeeds, the user is deemed to have passed the user \nauthentication phase. Group authentication is then attempted if it is enabled.\nClient authentication: Bind attempt is made with client DN and password \nspecified by this configuration parameter. If the bind is successful, we \nproceed as above.\nUser Principal Name (UPN): Bind attempt is made directly with the credentials \nused during the login process. If this succeeds, the user is deemed to have \npassed the user authentication phase. Note that for Active Directory servers, \nthe userid can have the form someuser@somedomain or simply someuser.\nStrict UPN: This is the same as UPN above, except that the userid must have \nthe form someuser@somedomain. The string entered by the user will be parsed \nfor the @ symbol.\n\nNOTE: strictUserPrincipalName(3) option is available on MM only.")
ldapClientAuthenticationDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 11), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('The initial bind to the LDAP server during user authentication can be \nperformed with anonymous authentication, client based authentication, or UPN. \nThe client based option requires a client DN and password as parameters to \nthe bind request. These parameters are configured here. Note that the password \ncan be left blank.')
ldapClientAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 12), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription('The client authentication password')
ldapUIDsearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 13), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription("When the binding method selected is Anonymous authentication or Client \nauthentication, the initial bind to the LDAP server is followed by a search \nrequest aimed at retrieving specific information about the user, including the \nuser's DN, login permissions, and group ownerships. In order to retrieve this \ninformation, the search request must specify the attribute name used to \nrepresent userids on that server. Specifically, this name is used as a search \nfilter against the login id entered by the user. This attribute name is \nconfigured here. If this field is left blank, a default of uid is used during \nuser authentication. \nFor example, on Active Directory servers, the attribute name used for userids \nis often sAMAccoutName. \nWhen the binding method selected is UPN or Strict UPN, this field defaults \nautomatically to userPrincipalName during user authentication if the userid \nentered has the form userid@somedomain.")
ldapGroupSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 14), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('When the MM Group Filter name is configured, it is necessary to retrieve \nfrom the LDAP server the list of groups that a particular user belongs to. \nThis is required to do group authentication. In order to retrieve this list, \nthe search filter sent to the server must specify the attribute name associated \nwith groups. This field specifies this attribute name. \nIf this field is left blank, the attribute name in the filter will default \nto memberOf.')
ldapLoginPermissionAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 15), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('When a user successfully authenticates via a LDAP server, it is necessary \nto retrieve the login permissions for this user. In order to retrieve these \npermissions, the search filter sent to the server must specify the attribute \nname associated with login permissions. This field specifies this attribute \nname.')
ldapUseDNSOrPreConfiguredServers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('usePreConfiguredLDAPServers', 0), ('useDNSToFindLDAPServers', 1), ))).setMaxAccess('readwrite').setDescription("The MM contains a Version 2.0 LDAP Client that may be configured to provide \nuser authentication through one or more LDAP servers. The LDAP server(s) to be \nused for authentication can be discovered dynamically or manually pre-configured. \n\nIf the usePreConfiguredLDAPServers option is selected, up to 3 LDAP servers can \nbe configured. Simply enter the server's IP address or hostname (assuming DNS \nis enabled).  The port number for each server is optional. If left blank, \nthe default value of 389 is used for non-secured LDAP connections. For secured \nconnections, the default is 636. At least one server must be configured.\n\nIf the useDNSToFindLDAPServers is selected, the mechanisms described by RFC2782 \n(A DNS RR for specifying the location of services) are applied to find the \nserver(s). This is known as DNS SRV.")
ldapDomainSource = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,0,1,)).subtype(namedValues=namedval.NamedValues(('extractSearchDomainFromLoginID', 0), ('useOnlyConfiguredSearchDomainBelow', 1), ('tryLoginFirstThenConfiguredValue', 2), ))).setMaxAccess('readwrite').setDescription('The DNS SRV request sent to the DNS server must specify a domain name. \nThe LDAP client will determine where to get this domain name based on one \nof the following three options: \n\n  - extractSearchDomainFromLoginID: With this option, the LDAP client will \nuse the domain name in the login id. For example, if the login id is \njoesmith@mycompany.com, the domain name equals mycompany.com. If the domain \nname cannot be extracted, the DNS SRV will fail, causing the user \nauthentication to fail automatically.\n\n  - useOnlyConfiguredSearchDomainBelow: With this option, the LDAP client \nwill use the domain name configured in the Search Domain parameter. \n\n  - tryLoginFirstThenConfiguredValue: With this option, the LDAP client will \nfirst attempt to extract the domain name from the login id. If this succeeds, \nthis domain name will be used in the DNS SRV request. If there is no domain \nname present in the login id, the LDAP client will instead use the configured \nSearch Domain parameter as the domain name in the DNS SRV request. \nIf nothing is configured, user authentication will fail immediately.')
ldapSearchDomain = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 18), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readwrite').setDescription('This parameter may be used as the domain name in the DNS SRV request, \ndepending on how the Domain Source parameter is configured.')
ldapServiceName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 19), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription("The DNS SRV request sent to the DNS server must also specify a service name. \nThe configured value will be used for this purpose. If left blank, the default \nvalue used is 'ldap'. Note that the DNS SRV request must also specify a protocol \nname. This defaults to 'tcp' and is not configurable.")
ldapRBSModelCfg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('oldPermissionString', 0), ('newRBSModel', 1), ))).setMaxAccess('readwrite').setDescription('There are two mechanisms to authenticate and authorize users on the AMM when \nusing an LDAP-enabled server. The first mechanism (oldPermissionString), also \nknown as version 1, uses bitstrings to associate permissions to users and groups. \nVersion1 supports Active Directory, Novell eDirectory, and OPenLDAP based \nservers.  The second mechanism (newRBSModel),  also known as version 2, \nuses a new Role-Based-Security (RBS) model. This mechanism is only available \nfor Active Directory servers, and requires the use of a snap-in that runs on any \nwindows platform. This snap-in tool allows you to configure roles on an Active \nDirectory server of your choice, and to associate users/groups and AMMs to those \nroles. A role identifies the permissions given to users and groups associated with \nthat role, and also identifies the targets (e.g. AMM) to which this role is attached. \nThe use of bitstrings in version 2 disappears, making the configuration much more \nmanageable and user-friendly. Note that if you are not using Active Directory, then \nyou should not enable version 2. Also note that before enabling version 2, you should \nalready have your roles configured on your Active Directory server. The old version 1\nbitstring model cannot be automatically converted to the new version 2 model. This is \nwhy you must configure your users and groups before enabling version 2. Once \nenabled, the change takes effect immediately. The default value for this field is \noldPermissionString.')
ldapTargetName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 21), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription('When administrator chooses Enhanced Role Based Security authentication model, \nhe can associate  one AMM with one managed target object in Snap-in (one tool \nto configure LDAP users permission) via one target name. The AMM target name can \nbe looked as alias of AMM, administrator can change it according to his \nconfiguration requirements. This is a string of up to 63 characters (plus the \nnull character)')
uplinkCheckConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7))
uplinkCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('uplinkCheckDisabled', 0), ('uplinkCheckEnabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable network uplink checking for physical detection.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
uplinkCheckDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 2), Integer32()).setMaxAccess('readwrite').setDescription('Delay, in minutes (1-2880), between discovery of a failed network uplink and\nthe subsequent MM failover for physical detection.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
logicalUplinkDestination = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 3), IpAddress()).setMaxAccess('readwrite').setDescription('Destination IP for MM to check its logical link.\nSpecify a non-zero IP Address in order to enable logical uplink checking.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
logicalUplinkCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('uplinkCheckDisabled', 0), ('uplinkCheckEnabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable network uplink checking for logical detection.\nlogicalUplinkDestination must be set to a non-zero IP Address before enable \nlogical uplink checking.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
logicalUplinkCheckDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 5), Integer32()).setMaxAccess('readwrite').setDescription('Delay, in minutes(1-2880), between discovery of a failed network uplink and\nthe subsequent MM failover for logical detection.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
physicalUplinkCheckDelayInSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 6), Integer32()).setMaxAccess('readwrite').setDescription('Delay, in seconds(10-172800), between discovery of a failed network uplink and\nthe subsequent MM failover for physical detection.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
logicalUplinkCheckDelayInSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 7), Integer32()).setMaxAccess('readwrite').setDescription('Delay, in seconds(60-172800), between discovery of a failed network uplink and\nthe subsequent MM failover for logical detection.\n\nNOTE: This MIB object is only applicable to systems with a standby MM.')
ntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable the NTP client.  The client will update\nthe AMM system clock at the frequency specified.')
ntpIpAddressHostname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription("NTP server's IP address or hostname if DNS is enabled\nand configured.")
ntpUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 3), Integer32()).setMaxAccess('readwrite').setDescription('The frequency in minutes that the NTP service runs.\nThe value range is 0 to 45000. If the NTP update frequency \nis set to 0, the AMM clock can only be synchronized with the \nNTP server manually.')
ntpLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 4), OctetString()).setMaxAccess('readonly').setDescription('The date and time that the NTP server last updated\nthe system clock.')
ntpUpdateClock = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Update the AMM system clock with the specified NTP server.\nA valid NTP server must be configured first.')
ntpAuthEntry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 6), OctetString()).setMaxAccess('readwrite').setDescription('The NTP v3 authentication entry to be used for time sync\nwith a secure NTP server. The format of an authentication\nentry is <key index> <key type> <key>. <key index> must\nbe an integer between 1 and 65535. <key type> must be\nM. <key> is the actual value of the authentication\nkey as configured on the NTP server.\nThe GET command returns back data in the format:\n<key index> <key type>\nIt does not return the actual key.')
ntpAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Enables/Disables NTP v3 authentication')
syslogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9))
syslogSevFilterLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,0,1,)).subtype(namedValues=namedval.NamedValues(('error', 0), ('warning', 1), ('information', 2), ))).setMaxAccess('readwrite').setDescription('syslogSevFilterLevel    error/warning/information .')
syslogCollectorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2))
syslogCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1)).setDescription('Table of Syslog Collector entries')
syslogCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'syslogCollectorIndex')).setDescription('Syslog Collector entries')
syslogCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Index for Syslog Collector entry.')
syslogCollectorHostnameOrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('Syslog Collector IP address or host name.')
syslogCollectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readwrite').setDescription('Syslog Collector port number.')
syslogCollectorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Syslog Collector enable/disable.')
solConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10))
solGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1))
solEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('solDisabled', 0), ('solEnabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable SOL dynamically.')
solVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription("This is the virtual LAN ID for the internal management network between the MM and \nthe Blade System Management Processors (BSMPs).  The range of valid VLAN ID's \nis 3 to 4095.")
solAccumulateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('This value specifies how much time in millisecond SOL to buffer data before\nsending the next SOL packet since the last SOL packet was transmitted.\nValid value from 5 ms to 1275 ms. The value is in 5 ms increment. Value\nis not in 5 ms increment will be truncated to a nearest 5s. Default value\nis 5 ms.')
solCharSendThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('This value specifies how many characters SOL to buffer before\nsending the next SOL packet since the last SOL packet was transmitted.\nValid value is from 1 to 255')
solRetry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('Retry count. Valid value from 0-7. 0 means no retries after packet is transmitted.\nPacket will be dropped if no ACK/NACK received by the time retries expired.')
solRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('Retry Interval in 10 ms increment. Sets the time that the SOL will \nwait before the first retry and the time between retries when sending SOL \npackets to the remote blade. Value range is from 0 to 2550 ms in 10 ms\nincrement. 0 means retries will be sent back-to-back.')
solExitToCliKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription("This is the keystroke sequence used to escape out of SOL session and back to CLI \nconsole. This sequence must have at least one character. The caret symbol (^) \nhas a special meaning in this sequence. It denotes 'Ctrl' for keystrokes that \nmap to Ctrl sequences (for example, ^[ for the escape key and ^M for carriage \nreturn). All occurrences of ^ will be interpreted as part of a Ctrl sequence. \nRefer to an ASCII-to-key conversion table for a complete list of Ctrl sequences. \nThe default value for this field is '^[(' i.e. ESC followed by (.")
solResetBladeKeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 8), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription("This is the keystroke sequence used to reset the blade while in SOL session \nconsole. This sequence must have at least one character. The caret symbol (^) \nhas a special meaning in this sequence. It denotes 'Ctrl' for keystrokes that \nmap to Ctrl sequences (for example, ^[ for the escape key and ^M for carriage \nreturn). All occurrences of ^ will be interpreted as part of a Ctrl sequence. \nRefer to an ASCII-to-key conversion table for a complete list of Ctrl sequences. \nThe default value for this field is '^[R^[r^[R' i.e. ESC R ESC r ESC R.")
solBladeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2))
solBladeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1)).setDescription('SOL Blade configuration table.')
solBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'solBladeIndex')).setDescription('SOL Blade table entry')
solBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('SOL Blade table index.')
solBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
solBladeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('solBladeDisabled', 0), ('solBladeEnabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable a SOL on a blade.')
solBladeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 4), IpAddress()).setMaxAccess('readonly').setDescription('IP address of the blade derived from the IP address range for the blade \nsystem management processors on the blades.')
solBladeSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('solSessionNotReady', 0), ('solSessionReady', 1), ('solSessionActive', 2), ))).setMaxAccess('readonly').setDescription('Status of a blade SOL session:\nsolSessionNotReady: no SOL session connected to the blade.\nsolSessionReady: there is an SOL session to the blade.\nsolSessionActive: there is an SOL session to the blade and there is a\nclient using the SOL session.')
solBladeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('notSupport', 0), ('support', 1), ))).setMaxAccess('readonly').setDescription('Display whether or not the blade support SOL feature.')
chassisInternalNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11))
cinsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of Chassis Internal Network (CIN) definitions supported.\nCurrently a maximum of 14 CIN definitions can be supported.')
cinGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('cinDisabled', 0), ('cinEnabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable Chassis Internal Network (CIN) function dynamically.\nEnabled:\n  AMM reads the CIN entries. For each enabled entry,\n    - If the CIN VLAN ID is new and does not have a CIN interface\n      created yet then create a new CIN interface based on that\n      CIN VLAN ID. Use the CIN IP address from the entry to create\n      a host route.\n    - If the CIN IP address is 0.0.0.0 then start ARP monitoring.\n\n  Disabled:\n     - Stop all ARP monitoring.\n     - Delete all host routes.\n     - Delete all CIN interfaces.')
cinTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3)).setDescription('Chassis Internal Network (CIN) configuration table.')
cinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'cinIndex')).setDescription('Chassis Internal Network (CIN) table entry.')
cinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Chassis Internal Network (CIN) table index.')
cinDefExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates if a Chassis Internal Network (CIN) definition exists for\nthis index or not.')
cinDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Delete Chassis Internal Network (CIN) definition.  \nWorks like CIN entry disabled. However, the entry is also deleted.\n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object. Deleting a non-defined entry does nothing.')
cinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable or enable a Chassis Internal Network (CIN) definition.\nEnabled:\n  AMM reads the entry and creates a new CIN interface if the CIN VLAN\n  ID is new and does not have a CIN interface created yet, adds host\n  route, and monitors communication path. Start ARP monitoring if\n  IP is 0.0.0.0.\n\n Disabled:\n   Delete host route. If this is the last IP address that uses the CIN\n   interface,\n     - Stop ARP monitoring if IP is 0.0.0.0.\n     - Delete the CIN interface if there is no other entry depends on it.')
cinId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('This is the Chassis Internal Network (CIN) Virtual LAN (VLAN) ID for\nthe internal management network between the Management Module, \nI/O Module, and the blade OS. The range of valid CIN VLAN IDs is\n3 to 4094 (inclusive). This value cannot be the same as the \nSerial Over LAN (SOL) or Concurrent KVM (cKVM) VLAN ID.\n\n NOTE: If creating a new CIN definition, you must define cinId\n before you define cinIpAddress.\n\n NOTE: Before changing this value on an existing CIN definition,\n you must first disable the definition.')
cinIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 6), IpAddress()).setMaxAccess('readwrite').setDescription("Chassis Internal Network (CIN) IP address.\n\nRestrictions:\n - CIN entries cannot have matching IP addresses, with the exception of 0.0.0.0. \n - Multiple IP addresses of 0.0.0.0 with different VLAN IDs are allowed.\n - The IP address cannot be multi-cast.\n - The IP address cannot match the AMM IP address.\n - If the CIN IP address is 0.0.0.0, the blade IP address for CIN which is configured \n   in the blade's OS can not be in the same subnet as that of AMM.\n\nNOTE: If creating a new CIN definition, you must define cinId\nbefore you define cinIpAddress.\n\nNOTE: Before changing this value on an existing CIN definition,\nyou must first disable the definition.\nNOTE: When ipv6 is enable on one interface, this column will \ndisplay all zero IPv4 address")
cinIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 7), InetAddressIPv6()).setMaxAccess('readwrite').setDescription('Chassis Internal Network (CIN) IPv6 address\n\nNOTE: When ipv4 is enable on one interface,this column will display\nall zero IPv6 address.')
cinStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4))
cinStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1)).setDescription('Table of Chassis Internal Network (CIN) status entry information.')
cinStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'cinStatusIndex')).setDescription('Chassis Internal Network (CIN) status table entry.')
cinStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The Chassis Internal Network (CIN) status log index number.  \nFor consistent results, view as a table and not as individual entries.')
cinStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription("Status of a Chassis Internal Network (CIN) connection. For example:\n\nIndex:1 VLANID:4094 IPADDR:192.168.70.100 MAC:01:0A:0B:00:01:01 Type:Learned Status:Operational\n\nIndex is the status entry number in the status table. Followed by the \nVLAN ID, IP address, and MAC address that the Management Module is\ncommunicating with on the CIN connection. \n\nType is either 'Configured' or 'Learned'. Learned implies that the\nManagement Module dynamically discovered the IP address. \nConfigured means that the address was explicitly configured in \nthe Management Module. \n\nStatus can be 'Operational', 'Not Operational', or 'Disabled'.\n\n'Operational' means the Management Module can ping the CIN IP address.\n\n'Not Operational' means that the Management Module cannot ping the CIN\nIP address. Verify that the blade and I/O Module are configured properly\nand that their configurations are compatible with the Management Module.\nThe blade OS also needs to have an IP host route defined\n(e.g. route add -host 192.168.70.100 eth0.4094).\nI/O Modules need to have a VLAN defined containing the blade's and the\nAMM's port. Blade and I/O Modules need to be powered up and operational.\n\n'Disabled' means that the CIN configuration has been disabled by a\nManagement Module administrator.\n\nFor consistent results, view as a table and not as individual entries.")
configurationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15))
saveConfigurationToChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('compressedFormat', 1), ('legacyFormat', 2), ))).setMaxAccess('readwrite').setDescription('Save the configuration settings from the AMM to the chassis.\nThis operation may take several seconds.\nThe input values for the SET command when AMM is installed in BladeCenter and \nBladeCenter T are:\n   1: Save the configuration settings in compressed(AMM) format.\n   2: Save the configuration settings in legacy(MM) format. This option has \n   been deprecated.\n   other: Invalid.\n\nThe input values for the SET command when AMM is installed in BladeCenter H and \nBladeCenter HT are:\n   1: Save the configuration settings in compressed(AMM) format.\n   other: Invalid.\n\nNOTE: This MIB object is for AMM only and the value returned for the GET command is meaningless.')
restoreConfigurationFromChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restore the configuration settings to the AMM from the BladeCenter chassis.         \nNOTE: This MIB object is for AMM only and the value returned for the GET command is meaningless.')
autoReadConfigInNewChassis = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('The AMM will automatically read configuration settings\nfrom the midplane every time the AMM is inserted into a\nnew chassis.\nNOTE: This MIB object is for AMM only.')
telcoManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5))
telcoAlarmReq = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1))
telcoAlarmSet = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 1), OctetString()).setMaxAccess('readwrite').setDescription('Create a software alarm. An input octet string consists of the \nalarm severity level and the alarm description (40 bytes max).\nThe following severity levels are valid :\n     CRT Critical \n     MJR Major \n     MNR Minor\n     \nNOTE 1: Value returned for the GET command is meaningless for \nthis MIB object.\n\nNOTE 2: This MIB object is for BladeCenter T only.')
telcoAlarmAck = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 2), OctetString()).setMaxAccess('readwrite').setDescription("Acknowledge an alarm. An input octet string consists of the \nalarm key ID expressed as 'mmm:ggg:iii:aaa:sss' where: \n   m : Module ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   g : Gen ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   i : GenInfo ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s)\n   a : Alarm ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s) \n   s : Alarm severity value of decimal digits(1-255) or\n       blank space(s) for leading zero(s) \n\n       \nNOTE 1: Value returned for the GET command is meaningless for \nthis MIB object.\n  \nNOTE 2: This MIB object is for BladeCenter T only.")
telcoAlarmClear = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 3), OctetString()).setMaxAccess('readwrite').setDescription("Clear an active alarm. An input octet string consists of the \nalarm key ID expressed as 'mmm:ggg:iii:aaa:sss' where: \n   m : Module ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   g : Gen ID value of decimal digits(1-255) or \n       blank space(s) for leading zero(s)\n   i : GenInfo ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s)\n   a : Alarm ID value of decimal digits(1-255) or\n       blank space(s) for leading zero(s)    \n   s : Alarm severity value of decimal digits(1-255) or\n       blank space(s) for leading zero(s) \n       \n       \nNOTE1 : Value returned for the GET command is meaningless for \nthis MIB object.\n  \nNOTE 2: This MIB object is for BladeCenter T only.")
telcoHWManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3))
tappowerReq = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 1))
tappoweronoff = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('poweroff', 0), ('poweron', 1), ))).setMaxAccess('readwrite').setDescription('Telco Alarm Panel power on or power off.  If powering off a currently\npowered on Telco Alarm Panel, then all LEDs of this request card will \nbe reset to OFF and the Safely Remove LED will be turned ON to indicate \nthe card is safe for removal.\nNOTE: This MIB object is for BladeCenter HT only.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
ncReq = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2))
ncReqTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1)).setDescription('Table of the Network Clock Module Operations.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'ncReqIndex')).setDescription('Network Clock Module Power ON/OFF entry.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 128))).setMaxAccess('readonly').setDescription('Network Clock Module Request index.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncReqBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('networkclock1', 1), ('networkclock2', 2), ))).setMaxAccess('readonly').setDescription('Network Clock Module Request Bay number.\nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BladeCenter HT only.')
ncReqPoweronoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('poweroff', 0), ('poweron', 1), ))).setMaxAccess('readwrite').setDescription('Request to power on/off for the specified Network Clock Module. \nFor consistent results, view as a table and not as individual entries.\nNOTE: This MIB object is for BladeCenter HT only.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
telcoOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127))
telcoOEMs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127, 1), OctetString()).setMaxAccess('readonly').setDescription("A bitmap of information about the contents of this subtree. The \nbitmap is a variable length string containing a list of 1's and 0's.\nEvery bit that is set to 1 has a corresponding subtree entry that\nis supported in firmware, while a 0 means that the subtree entry\nis unavailable.\n\nNOTE: This MIB object is for BladeCenter T only.")
restartReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7))
restartSPImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restart the MM immediately.\n\nNOTE: Value returned for the GET command is meaningless for \nthis MIB object.')
restartStandbyMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restarts the Standby MM from the Primary MM.\n\nNOTE: Value returned for the GET command is meaningless for \nthis MIB object.\n\nNOTE: This mib object is only applicable to systems with a standby MM.')
switchOverRedundantMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Switch over to the redundant Management Module.\nThe failover will not occur if the standby or primary MM is in flashing mode.\n\nNOTE: Value returned for the GET command is meaningless for \nthis MIB object.\n\nNOTE: This mib object is only applicable to systems with a redundant MM.')
resetSPConfigAndRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription("Will cause all the MM information to be reset to it's\ninitial factory defaults (all previous configuration\ninformation is lost) and the MM will be re-started.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.")
resetSPConfigAndRestartSaveLogs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription("Will cause all the MM information to be reset to it's\ninitial factory defaults (all previous configuration\ninformation is lost) and the MM will be re-started. The \nlogs will be saved.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.")
blades = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22))
processorBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1))
bladeMediaTrayBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,0,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('managementModule', 0), ('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readwrite').setDescription('Allocate the media tray to a blade of a BladeCenter system.\nOn a get command, a blade ID of 0x00 means that no blade is\ncurrently using the device.  A set command cannot allocate\nthe media tray to the management module.\n\nNOTE: A blade cannot be allocated to the media tray if the \nvalue of OID remoteMediaTraySwitchEnable of the blade is disabled.')
bladeKVMBladeId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,0,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('managementModule', 0), ('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readwrite').setDescription('Allocate the keyboard, video, and mouse ports (KVM) to a blade\nof a blade runner system.  On a get command, a blade ID of 0x00\nmeans that no blade is currently using the devices.  A set\ncommand cannot allocate the KVM to the management module.')
bladeBootSequenceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3)).setDescription('Table of blade boot sequence information.  Contains\nthe boot sequence information for each blade.')
bladeBootSequenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'bootSequenceIndex')).setDescription('Boot sequence entry')
bootSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade boot sequence index.')
bootSequenceBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bootSequenceBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bootSequenceBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bootSequenceBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,1,0,6,11,2,7,3,5,8,9,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('insufficientPower', 10), ('powerDenied', 11), ('warning', 2), ('critical', 3), ('kernelMode', 4), ('discovering', 5), ('commError', 6), ('noPower', 7), ('flashing', 8), ('initFailure', 9), ))).setMaxAccess('readonly').setDescription("The system health state for the blade.\n\nUnknown: Blade is in an undefined state.\nGood: Blade is operating normally.\nWarning: One or more outstanding warnings exist for this blade.\nCritical: One or more outstanding critical events for this blade.\nKernel Mode: Blade is in kernel mode.\nDiscovering: The AMM is currently in the process of discovering this blade.\nCommunications Error: The AMM failed to communicate with this blade.\nNo Power: No power to the blade's domain.\nFlashing: Flashing in progress.\nInitialization Failure: Blade failed to initialized.\nInsufficient Power: Not enough power is left in the blade's domain to power the blade.\nPower Denied: Power was denied to the blade.")
bootSequenceBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bootSequence1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(11,1,8,7,0,4,3,6,5,2,255,9,10,)).subtype(namedValues=namedval.NamedValues(('noneSpecified', 0), ('floppy', 1), ('hardDrive4', 10), ('usbModularFlashDrive', 11), ('cdrom', 2), ('notAvailable', 255), ('hardDrive0', 3), ('hardDrive1', 4), ('hardDrive2', 5), ('hardDrive3', 6), ('networkBoot', 7), ('iscsi', 8), ('iscsiCritical', 9), ))).setMaxAccess('readwrite').setDescription("The boot device for this blade boot sequence. Note that some types\nof blades don't support floppy disk drive. It is recommended that all\nboot sequence 1,2 3, and 4 be configured starting from boot sequence 1.\nIf there is any duplication of the configured boot sequence and the \ncurrent configuration, the two boot sequence will be swapped. \nFor an example: the current boot sequence is\n     1=HD0, 2=CD, 3=FD, 4=HD1\nIf the user wants to configure 1=FD which is a duplication of 3 then the\nnew boot sequence will be:\n     1=FD, 2=CD, 3=HD0, 4=HD1  (1 and 3 swapped)\nNot all hard drives are available on all blade configurations.\nThe 'Iscsi critical' option has a special meaning: the blade tries to \nfind an iscsi boot device and if it does not it keeps trying forever.")
bootSequence2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(11,1,8,7,0,4,3,6,5,2,255,9,10,)).subtype(namedValues=namedval.NamedValues(('noneSpecified', 0), ('floppy', 1), ('hardDrive4', 10), ('usbModularFlashDrive', 11), ('cdrom', 2), ('notAvailable', 255), ('hardDrive0', 3), ('hardDrive1', 4), ('hardDrive2', 5), ('hardDrive3', 6), ('networkBoot', 7), ('iscsi', 8), ('iscsiCritical', 9), ))).setMaxAccess('readwrite').setDescription("The boot device for this blade boot sequence. Note that some types\nof blades don't support floppy disk drive. It is recommended that all\nboot sequence 1,2 3, and 4 be configured starting from boot sequence 1.\nIf there is any duplication of the configured boot sequence and the \ncurrent configuration, the two boot sequence will be swapped. \nFor an example: the current boot sequence is\n     1=HD0, 2=CD, 3=FD, 4=HD1\nIf the user wants to configure 1=FD which is a duplication of 3 then the\nnew boot sequence will be:\n     1=FD, 2=CD, 3=HD0, 4=HD1  (1 and 3 swapped)\nNot all hard drives are available on all blade configurations.\nThe 'Iscsi critical' option has a special meaning: the blade tries to \nfind an iscsi boot device and if it does not it keeps trying forever.")
bootSequence3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(11,1,8,7,0,4,3,6,5,2,255,9,10,)).subtype(namedValues=namedval.NamedValues(('noneSpecified', 0), ('floppy', 1), ('hardDrive4', 10), ('usbModularFlashDrive', 11), ('cdrom', 2), ('notAvailable', 255), ('hardDrive0', 3), ('hardDrive1', 4), ('hardDrive2', 5), ('hardDrive3', 6), ('networkBoot', 7), ('iscsi', 8), ('iscsiCritical', 9), ))).setMaxAccess('readwrite').setDescription("The boot device for this blade boot sequence. Note that some types\nof blades don't support floppy disk drive. It is recommended that all\nboot sequence 1,2 3, and 4 be configured starting from boot sequence 1.\nIf there is any duplication of the configured boot sequence and the \ncurrent configuration, the two boot sequence will be swapped. \nFor an example: the current boot sequence is\n     1=HD0, 2=CD, 3=FD, 4=HD1\nIf the user wants to configure 1=FD which is a duplication of 3 then the\nnew boot sequence will be:\n     1=FD, 2=CD, 3=HD0, 4=HD1  (1 and 3 swapped)\nNot all hard drives are available on all blade configurations.\nThe 'Iscsi critical' option has a special meaning: the blade tries to \nfind an iscsi boot device and if it does not it keeps trying forever.")
bootSequence4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(11,1,8,7,0,4,3,6,5,2,255,9,10,)).subtype(namedValues=namedval.NamedValues(('noneSpecified', 0), ('floppy', 1), ('hardDrive4', 10), ('usbModularFlashDrive', 11), ('cdrom', 2), ('notAvailable', 255), ('hardDrive0', 3), ('hardDrive1', 4), ('hardDrive2', 5), ('hardDrive3', 6), ('networkBoot', 7), ('iscsi', 8), ('iscsiCritical', 9), ))).setMaxAccess('readwrite').setDescription("The boot device for this blade boot sequence. Note that some types\nof blades don't support floppy disk drive. It is recommended that all\nboot sequence 1,2 3, and 4 be configured starting from boot sequence 1.\nIf there is any duplication of the configured boot sequence and the \ncurrent configuration, the two boot sequence will be swapped. \nFor an example: the current boot sequence is\n     1=HD0, 2=CD, 3=FD, 4=HD1\nIf the user wants to configure 1=FD which is a duplication of 3 then the\nnew boot sequence will be:\n     1=FD, 2=CD, 3=HD0, 4=HD1  (1 and 3 swapped)\nNot all hard drives are available on all blade configurations.\nThe 'Iscsi critical' option has a special meaning: the blade tries to \nfind an iscsi boot device and if it does not it keeps trying forever.")
bladeRemoteControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4))
bladeRemoteControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1)).setDescription('Table of blade remote power control information.\nContains power on/off enablement status for each blade.')
bladeRemoteControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'remoteControlIndex')).setDescription('Remote power control entry')
remoteControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade remote power control index.')
remoteControlBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
remoteControlBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
remoteControlBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,0,3,255,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('unknown', 255), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('The power state for blade.\n0 = off, 1 = on, 3 = standby, 4 = hibernate, 255 = unknown.')
remoteControlBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,1,0,6,11,2,7,3,5,8,9,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('insufficientPower', 10), ('powerDenied', 11), ('warning', 2), ('critical', 3), ('kernelMode', 4), ('discovering', 5), ('commError', 6), ('noPower', 7), ('flashing', 8), ('initFailure', 9), ))).setMaxAccess('readonly').setDescription("The system health state for the blade.\n\nUnknown: Blade is in an undefined state.\nGood: Blade is operating normally.\nWarning: One or more outstanding warnings exist for this blade.\nCritical: One or more outstanding critical events for this blade.\nKernel Mode: Blade is in kernel mode.\nDiscovering: The AMM is currently in the process of discovering this blade.\nCommunications Error: The AMM failed to communicate with this blade.\nNo Power: No power to the blade's domain.\nFlashing: Flashing in progress.\nInitialization Failure: Blade failed to initialized.\nInsufficient Power: Not enough power is left in the blade's domain to power the blade.\nPower Denied: Power was denied to the blade.")
remoteControlBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
remotePowerControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade remote power control enablement status.')
remoteMediaTrayControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade media tray enablement status.')
remoteKVMControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("Blade KVM enablement status. Note that some types of blades\ndon't support KVM")
remoteWakeOnLanControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription("Blade Wake On LAN enablement status.\nIf WOL is not supported by the blade, it displays 'notApplicable'\nand WOL can not be enabled or disabled.")
remoteMediaTraySwitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade Remote Media Tray Switch enablement status. \nIf the remote disk feature is disabled, this OID cannot be set.')
bladePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2))
bladePolicyPowerControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade remote power control enablement status policy.')
bladePolicyMediaTrayControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade media tray enablement status policy.')
bladePolicyKVMControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("Blade KVM enablement status policy. Note that some types of blades\ndon't support KVM.")
bladePolicyWakeOnLanControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription('Blade Wake On LAN enablement status policy.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
bladePolicyMediaTraySwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade Remote Media Tray Switch enablement status policy. \nIf the remote disk feature is disabled, this OID cannot be set.')
bladePolicyMultipleRemoteVideoEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Blade multiple remote video sessions enablement status policy.\n\nA maximum users can access the video of the same blade from remote \nconsole when set to enabled. If it is disabled, only one user can\naccess the video from remote control.')
bladeMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5))
bladeSystemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1)).setDescription('Table of blade status information.')
bladeSystemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeStatusIndex')).setDescription('Blade system status entry')
bladeStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade system status index.')
bladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,1,0,6,11,2,7,3,5,8,9,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('insufficientPower', 10), ('powerDenied', 11), ('warning', 2), ('critical', 3), ('kernelMode', 4), ('discovering', 5), ('commError', 6), ('noPower', 7), ('flashing', 8), ('initFailure', 9), ))).setMaxAccess('readonly').setDescription("The system health state for the blade.\n\nUnknown: Blade is in an undefined state.\nGood: Blade is operating normally.\nWarning: One or more outstanding warnings exist for this blade.\nCritical: One or more outstanding critical events for this blade.\nKernel Mode: Blade is in kernel mode.\nDiscovering: The AMM is currently in the process of discovering this blade.\nCommunications Error: The AMM failed to communicate with this blade.\nNo Power: No power to the blade's domain.\nFlashing: Flashing in progress.\nInitialization Failure: Blade failed to initialized.\nInsufficient Power: Not enough power is left in the blade's domain to power the blade.\nPower Denied: Power was denied to the blade.")
bladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladeRemotePowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readonly').setDescription('Remote power state for the blade.\n0x01 indicates enabled.')
bladeRemoteMediaTrayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readonly').setDescription('Remote Media Tray state for the blade.\n0x01 indicates enabled.')
bladeRemoteKVMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readonly').setDescription("Remote keyboard/video/monitor state for the blade.\n0x01 indicates enabled. Note that some types of blades\n  don't support KVM")
bladeConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ))).setMaxAccess('readonly').setDescription('Connection type of the expansion card number one.')
bladeOwnsKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription("Indicates whether the MM owns the KVM.\n0 = false, 1 = true. Note that some types of blades\n  don't support KVM")
bladeOwnsMediaTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade owns the Media Tray.\n0 = false, 1 = true.')
bladeRemoteWakeOnLanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('Remote wake on LAN state for the blade.\n0x01 indicates enabled.')
bladeServerExpansion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('This shows whether this blade has an expansion board attached. \nA yes column indicates that an expansion board is installed for this \nblade.')
bladeWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The width of the blade including any supplement blade attached to it')
bladeSupportCapacityOnDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('This shows whether this blade support Capacity On Demand.\nNOTE: This Mib object is deprecated and no longer supported.')
bladeServerExpansion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('This shows whether this blade has an expansion board attached. \nA yes column indicates that an expansion board is installed for this \nblade.')
bladecKVMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,3,2,0,255,)).subtype(namedValues=namedval.NamedValues(('notPresent', 0), ('notReady', 1), ('ready', 2), ('notAvailable', 255), ('active', 3), ('disabled', 4), ))).setMaxAccess('readonly').setDescription('This shows whether this blade has a concurrent keyboard, video, and \nmouse (cKVM) card installed and the status of cKVM on the blade.\n\nNot present: A cKVM card is not installed.\nNot ready: A cKVM card is installed but is not functional. \nReady: A cKVM card is installed and is functional, with no cKVM session in progress.\nActive: A cKVM card is installed and is functional, with a cKVM session currently in progress.\nDisabled: A cKVM card is not enabled on this blade.\nNot available: A cKVM card is installed but the status is not available.')
bladeConnectionType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ))).setMaxAccess('readonly').setDescription('Connection type of the expansion card number 2.')
bladeConnectionType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ))).setMaxAccess('readonly').setDescription('Connection type of the expansion card number 3.')
bladeConnectionType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ))).setMaxAccess('readonly').setDescription('Connection type of the expansion card number 4.')
bladeConnectionType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 25), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ))).setMaxAccess('readonly').setDescription('Connection type of the expansion card number 5.')
bladeHighSpeedConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 41), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,5,6,7,1,3,4,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('ethernet', 1), ('fiber', 2), ('serial', 3), ('opticalPassThrough', 4), ('infiniband', 5), ('iSCSI', 6), ('infinibandPassThrough', 7), ))).setMaxAccess('readonly').setDescription('Connection type of the high speed expansion card number 1.')
bladeHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2)).setDescription('Table of blade health summary information.\nContains information about the overall blade health status.')
bladeHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeHealthSummaryIndex')).setDescription('Blade health summary entry')
bladeHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade health summary index.')
bladeHealthSummaryBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bladeHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('System health summary severity.')
bladeHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('System health summary description.')
bladeTemperaturesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3)).setDescription('Table of blade temperatures information.')
bladeTemperaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1)).setIndexNames((0, 'BLADE-MIB', 'temperatureIndex')).setDescription('Blade temperatures table entry')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade temperatures table index.')
temperatureBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
temperatureBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
temperatureBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
temperatureBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
temperatureCPU1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 9), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureDASD1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("The blade DASD temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensorTempCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade is IPMI capable or not.')
bladeSensor1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 12), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 13), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 14), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 15), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor5Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 16), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor6Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 17), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor7Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 18), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor8Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 19), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor9Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 20), OctetString()).setMaxAccess('readonly').setDescription("Temperature reading for an IPMI blade expressed in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeTemperatureThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4)).setDescription('Table of blade temperature thresholds information.')
bladeTemperatureThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1)).setIndexNames((0, 'BLADE-MIB', 'temperatureThresholdIndex')).setDescription('Blade temperature thresholds table entry')
temperatureThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade temperature threshold table index.')
temperatureThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
temperatureThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
temperatureThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
temperatureThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
temperatureCPU1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU hard shutdown temperature in degrees\ncentigrade(C).  If the component's temperature rises above\nthis value the system will be powered off immediately.\nIf enabled, a critical alert/event will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning temperature in degrees centigrade(C).\nIf the temperature rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning reset temperature in degrees\ncentigrade(C).  If the temperature rises above this value and\nif a warning alert/event had previously been created then the\nalert/event will be reset.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 9), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU hard shutdown temperature in degrees\ncentigrade(C).  If the component's temperature rises above\nthis value the system will be powered off immediately.\nIf enabled, a critical alert/event will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning temperature in degrees centigrade(C).\nIf the temperature rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 11), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning reset temperature in degrees\ncentigrade(C).  If the temperature rises above this value and\nif a warning alert/event had previously been created then the\nalert/event will be reset.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 12), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU hard shutdown temperature in degrees\ncentigrade(C).  If the component's temperature rises above\nthis value the system will be powered off immediately.\nIf enabled, a critical alert/event will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 13), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning temperature in degrees centigrade(C).\nIf the temperature rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 14), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning reset temperature in degrees\ncentigrade(C).  If the temperature rises above this value and\nif a warning alert/event had previously been created then the\nalert/event will be reset.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 15), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU hard shutdown temperature in degrees\ncentigrade(C).  If the component's temperature rises above\nthis value the system will be powered off immediately.\nIf enabled, a critical alert/event will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 16), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning temperature in degrees centigrade(C).\nIf the temperature rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureCPU4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 17), OctetString()).setMaxAccess('readonly').setDescription("The blade CPU warning reset temperature in degrees\ncentigrade(C).  If the temperature rises above this value and\nif a warning alert/event had previously been created then the\nalert/event will be reset.\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureDASD1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 18), OctetString()).setMaxAccess('readonly').setDescription("The blade DASD hard shutdown temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureDASD1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 19), OctetString()).setMaxAccess('readonly').setDescription("The blade DASD warning temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureDASD1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 20), OctetString()).setMaxAccess('readonly').setDescription("The blade DASD warning reset temperature in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeTempThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade is IPMI capable or not.')
temperatureSensor1HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 22), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor1Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 23), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor1WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 24), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor2HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 25), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor2Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 26), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor2WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 27), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor3HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 28), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor3Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 29), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor3WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 30), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor4HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 31), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor4Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 32), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor4WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 33), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor5HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 34), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor5Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 35), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor5WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 36), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor6HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 37), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor6Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 38), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor6WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 39), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor7HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 40), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor7Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 41), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor7WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 42), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor8HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 43), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor8Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 44), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor8WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 45), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor9HardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 46), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor9Warning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 47), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
temperatureSensor9WarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 48), OctetString()).setMaxAccess('readonly').setDescription("The blade hard shutdown temperature for IPMI blades in degrees centigrade(C).\nAn octet string expressed as 'sddd.dd Centigrade' where:\ns is the sign ('-' for negative or blank space for positive)\nd is a decimal digit or blank space for leading zeroes.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Temperature' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeVoltagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5)).setDescription('Table of blade voltages information.')
bladeVoltagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1)).setIndexNames((0, 'BLADE-MIB', 'voltageIndex')).setDescription('Blade voltages table entry')
voltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade voltages table index.')
voltageBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
voltageBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
voltageBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
voltageBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bladePlus5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("+5 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus3pt3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("+3.3 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("+12 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus2pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("+2.5 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 11), OctetString()).setMaxAccess('readonly').setDescription("+1.5 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 12), OctetString()).setMaxAccess('readonly').setDescription("+1.25 Volt power supply voltage reading for the blade\nexpressed in Volts(V).  An octet string expressed as\n'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeVRM1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 13), OctetString()).setMaxAccess('readonly').setDescription("VRM 1 voltage reading for the blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensorVoltCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade is IPMI capable or not.')
bladeSensor1Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 15), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor2Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 16), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 17), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor4Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 18), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 19), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor6Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 20), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor7Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 21), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor8Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 22), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor9Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 23), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor10Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 24), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor11Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 25), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 26), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor13Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 27), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor14Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 28), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor15Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 29), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor16Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 30), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor17Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 31), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor18Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 32), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor19Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 33), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor20Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 34), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor21Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 35), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor22Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 36), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor23Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 37), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor24Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 38), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor25Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 39), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor26Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 40), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor27Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 41), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor28Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 42), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor29Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 43), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor30Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 44), OctetString()).setMaxAccess('readonly').setDescription("Voltage reading for an IPMI blade expressed in Volts(V).\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeVoltageThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6)).setDescription('Table of blade VoltageThresholds information.')
bladeVoltageThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1)).setIndexNames((0, 'BLADE-MIB', 'voltageThresholdIndex')).setDescription('Blade voltage thresholds table entry')
voltageThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade voltage thresholds table index.')
voltageThresholdBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
voltageThresholdBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
voltageThresholdBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
voltageThresholdBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('The name of the blade as a null terminated string.')
bladePlus5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 6), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 7), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus3pt3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 8), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus3pt3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 9), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 10), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 11), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus2pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 14), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus2pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 15), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 16), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 17), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 18), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage rises above this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePlus1pt25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 19), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading expressed in Volts(V).\nIf the voltage drops below this value a warning alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeVoltThresholdSensorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade is IPMI capable or not.')
bladeSensor1VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 23), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor1VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 24), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor2VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 25), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor2VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 26), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor3VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 27), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor3VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 28), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor4VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 29), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor4VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 30), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor5VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 31), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor5VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 32), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor6VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 33), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor6VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 34), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor7VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 35), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor7VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 36), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor8VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 37), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor8VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 38), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor9VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 39), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor9VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 40), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor10VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 41), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor10VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 42), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor11VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 43), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor11VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 44), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor12VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 45), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor12VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 46), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor13VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 47), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor13VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 48), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor14VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 49), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor14VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 50), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor15VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 51), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor15VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 52), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor16VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 53), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor16VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 54), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor17VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 55), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor17VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 56), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor18VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 57), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor18VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 58), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor19VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 59), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor19VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 60), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor20VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 61), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor20VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 62), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor21VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 63), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor21VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 64), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor22VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 65), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor22VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 66), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor23VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 67), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor23VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 68), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor24VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 69), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor24VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 70), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor25VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 71), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor25VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 72), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor26VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 73), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor26VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 74), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor27VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 75), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor27VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 76), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor28VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 77), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor28VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 78), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor29VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 79), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor29VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 80), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor30VoltHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 81), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage rises above this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladeSensor30VoltLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 82), OctetString()).setMaxAccess('readonly').setDescription("Voltage warning threshold reading for IPMI blades expressed in Volts(V).\nIf the voltage drops below this value, a critical alert/event\nif enabled will be generated.\nAn octet string expressed as 'sdd.dd Volts' where:\ns is the sign ('-' for negative or '+' for positive)\nd is a decimal digit or blank space for a leading zero.\nThe string 'Not Readable!' indicates that the given monitor\nis not supported on this system.\nThe string 'No Voltage' indicates that the given monitor\ndoes not exist on this system or is powered off.")
bladePowerRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6))
bladePowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1)).setDescription('Table of blade remote power control information.\nContains power on/off enablement status for each blade.')
bladePowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'powerRestartIndex')).setDescription('Blade power restart table entry')
powerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade power restart table index.')
powerRestartBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
powerRestartBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
powerRestartBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
powerRestartBladeHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,1,0,6,11,2,7,3,5,8,9,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('insufficientPower', 10), ('powerDenied', 11), ('warning', 2), ('critical', 3), ('kernelMode', 4), ('discovering', 5), ('commError', 6), ('noPower', 7), ('flashing', 8), ('initFailure', 9), ))).setMaxAccess('readonly').setDescription("The system health state for the blade.\n\nUnknown: Blade is in an undefined state.\nGood: Blade is operating normally.\nWarning: One or more outstanding warnings exist for this blade.\nCritical: One or more outstanding critical events for this blade.\nKernel Mode: Blade is in kernel mode.\nDiscovering: The AMM is currently in the process of discovering this blade.\nCommunications Error: The AMM failed to communicate with this blade.\nNo Power: No power to the blade's domain.\nFlashing: Flashing in progress.\nInitialization Failure: Blade failed to initialized.\nInsufficient Power: Not enough power is left in the blade's domain to power the blade.\nPower Denied: Power was denied to the blade.")
powerRestartBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
powerOnOffBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('softoff', 2), ))).setMaxAccess('readwrite').setDescription('Control the power state of a specific blade.\n\nOff: Power Off Blade.\nOn:  Power On Blade.\nSoftoff: Shut Down OS and Power Off Blade. This operation is not\n         supported on all blades.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object. The powerRestartBladePowerState MIB object should be\nused to check the power state of the blade(s)')
restartBlade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restart a blade.\n\nNOTE: Value returned for the GET command is meaningless\nfor this MIB object.')
restartBladeSMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription("Restart a blade's system management processor.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.")
restartBladeNMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Soft reset and initiate a dump on a blade.  This option is not supported\non all blades.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
restartBladeClearNVRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restart a blade and set NVRAM to default values.  This option is not \nsupported on all blades.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
restartBladeInvokeDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restart a blade and boot into diagnostic mode.  This option is not \nsupported on all blades.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
restartBladeInvokeDiagsFromDefaultBootList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Restart a blade and boot into diagnostic mode from Default Boot List\nas defined on the blade.  This option is not supported on all blades.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
bladeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7))
bladeConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1)).setDescription('Table of blade remote power control information.\nContains power on/off enablement status for each blade.')
bladeConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'configurationIndex')).setDescription('Blade configuration table entry')
configurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade configuration table index.')
configurationBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
configurationBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
configurationBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
configurationBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('The name of the blade as a null terminated string.')
configurationBladecKVM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ('notPresent', 2), ))).setMaxAccess('readwrite').setDescription("Enable or disable the concurrent KVM function on specified blade.\nIf concurrent KVM is not supported by the blade, it displays 'notPresent' \nand the concurrent KVM functionality can not be enabled or disabled.")
configurationBladeActiveBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,2,1,)).subtype(namedValues=namedval.NamedValues(('temporary', 1), ('permanent', 2), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription("Indicates the active copy of the firmware from which the blade is booting.\nNOTE: Some blades do not support the automatic boot recovery. It displays\n'notApplicable' for such blades.\nBooting from the temporary copy is recommended since it typically contains the\nlatest enhancements and fixes. Switching to the permanent copy should be reserved\nfor when booting from the temporary copy is no longer possible.")
configurationBladePendingBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(255,2,1,)).subtype(namedValues=namedval.NamedValues(('temporary', 1), ('permanent', 2), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription("Indicates the copy of the firmware from which the blade will boot \nafter the next reboot.\nNOTE: Some blades do not support the automatic boot recovery. It displays\n'notApplicable' for such blades and the value can not be set.\nBooting from the temporary copy is recommended since it typically contains the\nlatest enhancements and fixes. Switching to the permanent copy should be reserved\nfor when booting from the temporary copy is no longer possible.")
bladePowerManagementPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2))
powerdomain1Oversubscription = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('not-allowed', 0), ('recoverable', 1), ('non-recoverable', 2), ))).setMaxAccess('readwrite').setDescription('Power Management Policy settings for power domain 1.')
powerdomain2Oversubscription = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('not-allowed', 0), ('recoverable', 1), ('non-recoverable', 2), ))).setMaxAccess('readwrite').setDescription('Power Management Policy settings for power domain 2.')
acousticMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Acoustic mode setting for thermal conditions')
nebsMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('NEBS (Network Equipment-Building System) mode setting for thermal conditions. \nNOTE: This MIB object is for BladeCenter T, HT and TR only.')
bladecKVMEnableDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable cKVM function on all server blades.')
bladeIPAddrRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 8), IpAddress()).setMaxAccess('readwrite').setDescription('This field is used to configure the start of the IP address range for the blade \nsystem management processors on the blades.  These addresses are used on the \ninternal management network between the MM and the blade BSMPs.  For example the \nvalue of 10.10.10.1 means the BSMP on the blade in bay 1 will have IP address \n10.10.10.1, the BSMP on the blade in bay 2 will have IP address 10.10.10.2 and so on.')
bladeCapacityOnDemand = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9))
bladeCapacityOnDemandTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1)).setDescription('Table of COD blade.\n\nNOTE: This table is deprecated and no longer supported.')
bladeCapacityOnDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeCapacityOnDemandIndex')).setDescription('Blade COD table entry\nNOTE: This table is deprecated and no longer supported.')
bladeCapacityOnDemandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade configuration table index.\nNOTE: This Mib object is deprecated and no longer supported.')
bladeCapacityOnDemandBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.\nNOTE: This Mib object is deprecated and no longer supported.')
bladeCapacityOnDemandState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('standby', 1), ('active', 2), ))).setMaxAccess('readwrite').setDescription('The state of Capacity On Demand.\nNOTE: This Mib object is deprecated and no longer supported.')
bladeBootCountPowerOnTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10))
bladeBootCountPowerOnTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1)).setDescription('Table per blade of the number of boots for the blade and \nthe number of seconds the blade has been powered on.')
bladeBootCountPowerOnTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'bootCountPowerOnTimeBladeIndex')).setDescription('The number of boots for the blade and \nthe number of seconds the blade has been powered on.')
bootCountPowerOnTimeBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade boot count/Power On Time table index.')
bootCountPowerOnTimeBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bootCountPowerOnTimeBoots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Blade Boot Count. If there is no blade in the\ngiven slot then this value is undefined. Writing this\nvalue resets the Boot Count to zero.')
bootCountPowerOnTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('Blade Power On Time in seconds. If there is no blade in\nthe given slot then this value is undefined. Writing this\nvalue resets the Power On Time to zero.')
bladeVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription("This is the virtual LAN ID for the internal management network between the MM and \nthe blade system management processors (BSMPs).  The range of valid VLAN ID's \nis 1 to 4095.")
bladeNetworkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12))
bladeNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2)).setDescription("Table of all blades' network interfaces.")
bladeNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'bladeNetworkInterfaceIndex')).setDescription('Blade configuration table entry')
bladeNetworkInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade Network Interface Table index.')
bladeNetworkInterfaceBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The bay number of the main server blade that supports network interface management')
bladeNetworkInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Indicates which network interface on the blade System Management Processor is be read or writen')
bladeNetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('public', 1), ('private', 2), ))).setMaxAccess('readonly').setDescription('Indicates blade network interface type.')
bladeNetworkInterfaceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Show string label that identifies the interface.')
bladeNetworkInterfaceIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 6), IpAddress()).setMaxAccess('readwrite').setDescription("Show/modify current IP address of the blade network interface.\nNote that only if the bladeNetworkInterfaceEnable is 'enabled(1)' and the bladeNetworkInterfaceDHCPEnable is not 'dhcpEnabled(1)', should the IP address be \npushed down to blade System Management Processor")
bladeNetworkInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 7), IpAddress()).setMaxAccess('readwrite').setDescription("Show or modifie current subnet mask of the blade network interface.\nNote that only if the bladeNetworkInterfaceEnable is 'enabled(1)' and the bladeNetworkInterfaceDHCPEnable is not 'dhcpEnabled(1)', should the SunnetMask be \npushed down to blade System Management Processor")
bladeNetworkInterfaceGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 8), IpAddress()).setMaxAccess('readwrite').setDescription("Show or modify current IP gateway of the blade network interface.\nNote that only if the bladeNetworkInterfaceEnable is 'enabled(1)' and the bladeNetworkInterfaceDHCPEnable is not 'dhcpEnabled(1)', should the Gateway address be \npushed down to blade System Management Processor")
bladeNetworkInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription("This is the virtual LAN ID for the network interface cards (NICs). The range of valid VLAN ID's is 0 to 4095.\nNote that only if the bladeNetworkInterfaceEnable is 'enabled(1)' and the bladeNetworkInterfaceType is 'public(1)', should the VLAN ID be \npushed down to blade System Management Processor")
bladeNetworkInterfaceVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription("enabled/diabled existing VLAN ID for the ethernet interface configure.\nNote that only if the bladeNetworkInterfaceEnable is 'enabled(1)' and the bladeNetworkInterfaceType is 'public(1)', should the VLAN Enable be \npushed down to blade System Management Processor")
bladeNetworkInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription("Disabled or enabled the blade network interface. If the network interface is disalbed, then ignore other configurations.\nIf this network interface doesn't support enabled/disabled, show 'notApplicable(255)'")
bladeNetworkInterfaceDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,255,1,2,)).subtype(namedValues=namedval.NamedValues(('dhcpDisabled', 0), ('dhcpEnabled', 1), ('tryDhcpThenTryStatic', 2), ('notApplicable', 255), ))).setMaxAccess('readwrite').setDescription("IP config method on the blade network interface to modify mode to static IP, dhcp and dhcpthenstatic.\nIf this network interface doesn't support DHCP, show 'notApplicable(255)'")
bladeNetworkInterfaceMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 13), OctetString()).setMaxAccess('readonly').setDescription("Show the blade network interface MAC address. If this network interface doesn't support MAC, show 'notApplicable'")
bladeBayDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13)).setDescription('Table of blade bay data (BBD) information.')
bladeBayDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1)).setIndexNames((0, 'BLADE-MIB', 'bayDataIndex')).setDescription('Blade bay data (BBD) table entry.')
bayDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade bay data (BBD) table index.')
bayDataBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
bayDataBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the server blade specified exists or not.')
bayDataBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('standby', 3), ('hibernate', 4), ))).setMaxAccess('readonly').setDescription('Indicates the power state of the blade specified.')
bayDataBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a null terminated string.')
bayData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription("A null terminated string that defines the Blade Bay Data (BBD). This data\nis pushed to the blade's BSMP and SMBIOS structures, where it can used\nby the blade's OS. Up to 60 characters can be defined plus a Null\nterminator.")
bayDataBladeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,255,3,2,)).subtype(namedValues=namedval.NamedValues(('supported', 0), ('bsmp', 1), ('notPresent', 2), ('notApplicable', 255), ('discovering', 3), ))).setMaxAccess('readonly').setDescription("This shows Blade Bay Data (BBD) status. 0 means the blade fully \nsupports BBD; 1 means that the blade's BIOS does not support BBD; \n2 means that there is no blade in the bay; 3 means that the blade is\nbeing discovered. 255 means that the blade does not support BBD.")
switchModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3))
switchModuleControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1))
smControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1)).setDescription('Switch module control table.')
smControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smControlIndex')).setDescription('Switch module control table entry')
smControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module control table index.')
switchModuleControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.')
smPostResultsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Describes whether the switch module POST diagnostic result\nvalue contained in the smPostResultsValue is valid.')
smPostResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('The range of values and meanings are as follows:\n0x00 - 0x7F  (  0 - 127)  Base internal functions\n0x80 - 0x9F  (128 - 159)  Internal interface failures\n0xA0 - 0xAF  (160 - 175)  External interface failures\n0xB0 - 0xFE  (176 - 254)  Reserved\n0xFF         (255)        Switch completed POST successfully')
switchModuleMemDiagEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('enabled', 0), ('disabled', 1), ))).setMaxAccess('readwrite').setDescription('Switch module memory diagnostics enabled or disabled.')
smCfgCtrlEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Switch module configuration control.  When set to enabled, only the MM can manage \nthe module. \nThis MIB object can not be set, if AMM grants switch module the Protected Mode permission. \nThis MIB object can not be set, if the switch module is participating in the Stacking Mode\nand external management is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smExtEthPortsEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Switch module external ethernet ports enabled or disabled.\nThis MIB object can not be set, if AMM grants switch module the \nProtected Mode permission.\nThis MIB object can not be set, if the switch module is participating\nin the Stacking Mode and External Port Access is protected.')
switchPingRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription("Sends a ping to a switch module's current IP address.\nThis MIB object can not be set, if AMM grants switch module the Protected Mode \npermission and switch module goes into Protected Mode.\nThis MIB object can not be set, if the switch module is participating \nin the Stacking Mode and IP Configuration is protected.\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.")
smCfgCtrlOnResetEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('enabled', 0), ('disabled', 1), ))).setMaxAccess('readwrite').setDescription('Switch module configuration control on resets (default and unsolicited).  \nWhen set to enabled, the factory default IP configuration will become \nactive when the I/O module is reset to factory defaults by either the\nmanagement module or the I/O module. If an I/O module reset is initiated\nby a source other than the management module then the previous IP configuration\nwill be in affect. In both these cases the MM will lose IP communications with \nthe IOM.\nThis MIB object can not be set, if AMM grants switch module the Protected Mode \npermission and switch module goes into Protected Mode.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for the switch module.\n0 = unknown, 1 = good, 2 = warning, 3 = bad.')
smPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,255,3,1,)).subtype(namedValues=namedval.NamedValues(('standby', 0), ('pending', 1), ('attention', 2), ('notApplicable', 255), ('active', 3), ))).setMaxAccess('readonly').setDescription('The Protected Mode Status for the switch module.\nstandby- Protected Mode capability exists on the IOM but has not \nbeen activated on the switch module or the AMM.\npending - Protected Mode has been activated on the AMM but not yet on the switch module.\nactive - Protected Mode is active on both the switch module and the AMM.\nattention - Protected Mode is enabled on the switch module but not on the AMM.\nNOTE: The term disabled was changed to the term standby to be more descriptive.')
smPMCtrlEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('AMM Protected Mode permission for the switch module.\ndisabled - allow AMM to disable Protected Mode Permission for the switch module.\nenabled - allow AMM to grant Protected Mode Permission for the switch module.')
smPowerRestartTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7)).setDescription('Switch module power restart table.')
smPowerRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1)).setIndexNames((0, 'BLADE-MIB', 'smPowerRestartIndex')).setDescription('Switch module power restart table entry')
smPowerRestartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module power restart index.')
smPowerRestartId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.')
smSwitchExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified exists or not.')
smSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,6,0,20,30,3,40,1,5,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('highSpeed', 20), ('opm', 3), ('passThrough', 30), ('serialCM', 4), ('sas', 40), ('copperPassThrough', 5), ('infiniband', 6), ))).setMaxAccess('readonly').setDescription('Switch module type.')
smMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Switch module MAC address.')
smIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 6), IpAddress()).setMaxAccess('readonly').setDescription('The switch module current IP address.\nIf the switch module is participating in the Stacking Mode\nand IP Configuration is protected, then the stack management \nIP address is displayed.')
switchModulePowerOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,0,1,)).subtype(namedValues=namedval.NamedValues(('poweroff', 0), ('poweron', 1), ('shutdownInProgress', 2), ))).setMaxAccess('readwrite').setDescription("I/O Module power on or power off.  If powering on a currently\npowered off I/O Module, then the I/O Module will execute a POST.\nThe results of this POST will need to be retrieved using the 'Post Results'\ncommand.  \nNOTE:\nWhen powering off a currently powered on I/O Module, a minimum of 1 second\nis needed to allow the module to power off before powering back on.\nThe value 'shutdownInProgress' is for I/O Modules that may take some time to \ntransition from 'poweron' to 'poweroff'.  For example, SAS Controller Modules must \nflush pending I/O before powering off in order to maintain data integrity.\nThe value'shutdownInProgress' can not be used to set.\nIf both SAS Controller Module and SAS Connectivity Module are installed in slot 3 \nand 4 of BCS chassis, AMM must prevent one of them from powering on otherwise \nthere would be conflict with the Storage Module access and possibly corruption of data.\nThis MIB object can not be set, if AMM grants the I/O Module the Protected Mode\npermission and module goes into Protected Mode.")
smReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('For the case where the switch module is currently powered on, this command\nwill effectively power off and then power on the switch module indicated and\ncause it to run its POST test.  For the case where the switch module is\ncurrently powered off, the command will just power on the switch module.\nThis MIB object can not be set, if AMM grants switch module the Protected Mode \npermission and switch module goes into Protected Mode.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smResetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('For the case where the switch module is currently powered on, this command\nwill effectively power off and then power on the switch module indicated and\ncause it to run its POST test.  For the case where the switch module is\ncurrently powered off, the command will just power on the switch module.\nIn both cases, the switch module will reset the configuration to the default\nvalues.\nThis MIB object can not be set, if AMM grants switch module the Protected Mode \npermission and switch module goes into Protected Mode.\nThis MIB object can not be set, if the switch module is participating in the \nStacking Mode and reset to default is protected.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smRestartAndRunStdDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('To power cycle the selected module(s) and then run the standard diagnostic \ntest package.  \n\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smRestartAndRunExtDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('To power cycle the selected module(s) and then run the extended diagnostic \ntest package. This option is not supported on all I/O modules.\n\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smRestartAndRunFullDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('To power cycle the selected module(s) and then run the full diagnostic test \npackage. The full diagnostic test package may take over 5 minutes to run. \nThis option is not supported on all I/O modules.\n\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smSwitchSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,0,9,7,1,8,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('ethernet', 1), ('fibre', 2), ('infiniband', 6), ('sas', 7), ('raidsas', 8), ('icpm', 9), ))).setMaxAccess('readonly').setDescription('Switch module subtype.   \nNOTE: Some Legacy modules do not support a subtype and will be displayed as unknown.')
smSwitchWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 21), Integer32()).setMaxAccess('readonly').setDescription('Switch module width.')
smManufacturingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 22), OctetString()).setMaxAccess('readonly').setDescription('Switch module hardware VPD manufacturing ID.')
smStackingModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 23), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,255,2,)).subtype(namedValues=namedval.NamedValues(('standby', 0), ('member', 1), ('master', 2), ('notApplicable', 255), ))).setMaxAccess('readonly').setDescription('The Stacking Mode Status for the switch module.\nstandby - I/O module has stacking capability but is not part of a stack.\nmember - I/O module has stacking capability and is part of a stack in the\n  member role.\nmaster - I/O module has stacking capability and is part of a stack in the\n  master role.\nNOTE: The term disabled was changed to the term standby to be more descriptive.')
smStackingModeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 24), OctetString()).setMaxAccess('readonly').setDescription('A string containing a text description about the details of which functions are\nprotected for a switch module when it is in Stacking Mode as Master or Member. \nThe possible functions protected by switch modules are IP configuration, \nExternal Port Access, External Management all over ports and Restore to defaults.')
switchModuleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2))
switchMgmtNetworkCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1))
switchCurrentNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1))
smCurrentIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1)).setDescription('Switch module current IP information.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smCurrentIPInfoIndex')).setDescription('Switch module current IP table entry.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module current IP info index.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified exists or not.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('shutdownInProgress', 2), ))).setMaxAccess('readonly').setDescription("Indicates whether the I/O Module specified is powered on or not.\nThe value 'shutdownInProgress' is for the I/O Module that may take some time to \ntransition from 'poweron' to 'poweroff'. Such as SAS Controller Modules, that must \nflush pending I/O before powering off in order to maintain data integrity.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.")
smCurrentIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess('readonly').setDescription('The switch module current IP address.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess('readonly').setDescription('The switch module current subnet mask.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 8), IpAddress()).setMaxAccess('readonly').setDescription('The switch module current IP gateway.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
smCurrentIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('static', 1), ('dhcp', 2), ('nat', 3), ('bootp', 4), ))).setMaxAccess('readonly').setDescription('The switch module current IP configuration method.\n\nNOTE: This MIB object is not applicable to modules that are running in  \nStacking Mode and IP configuration is protected.')
switchNewNwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2))
smNewIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1)).setDescription('Switch module new IP information.\n\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected.')
smNewIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNewIPInfoIndex')).setDescription('Switch module new IP configuration information table entry.  \n\nNOTE: This MIB table is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected.')
smNewIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module new IP info index.  \n\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected.')
smNewIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module numeric identifier.  \n\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected.')
smNewIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified exists or not.  \n\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected.')
smNewIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module specified is powered on or not.  \n\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode or Stacking Mode and IP configuration is protected..')
smNewIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess('readwrite').setDescription('The switch module new IP address.  Before setting this object to a new value, \nsmNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the switch module Protected Mode \npermission and the switch module goes into Protected Mode. \nNOTE: This MIB object can not be set if the switch module is in Stacking Mode\nand IP Configuration is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smNewSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 7), IpAddress()).setMaxAccess('readwrite').setDescription('The switch module new subnet mask.  Before setting this object to a new value, \nsmNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the switch module Protected Mode \npermission and the switch module goes into Protected Mode.\nNOTE: This MIB object can not be set if the switch module is in Stacking Mode,\nand IP Configuration is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smNewGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess('readwrite').setDescription('The switch module new IP gateway.  Before setting this object to a new value, \nsmNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the switch module Protected Mode \npermission and the switch module goes into Protected Mode.\nNOTE: This MIB object can not be set if the switch module is in Stacking Mode,\nand IP Configuration is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smNewIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('static', 1), ('dhcp', 2), ('nat', 3), ('bootp', 4), ))).setMaxAccess('readwrite').setDescription('The switch module new IP configuration method.  Before setting this object to a new value, \nsmNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the switch module Protected Mode \npermission and the switch module goes into Protected Mode.\nNOTE: This MIB object can not be set if the switch module is in Stacking Mode,\nand IP Configuration is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
smNewIPConfigEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('A set command enables a new IP configuration that has been\npreviously defined.  A get command indicates whether the new\nIP configuration information has been enabled.  \nNOTE: This MIB object can not be set if the AMM grants the switch module Protected Mode \npermission and the switch module goes into Protected Mode.\nNOTE: This MIB object can not be set if the switch module is in Stacking Mode,\nand IP Configuration is protected.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
switchNwProtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3))
switchNwProtCfgModOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1))
smNwProtInfoModOneTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1)).setDescription('Switch module 1 network protocol (Network Address Translation) information.')
smNwProtInfoModOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModOneIndex')).setDescription('Switch module 1 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 1 network protocol (Network Address Translation) information index.')
smNwProtInfoModOneId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 1 numeric identifier.')
smNwProtInfoModOneExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 1 exists or not.')
smNwProtInfoModOnePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 1 is powered on or not.')
smNwProtInfoModOneProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModOneProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModOneExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModOneIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModOneEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModOneActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModOneReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2))
smNwProtInfoModTwoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1)).setDescription('Switch module 2 network protocol (Network Address Translation) information.')
smNwProtInfoModTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModTwoIndex')).setDescription('Switch module 2 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 2 network protocol (Network Address Translation) information index.')
smNwProtInfoModTwoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 2 numeric identifier.')
smNwProtInfoModTwoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 2 exists or not.')
smNwProtInfoModTwoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 2 is powered on or not.')
smNwProtInfoModTwoProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModTwoProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModTwoExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModTwoIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModTwoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModTwoActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModTwoReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModThree = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3))
smNwProtInfoModThreeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1)).setDescription('Switch module 3 network protocol (Network Address Translation) information.')
smNwProtInfoModThreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModThreeIndex')).setDescription('Switch module 3 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModThreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 3 network protocol (Network Address Translation) information index.')
smNwProtInfoModThreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 3 numeric identifier.')
smNwProtInfoModThreeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 3 exists or not.')
smNwProtInfoModThreePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 3 is powered on or not.')
smNwProtInfoModThreeProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModThreeProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModThreeExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModThreeIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModThreeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModThreeActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModThreeReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModFour = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4))
smNwProtInfoModFourTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1)).setDescription('Switch module 4 network protocol (Network Address Translation) information.')
smNwProtInfoModFourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModFourIndex')).setDescription('Switch module 3 network protocol (Network Address Translation) configuration \ninformation table entry.')
smNwProtInfoModFourIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 4 network protocol (Network Address Translation) information index.')
smNwProtInfoModFourId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 4 numeric identifier.')
smNwProtInfoModFourExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 4 exists or not.')
smNwProtInfoModFourPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 4 is powered on or not.')
smNwProtInfoModFourProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModFourProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModFourExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModFourIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModFourEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModFourActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModFourReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModFive = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5))
smNwProtInfoModFiveTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1)).setDescription('Switch module 5 network protocol (Network Address Translation) information.')
smNwProtInfoModFiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModFiveIndex')).setDescription('Switch module 5 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModFiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 5 network protocol (Network Address Translation) information index.')
smNwProtInfoModFiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 5 numeric identifier.')
smNwProtInfoModFiveExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 5 exists or not.')
smNwProtInfoModFivePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 5 is powered on or not.')
smNwProtInfoModFiveProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModFiveProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModFiveExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModFiveIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModFiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModFiveActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModFiveReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModSix = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6))
smNwProtInfoModSixTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1)).setDescription('Switch module 6 network protocol (Network Address Translation) information.')
smNwProtInfoModSixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModSixIndex')).setDescription('Switch module 6 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModSixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 6 network protocol (Network Address Translation) information index.')
smNwProtInfoModSixId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 6 numeric identifier.')
smNwProtInfoModSixExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 6 exists or not.')
smNwProtInfoModSixPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 6 is powered on or not.')
smNwProtInfoModSixProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModSixProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModSixExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModSixIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModSixEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModSixActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModSixReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModSeven = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7))
smNwProtInfoModSevenTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1)).setDescription('Switch module 7 network protocol (Network Address Translation) information.')
smNwProtInfoModSevenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModSevenIndex')).setDescription('Switch module 7 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModSevenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 7 network protocol (Network Address Translation) information index.')
smNwProtInfoModSevenId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 7 numeric identifier.')
smNwProtInfoModSevenExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 7 exists or not.')
smNwProtInfoModSevenPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 7 is powered on or not.')
smNwProtInfoModSevenProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModSevenProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModSevenExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModSevenIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModSevenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModSevenActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModSevenReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModEight = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8))
smNwProtInfoModEightTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1)).setDescription('Switch module 8 network protocol (Network Address Translation) information.')
smNwProtInfoModEightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModEightIndex')).setDescription('Switch module 8 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModEightIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 8 network protocol (Network Address Translation) information index.')
smNwProtInfoModEightId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 8 numeric identifier.')
smNwProtInfoModEightExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 8 exists or not.')
smNwProtInfoModEightPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 8 is powered on or not.')
smNwProtInfoModEightProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModEightProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModEightExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModEightIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModEightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModEightActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModEightReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModNine = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9))
smNwProtInfoModNineTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1)).setDescription('Switch module 9 network protocol (Network Address Translation) information.')
smNwProtInfoModNineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModNineIndex')).setDescription('Switch module 9 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModNineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 9 network protocol (Network Address Translation) information index.')
smNwProtInfoModNineId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 9 numeric identifier.')
smNwProtInfoModNineExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 9 exists or not.')
smNwProtInfoModNinePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 9 is powered on or not.')
smNwProtInfoModNineProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModNineProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModNineExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModNineIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModNineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModNineActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModNineReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchNwProtCfgModTen = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10))
smNwProtInfoModTenTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1)).setDescription('Switch module 10 network protocol (Network Address Translation) information.')
smNwProtInfoModTenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNwProtInfoModTenIndex')).setDescription('Switch module 10 network protocol (Network Address Translation) configuration \ninformation table entry')
smNwProtInfoModTenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module 10 network protocol (Network Address Translation) information index.')
smNwProtInfoModTenId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,9,7,6,5,4,3,2,1,8,)).subtype(namedValues=namedval.NamedValues(('module1', 1), ('module10', 10), ('module2', 2), ('module3', 3), ('module4', 4), ('module5', 5), ('module6', 6), ('module7', 7), ('module8', 8), ('module9', 9), ))).setMaxAccess('readonly').setDescription('The switch module 10 numeric identifier.')
smNwProtInfoModTenExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 10 exists or not.')
smNwProtInfoModTenPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the switch module 10 is powered on or not.')
smNwProtInfoModTenProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Protocol name')
smNwProtInfoModTenProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,)).subtype(namedValues=namedval.NamedValues(('tcp', 2), ('udp', 3), ))).setMaxAccess('readwrite').setDescription('Protocol ID')
smNwProtInfoModTenExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('External port')
smNwProtInfoModTenIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Internal port.')
smNwProtInfoModTenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('Enable or disable the protocol entry.')
smNwProtInfoModTenActivate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Activate all network protocol settings for the switch module.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
smNwProtInfoModTenReset = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Reset all network protocol settings for the switch module to default.  \nNOTE: Value returned for the GET command is meaningless for this MIB object.')
switchPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2))
switchModOnePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1))
smOnePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1)).setDescription('Switch Module 1 port configuration information.\nNOTE: This option is not supported on all I/O modules.')
smOnePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smOnePortCfgIndex')).setDescription('Switch Module 1 port configuration information table entry')
smOnePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 1 port sequence index.')
smOnePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 1 port label')
smOnePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 1 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smOnePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 1.')
smOnePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 1.')
smOnePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100 Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smOnePortCfgAvailSpeeds object are applicable to setting\nthis mib object.')
smOnePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 1.')
smOnePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 1.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModTwoPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2))
smTwoPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1)).setDescription('Switch Module 2 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smTwoPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smTwoPortCfgIndex')).setDescription('Switch Module 2 port configuration information table entry')
smTwoPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 2 port sequence index.')
smTwoPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 2 port label')
smTwoPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 2 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smTwoPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 2.')
smTwoPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 2.')
smTwoPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smTwoPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smTwoPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 2.')
smTwoPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 2.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModThreePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3))
smThreePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1)).setDescription('Switch Module 3 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smThreePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smThreePortCfgIndex')).setDescription('Switch Module 3 port configuration information table entry')
smThreePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 3 port sequence index.')
smThreePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 3 port label')
smThreePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 3 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smThreePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 3.')
smThreePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 3.')
smThreePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smThreePortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smThreePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 3.')
smThreePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 3.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModFourPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4))
smFourPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1)).setDescription('Switch Module 4 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smFourPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smFourPortCfgIndex')).setDescription('Switch Module 4 port configuration information table entry')
smFourPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 4 port sequence index.')
smFourPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 4 port label')
smFourPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 4 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smFourPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 4.')
smFourPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 4.')
smFourPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smFourPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smFourPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 4.')
smFourPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 4.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModFivePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5))
smFivePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1)).setDescription('Switch Module 5 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smFivePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smFivePortCfgIndex')).setDescription('Switch Module 5 port configuration information table entry')
smFivePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 5 port sequence index.')
smFivePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 5 port label')
smFivePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 5 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smFivePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 5.')
smFivePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 5.')
smFivePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smFivePortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smFivePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 5.')
smFivePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 5.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModSixPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6))
smSixPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1)).setDescription('Switch Module 6 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smSixPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smSixPortCfgIndex')).setDescription('Switch Module 6 port configuration information table entry')
smSixPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 6 port sequence index.')
smSixPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 6 port label')
smSixPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 6 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smSixPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 6.')
smSixPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 6.')
smSixPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smSixPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smSixPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 6.')
smSixPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 6.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModSevenPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7))
smSevenPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1)).setDescription('Switch Module 7 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smSevenPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smSevenPortCfgIndex')).setDescription('Switch Module 7 port configuration information table entry')
smSevenPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 7 port sequence index.')
smSevenPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 7 port label')
smSevenPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 7 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smSevenPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 7.')
smSevenPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 7.')
smSevenPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smSevenPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smSevenPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 7.')
smSevenPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 7.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModEightPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8))
smEightPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1)).setDescription('Switch Module 8 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smEightPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smEightPortCfgIndex')).setDescription('Switch Module 8 port configuration information table entry')
smEightPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 8 port sequence index.')
smEightPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 8 port label')
smEightPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 8 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smEightPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 8.')
smEightPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 8.')
smEightPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smEightPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smEightPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 8.')
smEightPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 8.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModNinePortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9))
smNinePortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1)).setDescription('Switch Module 9 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smNinePortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smNinePortCfgIndex')).setDescription('Switch Module 9 port configuration information table entry')
smNinePortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 9 port sequence index.')
smNinePortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 9 port label')
smNinePortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 9 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smNinePortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 9.')
smNinePortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 9.')
smNinePortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smNinePortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smNinePortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 9.')
smNinePortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 9.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
switchModTenPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10))
smTenPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1)).setDescription('Switch Module 10 port configuration information.\nNote:  This option is not supported on all I/O modules.')
smTenPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smTenPortCfgIndex')).setDescription('Switch Module 10 port configuration information table entry')
smTenPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module 10 port sequence index.')
smTenPortCfgLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Switch Module 10 port label')
smTenPortCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,2,1,4,0,5,7,9,6,3,)).subtype(namedValues=namedval.NamedValues(('unused', 0), ('externalPort', 1), ('externalManagementPort', 2), ('externalDualPort', 3), ('bladePort', 4), ('mmManagementPort', 5), ('uplinkPort', 6), ('interModulePort', 7), ('interModuleManagementPort', 8), ('interModuleDualPort', 9), ))).setMaxAccess('readonly').setDescription('Switch Module 10 port type:\nExternal port: This port is connected to external device and is for data traffic.\nExternal management port: This port is solely for external management connection. \n        This port is not used for data traffic from remote to blades.\nExternal dual port: This external port is used for both data traffic to blades as well as for management.\nBlade port: This port is connected to the blade.\nManagement Module Management port: This port is connected to the Management Module.\nUplink port: This port is configured for up link functionality.\nInter-Module port: This port is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.\nInter-Module Management port: This port is connected to another I/O Module for management purpose.\n        The port type is either by design connected to another I/O Module, by user configured, \n        or by AMM setting the port type.\nInter-Module Dual port:  The port is connected to another I/O Module and can be used for both data \n        and management purposes. The port type is either by design connected to another I/O Module, \n        by user configured, or by AMM setting the port type.')
smTenPortCfgLinkSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readwrite').setDescription('Current port link setting for Switch Module 10.')
smTenPortCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('down', 0), ('up', 1), ))).setMaxAccess('readonly').setDescription('Current port link state of Switch Module 10.')
smTenPortCfgSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 6), OctetString()).setMaxAccess('readwrite').setDescription('Set the port speed using the data rate and duplex value. For examples:\n100mf: 100Mbps in Half Duplex;\n10gf: 10 Gbps in Full Duplex;\nauto: The working speed of the physical port can be tuned automatically.\n\nNOTE: Only the speeds from smTenPortCfgAvailSpeeds are applicable to setting\nthis mib object.')
smTenPortCfgSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('Current port speed of Switch Module 10.')
smTenPortCfgAvailSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Available speed setting per port for Switch Module 10.\nIf there is more than one setting, the speeds are separated by a comma and then a space.')
raidControllerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3))
raidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1)).setDescription('RAID Controller control table.')
raidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'raidControllerIndex')).setDescription('RAID Controller control table entry.')
raidControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('RAID Controller control table index.\nThis MIB object is for SAS Controller Modules only.')
raidControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,)).subtype(namedValues=namedval.NamedValues(('module3', 3), ('module4', 4), ))).setMaxAccess('readonly').setDescription('The I/O Module numeric identifier for the SAS Controller Module.\nThis MIB object is for SAS Controller Modules only.')
raidControllerExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module specified for the RAID Controller\nexists or not.\n This MIB object is for SAS Controller Modules only.')
raidControllerPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('shutdownInProgress', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module is powered on or not.\nThis MIB object is for SAS Controller Modules only.')
raidControllerMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The MAC address for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
raidControllerSasID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('The hardware VPD SAS ID for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
raidControllerPingRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('Sends a ping to the current IP address of the RAID Controller network interface.\nThis MIB object can not be set, if AMM grants I/O Module the Protected Mode\npermission and the module goes into Protected Mode.\nNOTE: Value returned for the GET command is meaningless for this MIB object\nThis MIB object is for SAS Controller Modules only.')
raidControllerNetworkCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2))
rcCurrentIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1)).setDescription('RAID Controller current IP table.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'rcCurrentIPInfoIndex')).setDescription('RAID Controller current IP table entry.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('RAID Controller current IP table index.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,)).subtype(namedValues=namedval.NamedValues(('module3', 3), ('module4', 4), ))).setMaxAccess('readonly').setDescription('The I/O Module numeric identifier for the RAID Controller.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module exists or not.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('shutdownInProgress', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module is powered on or not.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 5), IpAddress()).setMaxAccess('readonly').setDescription('The current IP address for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 6), IpAddress()).setMaxAccess('readonly').setDescription('The current subnet mask for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 7), IpAddress()).setMaxAccess('readonly').setDescription('The current subnet mask for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('static', 1), ('dhcp', 2), ))).setMaxAccess('readonly').setDescription('The current IP gateway for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
rcCurrentRaidedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The current virtual LAN ID for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only.')
rcNewIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2)).setDescription('RAID Controller new IP configuration table.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'rcNewIPInfoIndex')).setDescription('RAID Controller new IP configuration information table entry.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB table is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('RAID Controller new IP configuration information index.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,)).subtype(namedValues=namedval.NamedValues(('module3', 3), ('module4', 4), ))).setMaxAccess('readonly').setDescription('The I/O Module numeric identifier for the RAID Controller.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPInfoExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module exists or not.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPInfoPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('shutdownInProgress', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the I/O Module is powered on or not.\nThis MIB object is for SAS Controller Modules only.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 5), IpAddress()).setMaxAccess('readwrite').setDescription('The new IP address for the RAID Controller network interface. \nThis MIB object is for SAS Controller Modules only. Before setting this object to a new value, \nrcNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the I/O Module Protected Mode \npermission and the module goes into Protected Mode. \nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 6), IpAddress()).setMaxAccess('readwrite').setDescription('The new subnet mask for the RAID Controller network interface. \nThis MIB object is for SAS Controller Modules only. Before setting this object to a new value, \nrcNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the I/O Module Protected Mode \npermission and the module goes into Protected Mode.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 7), IpAddress()).setMaxAccess('readwrite').setDescription('The new IP gateway for the RAID Controller network interface. \nThis MIB object is for SAS Controller Modules only. Before setting this object to a new value, \nrcNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: This MIB object can not be set if the AMM grants the I/O Module Protected Mode \npermission and the module goes into Protected Mode.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
rcNewIPConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('static', 1), ('dhcp', 2), ))).setMaxAccess('readwrite').setDescription("The new IP configuration method for the RAID Controller network interface.\nThis MIB object is for SAS Controller Modules only. Before setting this object to a new value,\nrcNewIpconfigEnableDisable object must first be set to disabled.\nNOTE: The value 'DHCP' can not be used to set.\nNOTE: This MIB object can not be set if the AMM grants the I/O Module Protected Mode \npermission and the module goes into Protected Mode.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.")
rcNewIPConfigEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('disable', 0), ('enable', 1), ))).setMaxAccess('readwrite').setDescription('A set command enables new IP configurations that have been defined.\nA get command indicates whether new IP configurations that have been enabled.\nNOTE: This MIB object can not be set if the AMM grants the I/O Module Protected Mode \npermission and the module goes into Protected Mode.\nNOTE: This MIB object is not applicable to modules that are running in Network Address \nTranslation (NAT) Mode.')
chassisTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4))
chassisResponseVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('Chassis response version.')
chassisFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('rackOrStandAlone', 0), ('serverBlade', 1), ))).setMaxAccess('readonly').setDescription('Chassis flags.\n1 = a server blade chassis, 0 = a rack or standalone chassis.')
chassisName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 3), OctetString()).setMaxAccess('readonly').setDescription('The name of the active MM as a null terminated string.')
chassisNoOfFPsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 18), Integer32()).setMaxAccess('readonly').setDescription('Number of fan packs (FPs) supported.\n\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.')
chassisNoOfPBsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 19), Integer32()).setMaxAccess('readonly').setDescription('Number of processor blades (PBs) supported.')
chassisNoOfSMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 20), Integer32()).setMaxAccess('readonly').setDescription('Number of switch modules (SMs) supported.')
chassisNoOfMMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 21), Integer32()).setMaxAccess('readonly').setDescription('Number of management modules (MMs) supported.')
chassisNoOfPMsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 22), Integer32()).setMaxAccess('readonly').setDescription('Number of power modules (PMs) supported.')
chassisNoOfMTsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 23), Integer32()).setMaxAccess('readonly').setDescription('Number of media trays (MTs) supported.')
chassisNoOfBlowersSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 24), Integer32()).setMaxAccess('readonly').setDescription('Number of blowers supported.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.')
chassisPBsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 25), OctetString()).setMaxAccess('readonly').setDescription("The blades that are installed on the chassis.\nThe blades are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blades supported.  If a blade is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if blades\nare installed in bays 1, 5, and 13, and 14 blades are supported,\nthe string would look like '10001000000010'.")
chassisSMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 29), OctetString()).setMaxAccess('readonly').setDescription("The switch modules that are installed on the chassis.\nThe switch modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of switch modules supported.  If a switch module is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif switch modules are installed in bays 1 and 3, and 4 switch modules\nare supported, the string would look like '1011' for BladeCenter and \nBladeCenter T and '1011000000' for BladeCenter H and BladeCenter HT.")
chassisMMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 30), OctetString()).setMaxAccess('readonly').setDescription("The management modules that are installed on the chassis.\nThe management modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as the\nnumber of management modules supported.  If a management module is installed\nin a bay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if a management module\nis installed in bay 1, and 2 management modules are supported, the\nstring would look like '10'.")
chassisPMsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 31), OctetString()).setMaxAccess('readonly').setDescription("The power modules that are installed on the chassis.\nThe power modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of power modules supported.  If a power module is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif power modules are installed in bays 1 and 3, and 4 power modules\nare supported, the string would look like '1010'.")
chassisMTInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 32), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether at least one media tray (MT) is installed.')
chassisBlowersInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 33), OctetString()).setMaxAccess('readonly').setDescription("The blowers that are installed on the chassis.\nThe blowers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of blowers supported.  If a blower is installed in a\nbay, a 1 is present in the string in the position representing\nthe bay ID as read from left to right.  For example, if a blower\nis installed in bay 1, and 2 blowers are supported, the string\nwould look like '10'.\n\nNOTE: Blowers are also referred to as Chassis Cooling Devices.")
chassisActiveMM = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 34), Integer32()).setMaxAccess('readonly').setDescription('The active management module (MM).')
chassisKVMOwner = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 35), Integer32()).setMaxAccess('readonly').setDescription('The blade that currently owns the keyboard/video/monitor (KVM).\n0 = the KVM devices are owned by the management module.')
chassisMediaTrayOwner = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 36), Integer32()).setMaxAccess('readonly').setDescription('The blade that currently owns the media tray.\n0 = the media tray is owned by the management module.')
chassisFPsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 37), OctetString()).setMaxAccess('readonly').setDescription("The fan packs that are installed on the chassis.\nThe fan packs are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of fan packs supported.  If a fan pack is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif fan packs are installed in bays 1 and 3, and 4 fan packs \nare supported, the string would look like '1010'.\n\nNOTE: Fan packs are also referred to as Power Module Cooling Devices.")
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 38), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(97,98,)).subtype(namedValues=namedval.NamedValues(('bladeCenterOrBladeCenterH', 97), ('bladeCenterTOrBladeCenterHT', 98), ))).setMaxAccess('readonly').setDescription('The type of the chassis.  The BladeCenterS chassis and BladeCenterE are part of the\nbladeCenterOrBladeCenterH type.  This MIB object should be used in conjunction\nwith chassisSubType MIB object to determine the characteristic of the chassis.')
chassisSubtype = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 39), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,4,255,2,3,)).subtype(namedValues=namedval.NamedValues(('bladeCenterOrBladeCenterT', 0), ('bladeCenterHOrBladeCenterHT', 2), ('unknown', 255), ('bladeCenterS', 3), ('bladeCenterE', 4), ))).setMaxAccess('readonly').setDescription('The subtype of the chassis.  This MIB object should be used in conjunction with \nchassisType MIB object to determine the characteristic of the chassis.')
chassisNoOfFBsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 40), Integer32()).setMaxAccess('readonly').setDescription('Number of Front Bezel (FBs) supported.')
chassisNoOfAPsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 41), Integer32()).setMaxAccess('readonly').setDescription('Number of Alarm Panel (APs) supported.')
chassisNoOfNCsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 42), Integer32()).setMaxAccess('readonly').setDescription('Number of Network Clocks (NCs) supported.')
chassisNoOfMXsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 43), Integer32()).setMaxAccess('readonly').setDescription('Number of Multiplexer Expansion modules (MXs) supported.')
chassisNoOfMMIsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 44), Integer32()).setMaxAccess('readonly').setDescription('Number of management module interposers (MMIs) supported.')
chassisNoOfSMIsSupported = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 45), Integer32()).setMaxAccess('readonly').setDescription('Number of switch module interposers (SMIs) supported.')
chassisNoOfFBsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 46), OctetString()).setMaxAccess('readonly').setDescription("The return value of '1'indicates the front bezel is installed on the chassis.\nThe value of '0' indicates the front bezel is not installed.")
chassisNoOfAPsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 47), OctetString()).setMaxAccess('readonly').setDescription("The return value of '1'indicates the alarm panel is installed on the chassis.\nThe value of '0' indicates the alarm panel is not installed.")
chassisNoOfNCsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 48), OctetString()).setMaxAccess('readonly').setDescription("The network clock cards that are installed on the chassis.\nThe network clock cards are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of network clock cards supported.  If a network clock \ncard is installed in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif a network clock card is installed in bays 1, and 2 network clock cards \nare supported, the string would look like '10'.")
chassisNoOfMXsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 49), OctetString()).setMaxAccess('readonly').setDescription("The Multiplexer Expansion Modules that are installed on the chassis.\nThe Multiplexer Expansion Modules are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as the number of \nMultiplexer Expansion Modules supported.  If a Multiplexer Expansion Module \nis installed in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif Multiplexer Expansion Module is installed in bays 1, and 2 Multiplexer \nExpansion Modules are supported, the string would look like '10'.")
chassisNoOfMMIsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 50), OctetString()).setMaxAccess('readonly').setDescription("The flex cables that are installed on the chassis.\nThe flex cables are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of flex cables supported.  If a flex cable  \nis installed in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif flex cable is installed in bays 1, and 2 flex cables are  \nsupported, the string would look like '10'.")
chassisNoOfSMIsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 51), OctetString()).setMaxAccess('readonly').setDescription("The interposers that are installed on the chassis.\nThe interposers are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of interposers supported.  If an interposer  \nis installed in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif interposer is installed in bays 1, and 10 interposers are  \nsupported, the string would look like '1000000000'.")
chassisNoOfMTsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 52), OctetString()).setMaxAccess('readonly').setDescription("The media trays that are installed on the chassis.\nThe media trays are listed as a bitmap.  The bitmap is a\nstring containing a list of 1's and 0's that is as long as\nthe number of media trays supported.  If a media tray is\ninstalled in a bay, a 1 is present in the string in the position\nrepresenting the bay ID as read from left to right.  For example,\nif media trays are installed in bays 1, and 2 media trays are, \nthe string would look like '10'.")
managementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5))
mmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1)).setDescription('Table of the management module status.\nFor consistent results, view as a table and not as individual entries.')
mmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'mmStatusIndex')).setDescription('Management module status entry.\nFor consistent results, view as a table and not as individual entries.')
mmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Management module status index.')
mmPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Management module current status.')
mmExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 3), IpAddress()).setMaxAccess('readonly').setDescription('Management module external IP address.')
mmPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readonly').setDescription('Indicates if this Management module is a primary or not.\nNOTE: If there is no standby MM, this value defaults to primary.')
mmHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('bad', 3), ))).setMaxAccess('readonly').setDescription('The health state for the management module. \n0 = unknown, 1 = good, 2 = warning, 3 = bad.')
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6))
storageStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1))
storageStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1)).setDescription('Table of the storage module status. \nFor consistent results, view as a table and not as individual entries.\n\nNOTE: This MIB object is for BCS only.')
storageStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'storageStatusIndex')).setDescription('Storage Module Status Table Entry.')
storageStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Storage device status table index.')
storageBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Bay number of the Storage device.')
storageState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,3,255,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('good', 1), ('warning', 2), ('notAvailable', 255), ('critical', 3), ))).setMaxAccess('readonly').setDescription('Storage device state.')
storageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('The name of the storage device.')
storageConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2))
storageSwitchConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1))
storageSwitchZoneCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1)).setDescription('Table of all the zone configurations stored on switch \nmodules. For consistent results, view as a table and \nnot as individual entries.\n\nBefore activating a new zone configuration via the switchActiveZoneCfg\nobject, a user must consider the following:\n   \n    1) Changing the zone configuration may cause disruption in the storage\n       access of blades connected to this SAS Module. It is highly recommended\n       that you first ensure that the blades have completed all storage accesses.\n       You may want to shutdown the blade OS prior to changing your zone configuration.\n       \n    2) When selecting a zone configuration, ensure that it is appropriate \n       for the number of SAS switches installed in your chassis. This can \n       be determined from the switchZoneCfgDescription text.\n       \n    3) When selecting a zone configuration, ensure that it exists first on \n       all SAS switches. This can be determined by querying the \n       storageSwitchZoneCfgTable. In addition, for user-defined zone \n       configurations, even if the number is the same, ensure that the \n       actual zone configurations are identical or compatible. You will need\n       to use an application, such as the Switch Configuration Manager (SCM)\n       to verify this. \n       \n    4) All SAS switches must be in operational state prior to activating a \n       new zone configuration. This can be determined by querying the \n       activeZoneCfgNumberBySwitch object and ensuring that none of the \n       2xx codes are returned.')
storageSwitchZoneCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'switchZoneCfgIndex')).setDescription('Switch Module Zone Configuration Management Entry.')
switchZoneCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch module zone configuration table index.')
switchZoneCfgBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The numeric switch bay number.')
switchZoneCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The zone configuration number, also referred to as the \nconfiguration store number.')
switchZoneCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,0,)).subtype(namedValues=namedval.NamedValues(('nonActive', 0), ('active', 1), ('pending', 2), ))).setMaxAccess('readonly').setDescription("The status of the zone configuration.\n\nOnly one configuration is 'Active', others are in 'nonActive' \nstatus. \n\nWhen a zone configuration is active on a switch, the status\nmay temporarily indicate pending(2) as it transitions from \nnonActive(0) to active (1).")
switchZoneCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('userdefined', 1), ('predefined', 2), ))).setMaxAccess('readonly').setDescription('The type of the zone configuration. Predefined are read-only\nstatic configurations, and userdefined are read-write\nconfigurations that can be created and modified using the \nSwitch Configuration Manager application.')
switchZoneCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('A short descriptive name for the zone configuration.')
switchZoneCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 7), OctetString()).setMaxAccess('readonly').setDescription('A detailed description for the zone configuration.')
switchZoneCfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('The date the zone configuration was created.')
switchActiveZoneCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('An object used to activate a particular zone configuration.\n\nNOTE: Value returned for the GET command is meaningless \n      for this MIB object.')
storageSwitchActiveZoneCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2)).setDescription('Table showing the zone configuration that is currently  \nactive on a given switch module. For consistent results, \nview as a table and not as individual entries.')
storageSwitchActiveZoneCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'activeZoneCfgIndex')).setDescription('Active zone configurations Entry.')
activeZoneCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Active zone configurations table index.')
activeZoneCfgBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('Bay number of the switch module where active zone configurations exist.')
activeZoneCfgNumberBySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The zone configuration number active on this SAS switch module\nas reported by the switch module. If this number differs from the \nvalue of the activeZoneCfgNumberByMM object for the same \nswitch, this may indicate a configuration problem.\n\nThe zone configuration number is also referred to as the zone \nconfiguration store. \n\nNOTE: \n  0 = No zone configuration is active on this I/O Module.\n  253 = I/O module is discovering zone information.\n  254 = I/O Module is not powered on or in a fault state.\n  255 = notApplicable.')
activeZoneCfgNumberByMM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The zone configuration number active on this SAS switch module\nas known by the management module. If this number differs from the \nvalue of the activeZoneCfgNumberBySwitch object for the same \nswitch, this may indicate a configuration problem.\n\nThe zone configuration number is also referred to as the zone \nconfiguration store. \n\nNOTE: \n  0 = No zone configuration is active on this I/O Module.\n  255 = notApplicable.')
switchZoneCfgActivation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('This object provides a quick means of activating a valid zone \nconfiguration on all active SAS switches. The zone configuration \nto be activated is specified as the value of the SET and can be\nobtained from the switchZoneCfgNumber object. \n\nThe zone configuration number is also referred to as the zone \nconfiguration store.\n\nBefore activating a new zone configuration, a user must consider \nthe following:\n\n 1) Changing the zone configuration may cause disruption in the storage\n    access of blades connected to this SAS Module. It is highly recommended\n    that you first ensure that the blades have completed all storage accesses.\n    You may want to shutdown the blade OS prior to changing your zone configuration. \n    \n 2) When selecting a zone configuration, ensure that it is appropriate \n    for the number of SAS switches installed in your chassis. This can \n    be determined from the switchZoneCfgDescription text.\n    \n 3) When selecting a zone configuration, ensure that it exists first on \n    all SAS switches. This can be determined by querying the \n    storageSwitchZoneCfgTable. In addition, for user-defined zone \n    configurations, even if the number is the same, ensure that the \n    actual zone configurations are identical or compatible. You will need\n    to use an application, such as the Switch Configuration Manager (SCM) \n    to verify this. \n    \n 4) All SAS switches must be in operational state prior to activating a \n    new zone configuration. This can be determined by querying the \n    activeZoneCfgNumberBySwitch object and ensuring that none of the \n    2xx codes are returned.  \n\nNOTE: Value returned for the GET command is meaningless \n      for this MIB object.\n     \nIf any of the switches are not activated, an error response\nwill be returned.')
firmwareInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8))
smFirmwareInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1))
smFirmwareInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1)).setDescription('Switch Module firmware image information.\nThis table is only applicable to modules that support multiple images')
smFirmwareInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'smFirmwareInfoIndex')).setDescription('Switch Module firmware image information table entry')
smFirmwareInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Sequence index in the firmware table.')
smFirmwareInfoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module number.')
smFirmwareInfoImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Switch Module firmware image index.')
smFirmwareInfoImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 4), OctetString()).setMaxAccess('readwrite').setDescription('Switch Module firmware image name')
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9))
firmwareUpdateTarget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(44,42,43,40,41,255,19,18,11,13,12,15,14,17,16,20,0,38,39,34,35,36,37,31,32,33,)).subtype(namedValues=namedval.NamedValues(('managementModule', 0), ('switchModule1', 11), ('switchModule2', 12), ('switchModule3', 13), ('switchModule4', 14), ('switchModule5', 15), ('switchModule6', 16), ('switchModule7', 17), ('switchModule8', 18), ('switchModule9', 19), ('switchModule10', 20), ('unknown', 255), ('blade1', 31), ('blade2', 32), ('blade3', 33), ('blade4', 34), ('blade5', 35), ('blade6', 36), ('blade7', 37), ('blade8', 38), ('blade9', 39), ('blade10', 40), ('blade11', 41), ('blade12', 42), ('blade13', 43), ('blade14', 44), ))).setMaxAccess('readwrite').setDescription('Target module whose firmware will be updated.\nNOTE: Some switch modules do not allow firmware update.  \nWhen firmware update is attempted on those switch modules, \nthe agent will report an error.')
firmwareUpdateTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 2), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readwrite').setDescription('If flashing via the legacy method using a tftp server, then\nset the IP address or host name of the TFTP server where\nthe firmware file resides. The address must be entered in a\ndotted decimal IP string (e.g. 9.37.44.2).')
firmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 3), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 254))).setMaxAccess('readwrite').setDescription('File name of the firmware file.')
firmwareUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,4,3,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ('execute-with-reboot', 2), ('execute-nowait', 3), ('execute-with-reboot-nowait', 4), ))).setMaxAccess('readwrite').setDescription('Start updating the firmware of the specified target module. \nUsing execute or execute-with-reboot will cause the SNMP client to\nwait for the firmware update to complete.\nUsing execute-nowait or execute-with-reboot-nowait will not cause \nthe SNMP client to wait for the update to complete. Instead it will\nflash the firmware in the background.\n\nNote 1: If the execute-with-reboot or execute-with-reboot-nowait\noption is selected, the target will reset after a successful flash.  \nThis option is only valid if the firmwareUpdateTarget object is \nset to managementModule.\nNote 2: If flashing from a remote file, then both\nfirmwareUpdateServer and firmwareUpdateFileName must be\nset. Otherwise if flashing via the legacy method using a tftp\nserver, then both firmwareUpdateTftpServer and\nfirmwareUpdateFileName must be set.\nNote 3: Depending on the target, it might take up to several \nminutes for the flash update to complete.  Do not reset the \ntarget until the control has been returned.  At this point, \nthe results will be displayed. \nNote 4: Use firmwareUpdateStatus to confirm the status of \nthe last firmware update initiated by SNMP method.  The \nManagement Module must be restarted for the new firmware to \ntake affect.\nNote 5: If data encryption is currently enabled on this MM, \nand you update the MM firmware to a level which does not\nsupport data encryption, you will lose all your configuration \nsettings as a result.\nNote 6: Since some I/O Module types use the AMM TFTP server for \nfirmware file transfer during the firmware update process, the  \ntftpEnable MIB object must be set to enable prior to updating \nthe firmware for these modules.\n\nNOTE: Value returned for the GET command is meaningless \nfor this MIB object.')
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 5), OctetString()).setMaxAccess('readonly').setDescription('Get the status of the last firmware update which was \ninitiated through SNMP method.')
standbyFirmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 6), OctetString()).setMaxAccess('readonly').setDescription('Get the current status of the firmware update for the standby AMM.\n\nNOTE: This only applies to systems with a standby AMM.')
firmwareImageNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 7), Integer32()).setMaxAccess('readwrite').setDescription('If the module can upload more than one image, an image\nnumber must be specified after setting the firmware target.\nPlease refer to the firmwareInformation section.')
firmwareActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 8), Integer32()).setMaxAccess('readwrite').setDescription('If the module can upload more than one image, an active image\nnumber must be specified.  Please refer to the firmwareInformation section.\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.')
firmwareUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 9), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 254))).setMaxAccess('readwrite').setDescription('Contains the fully qualified remote location of the firmware\npacket file. Use firmwareUpdateFileName to specify the filename.\n\nA fully qualified remote location contains a supported\nprotocol followed by a colon and two slashes (//), userid and\npassword separated by a colon for login authentication, an\n@ sign, followed by the hostname or IP address of the\nserver where the packet file resides, followed by an optional\nport number to the hostname, and the full pathname to the file. \nNote that if the port number is specified, it must be\nseparated with the hostname (or IP address) by a colon.\n\nThe AMM currently supports the following protocols:\nTFTP, FTP, FTPS, HTTP and HTTPS.\n\nThe complete format of a fully qualified remote location is:\n\n<protocol>://<userid:password>@<hostname:port>/<pathname>\n                  \nAn example of a fully qualified remote location can be:\n      ftp://USERID:PASSW0RD@192.168.0.2:30045/tmp\nwhere the ftp protocol will be used for transferring the file in\nthis location, username is USERID,  password is\nPASSW0RD, host IP address is 192.168.0.2, port number is\n30045, and the full pathname for the packet file is /tmp.\n\nand firmwareUpdateFileName is set to: CNETCMUS.pkt\n\nSome protocols do not need the username, password, and\nthe port number, so the minimum requirement for a fully\nqualified location can be:  <protocol>://<hostname>/<pathname>.')
remoteChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10))
remoteChassisTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1)).setDescription('Table of remote chassis information.')
remoteChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'remoteChassisIndex')).setDescription('Remote chassis entry')
remoteChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Remote chassis discovery sequence index.')
systemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('System name for this discovery management module.')
systemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,9,255,4,0,170,)).subtype(namedValues=namedval.NamedValues(('critical', 0), ('noResponse', 170), ('non-Critical', 2), ('normal', 255), ('system-Level', 4), ('unknown', 9), ))).setMaxAccess('readonly').setDescription('System status summary (chassis).')
mmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('Service processor type.')
mmSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('Management module serial number.')
mmFru = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 6), OctetString()).setMaxAccess('readonly').setDescription('Management module Field-Replaceable number.')
mmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 7), OctetString()).setMaxAccess('readwrite').setDescription('The IPv4 compliant address of the management module.')
chassisSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 8), OctetString()).setMaxAccess('readonly').setDescription('Chassis serial number.')
chassisFru = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 9), OctetString()).setMaxAccess('readonly').setDescription('Chassis Field-Replaceable number.')
chassisMachineTypeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 10), OctetString()).setMaxAccess('readonly').setDescription('Chassis machine type and model number.')
chassisUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('Chassis unique identifier.')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 12), OctetString()).setMaxAccess('readonly').setDescription('Firmware version of the discovery management module.')
chassisDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Discovery of remote Chassis.\nNOTE: Value returned for the GET command is meaningless for this MIB object.')
fileManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11))
fileTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1))
currentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 1), OctetString()).setMaxAccess('readwrite').setDescription('Specifies the directory name for listing the requested files.')
fileDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2)).setDescription('A table of all the files in the specified directory.\nFor consistent results, view as a table and not as individual entries.')
fileDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'fileIndex')).setDescription('File details entry.\nFor consistent results, view as a table and not as individual entries.')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('File sequence index.')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('File name.')
fileLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('Date of the latest file update.')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('File size in bytes.')
fileManagementCmd = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 3), OctetString()).setMaxAccess('readwrite').setDescription("This field will execute the selected operations on the files.\nThe following operation is supported:\nDEL name     -   delete a file\n                                   \nExamples:\n - to delete the file named switch.config in tftproot directory\n set the value to 'DEL tftproot/switch.config'\n\nNOTE: Value returned for the GET command is meaningless for this \nMIB object.")
fileSystemSpaceAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 6), OctetString()).setMaxAccess('readonly').setDescription('This field displays the available space of the AMM file system.')
service = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23))
serviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 1))
debugEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable AMM debugging with USB key by service personnel.')
bladeServiceData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3))
bladeServiceDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1)).setDescription('Table of blade service data information.')
bladeServiceDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'serviceDataIndex')).setDescription('Blade service data entry')
serviceDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('Blade service date index.')
serviceDataBladeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(14,12,13,10,11,8,9,4,5,6,7,1,2,3,)).subtype(namedValues=namedval.NamedValues(('blade1', 1), ('blade10', 10), ('blade11', 11), ('blade12', 12), ('blade13', 13), ('blade14', 14), ('blade2', 2), ('blade3', 3), ('blade4', 4), ('blade5', 5), ('blade6', 6), ('blade7', 7), ('blade8', 8), ('blade9', 9), ))).setMaxAccess('readonly').setDescription('The numeric blade ID.')
serviceDataBladeExists = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('false', 0), ('true', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade specified exists or not.')
serviceDataBladePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ))).setMaxAccess('readonly').setDescription('Indicates whether the blade specified is powered on or not.')
serviceDataBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 5), OctetString()).setMaxAccess('readonly').setDescription('The name of the blade as a string.')
serviceDataBladeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Indicates whether the blade has the capability to trigger service data.')
serviceDataDumpInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('processorDump', 1), ('platformDump', 2), ('partitionDump', 3), ))).setMaxAccess('readwrite').setDescription('Initiates a type of dump collection to be initiated for the blade.\n\nNOTE: Value returned for the GET command is meaningless\nfor this MIB object.')
bladeSystemReferenceCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3))
bladeSysRefCodesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1)).setDescription('Table of blade system reference codes.')
bladeSysRefCodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'sysRefCodeIndex')).setDescription('Boot sequence entry')
sysRefCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('System reference codes index.')
sysRefCodeBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The bay number of the blade which has the system reference code.')
sysRefCodeSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Indicates whether the blade specified exists or not.')
sysRefCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 4), OctetString()).setMaxAccess('readwrite').setDescription('Unique ID and system reference code for the blade.')
sysRefCodeTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Timestamp of system reference code for the blade.')
bladeSysRefCodesDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2)).setDescription('Table of details of blade system reference codes.')
bladeSysRefCodesDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1)).setIndexNames((0, 'BLADE-MIB', 'sysRefCodeDetailIndex')).setDescription('Boot sequence entry')
sysRefCodeDetailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('System reference codes index.')
sysRefCodeDetailBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The bay number of the blade which has the details\nof system reference code.')
sysRefCodeDetailSRCSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('A sequence of the system reference codes for the blade.')
sysRefCodeDetailSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 4), OctetString()).setMaxAccess('readwrite').setDescription('A sequence of the detailed information of the system reference\ncodes for the blade.')
sysRefCodeDetailDataString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 5), OctetString()).setMaxAccess('readwrite').setDescription('Detailed information of the system reference codes for the blade.')
serviceAdvisor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4))
autoCallHomeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1))
acceptLicenseAgreement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription("Accept Terms and Conditions of AMM Service Advisor. The user will have to accept the terms and conditions\nbefore Service Advisor can send diagnostic data to IBM support personnel. If AMM configuration\nis reset to defaults, the user will have to accept the terms and conditions again before they can \nenable Service Advisor. For more information, please refer to the IBM BladeCenter User's Guide.")
serviceAdvisorEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable Service Advisor. The User Agreement must be accepted and the contact information \nmust be set before the Service Advisor can be enabled.')
serviceSupportCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2))
ibmSupportCenter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2, 1), OctetString()).setMaxAccess('readwrite').setDescription('The country code for the IBM Support Center. 2 character ISO country code.')
contactInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3))
companyName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 1), OctetString()).setMaxAccess('readwrite').setDescription(' The organization/company name of the contact person. 1-30 characters.')
contactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 2), OctetString()).setMaxAccess('readwrite').setDescription('The name of the contact person.1-30 characters.')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 3), OctetString()).setMaxAccess('readwrite').setDescription('The phone of the contact person. 5-30 characters.')
emailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 4), OctetString()).setMaxAccess('readwrite').setDescription("The email of the contact person. It must contain '@' and dot '.' in form userid@hostname (30 characters maximum). \nThe userid can be alphanumeric characters, '.', '-', or '_' but must begin and end with alphanumeric characters. \nThe hostname can be alphanumeric characters, '.', '-', or '_'. It must contain at least two domain items. \nEvery domain item should begin and end with alphanumeric character, and the last domain item should be 2-20 alphabetic characters.")
address = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 5), OctetString()).setMaxAccess('readwrite').setDescription('The address of the machine location. The information in this field should be of sufficient detail to allow someone to \nquickly find the chassis when necessary. 1-30 characters.')
city = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 6), OctetString()).setMaxAccess('readwrite').setDescription('The city of the machine location. 1-30 characters.')
state = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 7), OctetString()).setMaxAccess('readwrite').setDescription('The state of the machine location. 2-3 characters.')
postalCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 8), OctetString()).setMaxAccess('readwrite').setDescription('The postal code of the location for this system. 1-9 characters, only alphanumeric characters are valid.')
httpProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4))
httpProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('enabled', 1), ))).setMaxAccess('readwrite').setDescription('Disable/Enable of the HTTP Proxy. Select Enable to use the proxy for call home\nconnections from the AMM to IBM. HTTP Proxy is used by the AMM when it is not connected to the internet directly.')
httpProxyLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 2), OctetString()).setMaxAccess('readwrite').setDescription('Fully qualified host name or IP address of the HTTP Proxy. Maximum of 63 characters.')
httpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 3), Integer32()).setMaxAccess('readwrite').setDescription('The port number of the HTTP Proxy. An integer value from 1 to 65535.')
httpProxyUserName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 4), OctetString()).setMaxAccess('readwrite').setDescription('User Name of the HTTP Proxy. A maximum of 30 characters string without spaces.')
httpProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 5), OctetString()).setMaxAccess('readwrite').setDescription('Password of the HTTP Proxy. A maximum of 15 characters string without spaces.')
activityLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5))
activityLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1)).setDescription('Table of Service Advisor Activity Log entries information. This table displays the last five\nevents that were generated by the system or user that are called home. The entries are displayed in \nreverse chronological order (most recent call home entry first). For any events that happen with same \nDate/Time, only one event will be called home. If a call home event that is already in the activity \nlog is triggered again on the same event source, it will not be called home again unless the prior entry has \nbeen acknowledged as corrected or 120 hours (5 days) have passed since it initially occurred and was called home. ')
activityLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'activityLogIndex')).setDescription('Service Advisor Activity Log table entry. Each entry has the result of the call-home attempt, \nthe service number assigned for the issue by IBM support, the event ID, event source, date and\ntime that event occured, and a text message.')
activityLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The Service Advisor Activity Log index number.  \nFor consistent results, view as a table and not as individual entries.')
activityLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('A string of data detailing one Service Advisor Activity Log entry. Status PENDING indicates that the system \nis preparing for the event to be called home by collecting data about the systems state. A SUCCESS state \nindicates that the problem was successfully transmitted to IBM support. The FAILED state indicates that the attempt \nto transmit the event information was not successful. Additional information may be found in the Event Log. \nThe service number is similar to a ticket number that can be used as a reference to the issue reported by the machine \nwhen contacting IBM support. The event ID, event source , date and time, and text message are all information from \nthe original entry in the event log. \nThe acknowledged as corrected field is a reminder to certain events to indicate their awareness of the issue. \n\nFor consistent results, view as a table and not as individual entries.')
activityLogAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('no', 0), ('yes', 1), ))).setMaxAccess('readwrite').setDescription('The acknowledgement of one Service Advisor Activity Log entry as corrected. This field allows the users to set a reminder next to \ncertain events to indicate their awareness of the issue. Checking the acknowledge flag will not cause the event to be removed \nfrom the log or close the ticket at IBM support. This log is not cleared, so the acknowledge flag can be used to indicate a problem \ncan be ignored. This field can be also used to override the 120 hour (5 day) filtering of reports via Automated FTP/TFTP Problem\nReport of Service Data.\nFor consistent results, view as a table and not as individual entries.')
autoFTPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5))
autoFTPCallMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 0), ('ftp', 1), ('tftp', 2), ))).setMaxAccess('readwrite').setDescription('This field specifies the automated problem reporting mode. Automated problem reporting mode allows the AMM to automatically put \nservice data to a specified server when a call home event is detected. For any call home events that happen with same Date/Time, \nonly one event will be reported. The system will also wait for an interval of 120 hours (5 days) before another identical event\ncan be sent for the same failed component.')
autoFTPCallAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 2), OctetString()).setMaxAccess('readwrite').setDescription('This field specifies the remote server address of FTP and TFTP. It should be fully qualified hostname or IP address.')
autoFTPCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription('This field specifies the port on remote FTP/TFTP server for data transmission.')
autoFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 4), OctetString()).setMaxAccess('readwrite').setDescription('This field specifies the user account to login remote FTP server.')
autoFTPCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 5), OctetString()).setMaxAccess('readwrite').setDescription('This field specifies the password to login remote FTP server.')
callHomeExclusionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6))
readCallHomeExclusionEventTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1)).setDescription('Table of Call Home Exclusion Event entries information.')
readCallHomeExclusionEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1)).setIndexNames((0, 'BLADE-MIB', 'readCallHomeExclusionEventIndex')).setDescription('Call Home Exclusion Event table entry')
readCallHomeExclusionEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('The index number of one Call Home Exclusion Event.  \nFor consistent results, view as a table and not as individual entries.')
readCallHomeExclusionEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 2), OctetString()).setMaxAccess('readonly').setDescription('The Event ID of one Call Home Exclusion Event entry.\nFor consistent results, view as a table and not as individual entries.')
addCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 2), OctetString()).setMaxAccess('readwrite').setDescription("Add one call home Event ID into the Call Home Exclusion List. \nThe Event ID is an 8-digit hexadecimal number (0-F) with an optional prefix of '0x' or '0X'.\nAn Event can not be added into the exclusion list if autoFtpMode is disabled.\nHowever, if Service Advisor Terms and Conditions are accepted, an event can be added into the exclusion list. \n\nNOTE: Value returned for the GET command is meaningless for this MIB object.")
rmCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 3), OctetString()).setMaxAccess('readwrite').setDescription("Remove one call home Event ID from the Call Home Exclusion List. \nThe Event ID is an 8-digit hexadecimal number (0-F) with an optional prefix of '0x' or '0X'.\nAn event on the exclusion list can not be removed if autoFtpMode is disabled. \nHowever, if Service Advisor Terms and Conditions are accepted, an event on the exclusion list can be removed.\n\nNOTE: Value returned for the GET command is meaningless for this MIB object.")
rmAllCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(('execute', 1), ))).setMaxAccess('readwrite').setDescription('Remove all Event IDs from the Call Home Exclusion List. \nEvents on the exclusion list can not be removed if autoFtpMode is disabled.\nHowever, if Service Advisor Terms and Conditions are accepted, events on the exclusion list can be removed.\n\nNOTE: Value returned for the GET command is meaningless for this MIB object.')

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols('BLADE-MIB', PYSNMP_MODULE_ID=bladeCenterSnmpMIB)

# Types
mibBuilder.exportSymbols('BLADE-MIB', EntryStatus=EntryStatus, InetAddressIPv6=InetAddressIPv6)

# Objects
mibBuilder.exportSymbols('BLADE-MIB', ibm=ibm, ibmAgents=ibmAgents, netfinitySupportProcessorAgent=netfinitySupportProcessorAgent, bladeCenterSnmpMIB=bladeCenterSnmpMIB, monitors=monitors, temperature=temperature, planarTemp=planarTemp, mmTemp=mmTemp, ambientTemp=ambientTemp, frontPanelTemp=frontPanelTemp, frontPanel2Temp=frontPanel2Temp, voltage=voltage, planarVolt=planarVolt, plus5Volt=plus5Volt, plus3Pt3Volt=plus3Pt3Volt, plus12Volt=plus12Volt, minus5Volt=minus5Volt, plus2Pt5Volt=plus2Pt5Volt, plus1Pt8Volt=plus1Pt8Volt, blowers=blowers, blower1speed=blower1speed, blower2speed=blower2speed, blower3speed=blower3speed, blower4speed=blower4speed, blower1State=blower1State, blower2State=blower2State, blower3State=blower3State, blower4State=blower4State, blower1speedRPM=blower1speedRPM, blower2speedRPM=blower2speedRPM, blower3speedRPM=blower3speedRPM, blower4speedRPM=blower4speedRPM, blower1ControllerState=blower1ControllerState, blower2ControllerState=blower2ControllerState, blower3ControllerState=blower3ControllerState, blower4ControllerState=blower4ControllerState, blower1ExhaustTemp=blower1ExhaustTemp, blower2ExhaustTemp=blower2ExhaustTemp, blower3ExhaustTemp=blower3ExhaustTemp, blower4ExhaustTemp=blower4ExhaustTemp, powerModuleHealth=powerModuleHealth, powerModuleHealthTable=powerModuleHealthTable, powerModuleHealthEntry=powerModuleHealthEntry, powerModuleIndex=powerModuleIndex, powerModuleExists=powerModuleExists, powerModuleState=powerModuleState, powerModuleDetails=powerModuleDetails, spStatus=spStatus, mmBistAndChassisStatus=mmBistAndChassisStatus, bistSdram=bistSdram, bistRs485Port1=bistRs485Port1, bistRs485Port2=bistRs485Port2, bistNvram=bistNvram, bistRtc=bistRtc, bistLocalI2CBus=bistLocalI2CBus, bistPrimaryMainAppFlashImage=bistPrimaryMainAppFlashImage, bistSecondaryMainAppFlashImage=bistSecondaryMainAppFlashImage, bistBootRomFlashImage=bistBootRomFlashImage, bistEthernetPort1=bistEthernetPort1, bistEthernetPort2=bistEthernetPort2, bistInternalPCIBus=bistInternalPCIBus, bistExternalI2CDevices=bistExternalI2CDevices, bistUSBController=bistUSBController, bistVideoCompressorBoard=bistVideoCompressorBoard, bistRemoteVideo=bistRemoteVideo, bistPrimaryBus=bistPrimaryBus, bistInternalEthernetSwitch=bistInternalEthernetSwitch, bistVideoCapture=bistVideoCapture, bistUSBKeyboardMouseEmulation=bistUSBKeyboardMouseEmulation, bistUSBMassStorageEmulation=bistUSBMassStorageEmulation, bistUSBKeyboardMouseFirmware=bistUSBKeyboardMouseFirmware, bistUSBMassStorageFirmware=bistUSBMassStorageFirmware, bistPrimaryCore=bistPrimaryCore, bistSecondaryCore=bistSecondaryCore, bistInternalIOExpander=bistInternalIOExpander, bistRemoteControlFirmware=bistRemoteControlFirmware, bistPhysicalNetworkLink=bistPhysicalNetworkLink, bistLogicalNetworkLink=bistLogicalNetworkLink, bistBladesInstalled=bistBladesInstalled, bistBladesCommunicating=bistBladesCommunicating, bistBlowersInstalled=bistBlowersInstalled, bistBlowersFunctional=bistBlowersFunctional, bistMediaTrayInstalled=bistMediaTrayInstalled, bistMediaTrayCommunicating=bistMediaTrayCommunicating, bistOtherMMInstalled=bistOtherMMInstalled, bistOtherMMCommunicating=bistOtherMMCommunicating, bistPowerModulesInstalled=bistPowerModulesInstalled, bistPowerModulesFunctional=bistPowerModulesFunctional, bistSwitchModulesInstalled=bistSwitchModulesInstalled, bistSwitchModulesCommunicating=bistSwitchModulesCommunicating, bistLastUpdate=bistLastUpdate, rmmBistAndChassisStatus=rmmBistAndChassisStatus, rbistRs485Port1=rbistRs485Port1, rbistRs485Port2=rbistRs485Port2, rbistRtc=rbistRtc, rbistLocalI2CBus=rbistLocalI2CBus, rbistPrimaryMainAppFlashImage=rbistPrimaryMainAppFlashImage, rbistSecondaryMainAppFlashImage=rbistSecondaryMainAppFlashImage, rbistBootRomFlashImage=rbistBootRomFlashImage, rbistEthernetPort1=rbistEthernetPort1, rbistExternalI2CDevices=rbistExternalI2CDevices, rbistInternalEthernetSwitch=rbistInternalEthernetSwitch, rbistVideoCapture=rbistVideoCapture, rbistUSBKeyboardMouseEmulation=rbistUSBKeyboardMouseEmulation, rbistUSBMassStorageEmulation=rbistUSBMassStorageEmulation, rbistUSBKeyboardMouseFirmware=rbistUSBKeyboardMouseFirmware, rbistUSBMassStorageFirmware=rbistUSBMassStorageFirmware, rbistPrimaryCore=rbistPrimaryCore, rbistSecondaryCore=rbistSecondaryCore, rbistInternalIOExpander=rbistInternalIOExpander, rbistRemoteControlFirmware=rbistRemoteControlFirmware, rbistPhysicalNetworkLink=rbistPhysicalNetworkLink, rbistLogicalNetworkLink=rbistLogicalNetworkLink, rbistBladesInstalled=rbistBladesInstalled, rbistBladesCommunicating=rbistBladesCommunicating, rbistBlowersInstalled=rbistBlowersInstalled, rbistBlowersFunctional=rbistBlowersFunctional, rbistMediaTrayInstalled=rbistMediaTrayInstalled, rbistMediaTrayCommunicating=rbistMediaTrayCommunicating, rbistOtherMMInstalled=rbistOtherMMInstalled, rbistOtherMMCommunicating=rbistOtherMMCommunicating, rbistPowerModulesInstalled=rbistPowerModulesInstalled, rbistPowerModulesFunctional=rbistPowerModulesFunctional, rbistSwitchModulesInstalled=rbistSwitchModulesInstalled, rbistSwitchModulesCommunicating=rbistSwitchModulesCommunicating, rbistUpdateTime=rbistUpdateTime)
mibBuilder.exportSymbols('BLADE-MIB', rbistLastUpdatePrimary=rbistLastUpdatePrimary, fanPack=fanPack, fanPackTable=fanPackTable, fanPackEntry=fanPackEntry, fanPackIndex=fanPackIndex, fanPackExists=fanPackExists, fanPackState=fanPackState, fanPackFanCount=fanPackFanCount, fanPackAverageSpeed=fanPackAverageSpeed, fanPackAverageSpeedRPM=fanPackAverageSpeedRPM, fanPackControllerState=fanPackControllerState, systemHealth=systemHealth, systemHealthStat=systemHealthStat, systemHealthSummaryTable=systemHealthSummaryTable, systemHealthSummaryEntry=systemHealthSummaryEntry, systemHealthSummaryIndex=systemHealthSummaryIndex, systemHealthSummarySeverity=systemHealthSummarySeverity, systemHealthSummaryDescription=systemHealthSummaryDescription, leds=leds, frontPanelLEDs=frontPanelLEDs, systemErrorLED=systemErrorLED, informationLED=informationLED, temperatureLED=temperatureLED, identityLED=identityLED, bladeLEDs=bladeLEDs, bladeLEDsTable=bladeLEDsTable, bladeLEDsEntry=bladeLEDsEntry, ledBladeIndex=ledBladeIndex, ledBladeId=ledBladeId, ledBladeExists=ledBladeExists, ledBladePowerState=ledBladePowerState, ledBladeHealthState=ledBladeHealthState, ledBladeName=ledBladeName, ledBladeSystemError=ledBladeSystemError, ledBladeInformation=ledBladeInformation, ledBladeKVM=ledBladeKVM, ledBladeMediaTray=ledBladeMediaTray, ledBladeIdentity=ledBladeIdentity, bladeLEDsDetailsTable=bladeLEDsDetailsTable, bladeLEDsDetailsEntry=bladeLEDsDetailsEntry, ledIndex=ledIndex, ledBladeBayNumber=ledBladeBayNumber, ledBladeComponentType=ledBladeComponentType, ledBladeLabel=ledBladeLabel, ledBladeState=ledBladeState, ledBladeLocation=ledBladeLocation, telcoPanelLEDs=telcoPanelLEDs, criticalLED=criticalLED, majorLED=majorLED, minorLED=minorLED, telcoIdentityLED=telcoIdentityLED, telcoColorSel=telcoColorSel, criticalityAssertionMode=criticalityAssertionMode, smLEDs=smLEDs, smLEDsTable=smLEDsTable, smLEDsEntry=smLEDsEntry, ledSMIndex=ledSMIndex, ledSMLEDs=ledSMLEDs, blowerLEDs=blowerLEDs, blowerLEDsTable=blowerLEDsTable, blowerLEDsEntry=blowerLEDsEntry, ledBlowerIndex=ledBlowerIndex, ledBlowerId=ledBlowerId, ledBlowerExists=ledBlowerExists, ledBlowerError=ledBlowerError, fanPackLEDs=fanPackLEDs, fanPackLEDsTable=fanPackLEDsTable, fanPackLEDsEntry=fanPackLEDsEntry, ledFanPackIndex=ledFanPackIndex, ledFanPackId=ledFanPackId, ledFanPackExists=ledFanPackExists, ledFanPackError=ledFanPackError, mtStatusLEDs=mtStatusLEDs, mtStatusLEDsTable=mtStatusLEDsTable, mtStatusLEDsEntry=mtStatusLEDsEntry, ledMediaTrayIndex=ledMediaTrayIndex, ledMediaTrayId=ledMediaTrayId, ledMediaTrayExists=ledMediaTrayExists, ledMediaTrayFault=ledMediaTrayFault, tapStatusLEDs=tapStatusLEDs, tapExists=tapExists, tapFRRLED=tapFRRLED, tapFaultLED=tapFaultLED, ncStatusLEDs=ncStatusLEDs, ncStatusLEDsTable=ncStatusLEDsTable, ncStatusLEDsEntry=ncStatusLEDsEntry, ledNetworkClockIndex=ledNetworkClockIndex, ledNetworkClockId=ledNetworkClockId, ledNetworkClockExists=ledNetworkClockExists, ledNetworkClockFRR=ledNetworkClockFRR, ledNetworkClockFault=ledNetworkClockFault, mxStatusLEDs=mxStatusLEDs, mxStatusLEDsTable=mxStatusLEDsTable, mxStatusLEDsEntry=mxStatusLEDsEntry, ledMuxIndex=ledMuxIndex, ledMuxId=ledMuxId, ledMuxExists=ledMuxExists, ledMuxFRR=ledMuxFRR, ledMuxFault=ledMuxFault, storageLEDs=storageLEDs, storageLEDsTable=storageLEDsTable, storageLEDsEntry=storageLEDsEntry, ledStorageIndex=ledStorageIndex, ledStorageId=ledStorageId, ledStorageExists=ledStorageExists, ledStorageError=ledStorageError, telcoSystemHealth=telcoSystemHealth, telcoSystemHealthStat=telcoSystemHealthStat, telcoSystemHealthSummaryTable=telcoSystemHealthSummaryTable, telcoSystemHealthSummaryEntry=telcoSystemHealthSummaryEntry, telcoSystemHealthSummaryIndex=telcoSystemHealthSummaryIndex, telcoSystemHealthSummarySeverity=telcoSystemHealthSummarySeverity, telcoSystemHealthSummaryDescription=telcoSystemHealthSummaryDescription, telcoSystemHealthSummaryEventName=telcoSystemHealthSummaryEventName, telcoSystemHealthSummaryEventKeyID=telcoSystemHealthSummaryEventKeyID, telcoSystemHealthSummaryAcknowledge=telcoSystemHealthSummaryAcknowledge, telcoSystemHealthSummaryAssertTime=telcoSystemHealthSummaryAssertTime, fuelGauge=fuelGauge, fuelGaugeInformation=fuelGaugeInformation, fuelGaugeTable=fuelGaugeTable, fuelGaugeEntry=fuelGaugeEntry, fuelGaugeIndex=fuelGaugeIndex, fuelGaugePowerDomainNumber=fuelGaugePowerDomainNumber, fuelGaugeStatus=fuelGaugeStatus, fuelGaugeFirstPowerModule=fuelGaugeFirstPowerModule, fuelGaugeSecondPowerModule=fuelGaugeSecondPowerModule, fuelGaugePowerManagementPolicySetting=fuelGaugePowerManagementPolicySetting)
mibBuilder.exportSymbols('BLADE-MIB', fuelGaugeTotalPower=fuelGaugeTotalPower, fuelGaugeAllocatedPower=fuelGaugeAllocatedPower, fuelGaugeRemainingPower=fuelGaugeRemainingPower, fuelGaugePowerInUsed=fuelGaugePowerInUsed, powerDomain1=powerDomain1, powerDomain1Table=powerDomain1Table, powerDomain1Entry=powerDomain1Entry, pd1Index=pd1Index, pd1BayNumber=pd1BayNumber, pd1BladePrimarySlot=pd1BladePrimarySlot, pd1ModuleStatus=pd1ModuleStatus, pd1ModuleName=pd1ModuleName, pd1ModuleState=pd1ModuleState, pd1ModuleAllocatedPowerCurrent=pd1ModuleAllocatedPowerCurrent, pd1ModuleAllocatedPowerMax=pd1ModuleAllocatedPowerMax, pd1ModuleAllocatedPowerMin=pd1ModuleAllocatedPowerMin, pd1ModuleCPUDutyCycles=pd1ModuleCPUDutyCycles, pd1ModuleThrottle=pd1ModuleThrottle, pd1ModulePowerCapabilities=pd1ModulePowerCapabilities, pd1ModuleMeasuredOrStatic=pd1ModuleMeasuredOrStatic, powerDomain1PowerTrending=powerDomain1PowerTrending, pd1PowerTrendingPeriod=pd1PowerTrendingPeriod, pd1PowerTrendingSampleTable=pd1PowerTrendingSampleTable, pd1PowerTrendingSampleEntry=pd1PowerTrendingSampleEntry, pd1PowerTrendingSampleIndex=pd1PowerTrendingSampleIndex, pd1PowerTrendingSampleTimeStamp=pd1PowerTrendingSampleTimeStamp, pd1PowerTrendingSampleAve=pd1PowerTrendingSampleAve, powerDomain2=powerDomain2, powerDomain2Table=powerDomain2Table, powerDomain2Entry=powerDomain2Entry, pd2Index=pd2Index, pd2BayNumber=pd2BayNumber, pd2BladePrimarySlot=pd2BladePrimarySlot, pd2ModuleStatus=pd2ModuleStatus, pd2ModuleName=pd2ModuleName, pd2ModuleState=pd2ModuleState, pd2ModuleAllocatedPowerCurrent=pd2ModuleAllocatedPowerCurrent, pd2ModuleAllocatedPowerMax=pd2ModuleAllocatedPowerMax, pd2ModuleAllocatedPowerMin=pd2ModuleAllocatedPowerMin, pd2ModuleCPUDutyCycles=pd2ModuleCPUDutyCycles, pd2ModuleThrottle=pd2ModuleThrottle, pd2ModulePowerCapabilities=pd2ModulePowerCapabilities, pd2ModuleMeasuredOrStatic=pd2ModuleMeasuredOrStatic, powerDomain2PowerTrending=powerDomain2PowerTrending, pd2PowerTrendingPeriod=pd2PowerTrendingPeriod, pd2PowerTrendingSampleTable=pd2PowerTrendingSampleTable, pd2PowerTrendingSampleEntry=pd2PowerTrendingSampleEntry, pd2PowerTrendingSampleIndex=pd2PowerTrendingSampleIndex, pd2PowerTrendingSampleTimeStamp=pd2PowerTrendingSampleTimeStamp, pd2PowerTrendingSampleAve=pd2PowerTrendingSampleAve, moduleInformation=moduleInformation, bladeDetails=bladeDetails, bladeDetailsTable=bladeDetailsTable, bladeDetailsEntry=bladeDetailsEntry, bladeDetailsIndex=bladeDetailsIndex, bladeDetailsId=bladeDetailsId, bladeDetailsMaxPowerConfig=bladeDetailsMaxPowerConfig, bladeDetailsEffectiveClockRate=bladeDetailsEffectiveClockRate, bladeDetailsMaximumClockRate=bladeDetailsMaximumClockRate, bladeDetailsPowerSaverMode=bladeDetailsPowerSaverMode, bladeDetailsDynamicPowerSaver=bladeDetailsDynamicPowerSaver, bladeDetailsDynamicPowerFavorPerformanceOverPower=bladeDetailsDynamicPowerFavorPerformanceOverPower, bladePowerTrending=bladePowerTrending, bladePowerTrendingPeriod=bladePowerTrendingPeriod, bladePowerTrendingBladeId=bladePowerTrendingBladeId, bladePowerTrendingSampleTable=bladePowerTrendingSampleTable, bladePowerTrendingSampleEntry=bladePowerTrendingSampleEntry, bladePowerTrendingSampleIndex=bladePowerTrendingSampleIndex, bladePowerTrendingSampleId=bladePowerTrendingSampleId, bladePowerTrendingSampleTimeStamp=bladePowerTrendingSampleTimeStamp, bladePowerTrendingSampleMax=bladePowerTrendingSampleMax, bladePowerTrendingSampleMin=bladePowerTrendingSampleMin, bladePowerTrendingSampleAve=bladePowerTrendingSampleAve, switchDetails=switchDetails, switchPowerTrending=switchPowerTrending, switchPowerTrendingPeriod=switchPowerTrendingPeriod, switchPowerTrendingSwitchId=switchPowerTrendingSwitchId, switchPowerTrendingSampleTable=switchPowerTrendingSampleTable, switchPowerTrendingSampleEntry=switchPowerTrendingSampleEntry, switchPowerTrendingSampleIndex=switchPowerTrendingSampleIndex, switchPowerTrendingSampleId=switchPowerTrendingSampleId, switchPowerTrendingSampleTimeStamp=switchPowerTrendingSampleTimeStamp, switchPowerTrendingSampleMax=switchPowerTrendingSampleMax, switchPowerTrendingSampleMin=switchPowerTrendingSampleMin, switchPowerTrendingSampleAve=switchPowerTrendingSampleAve, blowerDetails=blowerDetails, blowerPowerTrending=blowerPowerTrending, blowerPowerTrendingPeriod=blowerPowerTrendingPeriod, blowerPowerTrendingBlowerId=blowerPowerTrendingBlowerId, blowerPowerTrendingSampleTable=blowerPowerTrendingSampleTable, blowerPowerTrendingSampleEntry=blowerPowerTrendingSampleEntry, blowerPowerTrendingSampleIndex=blowerPowerTrendingSampleIndex, blowerPowerTrendingSampleId=blowerPowerTrendingSampleId, blowerPowerTrendingSampleTimeStamp=blowerPowerTrendingSampleTimeStamp, blowerPowerTrendingSampleMax=blowerPowerTrendingSampleMax, blowerPowerTrendingSampleMin=blowerPowerTrendingSampleMin, blowerPowerTrendingSampleAve=blowerPowerTrendingSampleAve, chassisInformation=chassisInformation, chassisConfiguration=chassisConfiguration, chassisTotalDCPowerAvailable=chassisTotalDCPowerAvailable, chassisTotalACPowerInUsed=chassisTotalACPowerInUsed, chassisTotalThermalOutput=chassisTotalThermalOutput, chassisTrendingSampleInterval=chassisTrendingSampleInterval, chassisPowerService=chassisPowerService, chassisPowerTrending=chassisPowerTrending, chassisPowerTrendingPeriod=chassisPowerTrendingPeriod, chassisPowerTrendingSampleTable=chassisPowerTrendingSampleTable, chassisPowerTrendingSampleEntry=chassisPowerTrendingSampleEntry, chassisPowerTrendingSampleIndex=chassisPowerTrendingSampleIndex, chassisPowerTrendingSampleTimeStamp=chassisPowerTrendingSampleTimeStamp, chassisPowerTrendingSampleAve=chassisPowerTrendingSampleAve, chassisThermalTrending=chassisThermalTrending, chassisThermalTrendingPeriod=chassisThermalTrendingPeriod, mt1ThermalTrendingTable=mt1ThermalTrendingTable, mt1ThermalTrendingEntry=mt1ThermalTrendingEntry, mt1ThermalTrendingIndex=mt1ThermalTrendingIndex, mt1ThermalTrendingTimeStamp=mt1ThermalTrendingTimeStamp, mt1ThermalTrendingTemperature=mt1ThermalTrendingTemperature, mt2ThermalTrendingTable=mt2ThermalTrendingTable, mt2ThermalTrendingEntry=mt2ThermalTrendingEntry, mt2ThermalTrendingIndex=mt2ThermalTrendingIndex, mt2ThermalTrendingTimeStamp=mt2ThermalTrendingTimeStamp, mt2ThermalTrendingTemperature=mt2ThermalTrendingTemperature, blower1ThermalTrendingTable=blower1ThermalTrendingTable, blower1ThermalTrendingEntry=blower1ThermalTrendingEntry, blower1ThermalTrendingIndex=blower1ThermalTrendingIndex, blower1ThermalTrendingTimeStamp=blower1ThermalTrendingTimeStamp)
mibBuilder.exportSymbols('BLADE-MIB', blower1ThermalTrendingTemperature=blower1ThermalTrendingTemperature, blower2ThermalTrendingTable=blower2ThermalTrendingTable, blower2ThermalTrendingEntry=blower2ThermalTrendingEntry, blower2ThermalTrendingIndex=blower2ThermalTrendingIndex, blower2ThermalTrendingTimeStamp=blower2ThermalTrendingTimeStamp, blower2ThermalTrendingTemperature=blower2ThermalTrendingTemperature, blower3ThermalTrendingTable=blower3ThermalTrendingTable, blower3ThermalTrendingEntry=blower3ThermalTrendingEntry, blower3ThermalTrendingIndex=blower3ThermalTrendingIndex, blower3ThermalTrendingTimeStamp=blower3ThermalTrendingTimeStamp, blower3ThermalTrendingTemperature=blower3ThermalTrendingTemperature, blower4ThermalTrendingTable=blower4ThermalTrendingTable, blower4ThermalTrendingEntry=blower4ThermalTrendingEntry, blower4ThermalTrendingIndex=blower4ThermalTrendingIndex, blower4ThermalTrendingTimeStamp=blower4ThermalTrendingTimeStamp, blower4ThermalTrendingTemperature=blower4ThermalTrendingTemperature, powerPolicyInformation=powerPolicyInformation, powerPolicyTable=powerPolicyTable, powerPolicyEntry=powerPolicyEntry, powerPolicyIndex=powerPolicyIndex, powerPolicyPowerDomainNumber=powerPolicyPowerDomainNumber, powerPolicyName=powerPolicyName, powerPolicyPwrSupplyFailureLimit=powerPolicyPwrSupplyFailureLimit, powerPolicyMaxPowerLimit=powerPolicyMaxPowerLimit, powerPolicyEstimatedUtilization=powerPolicyEstimatedUtilization, powerPolicyActivate=powerPolicyActivate, frontbezel=frontbezel, frontbezelExists=frontbezelExists, users=users, mmUsers=mmUsers, currentlyLoggedInTable=currentlyLoggedInTable, currentlyLoggedInEntry=currentlyLoggedInEntry, currentlyLoggedInEntryIndex=currentlyLoggedInEntryIndex, currentlyLoggedInEntryUserId=currentlyLoggedInEntryUserId, currentlyLoggedInEntryAccMethod=currentlyLoggedInEntryAccMethod, monitorThresholds=monitorThresholds, voltageThresholds=voltageThresholds, voltageThresholdsTable=voltageThresholdsTable, voltageThresholdsEntry=voltageThresholdsEntry, voltageThresholdEntryIndex=voltageThresholdEntryIndex, voltageThresholdEntryName=voltageThresholdEntryName, voltageThresholdEntryCurrentValue=voltageThresholdEntryCurrentValue, voltageThresholdEntryWarningHighValue=voltageThresholdEntryWarningHighValue, voltageThresholdEntryWarningResetHighValue=voltageThresholdEntryWarningResetHighValue, voltageThresholdEntryWarningLowValue=voltageThresholdEntryWarningLowValue, voltageThresholdEntryWarningResetLowValue=voltageThresholdEntryWarningResetLowValue, vpdInformation=vpdInformation, chassisVpd=chassisVpd, bladeCenterVpd=bladeCenterVpd, bladeCenterVpdMachineType=bladeCenterVpdMachineType, bladeCenterVpdMachineModel=bladeCenterVpdMachineModel, bladeCenterSerialNumber=bladeCenterSerialNumber, bladeCenterUUID=bladeCenterUUID, bladeCenterManufacturingId=bladeCenterManufacturingId, bladeCenterHardwareRevision=bladeCenterHardwareRevision, bladeCenterFruNumber=bladeCenterFruNumber, bladeCenterManufDate=bladeCenterManufDate, bladeCenterPartNumber=bladeCenterPartNumber, bladeCenterFruSerial=bladeCenterFruSerial, bladeCenterManufacturingIDNumber=bladeCenterManufacturingIDNumber, bladeCenterProductId=bladeCenterProductId, bladeCenterSubManufacturerId=bladeCenterSubManufacturerId, bladeCenterClei=bladeCenterClei, bladeCenterDirectSerialAttach=bladeCenterDirectSerialAttach, bladeCenterHardwareRevisionString=bladeCenterHardwareRevisionString, mmHardwareVpd=mmHardwareVpd, mmHardwareVpdTable=mmHardwareVpdTable, mmHardwareVpdEntry=mmHardwareVpdEntry, mmHardwareVpdIndex=mmHardwareVpdIndex, mmHardwareVpdBayNumber=mmHardwareVpdBayNumber, mmHardwareVpdManufacturingId=mmHardwareVpdManufacturingId, mmHardwareVpdFruNumber=mmHardwareVpdFruNumber, mmHardwareVpdHardwareRevision=mmHardwareVpdHardwareRevision, mmHardwareVpdUuid=mmHardwareVpdUuid, mmHardwareVpdManufDate=mmHardwareVpdManufDate, mmHardwareVpdPartNumber=mmHardwareVpdPartNumber, mmHardwareVpdFruSerial=mmHardwareVpdFruSerial, mmHardwareVpdManufacturingIDNumber=mmHardwareVpdManufacturingIDNumber, mmHardwareVpdProductId=mmHardwareVpdProductId, mmHardwareVpdSubManufacturerId=mmHardwareVpdSubManufacturerId, mmHardwareVpdClei=mmHardwareVpdClei, mmHardwareVpdHardwareRevisionString=mmHardwareVpdHardwareRevisionString, mmInpHardwareVpdTable=mmInpHardwareVpdTable, mmInpHardwareVpdEntry=mmInpHardwareVpdEntry, mmInpHardwareVpdIndex=mmInpHardwareVpdIndex, mmInpHardwareVpdBayNumber=mmInpHardwareVpdBayNumber, mmInpHardwareVpdManufacturingId=mmInpHardwareVpdManufacturingId, mmInpHardwareVpdFruNumber=mmInpHardwareVpdFruNumber, mmInpHardwareVpdHardwareRevision=mmInpHardwareVpdHardwareRevision, mmInpHardwareVpdUuid=mmInpHardwareVpdUuid, mmInpHardwareVpdManufDate=mmInpHardwareVpdManufDate, mmInpHardwareVpdPartNumber=mmInpHardwareVpdPartNumber, mmInpHardwareVpdFruSerial=mmInpHardwareVpdFruSerial, mmInpHardwareVpdManufacturingIDNumber=mmInpHardwareVpdManufacturingIDNumber, mmInpHardwareVpdProductId=mmInpHardwareVpdProductId, mmInpHardwareVpdSubManufacturerId=mmInpHardwareVpdSubManufacturerId, mmInpHardwareVpdClei=mmInpHardwareVpdClei, mmInpHardwareVpdHardwareRevisionString=mmInpHardwareVpdHardwareRevisionString, mmFirmwareVpd=mmFirmwareVpd, mmMainApplVpdTable=mmMainApplVpdTable, mmMainApplVpdEntry=mmMainApplVpdEntry, mmMainApplVpdIndex=mmMainApplVpdIndex, mmMainApplVpdName=mmMainApplVpdName, mmMainApplVpdBuildId=mmMainApplVpdBuildId, mmMainApplVpdRevisonNumber=mmMainApplVpdRevisonNumber, mmMainApplVpdFilename=mmMainApplVpdFilename, mmMainApplVpdBuildDate=mmMainApplVpdBuildDate, mmBootROMVpdTable=mmBootROMVpdTable, mmBootROMVpdEntry=mmBootROMVpdEntry, mmBootROMVpdIndex=mmBootROMVpdIndex, mmBootROMVpdName=mmBootROMVpdName, mmBootROMVpdBuildId=mmBootROMVpdBuildId, mmBootROMVpdRevisonNumber=mmBootROMVpdRevisonNumber, mmBootROMVpdFilename=mmBootROMVpdFilename, mmBootROMVpdBuildDate=mmBootROMVpdBuildDate, mmRemoteControlVpdTable=mmRemoteControlVpdTable, mmRemoteControlVpdEntry=mmRemoteControlVpdEntry, mmRemoteControlVpdIndex=mmRemoteControlVpdIndex, mmRemoteControlVpdName=mmRemoteControlVpdName, mmRemoteControlVpdBuildId=mmRemoteControlVpdBuildId, mmRemoteControlVpdRevisonNumber=mmRemoteControlVpdRevisonNumber, mmRemoteControlVpdFilename=mmRemoteControlVpdFilename, mmRemoteControlVpdBuildDate=mmRemoteControlVpdBuildDate, mmPS2toUSBConvVpdTable=mmPS2toUSBConvVpdTable, mmPS2toUSBConvVpdEntry=mmPS2toUSBConvVpdEntry, mmPS2toUSBConvVpdIndex=mmPS2toUSBConvVpdIndex, mmPS2toUSBConvVpdName=mmPS2toUSBConvVpdName)
mibBuilder.exportSymbols('BLADE-MIB', mmPS2toUSBConvVpdBuildId=mmPS2toUSBConvVpdBuildId, mmPS2toUSBConvVpdRevisonNumber=mmPS2toUSBConvVpdRevisonNumber, mmPS2toUSBConvVpdFilename=mmPS2toUSBConvVpdFilename, mmPS2toUSBConvVpdBuildDate=mmPS2toUSBConvVpdBuildDate, mmToUSBIntfVpdTable=mmToUSBIntfVpdTable, mmToUSBIntfVpdEntry=mmToUSBIntfVpdEntry, mmToUSBIntfVpdIndex=mmToUSBIntfVpdIndex, mmToUSBIntfVpdName=mmToUSBIntfVpdName, mmToUSBIntfVpdBuildId=mmToUSBIntfVpdBuildId, mmToUSBIntfVpdRevisonNumber=mmToUSBIntfVpdRevisonNumber, mmToUSBIntfVpdFilename=mmToUSBIntfVpdFilename, mmToUSBIntfVpdBuildDate=mmToUSBIntfVpdBuildDate, bladeHardwareVpd=bladeHardwareVpd, bladeHardwareVpdTable=bladeHardwareVpdTable, bladeHardwareVpdEntry=bladeHardwareVpdEntry, bladeHardwareVpdIndex=bladeHardwareVpdIndex, bladeHardwareVpdBayNumber=bladeHardwareVpdBayNumber, bladeHardwareVpdManufacturingId=bladeHardwareVpdManufacturingId, bladeHardwareVpdFruNumber=bladeHardwareVpdFruNumber, bladeHardwareVpdHardwareRevision=bladeHardwareVpdHardwareRevision, bladeHardwareVpdSerialNumber=bladeHardwareVpdSerialNumber, bladeHardwareVpdMachineType=bladeHardwareVpdMachineType, bladeHardwareVpdUuid=bladeHardwareVpdUuid, bladeHardwareVpdManufDate=bladeHardwareVpdManufDate, bladeHardwareVpdPartNumber=bladeHardwareVpdPartNumber, bladeHardwareVpdFruSerial=bladeHardwareVpdFruSerial, bladeHardwareVpdMachineModel=bladeHardwareVpdMachineModel, bladeHardwareVpdManufacturingIDNumber=bladeHardwareVpdManufacturingIDNumber, bladeHardwareVpdProductId=bladeHardwareVpdProductId, bladeHardwareVpdSubManufacturerId=bladeHardwareVpdSubManufacturerId, bladeHardwareVpdClei=bladeHardwareVpdClei, bladeHardwareVpdHardwareRevisionString=bladeHardwareVpdHardwareRevisionString, bladeDaughterVpdCardType=bladeDaughterVpdCardType, bladeDaughterVpdManufacturingId=bladeDaughterVpdManufacturingId, bladeDaughterVpdFruNumber=bladeDaughterVpdFruNumber, bladeDaughterVpdHardwareRevision=bladeDaughterVpdHardwareRevision, bladeDaughterVpdSerialNumber=bladeDaughterVpdSerialNumber, bladeDaughterVpdMachineType=bladeDaughterVpdMachineType, bladeDaughterVpdUuid=bladeDaughterVpdUuid, bladeDaughterVpdManufDate=bladeDaughterVpdManufDate, bladeDaughterVpdPartNumber=bladeDaughterVpdPartNumber, bladeDaughterVpdFruSerial=bladeDaughterVpdFruSerial, bladeDaughterVpdManufacturingIDNumber=bladeDaughterVpdManufacturingIDNumber, bladeDaughterVpdProductId=bladeDaughterVpdProductId, bladeDaughterVpdSubManufacturerId=bladeDaughterVpdSubManufacturerId, bladeDaughterVpdClei=bladeDaughterVpdClei, bladeDaughterVpdHardwareRevisionString=bladeDaughterVpdHardwareRevisionString, bladeMACAddressVpdTable=bladeMACAddressVpdTable, bladeMACAddressVpdEntry=bladeMACAddressVpdEntry, bladeMACAddressVpdIndex=bladeMACAddressVpdIndex, bladeMACAddress1Vpd=bladeMACAddress1Vpd, bladeMACAddress2Vpd=bladeMACAddress2Vpd, bladeMACAddress3Vpd=bladeMACAddress3Vpd, bladeMACAddress4Vpd=bladeMACAddress4Vpd, bladeMACAddress5Vpd=bladeMACAddress5Vpd, bladeMACAddress6Vpd=bladeMACAddress6Vpd, bladeMACAddress7Vpd=bladeMACAddress7Vpd, bladeMACAddress8Vpd=bladeMACAddress8Vpd, bladeDaughterCard1MACAddress1Vpd=bladeDaughterCard1MACAddress1Vpd, bladeDaughterCard1MACAddress2Vpd=bladeDaughterCard1MACAddress2Vpd, bladeDaughterCard1MACAddress3Vpd=bladeDaughterCard1MACAddress3Vpd, bladeDaughterCard1MACAddress4Vpd=bladeDaughterCard1MACAddress4Vpd, bladeDaughterCard1MACAddress5Vpd=bladeDaughterCard1MACAddress5Vpd, bladeDaughterCard1MACAddress6Vpd=bladeDaughterCard1MACAddress6Vpd, bladeDaughterCard1MACAddress7Vpd=bladeDaughterCard1MACAddress7Vpd, bladeDaughterCard1MACAddress8Vpd=bladeDaughterCard1MACAddress8Vpd, bladeDaughterCard2MACAddress1Vpd=bladeDaughterCard2MACAddress1Vpd, bladeDaughterCard2MACAddress2Vpd=bladeDaughterCard2MACAddress2Vpd, bladeDaughterCard2MACAddress3Vpd=bladeDaughterCard2MACAddress3Vpd, bladeDaughterCard2MACAddress4Vpd=bladeDaughterCard2MACAddress4Vpd, bladeDaughterCard2MACAddress5Vpd=bladeDaughterCard2MACAddress5Vpd, bladeDaughterCard2MACAddress6Vpd=bladeDaughterCard2MACAddress6Vpd, bladeDaughterCard2MACAddress7Vpd=bladeDaughterCard2MACAddress7Vpd, bladeDaughterCard2MACAddress8Vpd=bladeDaughterCard2MACAddress8Vpd, bladeDaughterCard3MACAddress1Vpd=bladeDaughterCard3MACAddress1Vpd, bladeDaughterCard3MACAddress2Vpd=bladeDaughterCard3MACAddress2Vpd, bladeDaughterCard3MACAddress3Vpd=bladeDaughterCard3MACAddress3Vpd, bladeDaughterCard3MACAddress4Vpd=bladeDaughterCard3MACAddress4Vpd, bladeDaughterCard3MACAddress5Vpd=bladeDaughterCard3MACAddress5Vpd, bladeDaughterCard3MACAddress6Vpd=bladeDaughterCard3MACAddress6Vpd, bladeDaughterCard3MACAddress7Vpd=bladeDaughterCard3MACAddress7Vpd, bladeDaughterCard3MACAddress8Vpd=bladeDaughterCard3MACAddress8Vpd, bladeDaughterCard4MACAddress1Vpd=bladeDaughterCard4MACAddress1Vpd, bladeDaughterCard4MACAddress2Vpd=bladeDaughterCard4MACAddress2Vpd, bladeDaughterCard4MACAddress3Vpd=bladeDaughterCard4MACAddress3Vpd, bladeDaughterCard4MACAddress4Vpd=bladeDaughterCard4MACAddress4Vpd, bladeDaughterCard4MACAddress5Vpd=bladeDaughterCard4MACAddress5Vpd, bladeDaughterCard4MACAddress6Vpd=bladeDaughterCard4MACAddress6Vpd, bladeDaughterCard4MACAddress7Vpd=bladeDaughterCard4MACAddress7Vpd, bladeDaughterCard4MACAddress8Vpd=bladeDaughterCard4MACAddress8Vpd, bladeDaughterCard5MACAddress1Vpd=bladeDaughterCard5MACAddress1Vpd, bladeDaughterCard5MACAddress2Vpd=bladeDaughterCard5MACAddress2Vpd, bladeDaughterCard5MACAddress3Vpd=bladeDaughterCard5MACAddress3Vpd, bladeDaughterCard5MACAddress4Vpd=bladeDaughterCard5MACAddress4Vpd, bladeDaughterCard5MACAddress5Vpd=bladeDaughterCard5MACAddress5Vpd, bladeDaughterCard5MACAddress6Vpd=bladeDaughterCard5MACAddress6Vpd, bladeDaughterCard5MACAddress7Vpd=bladeDaughterCard5MACAddress7Vpd, bladeDaughterCard5MACAddress8Vpd=bladeDaughterCard5MACAddress8Vpd, bladeHSDaughterCard1MACAddress1Vpd=bladeHSDaughterCard1MACAddress1Vpd, bladeHSDaughterCard1MACAddress2Vpd=bladeHSDaughterCard1MACAddress2Vpd, bladeHSDaughterCard1MACAddress3Vpd=bladeHSDaughterCard1MACAddress3Vpd, bladeHSDaughterCard1MACAddress4Vpd=bladeHSDaughterCard1MACAddress4Vpd, bladeHSDaughterCard1MACAddress5Vpd=bladeHSDaughterCard1MACAddress5Vpd, bladeHSDaughterCard1MACAddress6Vpd=bladeHSDaughterCard1MACAddress6Vpd, bladeHSDaughterCard1MACAddress7Vpd=bladeHSDaughterCard1MACAddress7Vpd, bladeHSDaughterCard1MACAddress8Vpd=bladeHSDaughterCard1MACAddress8Vpd, bladeSideCardMACAddress1Vpd=bladeSideCardMACAddress1Vpd, bladeSideCardMACAddress2Vpd=bladeSideCardMACAddress2Vpd, bladeSideCardMACAddress3Vpd=bladeSideCardMACAddress3Vpd, bladeSideCardMACAddress4Vpd=bladeSideCardMACAddress4Vpd, bladeSideCardMACAddress5Vpd=bladeSideCardMACAddress5Vpd, bladeSideCardMACAddress6Vpd=bladeSideCardMACAddress6Vpd, bladeSideCardMACAddress7Vpd=bladeSideCardMACAddress7Vpd, bladeSideCardMACAddress8Vpd=bladeSideCardMACAddress8Vpd, bladeExpBoardVpdTable=bladeExpBoardVpdTable, bladeExpBoardVpdEntry=bladeExpBoardVpdEntry, bladeExpBoardVpdIndex=bladeExpBoardVpdIndex, bladeExpBoardVpdBayNumber=bladeExpBoardVpdBayNumber, bladeExpBoardVpdManufacturingId=bladeExpBoardVpdManufacturingId, bladeExpBoardVpdFruNumber=bladeExpBoardVpdFruNumber, bladeExpBoardVpdHardwareRevision=bladeExpBoardVpdHardwareRevision, bladeExpBoardVpdSerialNumber=bladeExpBoardVpdSerialNumber, bladeExpBoardVpdMachineType=bladeExpBoardVpdMachineType, bladeExpBoardVpdUuid=bladeExpBoardVpdUuid, bladeExpBoardVpdManufDate=bladeExpBoardVpdManufDate, bladeExpBoardVpdPartNumber=bladeExpBoardVpdPartNumber, bladeExpBoardVpdFruSerial=bladeExpBoardVpdFruSerial)
mibBuilder.exportSymbols('BLADE-MIB', bladeExpBoardVpdMachineModel=bladeExpBoardVpdMachineModel, bladeExpBoardVpdManufacturingIDNumber=bladeExpBoardVpdManufacturingIDNumber, bladeExpBoardVpdProductId=bladeExpBoardVpdProductId, bladeExpBoardVpdSubManufacturerId=bladeExpBoardVpdSubManufacturerId, bladeExpBoardVpdClei=bladeExpBoardVpdClei, bladeExpBoardVpdBladeBayNumber=bladeExpBoardVpdBladeBayNumber, bladeExpBoardVpdCardType=bladeExpBoardVpdCardType, bladeExpBoardVpdCardSubType=bladeExpBoardVpdCardSubType, bladeExpBoardVpdHardwareRevisionString=bladeExpBoardVpdHardwareRevisionString, bladeSideCardVpdTable=bladeSideCardVpdTable, bladeSideCardVpdEntry=bladeSideCardVpdEntry, bladeSideCardVpdIndex=bladeSideCardVpdIndex, bladeSideCardVpdBayNumber=bladeSideCardVpdBayNumber, bladeSideCardVpdManufacturingId=bladeSideCardVpdManufacturingId, bladeSideCardVpdFruNumber=bladeSideCardVpdFruNumber, bladeSideCardVpdHardwareRevision=bladeSideCardVpdHardwareRevision, bladeSideCardVpdSerialNumber=bladeSideCardVpdSerialNumber, bladeSideCardVpdMachineType=bladeSideCardVpdMachineType, bladeSideCardVpdUuid=bladeSideCardVpdUuid, bladeSideCardVpdManufDate=bladeSideCardVpdManufDate, bladeSideCardVpdPartNumber=bladeSideCardVpdPartNumber, bladeSideCardVpdFruSerial=bladeSideCardVpdFruSerial, bladeSideCardVpdMachineModel=bladeSideCardVpdMachineModel, bladeSideCardVpdManufacturingIDNumber=bladeSideCardVpdManufacturingIDNumber, bladeSideCardVpdProductId=bladeSideCardVpdProductId, bladeSideCardVpdSubManufacturerId=bladeSideCardVpdSubManufacturerId, bladeSideCardVpdClei=bladeSideCardVpdClei, bladeSideCardVpdBladeBayNumber=bladeSideCardVpdBladeBayNumber, bladeSideCardVpdHardwareRevisionString=bladeSideCardVpdHardwareRevisionString, bladeExpCardVpdTable=bladeExpCardVpdTable, bladeExpCardVpdEntry=bladeExpCardVpdEntry, bladeExpCardVpdIndex=bladeExpCardVpdIndex, bladeExpCardVpdBayNumber=bladeExpCardVpdBayNumber, bladeExpCardVpdManufacturingId=bladeExpCardVpdManufacturingId, bladeExpCardVpdFruNumber=bladeExpCardVpdFruNumber, bladeExpCardVpdHardwareRevision=bladeExpCardVpdHardwareRevision, bladeExpCardVpdSerialNumber=bladeExpCardVpdSerialNumber, bladeExpCardVpdMachineType=bladeExpCardVpdMachineType, bladeExpCardVpdUuid=bladeExpCardVpdUuid, bladeExpCardVpdManufDate=bladeExpCardVpdManufDate, bladeExpCardVpdPartNumber=bladeExpCardVpdPartNumber, bladeExpCardVpdFruSerial=bladeExpCardVpdFruSerial, bladeExpCardVpdMachineModel=bladeExpCardVpdMachineModel, bladeExpCardVpdManufacturingIDNumber=bladeExpCardVpdManufacturingIDNumber, bladeExpCardVpdProductId=bladeExpCardVpdProductId, bladeExpCardVpdSubManufacturerId=bladeExpCardVpdSubManufacturerId, bladeExpCardVpdClei=bladeExpCardVpdClei, bladeExpCardVpdBladeBayNumber=bladeExpCardVpdBladeBayNumber, bladeExpCardVpdCardTypeInfo=bladeExpCardVpdCardTypeInfo, bladeExpCardVpdHighSpeed=bladeExpCardVpdHighSpeed, bladeExpCardVpdHardwareRevisionString=bladeExpCardVpdHardwareRevisionString, bladecKVMCardVpdTable=bladecKVMCardVpdTable, bladecKVMCardVpdEntry=bladecKVMCardVpdEntry, bladecKVMCardVpdIndex=bladecKVMCardVpdIndex, bladecKVMCardVpdBayNumber=bladecKVMCardVpdBayNumber, bladecKVMCardVpdManufacturingId=bladecKVMCardVpdManufacturingId, bladecKVMCardVpdFruNumber=bladecKVMCardVpdFruNumber, bladecKVMCardVpdHardwareRevision=bladecKVMCardVpdHardwareRevision, bladecKVMCardVpdSerialNumber=bladecKVMCardVpdSerialNumber, bladecKVMCardVpdMachineType=bladecKVMCardVpdMachineType, bladecKVMCardVpdUuid=bladecKVMCardVpdUuid, bladecKVMCardVpdManufDate=bladecKVMCardVpdManufDate, bladecKVMCardVpdPartNumber=bladecKVMCardVpdPartNumber, bladecKVMCardVpdFruSerial=bladecKVMCardVpdFruSerial, bladecKVMCardVpdMachineModel=bladecKVMCardVpdMachineModel, bladecKVMCardVpdManufacturingIDNumber=bladecKVMCardVpdManufacturingIDNumber, bladecKVMCardVpdProductId=bladecKVMCardVpdProductId, bladecKVMCardVpdSubManufacturerId=bladecKVMCardVpdSubManufacturerId, bladecKVMCardVpdClei=bladecKVMCardVpdClei, bladecKVMCardVpdHardwareRevisionString=bladecKVMCardVpdHardwareRevisionString, bladeAndExpCardWwnGuidVpdTable=bladeAndExpCardWwnGuidVpdTable, bladeAndExpCardWwnGuidVpdEntry=bladeAndExpCardWwnGuidVpdEntry, bladeAndExpCardWwnGuidVpdIndex=bladeAndExpCardWwnGuidVpdIndex, bladeAndExpCardWwnGuidVpdBayNumber=bladeAndExpCardWwnGuidVpdBayNumber, bladeAndExpCardWwnGuidVpdName=bladeAndExpCardWwnGuidVpdName, bladeAndExpCardWwnGuidVpdBladeBayNumber=bladeAndExpCardWwnGuidVpdBladeBayNumber, bladeAndExpCardWwnGuidVpdType=bladeAndExpCardWwnGuidVpdType, bladeAndExpCardWwnGuidVpd1=bladeAndExpCardWwnGuidVpd1, bladeAndExpCardWwnGuidVpd2=bladeAndExpCardWwnGuidVpd2, bladeAndExpCardWwnGuidVpd3=bladeAndExpCardWwnGuidVpd3, bladeAndExpCardWwnGuidVpd4=bladeAndExpCardWwnGuidVpd4, bladeAndExpCardWwnGuidVpd5=bladeAndExpCardWwnGuidVpd5, bladeAndExpCardWwnGuidVpd6=bladeAndExpCardWwnGuidVpd6, bladeAndExpCardWwnGuidVpd7=bladeAndExpCardWwnGuidVpd7, bladeAndExpCardWwnGuidVpd8=bladeAndExpCardWwnGuidVpd8, bladeManagementCardVpdTable=bladeManagementCardVpdTable, bladeManagementCardVpdEntry=bladeManagementCardVpdEntry, bladeManagementCardVpdIndex=bladeManagementCardVpdIndex, bladeManagementCardVpdBayNumber=bladeManagementCardVpdBayNumber, bladeManagementCardVpdManufacturingId=bladeManagementCardVpdManufacturingId, bladeManagementCardVpdFruNumber=bladeManagementCardVpdFruNumber, bladeManagementCardVpdHardwareRevision=bladeManagementCardVpdHardwareRevision, bladeManagementCardVpdSerialNumber=bladeManagementCardVpdSerialNumber, bladeManagementCardVpdMachineType=bladeManagementCardVpdMachineType, bladeManagementCardVpdUuid=bladeManagementCardVpdUuid, bladeManagementCardVpdManufDate=bladeManagementCardVpdManufDate, bladeManagementCardVpdPartNumber=bladeManagementCardVpdPartNumber, bladeManagementCardVpdFruSerial=bladeManagementCardVpdFruSerial, bladeManagementCardVpdMachineModel=bladeManagementCardVpdMachineModel, bladeManagementCardVpdManufacturingIDNumber=bladeManagementCardVpdManufacturingIDNumber, bladeManagementCardVpdProductId=bladeManagementCardVpdProductId, bladeManagementCardVpdSubManufacturerId=bladeManagementCardVpdSubManufacturerId, bladeManagementCardVpdClei=bladeManagementCardVpdClei, bladeManagementCardVpdHardwareRevisionString=bladeManagementCardVpdHardwareRevisionString, bladeFirmwareVpd=bladeFirmwareVpd, bladeBiosVPDTable=bladeBiosVPDTable, bladeBiosVPDEntry=bladeBiosVPDEntry, bladeBiosVpdIndex=bladeBiosVpdIndex, bladeBiosVpdId=bladeBiosVpdId, bladeBiosVpdExists=bladeBiosVpdExists, bladeBiosVpdPowerState=bladeBiosVpdPowerState, bladeBiosVpdName=bladeBiosVpdName, bladeBiosVpdBuildId=bladeBiosVpdBuildId, bladeBiosVpdRevision=bladeBiosVpdRevision, bladeBiosVpdDate=bladeBiosVpdDate, bladeDiagsVPDTable=bladeDiagsVPDTable, bladeDiagsVPDEntry=bladeDiagsVPDEntry, bladeDiagsVpdIndex=bladeDiagsVpdIndex, bladeDiagsVpdId=bladeDiagsVpdId, bladeDiagsVpdExists=bladeDiagsVpdExists, bladeDiagsVpdPowerState=bladeDiagsVpdPowerState, bladeDiagsVpdName=bladeDiagsVpdName, bladeDiagsVpdBuildId=bladeDiagsVpdBuildId, bladeDiagsVpdRevision=bladeDiagsVpdRevision, bladeDiagsVpdDate=bladeDiagsVpdDate, bladeSysMgmtProcVPDTable=bladeSysMgmtProcVPDTable, bladeSysMgmtProcVPDEntry=bladeSysMgmtProcVPDEntry)
mibBuilder.exportSymbols('BLADE-MIB', bladeSysMgmtProcVpdIndex=bladeSysMgmtProcVpdIndex, bladeSysMgmtProcVpdId=bladeSysMgmtProcVpdId, bladeSysMgmtProcVpdExists=bladeSysMgmtProcVpdExists, bladeSysMgmtProcVpdPowerState=bladeSysMgmtProcVpdPowerState, bladeSysMgmtProcVpdName=bladeSysMgmtProcVpdName, bladeSysMgmtProcVpdBuildId=bladeSysMgmtProcVpdBuildId, bladeSysMgmtProcVpdRevision=bladeSysMgmtProcVpdRevision, bladecKVMVPDTable=bladecKVMVPDTable, bladecKVMVPDEntry=bladecKVMVPDEntry, bladecKVMVpdIndex=bladecKVMVpdIndex, bladecKVMVpdId=bladecKVMVpdId, bladecKVMVpdExists=bladecKVMVpdExists, bladecKVMVpdPowerState=bladecKVMVpdPowerState, bladecKVMVpdName=bladecKVMVpdName, bladecKVMVpdRevision=bladecKVMVpdRevision, smHardwareVpd=smHardwareVpd, smHardwareVpdTable=smHardwareVpdTable, smHardwareVpdEntry=smHardwareVpdEntry, smHardwareVpdIndex=smHardwareVpdIndex, smHardwareVpdBayNumber=smHardwareVpdBayNumber, smHardwareVpdManufacturingId=smHardwareVpdManufacturingId, smHardwareVpdFruNumber=smHardwareVpdFruNumber, smHardwareVpdHardwareRevision=smHardwareVpdHardwareRevision, smHardwareVpdUuid=smHardwareVpdUuid, smHardwareVpdManufDate=smHardwareVpdManufDate, smHardwareVpdPartNumber=smHardwareVpdPartNumber, smHardwareVpdFruSerial=smHardwareVpdFruSerial, smHardwareVpdManufacturingIDNumber=smHardwareVpdManufacturingIDNumber, smHardwareVpdProductId=smHardwareVpdProductId, smHardwareVpdSubManufacturerId=smHardwareVpdSubManufacturerId, smHardwareVpdClei=smHardwareVpdClei, smHardwareVpdWwnGuid=smHardwareVpdWwnGuid, smHardwareVpdWwnGuidType=smHardwareVpdWwnGuidType, smHardwareVpdWidth=smHardwareVpdWidth, smHardwareVpdHardwareRevisionString=smHardwareVpdHardwareRevisionString, smInpHardwareVpdTable=smInpHardwareVpdTable, smInpHardwareVpdEntry=smInpHardwareVpdEntry, smInpHardwareVpdIndex=smInpHardwareVpdIndex, smInpHardwareVpdBayNumber=smInpHardwareVpdBayNumber, smInpHardwareVpdManufacturingId=smInpHardwareVpdManufacturingId, smInpHardwareVpdFruNumber=smInpHardwareVpdFruNumber, smInpHardwareVpdHardwareRevision=smInpHardwareVpdHardwareRevision, smInpHardwareVpdUuid=smInpHardwareVpdUuid, smInpHardwareVpdManufDate=smInpHardwareVpdManufDate, smInpHardwareVpdPartNumber=smInpHardwareVpdPartNumber, smInpHardwareVpdFruSerial=smInpHardwareVpdFruSerial, smInpHardwareVpdManufacturingIDNumber=smInpHardwareVpdManufacturingIDNumber, smInpHardwareVpdProductId=smInpHardwareVpdProductId, smInpHardwareVpdSubManufacturerId=smInpHardwareVpdSubManufacturerId, smInpHardwareVpdClei=smInpHardwareVpdClei, smInpHardwareVpdWwnGuid=smInpHardwareVpdWwnGuid, smInpHardwareVpdWwnGuidType=smInpHardwareVpdWwnGuidType, smInpHardwareVpdWidth=smInpHardwareVpdWidth, smInpHardwareVpdName=smInpHardwareVpdName, smInpHardwareVpdHardwareRevisionString=smInpHardwareVpdHardwareRevisionString, smFirmwareVpd=smFirmwareVpd, smMainAppVpdTable=smMainAppVpdTable, smMainAppVpdEntry=smMainAppVpdEntry, smMainAppVpdIndex=smMainAppVpdIndex, smMainAppVpdId=smMainAppVpdId, smMainAppVpdExists=smMainAppVpdExists, smMainAppVpdSwitchType=smMainAppVpdSwitchType, smMainApp1VpdBuildId=smMainApp1VpdBuildId, smMainApp1VpdBuildDate=smMainApp1VpdBuildDate, smMainApp1VpdRevisionNumber=smMainApp1VpdRevisionNumber, smMainApp2VpdBuildId=smMainApp2VpdBuildId, smMainApp2VpdBuildDate=smMainApp2VpdBuildDate, smMainApp2VpdRevisionNumber=smMainApp2VpdRevisionNumber, smMainApp3VpdBuildId=smMainApp3VpdBuildId, smMainApp3VpdBuildDate=smMainApp3VpdBuildDate, smMainApp3VpdRevisionNumber=smMainApp3VpdRevisionNumber, smMainAppVpdSwitchSubType=smMainAppVpdSwitchSubType, smBootRomVpdTable=smBootRomVpdTable, smBootRomVpdEntry=smBootRomVpdEntry, smBootRomVpdIndex=smBootRomVpdIndex, smBootRomVpdId=smBootRomVpdId, smBootRomVpdExists=smBootRomVpdExists, smBootRomVpdSwitchType=smBootRomVpdSwitchType, smBootRomVpdBuildId=smBootRomVpdBuildId, smBootRomVpdBuildDate=smBootRomVpdBuildDate, smBootRomVpdRevisionNumber=smBootRomVpdRevisionNumber, smBootRomVpdSwitchSubType=smBootRomVpdSwitchSubType, pmHardwareVpd=pmHardwareVpd, pmHardwareVpdTable=pmHardwareVpdTable, pmHardwareVpdEntry=pmHardwareVpdEntry, pmHardwareVpdIndex=pmHardwareVpdIndex, pmHardwareVpdBayNumber=pmHardwareVpdBayNumber, pmHardwareVpdManufacturingId=pmHardwareVpdManufacturingId, pmHardwareVpdFruNumber=pmHardwareVpdFruNumber, pmHardwareVpdHardwareRevision=pmHardwareVpdHardwareRevision, pmHardwareVpdUuid=pmHardwareVpdUuid, pmHardwareVpdManufDate=pmHardwareVpdManufDate, pmHardwareVpdPartNumber=pmHardwareVpdPartNumber, pmHardwareVpdFruSerial=pmHardwareVpdFruSerial, pmHardwareVpdManufacturingIDNumber=pmHardwareVpdManufacturingIDNumber, pmHardwareVpdProductId=pmHardwareVpdProductId, pmHardwareVpdSubManufacturerId=pmHardwareVpdSubManufacturerId, pmHardwareVpdClei=pmHardwareVpdClei, pmHardwareVpdHardwareRevisionString=pmHardwareVpdHardwareRevisionString, mtHardwareVpd=mtHardwareVpd, mtHardwareVpdManufacturingId=mtHardwareVpdManufacturingId, mtHardwareVpdFruNumber=mtHardwareVpdFruNumber, mtHardwareVpdHardwareRevision=mtHardwareVpdHardwareRevision, mtHardwareVpdUuid=mtHardwareVpdUuid, mtHardwareVpdManufacturingIDNumber=mtHardwareVpdManufacturingIDNumber, mtHardwareVpdProductId=mtHardwareVpdProductId, mtHardwareVpdSubManufacturerId=mtHardwareVpdSubManufacturerId, mtHardwareVpdClei=mtHardwareVpdClei, mtHardwareVpdCF1Capacity=mtHardwareVpdCF1Capacity, mtHardwareVpdCF2Capacity=mtHardwareVpdCF2Capacity, mtHardwareVpdBBU1=mtHardwareVpdBBU1, mtHardwareVpdBBU2=mtHardwareVpdBBU2, mtHardwareVpdHardwareRevisionString=mtHardwareVpdHardwareRevisionString, mt2HardwareVpd=mt2HardwareVpd, mt2HardwareVpdManufacturingId=mt2HardwareVpdManufacturingId, mt2HardwareVpdFruNumber=mt2HardwareVpdFruNumber, mt2HardwareVpdHardwareRevision=mt2HardwareVpdHardwareRevision, mt2HardwareVpdUuid=mt2HardwareVpdUuid, mt2HardwareVpdManufacturingIDNumber=mt2HardwareVpdManufacturingIDNumber, mt2HardwareVpdProductId=mt2HardwareVpdProductId, mt2HardwareVpdSubManufacturerId=mt2HardwareVpdSubManufacturerId, mt2HardwareVpdClei=mt2HardwareVpdClei, mt2HardwareVpdCF1Capacity=mt2HardwareVpdCF1Capacity, mt2HardwareVpdCF2Capacity=mt2HardwareVpdCF2Capacity, mt2HardwareVpdHardwareRevisionString=mt2HardwareVpdHardwareRevisionString, blowerFirmwareVpd=blowerFirmwareVpd, blowerControllerVPDTable=blowerControllerVPDTable)
mibBuilder.exportSymbols('BLADE-MIB', blowerControllerVPDEntry=blowerControllerVPDEntry, blowerControllerVpdIndex=blowerControllerVpdIndex, blowerControllerVpdId=blowerControllerVpdId, blowerControllerVpdExists=blowerControllerVpdExists, blowerControllerVpdRevision=blowerControllerVpdRevision, blowerHardwareVpd=blowerHardwareVpd, blowerHardwareVpdTable=blowerHardwareVpdTable, blowerHardwareVpdEntry=blowerHardwareVpdEntry, blowerHardwareVpdIndex=blowerHardwareVpdIndex, blowerHardwareVpdBayNumber=blowerHardwareVpdBayNumber, blowerHardwareVpdManufacturingId=blowerHardwareVpdManufacturingId, blowerHardwareVpdFruNumber=blowerHardwareVpdFruNumber, blowerHardwareVpdHardwareRevision=blowerHardwareVpdHardwareRevision, blowerHardwareVpdUuid=blowerHardwareVpdUuid, blowerHardwareVpdManufDate=blowerHardwareVpdManufDate, blowerHardwareVpdPartNumber=blowerHardwareVpdPartNumber, blowerHardwareVpdFruSerial=blowerHardwareVpdFruSerial, blowerHardwareVpdManufacturingIDNumber=blowerHardwareVpdManufacturingIDNumber, blowerHardwareVpdProductId=blowerHardwareVpdProductId, blowerHardwareVpdSubManufacturerId=blowerHardwareVpdSubManufacturerId, blowerHardwareVpdClei=blowerHardwareVpdClei, blowerHardwareVpdHardwareRevisionString=blowerHardwareVpdHardwareRevisionString, fanPackFirmwareVpd=fanPackFirmwareVpd, fanPackControllerVPDTable=fanPackControllerVPDTable, fanPackControllerVPDEntry=fanPackControllerVPDEntry, fanPackControllerVpdIndex=fanPackControllerVpdIndex, fanPackControllerVpdId=fanPackControllerVpdId, fanPackControllerVpdExists=fanPackControllerVpdExists, fanPackControllerVpdRevision=fanPackControllerVpdRevision, tapHardwareVpd=tapHardwareVpd, tapHardwareVpdManufacturingId=tapHardwareVpdManufacturingId, tapHardwareVpdFruNumber=tapHardwareVpdFruNumber, tapHardwareVpdHardwareRevision=tapHardwareVpdHardwareRevision, tapHardwareVpdUuid=tapHardwareVpdUuid, tapHardwareVpdManufDate=tapHardwareVpdManufDate, tapHardwareVpdPartNumber=tapHardwareVpdPartNumber, tapHardwareVpdFruSerial=tapHardwareVpdFruSerial, tapHardwareVpdManufacturingIDNumber=tapHardwareVpdManufacturingIDNumber, tapHardwareVpdProductId=tapHardwareVpdProductId, tapHardwareVpdSubManufacturerId=tapHardwareVpdSubManufacturerId, tapHardwareVpdClei=tapHardwareVpdClei, tapHardwareVpdHardwareRevisionString=tapHardwareVpdHardwareRevisionString, ncHardwareVpd=ncHardwareVpd, ncHardwareVpdTable=ncHardwareVpdTable, ncHardwareVpdEntry=ncHardwareVpdEntry, ncHardwareVpdIndex=ncHardwareVpdIndex, ncHardwareVpdBayNumber=ncHardwareVpdBayNumber, ncHardwareVpdManufacturingId=ncHardwareVpdManufacturingId, ncHardwareVpdFruNumber=ncHardwareVpdFruNumber, ncHardwareVpdHardwareRevision=ncHardwareVpdHardwareRevision, ncHardwareVpdUuid=ncHardwareVpdUuid, ncHardwareVpdManufDate=ncHardwareVpdManufDate, ncHardwareVpdPartNumber=ncHardwareVpdPartNumber, ncHardwareVpdFruSerial=ncHardwareVpdFruSerial, ncHardwareVpdManufacturingIDNumber=ncHardwareVpdManufacturingIDNumber, ncHardwareVpdProductId=ncHardwareVpdProductId, ncHardwareVpdSubManufacturerId=ncHardwareVpdSubManufacturerId, ncHardwareVpdClei=ncHardwareVpdClei, ncHardwareVpdHardwareRevisionString=ncHardwareVpdHardwareRevisionString, mxHardwareVpd=mxHardwareVpd, mxHardwareVpdTable=mxHardwareVpdTable, mxHardwareVpdEntry=mxHardwareVpdEntry, mxHardwareVpdIndex=mxHardwareVpdIndex, mxHardwareVpdBayNumber=mxHardwareVpdBayNumber, mxHardwareVpdManufacturingId=mxHardwareVpdManufacturingId, mxHardwareVpdFruNumber=mxHardwareVpdFruNumber, mxHardwareVpdHardwareRevision=mxHardwareVpdHardwareRevision, mxHardwareVpdUuid=mxHardwareVpdUuid, mxHardwareVpdManufDate=mxHardwareVpdManufDate, mxHardwareVpdPartNumber=mxHardwareVpdPartNumber, mxHardwareVpdFruSerial=mxHardwareVpdFruSerial, mxHardwareVpdManufacturingIDNumber=mxHardwareVpdManufacturingIDNumber, mxHardwareVpdProductId=mxHardwareVpdProductId, mxHardwareVpdSubManufacturerId=mxHardwareVpdSubManufacturerId, mxHardwareVpdClei=mxHardwareVpdClei, mxHardwareVpdHardwareRevisionString=mxHardwareVpdHardwareRevisionString, stmHardwareVpd=stmHardwareVpd, stmHardwareVpdTable=stmHardwareVpdTable, stmHardwareVpdEntry=stmHardwareVpdEntry, stmHardwareVpdIndex=stmHardwareVpdIndex, stmHardwareVpdBayNumber=stmHardwareVpdBayNumber, stmHardwareVpdManufacturingId=stmHardwareVpdManufacturingId, stmHardwareVpdFruNumber=stmHardwareVpdFruNumber, stmHardwareVpdHardwareRevision=stmHardwareVpdHardwareRevision, stmHardwareVpdUuid=stmHardwareVpdUuid, stmHardwareVpdManufDate=stmHardwareVpdManufDate, stmHardwareVpdPartNumber=stmHardwareVpdPartNumber, stmHardwareVpdFruSerial=stmHardwareVpdFruSerial, stmHardwareVpdManufacturingIDNumber=stmHardwareVpdManufacturingIDNumber, stmHardwareVpdProductId=stmHardwareVpdProductId, stmHardwareVpdSubManufacturerId=stmHardwareVpdSubManufacturerId, stmHardwareVpdClei=stmHardwareVpdClei, stmHardwareVpdHardwareRevisionString=stmHardwareVpdHardwareRevisionString, stmFirmwareVpd=stmFirmwareVpd, stmFirmwareVpdTable=stmFirmwareVpdTable, stmFirmwareVpdEntry=stmFirmwareVpdEntry, stmFirmwareVpdIndex=stmFirmwareVpdIndex, stmFirmwareVpdType=stmFirmwareVpdType, stmFirmwareVpdBuildId=stmFirmwareVpdBuildId, stmFirmwareVpdReleaseDate=stmFirmwareVpdReleaseDate, stmFirmwareVpdRevision=stmFirmwareVpdRevision, bbuHardwareVpd=bbuHardwareVpd, bbuHardwareVpdTable=bbuHardwareVpdTable, bbuHardwareVpdEntry=bbuHardwareVpdEntry, bbuHardwareVpdIndex=bbuHardwareVpdIndex, bbuHardwareVpdBayNumber=bbuHardwareVpdBayNumber, bbuHardwareVpdManufacturingId=bbuHardwareVpdManufacturingId, bbuHardwareVpdFruNumber=bbuHardwareVpdFruNumber, bbuHardwareVpdHardwareRevision=bbuHardwareVpdHardwareRevision, bbuHardwareVpdUuid=bbuHardwareVpdUuid, bbuHardwareVpdManufDate=bbuHardwareVpdManufDate, bbuHardwareVpdPartNumber=bbuHardwareVpdPartNumber, bbuHardwareVpdFruSerial=bbuHardwareVpdFruSerial, bbuHardwareVpdManufacturingIDNumber=bbuHardwareVpdManufacturingIDNumber, bbuHardwareVpdProductId=bbuHardwareVpdProductId, bbuHardwareVpdSubManufacturerId=bbuHardwareVpdSubManufacturerId, bbuHardwareVpdClei=bbuHardwareVpdClei, inventoryManagementActivityVpdTable=inventoryManagementActivityVpdTable, inventoryManagementActivityVpdEntry=inventoryManagementActivityVpdEntry, componentLevelActivityVpdIndex=componentLevelActivityVpdIndex, componentLevelActivityVpdFruNumber=componentLevelActivityVpdFruNumber, componentLevelActivityVpdSerialNumber=componentLevelActivityVpdSerialNumber, componentLevelActivityVpdManufacturingId=componentLevelActivityVpdManufacturingId, componentLevelActivityVpdBayNumber=componentLevelActivityVpdBayNumber, componentLevelActivityVpdAction=componentLevelActivityVpdAction, componentLevelActivityVpdTimestamp=componentLevelActivityVpdTimestamp, reloadVpdData=reloadVpdData)
mibBuilder.exportSymbols('BLADE-MIB', reloadAllVpdData=reloadAllVpdData, reloadFwVpdData=reloadFwVpdData, reloadHwVpdData=reloadHwVpdData, reloadMACAddress=reloadMACAddress, reloadWwnGuidVpdData=reloadWwnGuidVpdData, airFilter=airFilter, passiveAirFilter=passiveAirFilter, passiveAirFilterStatus=passiveAirFilterStatus, passiveAirFilterMonthFreq=passiveAirFilterMonthFreq, passiveAirFilterReplaceDate=passiveAirFilterReplaceDate, errorLogs=errorLogs, eventLog=eventLog, readEventLogTable=readEventLogTable, readEventLogEntry=readEventLogEntry, readEventLogIndex=readEventLogIndex, readEventLogString=readEventLogString, clearEventLog=clearEventLog, monitorLogStateEvents=monitorLogStateEvents, readEnhancedEventLogTable=readEnhancedEventLogTable, readEnhancedEventLogEntry=readEnhancedEventLogEntry, readEnhancedEventLogNumber=readEnhancedEventLogNumber, readEnhancedEventLogAttribute=readEnhancedEventLogAttribute, readEnhancedEventLogMessage=readEnhancedEventLogMessage, readAuditLogTable=readAuditLogTable, readAuditLogEntry=readAuditLogEntry, readAuditLogNumber=readAuditLogNumber, readAuditLogAttribute=readAuditLogAttribute, readAuditLogMessage=readAuditLogMessage, clearAuditLog=clearAuditLog, readSystemLogTable=readSystemLogTable, readSystemLogEntry=readSystemLogEntry, readSystemLogNumber=readSystemLogNumber, readSystemLogAttribute=readSystemLogAttribute, readSystemLogMessage=readSystemLogMessage, clearSystemLog=clearSystemLog, configureSP=configureSP, remoteAccessConfig=remoteAccessConfig, generalRemoteCfg=generalRemoteCfg, remoteAlertRetryDelay=remoteAlertRetryDelay, remoteAlertRetryCount=remoteAlertRetryCount, remoteAlertEntryDelay=remoteAlertEntryDelay, remoteAccessTamperDelay=remoteAccessTamperDelay, userAuthenticationMethod=userAuthenticationMethod, maxSessionsPerLDAPUser=maxSessionsPerLDAPUser, authenticationLoggingTimeout=authenticationLoggingTimeout, trackingIP=trackingIP, accountSecurityManagement=accountSecurityManagement, accountSecurityLevel=accountSecurityLevel, customSecuritySettings=customSecuritySettings, loginPasswordRequired=loginPasswordRequired, passwordExpirationPeriod=passwordExpirationPeriod, defaultAdminPasswordExpired=defaultAdminPasswordExpired, minimumPasswordReuseCycle=minimumPasswordReuseCycle, complexPasswordRules=complexPasswordRules, minimumDiffCharsPassword=minimumDiffCharsPassword, changePasswordFirstAccess=changePasswordFirstAccess, inactivityAlertPeriod=inactivityAlertPeriod, inactivityAlertDisablePeriod=inactivityAlertDisablePeriod, lockoutPeriod=lockoutPeriod, maxLoginFailures=maxLoginFailures, passwordChangeInterval=passwordChangeInterval, serialPortCfg=serialPortCfg, portBaud=portBaud, portParity=portParity, portStopBits=portStopBits, remoteAlertIds=remoteAlertIds, remoteAlertIdsTable=remoteAlertIdsTable, remoteAlertIdsEntry=remoteAlertIdsEntry, remoteAlertIdEntryIndex=remoteAlertIdEntryIndex, remoteAlertIdEntryStatus=remoteAlertIdEntryStatus, remoteAlertIdEntryIpOrHostAddress=remoteAlertIdEntryIpOrHostAddress, remoteAlertIdEntryTextDescription=remoteAlertIdEntryTextDescription, remoteAlertIdEntryNotificationType=remoteAlertIdEntryNotificationType, remoteAlertIdEmailAddr=remoteAlertIdEmailAddr, remoteAlertIdEntrySelectiveAlert=remoteAlertIdEntrySelectiveAlert, generateTestAlert=generateTestAlert, remoteAccessIds=remoteAccessIds, remoteAccessIdsTable=remoteAccessIdsTable, remoteAccessIdsEntry=remoteAccessIdsEntry, remoteAccessIdEntryIndex=remoteAccessIdEntryIndex, remoteAccessIdEntryUserId=remoteAccessIdEntryUserId, remoteAccessIdEntryPassword=remoteAccessIdEntryPassword, remoteAccessIdEntryEncodedLoginPw=remoteAccessIdEntryEncodedLoginPw, remoteAccessIdEntryRole=remoteAccessIdEntryRole, remoteAccessIdEntryLoggedIn=remoteAccessIdEntryLoggedIn, remoteAccessIdEntryLastLogin=remoteAccessIdEntryLastLogin, remoteAccessIdEntryPwdCompliant=remoteAccessIdEntryPwdCompliant, remoteAccessIdEntryPwdExp=remoteAccessIdEntryPwdExp, remoteAccessIdEntryDormant=remoteAccessIdEntryDormant, remoteAccessIdEntryState=remoteAccessIdEntryState, remoteAccessIdEntryAction=remoteAccessIdEntryAction, remoteAccessIdEntrySessionCount=remoteAccessIdEntrySessionCount, remoteAccessIdEntryMaxSessions=remoteAccessIdEntryMaxSessions, remoteAccessUserAuthorityLevelTable=remoteAccessUserAuthorityLevelTable, remoteAccessUserAuthorityLevelEntry=remoteAccessUserAuthorityLevelEntry, ualIndex=ualIndex, ualId=ualId, ualSupervisor=ualSupervisor, ualReadOnly=ualReadOnly, ualAccountManagement=ualAccountManagement, ualConsoleAccess=ualConsoleAccess, ualConsoleAndVirtualMediaAccess=ualConsoleAndVirtualMediaAccess, ualServerPowerAccess=ualServerPowerAccess, ualAllowClearLog=ualAllowClearLog, ualAdapterBasicConfig=ualAdapterBasicConfig, ualAdapterNetworkAndSecurityConfig=ualAdapterNetworkAndSecurityConfig, ualAdapterAdvancedConfig=ualAdapterAdvancedConfig, remoteAccessRBSroleTable=remoteAccessRBSroleTable, remoteAccessRBSroleEntry=remoteAccessRBSroleEntry, roleIndex=roleIndex, roleId=roleId, rbsSupervisor=rbsSupervisor, rbsOperator=rbsOperator, rbsChassisOperator=rbsChassisOperator, rbsChassisAccountManagement=rbsChassisAccountManagement, rbsChassisLogManagement=rbsChassisLogManagement, rbsChassisConfiguration=rbsChassisConfiguration, rbsChassisAdministration=rbsChassisAdministration, rbsBladeOperator=rbsBladeOperator, rbsBladeRemotePresence=rbsBladeRemotePresence, rbsBladeConfiguration=rbsBladeConfiguration, rbsBladeAdministration=rbsBladeAdministration, rbsSwitchModuleOperator=rbsSwitchModuleOperator, rbsSwitchModuleConfiguration=rbsSwitchModuleConfiguration, rbsSwitchModuleAdministration=rbsSwitchModuleAdministration, rbsBladeRemotePresenseVideo=rbsBladeRemotePresenseVideo, rbsBladeRemotePresenseKVM=rbsBladeRemotePresenseKVM)
mibBuilder.exportSymbols('BLADE-MIB', rbsBladeRemotePresenseRdriveR=rbsBladeRemotePresenseRdriveR, rbsBladeRemotePresenseRdriveRW=rbsBladeRemotePresenseRdriveRW, rbsChassisRemotePresenseRdoc=rbsChassisRemotePresenseRdoc, rbsRemotePresenceSupervisor=rbsRemotePresenceSupervisor, remoteAccessRBSscopeTable=remoteAccessRBSscopeTable, remoteAccessRBSscopeEntry=remoteAccessRBSscopeEntry, scopeIndex=scopeIndex, scopeId=scopeId, rbsChassis=rbsChassis, rbsBlade1=rbsBlade1, rbsBlade2=rbsBlade2, rbsBlade3=rbsBlade3, rbsBlade4=rbsBlade4, rbsBlade5=rbsBlade5, rbsBlade6=rbsBlade6, rbsBlade7=rbsBlade7, rbsBlade8=rbsBlade8, rbsBlade9=rbsBlade9, rbsBlade10=rbsBlade10, rbsBlade11=rbsBlade11, rbsBlade12=rbsBlade12, rbsBlade13=rbsBlade13, rbsBlade14=rbsBlade14, rbsSwitch1=rbsSwitch1, rbsSwitch2=rbsSwitch2, rbsSwitch3=rbsSwitch3, rbsSwitch4=rbsSwitch4, rbsSwitch5=rbsSwitch5, rbsSwitch6=rbsSwitch6, rbsSwitch7=rbsSwitch7, rbsSwitch8=rbsSwitch8, rbsSwitch9=rbsSwitch9, rbsSwitch10=rbsSwitch10, userInterfaces=userInterfaces, cli=cli, snmp=snmp, tcm=tcm, web=web, stcm=stcm, mmSshClientAuth=mmSshClientAuth, mmSshClientAuthPubKeyTable=mmSshClientAuthPubKeyTable, mmSshClientAuthPubKeyEntry=mmSshClientAuthPubKeyEntry, mmSshClientAuthRemoteAccessIdIndex=mmSshClientAuthRemoteAccessIdIndex, mmSshClientAuthPubKeyIndex=mmSshClientAuthPubKeyIndex, mmSshClientAuthPubKeyType=mmSshClientAuthPubKeyType, mmSshClientAuthPubKeySize=mmSshClientAuthPubKeySize, mmSshClientAuthPubKeyFingerprint=mmSshClientAuthPubKeyFingerprint, mmSshClientAuthPubKeyAcceptFrom=mmSshClientAuthPubKeyAcceptFrom, mmSshClientAuthPubKeyComment=mmSshClientAuthPubKeyComment, mmSshClientAuthPubKeyAction=mmSshClientAuthPubKeyAction, mmSshClientAuthPubKeyEntryStatus=mmSshClientAuthPubKeyEntryStatus, mmSshClientAuthPubKeyUnused=mmSshClientAuthPubKeyUnused, mmSshClientAuthPubKeyTftpServer=mmSshClientAuthPubKeyTftpServer, mmSshClientAuthPubKeyFileName=mmSshClientAuthPubKeyFileName, mmSshClientAuthPubKeyFileFormat=mmSshClientAuthPubKeyFileFormat, remoteAlerts=remoteAlerts, remoteAlertsCrit=remoteAlertsCrit, critTemp=critTemp, critVolt=critVolt, critMultiBlower=critMultiBlower, critPower=critPower, critHardDrive=critHardDrive, critVRM=critVRM, critMultipleSwitchModule=critMultipleSwitchModule, critInvalidConfig=critInvalidConfig, critBlade=critBlade, critIO=critIO, critStorage=critStorage, critChassis=critChassis, critFan=critFan, remoteAlertsNonCrit=remoteAlertsNonCrit, warnSingleBlower=warnSingleBlower, warnTemp=warnTemp, warnVoltage=warnVoltage, warnRedundantModule=warnRedundantModule, warnMediaTrayKVMSwitch=warnMediaTrayKVMSwitch, warnLogFull=warnLogFull, warnBlade=warnBlade, warnIO=warnIO, warnStorage=warnStorage, warnPower=warnPower, warnChassis=warnChassis, warnFan=warnFan, remoteAlertsSystem=remoteAlertsSystem, systemPowerOff=systemPowerOff, systemPowerOn=systemPowerOn, systemPFA=systemPFA, systemInventory=systemInventory, systemLog75PctFull=systemLog75PctFull, networkChangeNotification=networkChangeNotification, systemBladeThrottling=systemBladeThrottling, systemPowerManagement=systemPowerManagement, systemRemoteLogin=systemRemoteLogin, systemBlade=systemBlade, systemIO=systemIO, systemStorage=systemStorage, systemPower=systemPower, systemChassis=systemChassis, systemFan=systemFan, systemPWRDO=systemPWRDO, alertMode=alertMode, securitySettings=securitySettings, dataEncryption=dataEncryption, trespassWarning=trespassWarning, spClock=spClock, spClockDateAndTimeSetting=spClockDateAndTimeSetting, spClockTimezoneSetting=spClockTimezoneSetting, spIdentification=spIdentification, spTxtId=spTxtId, networkConfiguration=networkConfiguration, networkInterfaces=networkInterfaces, extEthernetInterface=extEthernetInterface, extEthernetInterfaceType=extEthernetInterfaceType, extEthernetInterfaceHostName=extEthernetInterfaceHostName, extEthernetInterfaceIPAddress=extEthernetInterfaceIPAddress, extEthernetInterfaceDataRate=extEthernetInterfaceDataRate, extEthernetInterfaceDuplexSetting=extEthernetInterfaceDuplexSetting, extEthernetInterfaceLAA=extEthernetInterfaceLAA, extEthernetInterfaceDhcpEnabled=extEthernetInterfaceDhcpEnabled, extEthernetInterfaceGatewayIPAddress=extEthernetInterfaceGatewayIPAddress, extEthernetInterfaceBIA=extEthernetInterfaceBIA, extEthernetInterfaceMTU=extEthernetInterfaceMTU, extEthernetInterfaceSubnetMask=extEthernetInterfaceSubnetMask, dhcpEthernetInterface=dhcpEthernetInterface, dhcpHostName=dhcpHostName, dhcpIPAddress=dhcpIPAddress, dhcpGatewayIPAddress=dhcpGatewayIPAddress)
mibBuilder.exportSymbols('BLADE-MIB', dhcpSubnetMask=dhcpSubnetMask, dhcpDomainName=dhcpDomainName, dhcpDHCPServer=dhcpDHCPServer, dhcpPrimaryDNSServer=dhcpPrimaryDNSServer, dhcpSecondaryDNSServer=dhcpSecondaryDNSServer, dhcpTertiaryDNSServer=dhcpTertiaryDNSServer, intEthernetInterface=intEthernetInterface, intEthernetInterfaceType=intEthernetInterfaceType, intEthernetInterfaceEnabled=intEthernetInterfaceEnabled, intEthernetInterfaceLocalIPAddress=intEthernetInterfaceLocalIPAddress, intEthernetInterfaceDataRate=intEthernetInterfaceDataRate, intEthernetInterfaceDuplexSetting=intEthernetInterfaceDuplexSetting, intEthernetInterfaceLAA=intEthernetInterfaceLAA, intEthernetInterfaceGatewayIPAddress=intEthernetInterfaceGatewayIPAddress, intEthernetInterfaceBIA=intEthernetInterfaceBIA, intEthernetInterfaceMTU=intEthernetInterfaceMTU, intEthernetInterfaceSubnetMask=intEthernetInterfaceSubnetMask, standbyExtEthernetInterface=standbyExtEthernetInterface, standbyExtEthernetInterfaceType=standbyExtEthernetInterfaceType, standbyExtEthernetInterfaceHostName=standbyExtEthernetInterfaceHostName, standbyExtEthernetInterfaceIPAddress=standbyExtEthernetInterfaceIPAddress, standbyExtEthernetInterfaceDataRate=standbyExtEthernetInterfaceDataRate, standbyExtEthernetInterfaceDuplexSetting=standbyExtEthernetInterfaceDuplexSetting, standbyExtEthernetInterfaceLAA=standbyExtEthernetInterfaceLAA, standbyExtEthernetInterfaceDhcpEnabled=standbyExtEthernetInterfaceDhcpEnabled, standbyExtEthernetInterfaceGatewayIPAddress=standbyExtEthernetInterfaceGatewayIPAddress, standbyExtEthernetInterfaceBIA=standbyExtEthernetInterfaceBIA, standbyExtEthernetInterfaceMTU=standbyExtEthernetInterfaceMTU, standbyExtEthernetInterfaceSubnetMask=standbyExtEthernetInterfaceSubnetMask, advancedFailover=advancedFailover, standbyDhcpEthernetInterface=standbyDhcpEthernetInterface, standbyDhcpHostName=standbyDhcpHostName, standbyDhcpIPAddress=standbyDhcpIPAddress, standbyDhcpGatewayIPAddress=standbyDhcpGatewayIPAddress, standbyDhcpSubnetMask=standbyDhcpSubnetMask, standbyDhcpDomainName=standbyDhcpDomainName, standbyDhcpDHCPServer=standbyDhcpDHCPServer, standbyDhcpPrimaryDNSServer=standbyDhcpPrimaryDNSServer, standbyDhcpSecondaryDNSServer=standbyDhcpSecondaryDNSServer, standbyDhcpTertiaryDNSServer=standbyDhcpTertiaryDNSServer, tcpProtocols=tcpProtocols, snmpAgentConfig=snmpAgentConfig, snmpSystemContact=snmpSystemContact, snmpSystemLocation=snmpSystemLocation, snmpSystemAgentTrapsDisable=snmpSystemAgentTrapsDisable, snmpAgentCommunityConfig=snmpAgentCommunityConfig, snmpCommunityTable=snmpCommunityTable, snmpCommunityEntry=snmpCommunityEntry, snmpCommunityEntryIndex=snmpCommunityEntryIndex, snmpCommunityEntryCommunityName=snmpCommunityEntryCommunityName, snmpCommunityEntryCommunityIpAddress1=snmpCommunityEntryCommunityIpAddress1, snmpCommunityEntryCommunityIpAddress2=snmpCommunityEntryCommunityIpAddress2, snmpCommunityEntryCommunityIpAddress3=snmpCommunityEntryCommunityIpAddress3, snmpCommunityEntryCommunityViewType=snmpCommunityEntryCommunityViewType, snmpv1SystemAgentEnable=snmpv1SystemAgentEnable, snmpv3SystemAgentEnable=snmpv3SystemAgentEnable, snmpAgentUserProfileConfig=snmpAgentUserProfileConfig, snmpUserProfileTable=snmpUserProfileTable, snmpUserProfileEntry=snmpUserProfileEntry, snmpUserProfileEntryIndex=snmpUserProfileEntryIndex, snmpUserProfileEntryContextName=snmpUserProfileEntryContextName, snmpUserProfileEntryAuthProt=snmpUserProfileEntryAuthProt, snmpUserProfileEntryPrivProt=snmpUserProfileEntryPrivProt, snmpUserProfileEntryPrivPassword=snmpUserProfileEntryPrivPassword, snmpUserProfileEntryViewType=snmpUserProfileEntryViewType, snmpUserProfileEntryIpAddress=snmpUserProfileEntryIpAddress, dnsConfig=dnsConfig, dnsEnabled=dnsEnabled, dnsServerIPAddress1=dnsServerIPAddress1, dnsServerIPAddress2=dnsServerIPAddress2, dnsServerIPAddress3=dnsServerIPAddress3, smtpConfig=smtpConfig, smtpServerNameOrIPAddress=smtpServerNameOrIPAddress, attachmentsToEmailAlerts=attachmentsToEmailAlerts, tcpApplicationConfig=tcpApplicationConfig, telnetInactivityTimeout=telnetInactivityTimeout, commandModeInactivityTimeout=commandModeInactivityTimeout, secureCommandModeEnable=secureCommandModeEnable, commandModeEnable=commandModeEnable, slpAddrType=slpAddrType, slpMulticastAddr=slpMulticastAddr, slpEnable=slpEnable, telnetEnable=telnetEnable, sshEnable=sshEnable, sshVersion=sshVersion, sslServerEnable=sslServerEnable, sslClientEnable=sslClientEnable, ftpEnable=ftpEnable, tftpEnable=tftpEnable, smashTelnetEnable=smashTelnetEnable, smashSshEnable=smashSshEnable, tftpCreateEmptyFile=tftpCreateEmptyFile, ftpTimeout=ftpTimeout, rdEnable=rdEnable, rdocEnable=rdocEnable, kvmEnable=kvmEnable, mmSshServerConfig=mmSshServerConfig, mmSshServerHostKeyTable=mmSshServerHostKeyTable, mmSshServerHostKeyEntry=mmSshServerHostKeyEntry, mmSshServerHostKeyIndex=mmSshServerHostKeyIndex, mmSshServerHostKeyType=mmSshServerHostKeyType, mmSshServerHostKeySize=mmSshServerHostKeySize, mmSshServerHostKeyFingerprint=mmSshServerHostKeyFingerprint, mmSshServerHostKeyGenerate=mmSshServerHostKeyGenerate, mmSshServerHostKeyGenerateProgress=mmSshServerHostKeyGenerateProgress, tcpPortAssignmentCfg=tcpPortAssignmentCfg, tcpPortsRestoreDefault=tcpPortsRestoreDefault, httpPortAssignment=httpPortAssignment, httpsPortAssignment=httpsPortAssignment, telnetPortAssignment=telnetPortAssignment, sshPortAssignment=sshPortAssignment, snmpAgentPortAssignment=snmpAgentPortAssignment, snmpTrapsPortAssignment=snmpTrapsPortAssignment, commandModePortAssignment=commandModePortAssignment, secureCommandModePortAssignment=secureCommandModePortAssignment, rdPortAssignment=rdPortAssignment, rdocPortAssignment=rdocPortAssignment, kvmPortAssignment=kvmPortAssignment, ftpPortAssignment=ftpPortAssignment, ftpDataPortAssignment=ftpDataPortAssignment, tftpPortAssignment=tftpPortAssignment, smashTelnetPortAssignment=smashTelnetPortAssignment, smashSshPortAssignment=smashSshPortAssignment, slpPortAssignment=slpPortAssignment, sdsPortAssignment=sdsPortAssignment, rpPortAssignment=rpPortAssignment, ldapClientCfg=ldapClientCfg)
mibBuilder.exportSymbols('BLADE-MIB', ldapServer1NameOrIPAddress=ldapServer1NameOrIPAddress, ldapServer1PortNumber=ldapServer1PortNumber, ldapServer2NameOrIPAddress=ldapServer2NameOrIPAddress, ldapServer2PortNumber=ldapServer2PortNumber, ldapServer3NameOrIPAddress=ldapServer3NameOrIPAddress, ldapServer3PortNumber=ldapServer3PortNumber, ldapRootDN=ldapRootDN, ldapUserSearchBaseDN=ldapUserSearchBaseDN, ldapGroupFilter=ldapGroupFilter, ldapBindingMethod=ldapBindingMethod, ldapClientAuthenticationDN=ldapClientAuthenticationDN, ldapClientAuthenticationPassword=ldapClientAuthenticationPassword, ldapUIDsearchAttribute=ldapUIDsearchAttribute, ldapGroupSearchAttribute=ldapGroupSearchAttribute, ldapLoginPermissionAttribute=ldapLoginPermissionAttribute, ldapUseDNSOrPreConfiguredServers=ldapUseDNSOrPreConfiguredServers, ldapDomainSource=ldapDomainSource, ldapSearchDomain=ldapSearchDomain, ldapServiceName=ldapServiceName, ldapRBSModelCfg=ldapRBSModelCfg, ldapTargetName=ldapTargetName, uplinkCheckConfig=uplinkCheckConfig, uplinkCheckEnabled=uplinkCheckEnabled, uplinkCheckDelay=uplinkCheckDelay, logicalUplinkDestination=logicalUplinkDestination, logicalUplinkCheckEnabled=logicalUplinkCheckEnabled, logicalUplinkCheckDelay=logicalUplinkCheckDelay, physicalUplinkCheckDelayInSecs=physicalUplinkCheckDelayInSecs, logicalUplinkCheckDelayInSecs=logicalUplinkCheckDelayInSecs, ntpConfig=ntpConfig, ntpEnable=ntpEnable, ntpIpAddressHostname=ntpIpAddressHostname, ntpUpdateFrequency=ntpUpdateFrequency, ntpLastUpdate=ntpLastUpdate, ntpUpdateClock=ntpUpdateClock, ntpAuthEntry=ntpAuthEntry, ntpAuthEnable=ntpAuthEnable, syslogConfig=syslogConfig, syslogSevFilterLevel=syslogSevFilterLevel, syslogCollectorConfig=syslogCollectorConfig, syslogCollectorTable=syslogCollectorTable, syslogCollectorEntry=syslogCollectorEntry, syslogCollectorIndex=syslogCollectorIndex, syslogCollectorHostnameOrIpAddress=syslogCollectorHostnameOrIpAddress, syslogCollectorPort=syslogCollectorPort, syslogCollectorEnable=syslogCollectorEnable, solConfiguration=solConfiguration, solGlobalConfig=solGlobalConfig, solEnable=solEnable, solVlanId=solVlanId, solAccumulateTimeout=solAccumulateTimeout, solCharSendThreshold=solCharSendThreshold, solRetry=solRetry, solRetryInterval=solRetryInterval, solExitToCliKeySeq=solExitToCliKeySeq, solResetBladeKeySeq=solResetBladeKeySeq, solBladeConfig=solBladeConfig, solBladeTable=solBladeTable, solBladeEntry=solBladeEntry, solBladeIndex=solBladeIndex, solBladeName=solBladeName, solBladeEnable=solBladeEnable, solBladeIpAddr=solBladeIpAddr, solBladeSessionStatus=solBladeSessionStatus, solBladeCapability=solBladeCapability, chassisInternalNetwork=chassisInternalNetwork, cinsSupported=cinsSupported, cinGlobalEnable=cinGlobalEnable, cinTable=cinTable, cinEntry=cinEntry, cinIndex=cinIndex, cinDefExists=cinDefExists, cinDelete=cinDelete, cinEnable=cinEnable, cinId=cinId, cinIpAddress=cinIpAddress, cinIpv6Address=cinIpv6Address, cinStatus=cinStatus, cinStatusTable=cinStatusTable, cinStatusEntry=cinStatusEntry, cinStatusIndex=cinStatusIndex, cinStatusString=cinStatusString, configurationManagement=configurationManagement, saveConfigurationToChassis=saveConfigurationToChassis, restoreConfigurationFromChassis=restoreConfigurationFromChassis, autoReadConfigInNewChassis=autoReadConfigInNewChassis, telcoManagement=telcoManagement, telcoAlarmReq=telcoAlarmReq, telcoAlarmSet=telcoAlarmSet, telcoAlarmAck=telcoAlarmAck, telcoAlarmClear=telcoAlarmClear, telcoHWManagement=telcoHWManagement, tappowerReq=tappowerReq, tappoweronoff=tappoweronoff, ncReq=ncReq, ncReqTable=ncReqTable, ncReqEntry=ncReqEntry, ncReqIndex=ncReqIndex, ncReqBayNumber=ncReqBayNumber, ncReqPoweronoff=ncReqPoweronoff, telcoOEM=telcoOEM, telcoOEMs=telcoOEMs, restartReset=restartReset, restartSPImmediately=restartSPImmediately, restartStandbyMM=restartStandbyMM, switchOverRedundantMM=switchOverRedundantMM, resetSPConfigAndRestart=resetSPConfigAndRestart, resetSPConfigAndRestartSaveLogs=resetSPConfigAndRestartSaveLogs, blades=blades, processorBlade=processorBlade, bladeMediaTrayBladeId=bladeMediaTrayBladeId, bladeKVMBladeId=bladeKVMBladeId, bladeBootSequenceTable=bladeBootSequenceTable, bladeBootSequenceEntry=bladeBootSequenceEntry, bootSequenceIndex=bootSequenceIndex, bootSequenceBladeId=bootSequenceBladeId, bootSequenceBladeExists=bootSequenceBladeExists, bootSequenceBladePowerState=bootSequenceBladePowerState, bootSequenceBladeHealthState=bootSequenceBladeHealthState, bootSequenceBladeName=bootSequenceBladeName, bootSequence1=bootSequence1, bootSequence2=bootSequence2, bootSequence3=bootSequence3, bootSequence4=bootSequence4, bladeRemoteControl=bladeRemoteControl, bladeRemoteControlTable=bladeRemoteControlTable, bladeRemoteControlEntry=bladeRemoteControlEntry)
mibBuilder.exportSymbols('BLADE-MIB', remoteControlIndex=remoteControlIndex, remoteControlBladeId=remoteControlBladeId, remoteControlBladeExists=remoteControlBladeExists, remoteControlBladePowerState=remoteControlBladePowerState, remoteControlBladeHealthState=remoteControlBladeHealthState, remoteControlBladeName=remoteControlBladeName, remotePowerControlEnable=remotePowerControlEnable, remoteMediaTrayControlEnable=remoteMediaTrayControlEnable, remoteKVMControlEnable=remoteKVMControlEnable, remoteWakeOnLanControlEnable=remoteWakeOnLanControlEnable, remoteMediaTraySwitchEnable=remoteMediaTraySwitchEnable, bladePolicy=bladePolicy, bladePolicyPowerControlEnable=bladePolicyPowerControlEnable, bladePolicyMediaTrayControlEnable=bladePolicyMediaTrayControlEnable, bladePolicyKVMControlEnable=bladePolicyKVMControlEnable, bladePolicyWakeOnLanControlEnable=bladePolicyWakeOnLanControlEnable, bladePolicyMediaTraySwitchEnable=bladePolicyMediaTraySwitchEnable, bladePolicyMultipleRemoteVideoEnable=bladePolicyMultipleRemoteVideoEnable, bladeMonitors=bladeMonitors, bladeSystemStatusTable=bladeSystemStatusTable, bladeSystemStatusEntry=bladeSystemStatusEntry, bladeStatusIndex=bladeStatusIndex, bladeId=bladeId, bladeExists=bladeExists, bladePowerState=bladePowerState, bladeHealthState=bladeHealthState, bladeName=bladeName, bladeRemotePowerEnable=bladeRemotePowerEnable, bladeRemoteMediaTrayEnable=bladeRemoteMediaTrayEnable, bladeRemoteKVMEnable=bladeRemoteKVMEnable, bladeConnectionType=bladeConnectionType, bladeOwnsKVM=bladeOwnsKVM, bladeOwnsMediaTray=bladeOwnsMediaTray, bladeRemoteWakeOnLanEnable=bladeRemoteWakeOnLanEnable, bladeServerExpansion=bladeServerExpansion, bladeWidth=bladeWidth, bladeSupportCapacityOnDemand=bladeSupportCapacityOnDemand, bladeServerExpansion2=bladeServerExpansion2, bladecKVMStatus=bladecKVMStatus, bladeConnectionType2=bladeConnectionType2, bladeConnectionType3=bladeConnectionType3, bladeConnectionType4=bladeConnectionType4, bladeConnectionType5=bladeConnectionType5, bladeHighSpeedConnectionType=bladeHighSpeedConnectionType, bladeHealthSummaryTable=bladeHealthSummaryTable, bladeHealthSummaryEntry=bladeHealthSummaryEntry, bladeHealthSummaryIndex=bladeHealthSummaryIndex, bladeHealthSummaryBladeId=bladeHealthSummaryBladeId, bladeHealthSummarySeverity=bladeHealthSummarySeverity, bladeHealthSummaryDescription=bladeHealthSummaryDescription, bladeTemperaturesTable=bladeTemperaturesTable, bladeTemperaturesEntry=bladeTemperaturesEntry, temperatureIndex=temperatureIndex, temperatureBladeId=temperatureBladeId, temperatureBladeExists=temperatureBladeExists, temperatureBladePowerState=temperatureBladePowerState, temperatureBladeName=temperatureBladeName, temperatureCPU1=temperatureCPU1, temperatureCPU2=temperatureCPU2, temperatureCPU3=temperatureCPU3, temperatureCPU4=temperatureCPU4, temperatureDASD1=temperatureDASD1, bladeSensorTempCapability=bladeSensorTempCapability, bladeSensor1Temp=bladeSensor1Temp, bladeSensor2Temp=bladeSensor2Temp, bladeSensor3Temp=bladeSensor3Temp, bladeSensor4Temp=bladeSensor4Temp, bladeSensor5Temp=bladeSensor5Temp, bladeSensor6Temp=bladeSensor6Temp, bladeSensor7Temp=bladeSensor7Temp, bladeSensor8Temp=bladeSensor8Temp, bladeSensor9Temp=bladeSensor9Temp, bladeTemperatureThresholdsTable=bladeTemperatureThresholdsTable, bladeTemperatureThresholdsEntry=bladeTemperatureThresholdsEntry, temperatureThresholdIndex=temperatureThresholdIndex, temperatureThresholdBladeId=temperatureThresholdBladeId, temperatureThresholdBladeExists=temperatureThresholdBladeExists, temperatureThresholdBladePowerState=temperatureThresholdBladePowerState, temperatureThresholdBladeName=temperatureThresholdBladeName, temperatureCPU1HardShutdown=temperatureCPU1HardShutdown, temperatureCPU1Warning=temperatureCPU1Warning, temperatureCPU1WarningReset=temperatureCPU1WarningReset, temperatureCPU2HardShutdown=temperatureCPU2HardShutdown, temperatureCPU2Warning=temperatureCPU2Warning, temperatureCPU2WarningReset=temperatureCPU2WarningReset, temperatureCPU3HardShutdown=temperatureCPU3HardShutdown, temperatureCPU3Warning=temperatureCPU3Warning, temperatureCPU3WarningReset=temperatureCPU3WarningReset, temperatureCPU4HardShutdown=temperatureCPU4HardShutdown, temperatureCPU4Warning=temperatureCPU4Warning, temperatureCPU4WarningReset=temperatureCPU4WarningReset, temperatureDASD1HardShutdown=temperatureDASD1HardShutdown, temperatureDASD1Warning=temperatureDASD1Warning, temperatureDASD1WarningReset=temperatureDASD1WarningReset, bladeTempThresholdSensorCapability=bladeTempThresholdSensorCapability, temperatureSensor1HardShutdown=temperatureSensor1HardShutdown, temperatureSensor1Warning=temperatureSensor1Warning, temperatureSensor1WarningReset=temperatureSensor1WarningReset, temperatureSensor2HardShutdown=temperatureSensor2HardShutdown, temperatureSensor2Warning=temperatureSensor2Warning, temperatureSensor2WarningReset=temperatureSensor2WarningReset, temperatureSensor3HardShutdown=temperatureSensor3HardShutdown, temperatureSensor3Warning=temperatureSensor3Warning, temperatureSensor3WarningReset=temperatureSensor3WarningReset, temperatureSensor4HardShutdown=temperatureSensor4HardShutdown, temperatureSensor4Warning=temperatureSensor4Warning, temperatureSensor4WarningReset=temperatureSensor4WarningReset, temperatureSensor5HardShutdown=temperatureSensor5HardShutdown, temperatureSensor5Warning=temperatureSensor5Warning, temperatureSensor5WarningReset=temperatureSensor5WarningReset, temperatureSensor6HardShutdown=temperatureSensor6HardShutdown, temperatureSensor6Warning=temperatureSensor6Warning, temperatureSensor6WarningReset=temperatureSensor6WarningReset, temperatureSensor7HardShutdown=temperatureSensor7HardShutdown, temperatureSensor7Warning=temperatureSensor7Warning, temperatureSensor7WarningReset=temperatureSensor7WarningReset, temperatureSensor8HardShutdown=temperatureSensor8HardShutdown, temperatureSensor8Warning=temperatureSensor8Warning, temperatureSensor8WarningReset=temperatureSensor8WarningReset, temperatureSensor9HardShutdown=temperatureSensor9HardShutdown, temperatureSensor9Warning=temperatureSensor9Warning, temperatureSensor9WarningReset=temperatureSensor9WarningReset, bladeVoltagesTable=bladeVoltagesTable, bladeVoltagesEntry=bladeVoltagesEntry, voltageIndex=voltageIndex, voltageBladeId=voltageBladeId, voltageBladeExists=voltageBladeExists)
mibBuilder.exportSymbols('BLADE-MIB', voltageBladePowerState=voltageBladePowerState, voltageBladeName=voltageBladeName, bladePlus5Volt=bladePlus5Volt, bladePlus3pt3Volt=bladePlus3pt3Volt, bladePlus12Volt=bladePlus12Volt, bladePlus2pt5Volt=bladePlus2pt5Volt, bladePlus1pt5Volt=bladePlus1pt5Volt, bladePlus1pt25Volt=bladePlus1pt25Volt, bladeVRM1Volt=bladeVRM1Volt, bladeSensorVoltCapability=bladeSensorVoltCapability, bladeSensor1Volt=bladeSensor1Volt, bladeSensor2Volt=bladeSensor2Volt, bladeSensor3Volt=bladeSensor3Volt, bladeSensor4Volt=bladeSensor4Volt, bladeSensor5Volt=bladeSensor5Volt, bladeSensor6Volt=bladeSensor6Volt, bladeSensor7Volt=bladeSensor7Volt, bladeSensor8Volt=bladeSensor8Volt, bladeSensor9Volt=bladeSensor9Volt, bladeSensor10Volt=bladeSensor10Volt, bladeSensor11Volt=bladeSensor11Volt, bladeSensor12Volt=bladeSensor12Volt, bladeSensor13Volt=bladeSensor13Volt, bladeSensor14Volt=bladeSensor14Volt, bladeSensor15Volt=bladeSensor15Volt, bladeSensor16Volt=bladeSensor16Volt, bladeSensor17Volt=bladeSensor17Volt, bladeSensor18Volt=bladeSensor18Volt, bladeSensor19Volt=bladeSensor19Volt, bladeSensor20Volt=bladeSensor20Volt, bladeSensor21Volt=bladeSensor21Volt, bladeSensor22Volt=bladeSensor22Volt, bladeSensor23Volt=bladeSensor23Volt, bladeSensor24Volt=bladeSensor24Volt, bladeSensor25Volt=bladeSensor25Volt, bladeSensor26Volt=bladeSensor26Volt, bladeSensor27Volt=bladeSensor27Volt, bladeSensor28Volt=bladeSensor28Volt, bladeSensor29Volt=bladeSensor29Volt, bladeSensor30Volt=bladeSensor30Volt, bladeVoltageThresholdsTable=bladeVoltageThresholdsTable, bladeVoltageThresholdsEntry=bladeVoltageThresholdsEntry, voltageThresholdIndex=voltageThresholdIndex, voltageThresholdBladeId=voltageThresholdBladeId, voltageThresholdBladeExists=voltageThresholdBladeExists, voltageThresholdBladePowerState=voltageThresholdBladePowerState, voltageThresholdBladeName=voltageThresholdBladeName, bladePlus5VoltHighWarning=bladePlus5VoltHighWarning, bladePlus5VoltLowWarning=bladePlus5VoltLowWarning, bladePlus3pt3VoltHighWarning=bladePlus3pt3VoltHighWarning, bladePlus3pt3VoltLowWarning=bladePlus3pt3VoltLowWarning, bladePlus12VoltHighWarning=bladePlus12VoltHighWarning, bladePlus12VoltLowWarning=bladePlus12VoltLowWarning, bladePlus2pt5VoltHighWarning=bladePlus2pt5VoltHighWarning, bladePlus2pt5VoltLowWarning=bladePlus2pt5VoltLowWarning, bladePlus1pt5VoltHighWarning=bladePlus1pt5VoltHighWarning, bladePlus1pt5VoltLowWarning=bladePlus1pt5VoltLowWarning, bladePlus1pt25VoltHighWarning=bladePlus1pt25VoltHighWarning, bladePlus1pt25VoltLowWarning=bladePlus1pt25VoltLowWarning, bladeVoltThresholdSensorCapability=bladeVoltThresholdSensorCapability, bladeSensor1VoltHighWarning=bladeSensor1VoltHighWarning, bladeSensor1VoltLowWarning=bladeSensor1VoltLowWarning, bladeSensor2VoltHighWarning=bladeSensor2VoltHighWarning, bladeSensor2VoltLowWarning=bladeSensor2VoltLowWarning, bladeSensor3VoltHighWarning=bladeSensor3VoltHighWarning, bladeSensor3VoltLowWarning=bladeSensor3VoltLowWarning, bladeSensor4VoltHighWarning=bladeSensor4VoltHighWarning, bladeSensor4VoltLowWarning=bladeSensor4VoltLowWarning, bladeSensor5VoltHighWarning=bladeSensor5VoltHighWarning, bladeSensor5VoltLowWarning=bladeSensor5VoltLowWarning, bladeSensor6VoltHighWarning=bladeSensor6VoltHighWarning, bladeSensor6VoltLowWarning=bladeSensor6VoltLowWarning, bladeSensor7VoltHighWarning=bladeSensor7VoltHighWarning, bladeSensor7VoltLowWarning=bladeSensor7VoltLowWarning, bladeSensor8VoltHighWarning=bladeSensor8VoltHighWarning, bladeSensor8VoltLowWarning=bladeSensor8VoltLowWarning, bladeSensor9VoltHighWarning=bladeSensor9VoltHighWarning, bladeSensor9VoltLowWarning=bladeSensor9VoltLowWarning, bladeSensor10VoltHighWarning=bladeSensor10VoltHighWarning, bladeSensor10VoltLowWarning=bladeSensor10VoltLowWarning, bladeSensor11VoltHighWarning=bladeSensor11VoltHighWarning, bladeSensor11VoltLowWarning=bladeSensor11VoltLowWarning, bladeSensor12VoltHighWarning=bladeSensor12VoltHighWarning, bladeSensor12VoltLowWarning=bladeSensor12VoltLowWarning, bladeSensor13VoltHighWarning=bladeSensor13VoltHighWarning, bladeSensor13VoltLowWarning=bladeSensor13VoltLowWarning, bladeSensor14VoltHighWarning=bladeSensor14VoltHighWarning, bladeSensor14VoltLowWarning=bladeSensor14VoltLowWarning, bladeSensor15VoltHighWarning=bladeSensor15VoltHighWarning, bladeSensor15VoltLowWarning=bladeSensor15VoltLowWarning, bladeSensor16VoltHighWarning=bladeSensor16VoltHighWarning, bladeSensor16VoltLowWarning=bladeSensor16VoltLowWarning, bladeSensor17VoltHighWarning=bladeSensor17VoltHighWarning, bladeSensor17VoltLowWarning=bladeSensor17VoltLowWarning, bladeSensor18VoltHighWarning=bladeSensor18VoltHighWarning, bladeSensor18VoltLowWarning=bladeSensor18VoltLowWarning, bladeSensor19VoltHighWarning=bladeSensor19VoltHighWarning, bladeSensor19VoltLowWarning=bladeSensor19VoltLowWarning, bladeSensor20VoltHighWarning=bladeSensor20VoltHighWarning, bladeSensor20VoltLowWarning=bladeSensor20VoltLowWarning, bladeSensor21VoltHighWarning=bladeSensor21VoltHighWarning, bladeSensor21VoltLowWarning=bladeSensor21VoltLowWarning, bladeSensor22VoltHighWarning=bladeSensor22VoltHighWarning, bladeSensor22VoltLowWarning=bladeSensor22VoltLowWarning, bladeSensor23VoltHighWarning=bladeSensor23VoltHighWarning, bladeSensor23VoltLowWarning=bladeSensor23VoltLowWarning, bladeSensor24VoltHighWarning=bladeSensor24VoltHighWarning, bladeSensor24VoltLowWarning=bladeSensor24VoltLowWarning, bladeSensor25VoltHighWarning=bladeSensor25VoltHighWarning, bladeSensor25VoltLowWarning=bladeSensor25VoltLowWarning, bladeSensor26VoltHighWarning=bladeSensor26VoltHighWarning, bladeSensor26VoltLowWarning=bladeSensor26VoltLowWarning, bladeSensor27VoltHighWarning=bladeSensor27VoltHighWarning, bladeSensor27VoltLowWarning=bladeSensor27VoltLowWarning, bladeSensor28VoltHighWarning=bladeSensor28VoltHighWarning, bladeSensor28VoltLowWarning=bladeSensor28VoltLowWarning, bladeSensor29VoltHighWarning=bladeSensor29VoltHighWarning, bladeSensor29VoltLowWarning=bladeSensor29VoltLowWarning, bladeSensor30VoltHighWarning=bladeSensor30VoltHighWarning, bladeSensor30VoltLowWarning=bladeSensor30VoltLowWarning, bladePowerRestart=bladePowerRestart, bladePowerRestartTable=bladePowerRestartTable, bladePowerRestartEntry=bladePowerRestartEntry, powerRestartIndex=powerRestartIndex, powerRestartBladeId=powerRestartBladeId, powerRestartBladeExists=powerRestartBladeExists, powerRestartBladePowerState=powerRestartBladePowerState)
mibBuilder.exportSymbols('BLADE-MIB', powerRestartBladeHealthState=powerRestartBladeHealthState, powerRestartBladeName=powerRestartBladeName, powerOnOffBlade=powerOnOffBlade, restartBlade=restartBlade, restartBladeSMP=restartBladeSMP, restartBladeNMI=restartBladeNMI, restartBladeClearNVRAM=restartBladeClearNVRAM, restartBladeInvokeDiags=restartBladeInvokeDiags, restartBladeInvokeDiagsFromDefaultBootList=restartBladeInvokeDiagsFromDefaultBootList, bladeConfiguration=bladeConfiguration, bladeConfigurationTable=bladeConfigurationTable, bladeConfigurationEntry=bladeConfigurationEntry, configurationIndex=configurationIndex, configurationBladeId=configurationBladeId, configurationBladeExists=configurationBladeExists, configurationBladePowerState=configurationBladePowerState, configurationBladeName=configurationBladeName, configurationBladecKVM=configurationBladecKVM, configurationBladeActiveBootMode=configurationBladeActiveBootMode, configurationBladePendingBootMode=configurationBladePendingBootMode, bladePowerManagementPolicy=bladePowerManagementPolicy, powerdomain1Oversubscription=powerdomain1Oversubscription, powerdomain2Oversubscription=powerdomain2Oversubscription, acousticMode=acousticMode, nebsMode=nebsMode, bladecKVMEnableDisable=bladecKVMEnableDisable, bladeIPAddrRangeStart=bladeIPAddrRangeStart, bladeCapacityOnDemand=bladeCapacityOnDemand, bladeCapacityOnDemandTable=bladeCapacityOnDemandTable, bladeCapacityOnDemandEntry=bladeCapacityOnDemandEntry, bladeCapacityOnDemandIndex=bladeCapacityOnDemandIndex, bladeCapacityOnDemandBladeName=bladeCapacityOnDemandBladeName, bladeCapacityOnDemandState=bladeCapacityOnDemandState, bladeBootCountPowerOnTime=bladeBootCountPowerOnTime, bladeBootCountPowerOnTimeTable=bladeBootCountPowerOnTimeTable, bladeBootCountPowerOnTimeEntry=bladeBootCountPowerOnTimeEntry, bootCountPowerOnTimeBladeIndex=bootCountPowerOnTimeBladeIndex, bootCountPowerOnTimeBladeId=bootCountPowerOnTimeBladeId, bootCountPowerOnTimeBoots=bootCountPowerOnTimeBoots, bootCountPowerOnTimeSecs=bootCountPowerOnTimeSecs, bladeVlanId=bladeVlanId, bladeNetworkConfiguration=bladeNetworkConfiguration, bladeNetworkInterfaceTable=bladeNetworkInterfaceTable, bladeNetworkInterfaceEntry=bladeNetworkInterfaceEntry, bladeNetworkInterfaceIndex=bladeNetworkInterfaceIndex, bladeNetworkInterfaceBayNumber=bladeNetworkInterfaceBayNumber, bladeNetworkInterfaceNumber=bladeNetworkInterfaceNumber, bladeNetworkInterfaceType=bladeNetworkInterfaceType, bladeNetworkInterfaceLabel=bladeNetworkInterfaceLabel, bladeNetworkInterfaceIPAddr=bladeNetworkInterfaceIPAddr, bladeNetworkInterfaceSubnetMask=bladeNetworkInterfaceSubnetMask, bladeNetworkInterfaceGatewayAddr=bladeNetworkInterfaceGatewayAddr, bladeNetworkInterfaceVlanId=bladeNetworkInterfaceVlanId, bladeNetworkInterfaceVlanEnable=bladeNetworkInterfaceVlanEnable, bladeNetworkInterfaceEnable=bladeNetworkInterfaceEnable, bladeNetworkInterfaceDHCPEnable=bladeNetworkInterfaceDHCPEnable, bladeNetworkInterfaceMACAddr=bladeNetworkInterfaceMACAddr, bladeBayDataTable=bladeBayDataTable, bladeBayDataEntry=bladeBayDataEntry, bayDataIndex=bayDataIndex, bayDataBladeId=bayDataBladeId, bayDataBladeExists=bayDataBladeExists, bayDataBladePowerState=bayDataBladePowerState, bayDataBladeName=bayDataBladeName, bayData=bayData, bayDataBladeStatus=bayDataBladeStatus, switchModule=switchModule, switchModuleControl=switchModuleControl, smControlTable=smControlTable, smControlEntry=smControlEntry, smControlIndex=smControlIndex, switchModuleControlId=switchModuleControlId, smPostResultsAvailable=smPostResultsAvailable, smPostResultsValue=smPostResultsValue, switchModuleMemDiagEnableDisable=switchModuleMemDiagEnableDisable, smCfgCtrlEnableDisable=smCfgCtrlEnableDisable, smExtEthPortsEnableDisable=smExtEthPortsEnableDisable, switchPingRequest=switchPingRequest, smCfgCtrlOnResetEnableDisable=smCfgCtrlOnResetEnableDisable, smHealthState=smHealthState, smPMState=smPMState, smPMCtrlEnableDisable=smPMCtrlEnableDisable, smPowerRestartTable=smPowerRestartTable, smPowerRestartEntry=smPowerRestartEntry, smPowerRestartIndex=smPowerRestartIndex, smPowerRestartId=smPowerRestartId, smSwitchExists=smSwitchExists, smSwitchType=smSwitchType, smMACAddress=smMACAddress, smIPAddress=smIPAddress, switchModulePowerOnOff=switchModulePowerOnOff, smReset=smReset, smResetToDefault=smResetToDefault, smRestartAndRunStdDiag=smRestartAndRunStdDiag, smRestartAndRunExtDiag=smRestartAndRunExtDiag, smRestartAndRunFullDiag=smRestartAndRunFullDiag, smSwitchSubType=smSwitchSubType, smSwitchWidth=smSwitchWidth, smManufacturingID=smManufacturingID, smStackingModeState=smStackingModeState, smStackingModeInfo=smStackingModeInfo, switchModuleConfig=switchModuleConfig, switchMgmtNetworkCfg=switchMgmtNetworkCfg, switchCurrentNwCfg=switchCurrentNwCfg, smCurrentIPInfoTable=smCurrentIPInfoTable, smCurrentIPInfoEntry=smCurrentIPInfoEntry, smCurrentIPInfoIndex=smCurrentIPInfoIndex, smCurrentIPInfoId=smCurrentIPInfoId, smCurrentIPInfoExists=smCurrentIPInfoExists, smCurrentIPInfoPowerState=smCurrentIPInfoPowerState, smCurrentIPAddr=smCurrentIPAddr, smCurrentSubnetMask=smCurrentSubnetMask, smCurrentGateway=smCurrentGateway, smCurrentIPConfigMethod=smCurrentIPConfigMethod, switchNewNwCfg=switchNewNwCfg, smNewIPInfoTable=smNewIPInfoTable, smNewIPInfoEntry=smNewIPInfoEntry, smNewIPInfoIndex=smNewIPInfoIndex, smNewIPInfoId=smNewIPInfoId, smNewIPInfoExists=smNewIPInfoExists, smNewIPInfoPowerState=smNewIPInfoPowerState, smNewIPAddr=smNewIPAddr, smNewSubnetMask=smNewSubnetMask, smNewGateway=smNewGateway, smNewIPConfigMethod=smNewIPConfigMethod, smNewIPConfigEnableDisable=smNewIPConfigEnableDisable, switchNwProtCfg=switchNwProtCfg)
mibBuilder.exportSymbols('BLADE-MIB', switchNwProtCfgModOne=switchNwProtCfgModOne, smNwProtInfoModOneTable=smNwProtInfoModOneTable, smNwProtInfoModOneEntry=smNwProtInfoModOneEntry, smNwProtInfoModOneIndex=smNwProtInfoModOneIndex, smNwProtInfoModOneId=smNwProtInfoModOneId, smNwProtInfoModOneExists=smNwProtInfoModOneExists, smNwProtInfoModOnePowerState=smNwProtInfoModOnePowerState, smNwProtInfoModOneProtName=smNwProtInfoModOneProtName, smNwProtInfoModOneProtID=smNwProtInfoModOneProtID, smNwProtInfoModOneExtPort=smNwProtInfoModOneExtPort, smNwProtInfoModOneIntPort=smNwProtInfoModOneIntPort, smNwProtInfoModOneEnable=smNwProtInfoModOneEnable, smNwProtInfoModOneActivate=smNwProtInfoModOneActivate, smNwProtInfoModOneReset=smNwProtInfoModOneReset, switchNwProtCfgModTwo=switchNwProtCfgModTwo, smNwProtInfoModTwoTable=smNwProtInfoModTwoTable, smNwProtInfoModTwoEntry=smNwProtInfoModTwoEntry, smNwProtInfoModTwoIndex=smNwProtInfoModTwoIndex, smNwProtInfoModTwoId=smNwProtInfoModTwoId, smNwProtInfoModTwoExists=smNwProtInfoModTwoExists, smNwProtInfoModTwoPowerState=smNwProtInfoModTwoPowerState, smNwProtInfoModTwoProtName=smNwProtInfoModTwoProtName, smNwProtInfoModTwoProtID=smNwProtInfoModTwoProtID, smNwProtInfoModTwoExtPort=smNwProtInfoModTwoExtPort, smNwProtInfoModTwoIntPort=smNwProtInfoModTwoIntPort, smNwProtInfoModTwoEnable=smNwProtInfoModTwoEnable, smNwProtInfoModTwoActivate=smNwProtInfoModTwoActivate, smNwProtInfoModTwoReset=smNwProtInfoModTwoReset, switchNwProtCfgModThree=switchNwProtCfgModThree, smNwProtInfoModThreeTable=smNwProtInfoModThreeTable, smNwProtInfoModThreeEntry=smNwProtInfoModThreeEntry, smNwProtInfoModThreeIndex=smNwProtInfoModThreeIndex, smNwProtInfoModThreeId=smNwProtInfoModThreeId, smNwProtInfoModThreeExists=smNwProtInfoModThreeExists, smNwProtInfoModThreePowerState=smNwProtInfoModThreePowerState, smNwProtInfoModThreeProtName=smNwProtInfoModThreeProtName, smNwProtInfoModThreeProtID=smNwProtInfoModThreeProtID, smNwProtInfoModThreeExtPort=smNwProtInfoModThreeExtPort, smNwProtInfoModThreeIntPort=smNwProtInfoModThreeIntPort, smNwProtInfoModThreeEnable=smNwProtInfoModThreeEnable, smNwProtInfoModThreeActivate=smNwProtInfoModThreeActivate, smNwProtInfoModThreeReset=smNwProtInfoModThreeReset, switchNwProtCfgModFour=switchNwProtCfgModFour, smNwProtInfoModFourTable=smNwProtInfoModFourTable, smNwProtInfoModFourEntry=smNwProtInfoModFourEntry, smNwProtInfoModFourIndex=smNwProtInfoModFourIndex, smNwProtInfoModFourId=smNwProtInfoModFourId, smNwProtInfoModFourExists=smNwProtInfoModFourExists, smNwProtInfoModFourPowerState=smNwProtInfoModFourPowerState, smNwProtInfoModFourProtName=smNwProtInfoModFourProtName, smNwProtInfoModFourProtID=smNwProtInfoModFourProtID, smNwProtInfoModFourExtPort=smNwProtInfoModFourExtPort, smNwProtInfoModFourIntPort=smNwProtInfoModFourIntPort, smNwProtInfoModFourEnable=smNwProtInfoModFourEnable, smNwProtInfoModFourActivate=smNwProtInfoModFourActivate, smNwProtInfoModFourReset=smNwProtInfoModFourReset, switchNwProtCfgModFive=switchNwProtCfgModFive, smNwProtInfoModFiveTable=smNwProtInfoModFiveTable, smNwProtInfoModFiveEntry=smNwProtInfoModFiveEntry, smNwProtInfoModFiveIndex=smNwProtInfoModFiveIndex, smNwProtInfoModFiveId=smNwProtInfoModFiveId, smNwProtInfoModFiveExists=smNwProtInfoModFiveExists, smNwProtInfoModFivePowerState=smNwProtInfoModFivePowerState, smNwProtInfoModFiveProtName=smNwProtInfoModFiveProtName, smNwProtInfoModFiveProtID=smNwProtInfoModFiveProtID, smNwProtInfoModFiveExtPort=smNwProtInfoModFiveExtPort, smNwProtInfoModFiveIntPort=smNwProtInfoModFiveIntPort, smNwProtInfoModFiveEnable=smNwProtInfoModFiveEnable, smNwProtInfoModFiveActivate=smNwProtInfoModFiveActivate, smNwProtInfoModFiveReset=smNwProtInfoModFiveReset, switchNwProtCfgModSix=switchNwProtCfgModSix, smNwProtInfoModSixTable=smNwProtInfoModSixTable, smNwProtInfoModSixEntry=smNwProtInfoModSixEntry, smNwProtInfoModSixIndex=smNwProtInfoModSixIndex, smNwProtInfoModSixId=smNwProtInfoModSixId, smNwProtInfoModSixExists=smNwProtInfoModSixExists, smNwProtInfoModSixPowerState=smNwProtInfoModSixPowerState, smNwProtInfoModSixProtName=smNwProtInfoModSixProtName, smNwProtInfoModSixProtID=smNwProtInfoModSixProtID, smNwProtInfoModSixExtPort=smNwProtInfoModSixExtPort, smNwProtInfoModSixIntPort=smNwProtInfoModSixIntPort, smNwProtInfoModSixEnable=smNwProtInfoModSixEnable, smNwProtInfoModSixActivate=smNwProtInfoModSixActivate, smNwProtInfoModSixReset=smNwProtInfoModSixReset, switchNwProtCfgModSeven=switchNwProtCfgModSeven, smNwProtInfoModSevenTable=smNwProtInfoModSevenTable, smNwProtInfoModSevenEntry=smNwProtInfoModSevenEntry, smNwProtInfoModSevenIndex=smNwProtInfoModSevenIndex, smNwProtInfoModSevenId=smNwProtInfoModSevenId, smNwProtInfoModSevenExists=smNwProtInfoModSevenExists, smNwProtInfoModSevenPowerState=smNwProtInfoModSevenPowerState, smNwProtInfoModSevenProtName=smNwProtInfoModSevenProtName, smNwProtInfoModSevenProtID=smNwProtInfoModSevenProtID, smNwProtInfoModSevenExtPort=smNwProtInfoModSevenExtPort, smNwProtInfoModSevenIntPort=smNwProtInfoModSevenIntPort, smNwProtInfoModSevenEnable=smNwProtInfoModSevenEnable, smNwProtInfoModSevenActivate=smNwProtInfoModSevenActivate, smNwProtInfoModSevenReset=smNwProtInfoModSevenReset, switchNwProtCfgModEight=switchNwProtCfgModEight, smNwProtInfoModEightTable=smNwProtInfoModEightTable, smNwProtInfoModEightEntry=smNwProtInfoModEightEntry, smNwProtInfoModEightIndex=smNwProtInfoModEightIndex, smNwProtInfoModEightId=smNwProtInfoModEightId, smNwProtInfoModEightExists=smNwProtInfoModEightExists, smNwProtInfoModEightPowerState=smNwProtInfoModEightPowerState, smNwProtInfoModEightProtName=smNwProtInfoModEightProtName, smNwProtInfoModEightProtID=smNwProtInfoModEightProtID, smNwProtInfoModEightExtPort=smNwProtInfoModEightExtPort, smNwProtInfoModEightIntPort=smNwProtInfoModEightIntPort, smNwProtInfoModEightEnable=smNwProtInfoModEightEnable, smNwProtInfoModEightActivate=smNwProtInfoModEightActivate, smNwProtInfoModEightReset=smNwProtInfoModEightReset, switchNwProtCfgModNine=switchNwProtCfgModNine, smNwProtInfoModNineTable=smNwProtInfoModNineTable, smNwProtInfoModNineEntry=smNwProtInfoModNineEntry, smNwProtInfoModNineIndex=smNwProtInfoModNineIndex, smNwProtInfoModNineId=smNwProtInfoModNineId, smNwProtInfoModNineExists=smNwProtInfoModNineExists, smNwProtInfoModNinePowerState=smNwProtInfoModNinePowerState, smNwProtInfoModNineProtName=smNwProtInfoModNineProtName, smNwProtInfoModNineProtID=smNwProtInfoModNineProtID, smNwProtInfoModNineExtPort=smNwProtInfoModNineExtPort, smNwProtInfoModNineIntPort=smNwProtInfoModNineIntPort, smNwProtInfoModNineEnable=smNwProtInfoModNineEnable, smNwProtInfoModNineActivate=smNwProtInfoModNineActivate, smNwProtInfoModNineReset=smNwProtInfoModNineReset, switchNwProtCfgModTen=switchNwProtCfgModTen)
mibBuilder.exportSymbols('BLADE-MIB', smNwProtInfoModTenTable=smNwProtInfoModTenTable, smNwProtInfoModTenEntry=smNwProtInfoModTenEntry, smNwProtInfoModTenIndex=smNwProtInfoModTenIndex, smNwProtInfoModTenId=smNwProtInfoModTenId, smNwProtInfoModTenExists=smNwProtInfoModTenExists, smNwProtInfoModTenPowerState=smNwProtInfoModTenPowerState, smNwProtInfoModTenProtName=smNwProtInfoModTenProtName, smNwProtInfoModTenProtID=smNwProtInfoModTenProtID, smNwProtInfoModTenExtPort=smNwProtInfoModTenExtPort, smNwProtInfoModTenIntPort=smNwProtInfoModTenIntPort, smNwProtInfoModTenEnable=smNwProtInfoModTenEnable, smNwProtInfoModTenActivate=smNwProtInfoModTenActivate, smNwProtInfoModTenReset=smNwProtInfoModTenReset, switchPortCfg=switchPortCfg, switchModOnePortCfg=switchModOnePortCfg, smOnePortCfgTable=smOnePortCfgTable, smOnePortCfgEntry=smOnePortCfgEntry, smOnePortCfgIndex=smOnePortCfgIndex, smOnePortCfgLabel=smOnePortCfgLabel, smOnePortCfgType=smOnePortCfgType, smOnePortCfgLinkSetting=smOnePortCfgLinkSetting, smOnePortCfgLinkState=smOnePortCfgLinkState, smOnePortCfgSpeedSetting=smOnePortCfgSpeedSetting, smOnePortCfgSpeedStatus=smOnePortCfgSpeedStatus, smOnePortCfgAvailSpeeds=smOnePortCfgAvailSpeeds, switchModTwoPortCfg=switchModTwoPortCfg, smTwoPortCfgTable=smTwoPortCfgTable, smTwoPortCfgEntry=smTwoPortCfgEntry, smTwoPortCfgIndex=smTwoPortCfgIndex, smTwoPortCfgLabel=smTwoPortCfgLabel, smTwoPortCfgType=smTwoPortCfgType, smTwoPortCfgLinkSetting=smTwoPortCfgLinkSetting, smTwoPortCfgLinkState=smTwoPortCfgLinkState, smTwoPortCfgSpeedSetting=smTwoPortCfgSpeedSetting, smTwoPortCfgSpeedStatus=smTwoPortCfgSpeedStatus, smTwoPortCfgAvailSpeeds=smTwoPortCfgAvailSpeeds, switchModThreePortCfg=switchModThreePortCfg, smThreePortCfgTable=smThreePortCfgTable, smThreePortCfgEntry=smThreePortCfgEntry, smThreePortCfgIndex=smThreePortCfgIndex, smThreePortCfgLabel=smThreePortCfgLabel, smThreePortCfgType=smThreePortCfgType, smThreePortCfgLinkSetting=smThreePortCfgLinkSetting, smThreePortCfgLinkState=smThreePortCfgLinkState, smThreePortCfgSpeedSetting=smThreePortCfgSpeedSetting, smThreePortCfgSpeedStatus=smThreePortCfgSpeedStatus, smThreePortCfgAvailSpeeds=smThreePortCfgAvailSpeeds, switchModFourPortCfg=switchModFourPortCfg, smFourPortCfgTable=smFourPortCfgTable, smFourPortCfgEntry=smFourPortCfgEntry, smFourPortCfgIndex=smFourPortCfgIndex, smFourPortCfgLabel=smFourPortCfgLabel, smFourPortCfgType=smFourPortCfgType, smFourPortCfgLinkSetting=smFourPortCfgLinkSetting, smFourPortCfgLinkState=smFourPortCfgLinkState, smFourPortCfgSpeedSetting=smFourPortCfgSpeedSetting, smFourPortCfgSpeedStatus=smFourPortCfgSpeedStatus, smFourPortCfgAvailSpeeds=smFourPortCfgAvailSpeeds, switchModFivePortCfg=switchModFivePortCfg, smFivePortCfgTable=smFivePortCfgTable, smFivePortCfgEntry=smFivePortCfgEntry, smFivePortCfgIndex=smFivePortCfgIndex, smFivePortCfgLabel=smFivePortCfgLabel, smFivePortCfgType=smFivePortCfgType, smFivePortCfgLinkSetting=smFivePortCfgLinkSetting, smFivePortCfgLinkState=smFivePortCfgLinkState, smFivePortCfgSpeedSetting=smFivePortCfgSpeedSetting, smFivePortCfgSpeedStatus=smFivePortCfgSpeedStatus, smFivePortCfgAvailSpeeds=smFivePortCfgAvailSpeeds, switchModSixPortCfg=switchModSixPortCfg, smSixPortCfgTable=smSixPortCfgTable, smSixPortCfgEntry=smSixPortCfgEntry, smSixPortCfgIndex=smSixPortCfgIndex, smSixPortCfgLabel=smSixPortCfgLabel, smSixPortCfgType=smSixPortCfgType, smSixPortCfgLinkSetting=smSixPortCfgLinkSetting, smSixPortCfgLinkState=smSixPortCfgLinkState, smSixPortCfgSpeedSetting=smSixPortCfgSpeedSetting, smSixPortCfgSpeedStatus=smSixPortCfgSpeedStatus, smSixPortCfgAvailSpeeds=smSixPortCfgAvailSpeeds, switchModSevenPortCfg=switchModSevenPortCfg, smSevenPortCfgTable=smSevenPortCfgTable, smSevenPortCfgEntry=smSevenPortCfgEntry, smSevenPortCfgIndex=smSevenPortCfgIndex, smSevenPortCfgLabel=smSevenPortCfgLabel, smSevenPortCfgType=smSevenPortCfgType, smSevenPortCfgLinkSetting=smSevenPortCfgLinkSetting, smSevenPortCfgLinkState=smSevenPortCfgLinkState, smSevenPortCfgSpeedSetting=smSevenPortCfgSpeedSetting, smSevenPortCfgSpeedStatus=smSevenPortCfgSpeedStatus, smSevenPortCfgAvailSpeeds=smSevenPortCfgAvailSpeeds, switchModEightPortCfg=switchModEightPortCfg, smEightPortCfgTable=smEightPortCfgTable, smEightPortCfgEntry=smEightPortCfgEntry, smEightPortCfgIndex=smEightPortCfgIndex, smEightPortCfgLabel=smEightPortCfgLabel, smEightPortCfgType=smEightPortCfgType, smEightPortCfgLinkSetting=smEightPortCfgLinkSetting, smEightPortCfgLinkState=smEightPortCfgLinkState, smEightPortCfgSpeedSetting=smEightPortCfgSpeedSetting, smEightPortCfgSpeedStatus=smEightPortCfgSpeedStatus, smEightPortCfgAvailSpeeds=smEightPortCfgAvailSpeeds, switchModNinePortCfg=switchModNinePortCfg, smNinePortCfgTable=smNinePortCfgTable, smNinePortCfgEntry=smNinePortCfgEntry, smNinePortCfgIndex=smNinePortCfgIndex, smNinePortCfgLabel=smNinePortCfgLabel, smNinePortCfgType=smNinePortCfgType, smNinePortCfgLinkSetting=smNinePortCfgLinkSetting, smNinePortCfgLinkState=smNinePortCfgLinkState, smNinePortCfgSpeedSetting=smNinePortCfgSpeedSetting, smNinePortCfgSpeedStatus=smNinePortCfgSpeedStatus, smNinePortCfgAvailSpeeds=smNinePortCfgAvailSpeeds, switchModTenPortCfg=switchModTenPortCfg, smTenPortCfgTable=smTenPortCfgTable, smTenPortCfgEntry=smTenPortCfgEntry, smTenPortCfgIndex=smTenPortCfgIndex, smTenPortCfgLabel=smTenPortCfgLabel, smTenPortCfgType=smTenPortCfgType, smTenPortCfgLinkSetting=smTenPortCfgLinkSetting, smTenPortCfgLinkState=smTenPortCfgLinkState, smTenPortCfgSpeedSetting=smTenPortCfgSpeedSetting, smTenPortCfgSpeedStatus=smTenPortCfgSpeedStatus, smTenPortCfgAvailSpeeds=smTenPortCfgAvailSpeeds, raidControllerConfig=raidControllerConfig, raidControllerTable=raidControllerTable, raidControllerEntry=raidControllerEntry)
mibBuilder.exportSymbols('BLADE-MIB', raidControllerIndex=raidControllerIndex, raidControllerId=raidControllerId, raidControllerExists=raidControllerExists, raidControllerPowerState=raidControllerPowerState, raidControllerMACAddress=raidControllerMACAddress, raidControllerSasID=raidControllerSasID, raidControllerPingRequest=raidControllerPingRequest, raidControllerNetworkCfg=raidControllerNetworkCfg, rcCurrentIPInfoTable=rcCurrentIPInfoTable, rcCurrentIPInfoEntry=rcCurrentIPInfoEntry, rcCurrentIPInfoIndex=rcCurrentIPInfoIndex, rcCurrentIPInfoId=rcCurrentIPInfoId, rcCurrentIPInfoExists=rcCurrentIPInfoExists, rcCurrentIPInfoPowerState=rcCurrentIPInfoPowerState, rcCurrentIPAddr=rcCurrentIPAddr, rcCurrentSubnetMask=rcCurrentSubnetMask, rcCurrentGateway=rcCurrentGateway, rcCurrentIPConfigMethod=rcCurrentIPConfigMethod, rcCurrentRaidedVlanId=rcCurrentRaidedVlanId, rcNewIPInfoTable=rcNewIPInfoTable, rcNewIPInfoEntry=rcNewIPInfoEntry, rcNewIPInfoIndex=rcNewIPInfoIndex, rcNewIPInfoId=rcNewIPInfoId, rcNewIPInfoExists=rcNewIPInfoExists, rcNewIPInfoPowerState=rcNewIPInfoPowerState, rcNewIPAddr=rcNewIPAddr, rcNewSubnetMask=rcNewSubnetMask, rcNewGateway=rcNewGateway, rcNewIPConfigMethod=rcNewIPConfigMethod, rcNewIPConfigEnableDisable=rcNewIPConfigEnableDisable, chassisTopology=chassisTopology, chassisResponseVersion=chassisResponseVersion, chassisFlags=chassisFlags, chassisName=chassisName, chassisNoOfFPsSupported=chassisNoOfFPsSupported, chassisNoOfPBsSupported=chassisNoOfPBsSupported, chassisNoOfSMsSupported=chassisNoOfSMsSupported, chassisNoOfMMsSupported=chassisNoOfMMsSupported, chassisNoOfPMsSupported=chassisNoOfPMsSupported, chassisNoOfMTsSupported=chassisNoOfMTsSupported, chassisNoOfBlowersSupported=chassisNoOfBlowersSupported, chassisPBsInstalled=chassisPBsInstalled, chassisSMsInstalled=chassisSMsInstalled, chassisMMsInstalled=chassisMMsInstalled, chassisPMsInstalled=chassisPMsInstalled, chassisMTInstalled=chassisMTInstalled, chassisBlowersInstalled=chassisBlowersInstalled, chassisActiveMM=chassisActiveMM, chassisKVMOwner=chassisKVMOwner, chassisMediaTrayOwner=chassisMediaTrayOwner, chassisFPsInstalled=chassisFPsInstalled, chassisType=chassisType, chassisSubtype=chassisSubtype, chassisNoOfFBsSupported=chassisNoOfFBsSupported, chassisNoOfAPsSupported=chassisNoOfAPsSupported, chassisNoOfNCsSupported=chassisNoOfNCsSupported, chassisNoOfMXsSupported=chassisNoOfMXsSupported, chassisNoOfMMIsSupported=chassisNoOfMMIsSupported, chassisNoOfSMIsSupported=chassisNoOfSMIsSupported, chassisNoOfFBsInstalled=chassisNoOfFBsInstalled, chassisNoOfAPsInstalled=chassisNoOfAPsInstalled, chassisNoOfNCsInstalled=chassisNoOfNCsInstalled, chassisNoOfMXsInstalled=chassisNoOfMXsInstalled, chassisNoOfMMIsInstalled=chassisNoOfMMIsInstalled, chassisNoOfSMIsInstalled=chassisNoOfSMIsInstalled, chassisNoOfMTsInstalled=chassisNoOfMTsInstalled, managementModule=managementModule, mmStatusTable=mmStatusTable, mmStatusEntry=mmStatusEntry, mmStatusIndex=mmStatusIndex, mmPresent=mmPresent, mmExtIpAddress=mmExtIpAddress, mmPrimary=mmPrimary, mmHealthState=mmHealthState, storage=storage, storageStatus=storageStatus, storageStatusTable=storageStatusTable, storageStatusEntry=storageStatusEntry, storageStatusIndex=storageStatusIndex, storageBayNumber=storageBayNumber, storageState=storageState, storageName=storageName, storageConfiguration=storageConfiguration, storageSwitchConfiguration=storageSwitchConfiguration, storageSwitchZoneCfgTable=storageSwitchZoneCfgTable, storageSwitchZoneCfgEntry=storageSwitchZoneCfgEntry, switchZoneCfgIndex=switchZoneCfgIndex, switchZoneCfgBayNumber=switchZoneCfgBayNumber, switchZoneCfgNumber=switchZoneCfgNumber, switchZoneCfgStatus=switchZoneCfgStatus, switchZoneCfgType=switchZoneCfgType, switchZoneCfgName=switchZoneCfgName, switchZoneCfgDescription=switchZoneCfgDescription, switchZoneCfgDate=switchZoneCfgDate, switchActiveZoneCfg=switchActiveZoneCfg, storageSwitchActiveZoneCfgTable=storageSwitchActiveZoneCfgTable, storageSwitchActiveZoneCfgEntry=storageSwitchActiveZoneCfgEntry, activeZoneCfgIndex=activeZoneCfgIndex, activeZoneCfgBayNumber=activeZoneCfgBayNumber, activeZoneCfgNumberBySwitch=activeZoneCfgNumberBySwitch, activeZoneCfgNumberByMM=activeZoneCfgNumberByMM, switchZoneCfgActivation=switchZoneCfgActivation, firmwareInformation=firmwareInformation, smFirmwareInformation=smFirmwareInformation, smFirmwareInfoTable=smFirmwareInfoTable, smFirmwareInfoEntry=smFirmwareInfoEntry, smFirmwareInfoIndex=smFirmwareInfoIndex, smFirmwareInfoModIndex=smFirmwareInfoModIndex, smFirmwareInfoImageIndex=smFirmwareInfoImageIndex, smFirmwareInfoImageName=smFirmwareInfoImageName, firmwareUpdate=firmwareUpdate, firmwareUpdateTarget=firmwareUpdateTarget, firmwareUpdateTftpServer=firmwareUpdateTftpServer, firmwareUpdateFileName=firmwareUpdateFileName, firmwareUpdateStart=firmwareUpdateStart, firmwareUpdateStatus=firmwareUpdateStatus, standbyFirmwareUpdateStatus=standbyFirmwareUpdateStatus, firmwareImageNumber=firmwareImageNumber, firmwareActiveImage=firmwareActiveImage, firmwareUpdateServer=firmwareUpdateServer, remoteChassis=remoteChassis, remoteChassisTable=remoteChassisTable, remoteChassisEntry=remoteChassisEntry, remoteChassisIndex=remoteChassisIndex, systemName=systemName, systemStatus=systemStatus, mmType=mmType)
mibBuilder.exportSymbols('BLADE-MIB', mmSerial=mmSerial, mmFru=mmFru, mmIp=mmIp, chassisSerial=chassisSerial, chassisFru=chassisFru, chassisMachineTypeMode=chassisMachineTypeMode, chassisUuid=chassisUuid, firmwareVersion=firmwareVersion, chassisDiscovery=chassisDiscovery, fileManagement=fileManagement, fileTopology=fileTopology, currentDirectory=currentDirectory, fileDetailsTable=fileDetailsTable, fileDetailsEntry=fileDetailsEntry, fileIndex=fileIndex, fileName=fileName, fileLastUpdate=fileLastUpdate, fileSize=fileSize, fileManagementCmd=fileManagementCmd, fileSystemSpaceAvailable=fileSystemSpaceAvailable, service=service, serviceConfig=serviceConfig, debugEnable=debugEnable, bladeServiceData=bladeServiceData, bladeServiceDataTable=bladeServiceDataTable, bladeServiceDataEntry=bladeServiceDataEntry, serviceDataIndex=serviceDataIndex, serviceDataBladeId=serviceDataBladeId, serviceDataBladeExists=serviceDataBladeExists, serviceDataBladePowerState=serviceDataBladePowerState, serviceDataBladeName=serviceDataBladeName, serviceDataBladeCapability=serviceDataBladeCapability, serviceDataDumpInitiate=serviceDataDumpInitiate, bladeSystemReferenceCodes=bladeSystemReferenceCodes, bladeSysRefCodesTable=bladeSysRefCodesTable, bladeSysRefCodesEntry=bladeSysRefCodesEntry, sysRefCodeIndex=sysRefCodeIndex, sysRefCodeBayNumber=sysRefCodeBayNumber, sysRefCodeSequence=sysRefCodeSequence, sysRefCode=sysRefCode, sysRefCodeTimestamp=sysRefCodeTimestamp, bladeSysRefCodesDetailsTable=bladeSysRefCodesDetailsTable, bladeSysRefCodesDetailsEntry=bladeSysRefCodesDetailsEntry, sysRefCodeDetailIndex=sysRefCodeDetailIndex, sysRefCodeDetailBayNumber=sysRefCodeDetailBayNumber, sysRefCodeDetailSRCSequence=sysRefCodeDetailSRCSequence, sysRefCodeDetailSequence=sysRefCodeDetailSequence, sysRefCodeDetailDataString=sysRefCodeDetailDataString, serviceAdvisor=serviceAdvisor, autoCallHomeSetup=autoCallHomeSetup, acceptLicenseAgreement=acceptLicenseAgreement, serviceAdvisorEnable=serviceAdvisorEnable, serviceSupportCenter=serviceSupportCenter, ibmSupportCenter=ibmSupportCenter, contactInformation=contactInformation, companyName=companyName, contactName=contactName, phoneNumber=phoneNumber, emailAddress=emailAddress, address=address, city=city, state=state, postalCode=postalCode, httpProxyConfig=httpProxyConfig, httpProxyEnable=httpProxyEnable, httpProxyLocation=httpProxyLocation, httpProxyPort=httpProxyPort, httpProxyUserName=httpProxyUserName, httpProxyPassword=httpProxyPassword, activityLogs=activityLogs, activityLogTable=activityLogTable, activityLogEntry=activityLogEntry, activityLogIndex=activityLogIndex, activityLogString=activityLogString, activityLogAcknowledge=activityLogAcknowledge, autoFTPSetup=autoFTPSetup, autoFTPCallMode=autoFTPCallMode, autoFTPCallAddr=autoFTPCallAddr, autoFTPCallPort=autoFTPCallPort, autoFTPCallUserID=autoFTPCallUserID, autoFTPCallPassword=autoFTPCallPassword, callHomeExclusionEvents=callHomeExclusionEvents, readCallHomeExclusionEventTable=readCallHomeExclusionEventTable, readCallHomeExclusionEventEntry=readCallHomeExclusionEventEntry, readCallHomeExclusionEventIndex=readCallHomeExclusionEventIndex, readCallHomeExclusionEventID=readCallHomeExclusionEventID, addCallHomeExclusionEvent=addCallHomeExclusionEvent, rmCallHomeExclusionEvent=rmCallHomeExclusionEvent, rmAllCallHomeExclusionEvent=rmAllCallHomeExclusionEvent)

