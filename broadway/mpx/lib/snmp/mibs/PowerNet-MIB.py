"""
Copyright (C) 2007 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# PySNMP SMI module. Autogenerated from smidump -f python PowerNet-MIB
# by libsmi2pysnmp-0.0.7-alpha at Sat Sep  8 12:45:47 2007,
# Python version (2, 2, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'MibIdentifier', 'NotificationType', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises')
( DisplayString, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString')

# Objects

apc = MibIdentifier((1, 3, 6, 1, 4, 1, 318))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1))
upsBasicIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1))
upsBasicIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription("The UPS model name (e.g. 'APC Smart-UPS 600').")
upsBasicIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('An 8 byte ID string identifying the UPS.  This object\ncan be set by the administrator.')
upsAdvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2))
upsAdvIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess('readonly').setDescription("The firmware revision of the UPS system's microprocessor.")
upsAdvIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess('readonly').setDescription('The date when the UPS was manufactured in mm/dd/yy format.')
upsAdvIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess('readonly').setDescription('An 8-character string identifying the serial number of \nthe UPS internal microprocessor.  This number is set at\nthe factory.  NOTE: This number does NOT correspond to\nthe serial number on the rear of the UPS.')
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2))
upsBasicBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1))
upsBasicBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('batteryNormal', 2), ('batteryLow', 3), ))).setMaxAccess('readonly').setDescription('The status of the UPS batteries.  A batteryLow(3) \nvalue indicates the UPS will be unable to sustain the \ncurrent load, and its services will be lost if power is \nnot restored.  The amount of run time in reserve at the \ntime of low battery can be configured by the \nupsAdvConfigLowBatteryRunTime.')
upsBasicBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess('readonly').setDescription('The elapsed time since the UPS has switched to battery \npower.')
upsBasicBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription("The date when the UPS system's batteries were last replaced \nin mm/dd/yy format.   For Smart-UPS models, this value \nis originally set in the factory.  When the UPS batteries \nare replaced, this value should be reset by the administrator.")
upsAdvBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2))
upsAdvBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess('readonly').setDescription('The remaining battery capacity expressed in \npercent of full capacity.')
upsAdvBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess('readonly').setDescription('The current internal UPS temperature expressed in \nCelsius.')
upsAdvBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 3), TimeTicks()).setMaxAccess('readonly').setDescription('The UPS battery run time remaining before battery \nexhaustion.')
upsAdvBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noBatteryNeedsReplacing', 1), ('batteryNeedsReplacing', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether the UPS batteries need replacing.')
upsAdvBatteryNumOfBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The number of external battery packs connected to the UPS. If\nthe UPS does not use smart cells then the agent reports\nERROR_NO_SUCH_NAME.')
upsAdvBatteryNumOfBadBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of external battery packs connected to the UPS that \nare defective. If the UPS does not use smart cells then the\nagent reports ERROR_NO_SUCH_NAME.')
upsAdvBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The nominal battery voltage in Volts.')
upsAdvBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The actual battery bus voltage in Volts.')
upsAdvBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The battery current in Amps.')
upsAdvTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The total DC current in Amps.')
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3))
upsBasicInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1))
upsBasicInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The current AC input phase.')
upsAdvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2))
upsAdvInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 1), Gauge32()).setMaxAccess('readonly').setDescription('The current utility line voltage in VAC.')
upsAdvInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess('readonly').setDescription('The maximum utility line voltage in VAC over the\nprevious 1 minute period.')
upsAdvInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 3), Gauge32()).setMaxAccess('readonly').setDescription('The minimum utility line voltage in VAC over the\nprevious 1 minute period.')
upsAdvInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 4), Gauge32()).setMaxAccess('readonly').setDescription('The current input frequency to the UPS system in Hz.')
upsAdvInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,8,3,9,6,10,5,7,4,)).subtype(namedValues=namedval.NamedValues(('noTransfer', 1), ('rateOfVoltageChange', 10), ('highLineVoltage', 2), ('brownout', 3), ('blackout', 4), ('smallMomentarySag', 5), ('deepMomentarySag', 6), ('smallMomentarySpike', 7), ('largeMomentarySpike', 8), ('selfTest', 9), ))).setMaxAccess('readonly').setDescription('The reason for the occurrence of the last transfer to UPS\nbattery power.  The variable is set to:\n- noTransfer(1) -- if there is no transfer yet.\n- highLineVoltage(2) -- if the transfer to battery is caused\nby an over voltage greater than the high transfer voltage.\n- brownout(3) -- if the duration of the outage is greater than\nfive seconds and the line voltage is between 40% of the\nrated output voltage and the low transfer voltage.\n- blackout(4) -- if the duration of the outage is greater than five\nseconds and the line voltage is between 40% of the rated \noutput voltage and ground.\n- smallMomentarySag(5) -- if the duration of the outage is less\nthan five seconds and the line voltage is between 40% of the\nrated output voltage and the low transfer voltage.\n- deepMomentarySag(6) -- if the duration of the outage is less \nthan five seconds and the line voltage is between 40% of the \nrated output voltage and ground.  The variable is set to \n- smallMomentarySpike(7) -- if the line failure is caused by a\nrate of change of input voltage less than ten volts per cycle.\n- largeMomentarySpike(8) -- if the line failure is caused by \na rate of change of input voltage greater than ten volts per cycle.\n- selfTest(9) -- if the UPS was commanded to do a self test.\n- rateOfVoltageChange(10) -- if the failure is due to the rate of change of\nthe line voltage.')
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4))
upsBasicOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1))
upsBasicOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(12,4,7,9,11,10,8,1,6,2,3,5,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('hardwareFailureBypass', 10), ('sleepingUntilPowerReturn', 11), ('onSmartTrim', 12), ('onLine', 2), ('onBattery', 3), ('onSmartBoost', 4), ('timedSleeping', 5), ('softwareBypass', 6), ('off', 7), ('rebooting', 8), ('switchedBypass', 9), ))).setMaxAccess('readonly').setDescription('The current state of the UPS.  If the UPS is unable \nto determine the state of the UPS this variable is set \nto unknown(1).')
upsBasicOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The current output phase.')
upsAdvOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2))
upsAdvOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 1), Gauge32()).setMaxAccess('readonly').setDescription('The output voltage of the UPS system in VAC.')
upsAdvOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 2), Gauge32()).setMaxAccess('readonly').setDescription('The current output frequency of the UPS system in Hz.')
upsAdvOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 3), Gauge32()).setMaxAccess('readonly').setDescription('The current UPS load expressed in percent \nof rated capacity.')
upsAdvOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 4), Gauge32()).setMaxAccess('readonly').setDescription('The current in amperes drawn by the load on the UPS.')
upsAdvOutputRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 5), Gauge32()).setMaxAccess('readonly').setDescription('The number of power modules which can fail or be\nremoved without causing the UPS to generate a Minimum\nRedundancy Lost event.')
upsAdvOutputKVACapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The maximum load that theis UPS can support.')
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5))
upsBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1))
upsBasicConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of devices that are plugged into the UPS.')
upsBasicConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2)).setDescription('A list of devices that are plugged into the UPS.\nThe number of entries is given by the value of\nupsBasicConfigNumDevices.')
upsBasicConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'deviceIndex')).setDescription('The devices plugged in to the UPS.')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the device that is plugged into the UPS.')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name/description of the device plugged into the UPS.')
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The volt-amp rating of the device plugged into the UPS.')
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('An entry is added if yes, the entry is deleted if no.')
upsAdvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2))
upsAdvConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription("The nominal output voltage from the UPS in VAC. \n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a \nset request, the UPS interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
upsAdvConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription("The maximum line voltage in VAC allowed before the\nUPS system transfers to battery backup.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription("The minimum line voltage in VAC allowed before the\nUPS system transfers to battery backup.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a \nset request, the UPS interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
upsAdvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('timed', 1), ('atLowBattery', 2), ('never', 3), ('mute', 4), ))).setMaxAccess('readwrite').setDescription('A flag indicating how the UPS should handle audible\nline fail alarms:\ntimed(1): UPS alarm will sound after a preset timed duration starting\nfrom the line fail condition (see OID upsAdvConfigAlarmTimer for the\nalarm timer value)\natLowBattery(2): UPS alarm will sound when the UPS has reached a Low\nBattery condition during a line fail\nnever(3): Disables the UPS audible alarm\nmute(4): Mutes the current alarm for some UPSs only when it is in an\nalarm state and will return to the previously configured option when\nthe UPS recovers from the alarm condition')
upsAdvConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess('readwrite').setDescription('The time after initial line failure at which the UPS\nbegins emitting audible alarms (beeping).  This timer is\nobserved only if the value of extControlAlarm is timed(2).\nAllowed values are 0 or 30 seconds.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
upsAdvConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess('readwrite').setDescription("The minimum battery capacity required before the UPS will \nreturn from a low battery shutdown condition.  The capacity is\nmeasured from 0% battery capacity (or Low Battery) as a percent\nof full capacity (100%).   In other words, the UPS will not re-energize\nthe output until the battery has charged so that its' capacity is equal \nto this value.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('auto', 1), ('low', 2), ('medium', 3), ('high', 4), ))).setMaxAccess('readwrite').setDescription('The sensitivity of the UPS to utility line abnormalities\nor noises.')
upsAdvConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess('readwrite').setDescription("The desired run time of the UPS, in seconds, once the \nlow battery condition is reached. During this time the UPS will\nproduce a constant warning tone which can not be disabled.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a set\nrequest, the UPS interprets the value as the next higher\nacceptable value.  If the provided value is higher than the\nhighest acceptable value, the highest acceptable value is used.")
upsAdvConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess('readwrite').setDescription("The delay in seconds after utility line power returns\nbefore the UPS will turn on.  This value is also used \nwhen the UPS comes out of a reboot and before the UPS\nwakes up from 'sleep' mode.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess('readwrite').setDescription("The delay in seconds the UPS remains on after being told \nto turn off.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess('readwrite').setDescription("The time in seconds for the UPS to go to 'sleep' when \ninstructed.  When in sleep mode, the UPS will not provide\noutput power regardless of the input line state.  Once the\nspecified time has elapsed, output power will be restored.\n\nThis is a configuration setting.  The UPS will not go to\nsleep until told to do so by the manager from a management\nstation.\n\nAny input value is allowed, however the UPS only recognizes\n1/10 of an hour increments.  The provided value will be \nrounded to the closest 1/10 of an hour with one exception:\nAny value entered between 1 and 540 seconds will be rounded \nto 360 seconds (or 6 minutes).")
upsAdvConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noSetEEPROMDefaults', 1), ('setEEPROMDefaults', 2), ))).setMaxAccess('readwrite').setDescription('WRITE: Resets the UPS EEPROM variables to default values.\nREAD: returns 0')
upsAdvConfigDipSwitchSetting = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13)).setDescription('Current settings of UPS dip switches.')
upsAdvConfigDipSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1)).setIndexNames((0, 'PowerNet-MIB', 'dipSwitchIndex')).setDescription('The current setting of one dip switch.')
dipSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of a UPS dip switch.')
dipSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('on', 1), ('off', 2), ))).setMaxAccess('readonly').setDescription('The setting of a UPS dip switch.')
upsAdvConfigBattExhaustThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 14), TimeTicks()).setMaxAccess('readwrite').setDescription('The number of seconds prior to battery exhaustion when the\nUPS will switch off power to its load.')
upsAdvConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 15), DisplayString()).setMaxAccess('readwrite').setDescription('The password entered at the UPS front panel to enable local\nconfiguration of the EEProm. If the password is disabled or \nis not supported, then the agent returns a null string.')
upsAdvConfigAllowedSetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16)).setDescription('The table listing the allowed values for all discrete \nconfigurable UPS variables.')
apcUpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1)).setIndexNames((0, 'PowerNet-MIB', 'apcUpsConfigFieldIndex')).setDescription('The table entry for a configurable UPS variable.')
apcUpsConfigFieldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to an eeprom field entry.')
apcUpsConfigFieldOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 2), ObjectIdentifier()).setMaxAccess('readonly').setDescription('The OID of the current configurable value.')
apcUpsConfigFieldValueRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The discrete set of allowed values of a configurable \nregister. Individual values are delimited by a comma.')
upsAdvConfigBattCabAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 17), Integer32()).setMaxAccess('readwrite').setDescription('Configure settings of UPS battery cabinet amp hour setting.')
upsAdvConfigPositionSelector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('rack', 2), ('tower', 3), ))).setMaxAccess('readwrite').setDescription("Configure UPS position selector.  If the UPS doesn't\nsupport this configuration it will report unknown (1).\nThe positions are either rack (2) for rack mounted or\ntower (3) for tower unit.")
upsAdvConfigOutputFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(10,2,1,5,6,9,7,8,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('freqRange50Var1dot0', 10), ('freqRangeAUTO', 2), ('freqRange60Var1', 3), ('freqRange60Var3', 4), ('freqRange50Var1', 5), ('freqRange50Var3', 6), ('freqRange60Var10', 7), ('freqRange50Var10', 8), ('freqRange60Var1dot0', 9), ))).setMaxAccess('readwrite').setDescription("Configure the output frequency tolerance range.\nunknown(1) indicates the output frequency is unknown.\nfreqRangeAUTO(2) configure the output frequency range for automatic.\nfreqRange60Var1(3) configure the output frequency range for 60 +/- 0.1 Hz\nfreqRange60Var3(4) configure the output frequency range for 60 +/- 3.0 Hz\nfreqRange50Var1(5) configure the output frequency range for 50 +/- 0.1 Hz\nfreqRange50Var3(6) configure the output frequency range for 50 +/- 3.0 Hz\nfreqRange60Var10(7) configure the output frequency range for 60 +/- 10 Hz\nfreqRange50Var10(8) configure the output frequency range for 50 +/- 10 Hz\nfreqRange60Var1dot0(9) configure the output frequency range for 60 +/- 1.0 Hz\nfreqRange50Var1dot0(10) configure the output frequency range for 50 +/- 1.0 Hz\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.")
upsAdvConfigUPSFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 20), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('gotoBypass', 2), ('dropLoad', 3), ))).setMaxAccess('readwrite').setDescription('Configure the UPS fail action.  If UPS fails,\nand frequency or voltage is out of range it will either\nGotoBypass (2) or DropLoad (3).  This OID will report\nunknown (1) if it is not supported feature or option.')
upsAdvConfigAlarmRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 21), Integer32()).setMaxAccess('readwrite').setDescription('Configure settings of UPS alarm if the redundancy is\nunder the current redundancy.  Use -1 for never.')
upsAdvConfigAlarmLoadOver = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 22), Integer32()).setMaxAccess('readwrite').setDescription('Configure settings of UPS alarm if the load is\nover the current load in kVA.  Use -1 for never.')
upsAdvConfigAlarmRuntimeUnder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 23), Integer32()).setMaxAccess('readwrite').setDescription('Configure settings of UPS alarm if the runtime is\nunder the current time of minutes.  Use -1 for never.')
upsAdvConfigVoutReporting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 24), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('voutAUTO', 2), ('vout208', 3), ('vout240', 4), ))).setMaxAccess('readwrite').setDescription('Configure the way the UPS scales its output voltage readings.\nunknown(1) indicates the Vout Reporting is unknown.\nvoutAUTO(2) configure the Vout Reporting for automatic scaling.\nvout208(3) configure the Vout Reporting for 208 Volts.\nvout240(4) configure the Vout Reporting for 240 Volts.')
upsAdvConfigNumExternalBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 25), Integer32()).setMaxAccess('readwrite').setDescription('Configure the number of external batteries connected to the UPS.')
upsAdvConfigSimpleSignalShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('disabled', 2), ('enabled', 3), ))).setMaxAccess('readwrite').setDescription('Configure Simple Signal shutdown commands from the Simple Signal\nport to be issued to the UPS.\nunknown(1) indicates the Simple Signal Shutdown setting is unknown.\ndisabled(2) configure to disable Simple Signal Shutdowns.\nenabled(3) configure to enable Simple Signal Shutdowns.')
upsAdvConfigMaxShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 27), Integer32()).setMaxAccess('readwrite').setDescription('The maximum amount of time for server shutdown to complete before a \nUPS shutdown occurs.')
upsAsiUpsControlServerRequestShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 28), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('serverShutdownOff', 1), ('serverShutdownReboot', 2), ))).setMaxAccess('readwrite').setDescription('Start a server shutdown sequence:\nserverShutdownOff: Shutdown server and turn off UPS\nserverShutdownReboot: Shutdown server and turn reboot UPS.')
upsAdvConfigMinReturnRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 29), TimeTicks()).setMaxAccess('readwrite').setDescription('The minimum amount of run time in seconds required before the output will be\nturned on, using power calculation captured at start of last shutdown.')
upsAdvConfigBasicSignalLowBatteryDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 30), TimeTicks()).setMaxAccess('readwrite').setDescription('The duration of runtime in seconds during an on-battery condition at which \nthe UPS will signal the basic low battery shutdown condition.')
upsAdvConfigBypassPhaseLockRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 31), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('disabled', 2), ('enabled', 3), ))).setMaxAccess('readwrite').setDescription('Sets the condition for when bypass is an acceptable mode of operation as a\nrequirement.')
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6))
upsBasicControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1))
upsBasicControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noTurnOffUps', 1), ('turnOffUpsToConserveBattery', 2), ))).setMaxAccess('readwrite').setDescription("Setting this variable to turnUpsOffToConserveBattery(2) \ncauses a UPS on battery to be put into 'sleep' mode.  The \nUPS will turn back on when utility power is restored.  \nAttempting to turn off a UPS that is not on battery will \nresult in a badValue error.\n\nSetting this value to noTurnOffUps(1) has no\neffect.\n\nThe value noTurnOffUps(1) will always be returned\nwhen the variable is read.")
upsAdvControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2))
upsAdvControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,4,3,1,5,)).subtype(namedValues=namedval.NamedValues(('noTurnUpsOff', 1), ('turnUpsOff', 2), ('turnUpsOffGracefully', 3), ('turnUpsSyncGroupOff', 4), ('turnUpsSyncGroupOffAfterDelay', 5), ('turnUpsSyncGroupOffGracefully', 6), ))).setMaxAccess('readwrite').setDescription("Setting this variable to turnUpsOff(2) causes\nthe UPS to shut off.  When in this state, the UPS \nwill not provide output power regardless of the input\nline state.\n\nSetting this variable to turnUpsOffGracefully(3) causes\nthe UPS to shut off after a delay period. This allows the\nhost to shut down in a graceful manner. When in this state,\nthe UPS will not provide output power regardless of the\ninput line state. \n       \nIf this UPS is an active member of a Synchronized \nControl Group (SCG) the turnUpsSyncGroupOff(4) command \nwill perform a Synchronized Turn Off of all active Group\nmembers regardless of their current AC output status.    \n\nIf this UPS is an active member of a Synchronized \nControl Group (SCG) the turnUpsSyncGroupOffAfterDelay(5)\ncommand will perform a Synchronized Turn Off After Delay \nof all active Group members regardless of their current \nAC output status. This unit's Shutdown Delay will be used \nto execute the Turn Off After Delay command.  \n\nIf this UPS is an active member of an SCG, the \nturnUpsSyncGroupOffGracefully(6) command will perform a \nSynchronized Turn Off Gracefully of all active Group \nmembers regardless of their current AC output status.  \nThis unit's Maximum Shutdown Time and Shutdown Delay will\nbe used to execute the Turn Off Gracefully command.  \n\nSetting this value to noTurnUpsOff(1) has no\neffect.\n\nThe value noTurnUpsOff(1) will always be returned\nwhen the variable is read.")
upsAdvControlRebootUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('noRebootUps', 1), ('rebootUps', 2), ('rebootUpsGracefully', 3), ('rebootSyncGroupUps', 4), ('rebootSyncGroupUpsGracefully', 5), ))).setMaxAccess('readwrite').setDescription("Setting this variable to rebootUps(2) causes the\nUPS to shut off and turn back on.\n\nSetting this variable to rebootUpsGracefully(3) causes the\nUPS to shut off and turn back on after a delay period. \nThis allows the host to shut down in a graceful manner.\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG) the rebootSyncGroupUps(4) command will perform\na Synchronized Reboot of all active Group members regardless\nof their current AC output status.  This unit's Power \nSynchronization Delay, Shutdown Delay, Return Delay, \nReturn Battery Capacity, and Return Battery Capacity Offset \nwill be used to execute the Reboot command.  \n\nIf this UPS is an active member of a SCG the \nrebootSyncGroupUpsGracefully(5) command will perform a \nSynchronized Reboot of all active Group members regardless \nof their current AC output status.  This unit's Power \nSynchronization Delay, Maximum Shutdown Time, \nShutdown Delay, Return Delay, Return Battery Capacity, and \nReturn Battery Capacity Offset will be used\nto execute the Reboot command.  \n       \nSetting this value to noRebootUps(1) has no effect.\n\nThe value noRebootUps(1) will always be returned\nwhen the variable is read.")
upsAdvControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,4,5,1,)).subtype(namedValues=namedval.NamedValues(('noPutUpsToSleep', 1), ('putUpsToSleep', 2), ('putUpsToSleepGracefully', 3), ('putUpsSyncGroupToSleep', 4), ('putUpsSyncGroupToSleepGracefully', 5), ))).setMaxAccess('readwrite').setDescription("Setting this variable to putUpsToSleep(2) causes\nthe UPS to go to sleep for the time specified by\nupsAdvConfigUpsSleepTime.\n\nSetting this variable to putUpsToSleepGracefully(3)\ncauses the UPS to go to sleep for the time specified \nby upsAdvConfigUpsSleepTime after a delay period. \nThis allows the host to shut down in a graceful manner.\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the putUpsSyncGroupToSleep(4) command will perform\na Synchronized Sleep of all active Group members regardless \nof their current AC output status.  This unit's Power \nSynchronization Delay, Shutdown Delay, Sleep Time, \nand Return Delay will be used to execute the sleep command.  \n\nIf this UPS is an active member of a SCG the \nputUpsSyncGroupToSleepGracefully(5) command will perform a \nSynchronized Sleep Gracefully of all active Group members \nregardless of their current AC output status.  This unit's \nPower Synchronization Delay, Maximum Shutdown Time, Shutdown \nDelay, Sleep Time, and Return Delay to execute the sleep \ncommand.  \n\nWhen in sleep mode, the UPS will not provide output\npower regardless of the input line state.  Once the\nspecified time has elapsed, output power will be\nrestored. \n\nSetting this value to noPutUpsToSleep(1) has no\neffect.\n\nThe value noPutUpsToSleep(1) will always be returned\nwhen the variable is read.")
upsAdvControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noSimulatePowerFailure', 1), ('simulatePowerFailure', 2), ))).setMaxAccess('readwrite').setDescription('Setting this variable to simulatePowerFailure(2) causes\nthe UPS switch to battery power.\n\nSetting this value to noSimulatePowerFailure(1) has no\neffect.\n\nThe value noSimulatePowerFailure(1) will always be returned\nwhen the variable is read.')
upsAdvControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('noFlashAndBeep', 1), ('flashAndBeep', 2), ('flashAndBeepSyncGroup', 3), ))).setMaxAccess('readwrite').setDescription('Setting this variable to flashAndBeep(2) causes the\nUPS to beep and simultaneously turn on the UPS front\npanel lights (Smart-UPS only).\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the flashAndBeepSyncGroup(3) command will \nFlash and Beep all active Group members regardless of \ncurrent AC output status.\n  \nSetting this value to noFlashAndBeep(1) has no\neffect.\n\nThe value noFlashAndBeep(1) will always be returned\nwhen the variable is read.')
upsAdvControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('noTurnOnUPS', 1), ('turnOnUPS', 2), ('turnOnUPSSyncGroup', 3), ))).setMaxAccess('readwrite').setDescription('Setting this variable to turnOnUPS(2) causes the\nUPS to be turned on immediately.\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the turnOnUPSSyncGroup(3) command will perform \na Synchronized Turn On of all active Group members \nregardless of their current AC output status.\n\nSetting this value to noTurnOnUPS(1) has no\neffect.\n\nThe value noTurnOnUPS(1) will always be returned\nwhen the variable is read.')
upsAdvControlBypassSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('noBypassSwitch', 1), ('switchToBypass', 2), ('switchOutOfBypass', 3), ))).setMaxAccess('readwrite').setDescription('This switch puts the UPS in or out of bypass mode.')
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7))
upsBasicTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 1))
upsAdvTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2))
upsAdvTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,2,5,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('biweekly', 2), ('weekly', 3), ('atTurnOn', 4), ('never', 5), ))).setMaxAccess('readwrite').setDescription("The UPS system's automatic battery test schedule.")
upsAdvTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noTestDiagnostics', 1), ('testDiagnostics', 2), ))).setMaxAccess('readwrite').setDescription('Setting this variable to testDiagnostics(2) causes\nthe UPS to perform a diagnostic self test.\n\nSetting this value to noTestDiagnostics(1) has no\neffect.\n\nThe value noTestDiagnostics(1) will always be returned\nwhen the variable is read.')
upsAdvTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,1,3,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('failed', 2), ('invalidTest', 3), ('testInProgress', 4), ))).setMaxAccess('readonly').setDescription('The results of the last UPS diagnostics test performed.')
upsAdvTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess('readonly').setDescription('The date the last UPS diagnostics test was performed in\nmm/dd/yy format.')
upsAdvTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('noPerformCalibration', 1), ('performCalibration', 2), ('cancelCurrentCalibration', 3), ))).setMaxAccess('readwrite').setDescription('Setting this variable to performCalibration(2) causes\nthe UPS to discharge to calibrate the UPS.\nThe test will only start if the battery capacity is 100%.\nThe test runs until capacity is less than 25%.\n\nSetting this variable to cancelCurrentCalibration(3)\nafter setting performCalibration(2) will cancel the \ncurrent discharge.\n\nSetting this variable to noPerformCalibration(1) \nwill have no effect.\n\nThe value noPerformCalibration(1) will always be returned\nwhen the variable is read.\n\nThe result of the calibration will be saved in \nupsAdvTestCalibrationResult.')
upsAdvTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('invalidCalibration', 2), ('calibrationInProgress', 3), ))).setMaxAccess('readonly').setDescription('The results of the last runtime calibration.\n\nValue ok(1) means a successful runtime calibration.\n\nValue invalidCalibration(2) indicates last calibration did\nnot take place since the battery capacity was below\n100%.\n\nValue calibrationInProgress(3) means a calibration \nis occurring now. ')
upsAdvTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date the last UPS runtime calibration was \nperformed in mm/dd/yy format.')
upsComm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8))
upsCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('noComm', 2), ))).setMaxAccess('readonly').setDescription("The status of agent's communication with UPS. ")
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9))
upsPhaseResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1))
upsPhaseResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Reset the maximum and minimum UPS values:\nupsPhaseInputMaxVoltage, upsPhaseInputMinVoltage,\nupsPhaseInputMaxCurrent, upsPhaseInputMinCurrent,\nupsPhaseInputMaxPower, upsPhaseInputMinPower,\nupsPhaseOutputMaxCurrent, upsPhaseOutputMinCurrent,\nupsPhaseOutputMaxLoad, upsPhaseOutputMinLoad,\nupsPhaseOutputMaxPercentLoad, upsPhaseOutputMinPercentLoad,\nupsPhaseOutputMaxPower, upsPhaseOutputMinPower,\nupsPhaseOutputMaxPercentPower, upsPhaseOutputMinPercentPower.')
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2))
upsPhaseNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of input feeds to this device.\nThis variable indicates the number of rows in the\ninput table.')
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2)).setDescription('A list of input table entries.  The number of entries\nis given by the value of upsPhaseNumInputs.')
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsPhaseInputTableIndex')).setDescription('An entry containing information applicable to a\nparticular input.')
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The input identifier.')
upsPhaseNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of input phases utilized in this\ndevice.  The sum of all the upsPhaseNumInputPhases\nvariable indicates the number of rows in the \ninput phase table.')
upsPhaseInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('singlePhase', 2), ('splitPhase', 3), ('threePhasePhaseToNeutral', 4), ('threePhasePhaseToPhase', 5), ))).setMaxAccess('readonly').setDescription('The input voltage orientation: \n1: unknown for this UPS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.')
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The input frequency in 0.1 Hertz, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('main', 2), ('bypass', 3), ))).setMaxAccess('readonly').setDescription('The input type.')
upsPhaseInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 6), DisplayString()).setMaxAccess('readwrite').setDescription('A name given to a particular input.')
upsPhaseInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3)).setDescription('A list of input table entries.  The number of entries\nis given by the sum of the upsPhaseNumInputPhases.')
upsPhaseInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsPhaseInputPhaseTableIndex'), (0, 'PowerNet-MIB', 'upsPhaseInputPhaseIndex')).setDescription('An entry containing information applicable to a\nparticular input phase.')
upsPhaseInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The input identifier.')
upsPhaseInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The input phase identifier.')
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The input voltage in VAC, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The maximum input voltage in VAC measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription("The minimum input voltage in VAC measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription("The input current in 0.1 amperes, or -1 if it's\nunsupported by this UPS.")
upsPhaseInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription("The maximum input current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription("The minimum input current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription("The input power in Watts, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 10), Integer32()).setMaxAccess('readonly').setDescription("The maximum input power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 11), Integer32()).setMaxAccess('readonly').setDescription("The minimum input power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3))
upsPhaseNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of output feeds to this device.\nThis variable indicates the number of rows in the\noutput table.')
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2)).setDescription('A list of output table entries.  The number of entries\nis given by the value of upsOutputNumPhases.')
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsPhaseOutputTableIndex')).setDescription('An entry containing information applicable to a\nparticular output.')
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The output identifier.')
upsPhaseNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of output phases utilized in this\ndevice.  The sum of all the upsPhaseNumOutputPhases\nvariable indicates the number of rows in the \noutput phase table.')
upsPhaseOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('singlePhase', 2), ('splitPhase', 3), ('threePhasePhaseToNeutral', 4), ('threePhasePhaseToPhase', 5), ))).setMaxAccess('readonly').setDescription('The output voltage orientation: \n1: unknown for this UPS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.')
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The output frequency in 0.1 Hertz, or -1 if it's\nunsupported by this UPS.")
upsPhaseOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3)).setDescription('A list of output table entries.  The number of\nentries is given by the sum of the upsPhaseNumOutputPhases.')
upsPhaseOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsPhaseOutputPhaseTableIndex'), (0, 'PowerNet-MIB', 'upsPhaseOutputPhaseIndex')).setDescription('An entry containing information applicable to a\nparticular output phase.')
upsPhaseOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The output identifier.')
upsPhaseOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The output phase identifier.')
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The output voltage in VAC, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The output current in 0.1 amperes drawn \nby the load on the UPS, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription("The maximum output current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription("The minimum output current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription("The output load in VA, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription("The maximum output load in VA measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription("The minimum output load in VA measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 10), Integer32()).setMaxAccess('readonly').setDescription("The percentage of the UPS load capacity in VA at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this UPS.")
upsPhaseOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 11), Integer32()).setMaxAccess('readonly').setDescription("The maximum percentage of the UPS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last reset\n(upsPhaseResetMaxMinValues), or -1 if it's unsupported\nby this UPS. Sampled every 30 seconds.")
upsPhaseOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 12), Integer32()).setMaxAccess('readonly').setDescription("The minimum percentage of the UPS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last reset\n(upsPhaseResetMaxMinValues), or -1 if it's unsupported\nby this UPS. Sampled every 30 seconds.")
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 13), Integer32()).setMaxAccess('readonly').setDescription("The output power in Watts, or -1 if it's\nunsupported by this UPS.")
upsPhaseOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 14), Integer32()).setMaxAccess('readonly').setDescription("The maximum output power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 15), Integer32()).setMaxAccess('readonly').setDescription("The minimum output power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 16), Integer32()).setMaxAccess('readonly').setDescription("The percentage of the UPS power capacity in Watts at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this UPS.")
upsPhaseOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 17), Integer32()).setMaxAccess('readonly').setDescription("The maximum percentage of the UPS power capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last \nreset (upsPhaseResetMaxMinValues), or -1 if it's\nunsupported by this UPS. Sampled every 30 seconds.")
upsPhaseOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 18), Integer32()).setMaxAccess('readonly').setDescription("The maximum percentage of the UPS power capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last \nreset (upsPhaseResetMaxMinValues), or -1 if it's\nunsupported by this UPS. Sampled every 30 seconds.")
upsSyncCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10))
upsSyncCtrlGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1))
upsSCGMembershipGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('The SCG Membership Group number (MGN) is a 16-bit number allowing \nup to 65534 separate groups that can be identified and distinguished\nper IP subnet. Zero and 65535 are not used. The MGN is used in all \ncommunication between members of the SCG and a Network Management Card\n(NMC) will listen and only respond to commands sent to it using its \nconfigured SCG ID.')
upsSCGActiveMembershipStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enabledSCG', 1), ('disabledSCG', 2), ))).setMaxAccess('readwrite').setDescription('Membership in the configured SCG can be enabled and \ndisabled.  If an NMC is configured for an SCG, but \nhas its membership disabled, all synchronized control commands \nreceived will be ignored.')
upsSCGPowerSynchronizationDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The Power Synchronization Delay Time (PSD) setting is the maximum \nnumber of seconds an SCG Initiator will wait for all SCG members to \nrecover utility power before completing the reboot sequence of a\nreboot or sleep command. If all SCG members are ready to proceed, \nno additional delay is introduced.')
upsSCGReturnBatteryCapacityOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription("A reboot command uses the Initiator's Return battery Capacity (RBC) to control\nwhen the SCG completes this operation. In a Normal Control Operation (NCC) the \nUPS will only complete the reboot if RBC is reached.  Due to normal battery \ncharge rate variations it may be desirable for the Followers to complete the \nreboot if they are within some range of the Initiator's RBC when the Initiator \nis prepared (charged to RBC) to complete the reboot. The Return Battery \nCapacity Offset (RBCO) defines a percent battery capacity subtracted from an \nRBC above which a Follower's battery must be charged for it to complete a \nreboot.  For example, if the Initiator's RBC is 50% and the Initiator's RBCO is\n5% then a Follower's battery capacity is within range if it is greater or equal \nto 45% (50% - 5%) at the time when the Initiator tries to complete the reboot \ncommand.  The default RBCO is 10%. ")
upsSCGMultiCastIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 5), IpAddress()).setMaxAccess('readwrite').setDescription('The MultiCast IP address of the SCG Group.')
upsSyncCtrlGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2))
upsSCGNumOfGroupMembers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of active, communicating members in the Sync Control Group (SCG).\nThis variable indicates the number of rows in the SCG Status Table.')
upsSCGStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2)).setDescription('A list of SCG status table entries.  The number of entries\nis given by the value of upsSCGNumOfGroupMembers.')
upsSCGStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsSCGStatusTableIndex')).setDescription('An entry containing information applicable to a\nparticular SCG Member.')
upsSCGStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of a status entry for an active, communicating SCG member.')
upsSCGMemberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess('readonly').setDescription('The IP address of an active, communicating SCG Member.')
upsSCGACInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('acInGood', 1), ('acInBad', 2), ))).setMaxAccess('readonly').setDescription('This OID indicates the AC Input Status of the SCG Member.\nacInGood(1) indicates the AC Input is within tolerance.\nacInBad(2)  indicates the AC Input is not within tolerance.')
upsSCGACOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('acOutOn', 1), ('acOutOff', 2), ))).setMaxAccess('readonly').setDescription('This OID indicates the AC Output Status of the SCG Member.\nacOutOn(1)  indicates the UPS output is providing power to the load.\nacOutOff(2) indicates the UPS output is not providing power to the load. ')
upsState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11))
upsBasicState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1))
upsBasicStateOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription("An ASCII string containing the 64 flags representing\nthe current state(s) of the UPS. If the Network Card\nis unable to determine the state of the UPS, this\nvariable is set to 'UNKNOWN'.\n\nThe flags are numbered 1 to 64, read from left to\nright. The flags are defined as follows:\n\nFlag  1: Abnormal Condition Present\nFlag  2: On Battery\nFlag  3: Low Battery\nFlag  4: On Line\n     \nFlag  5: Replace Battery\nFlag  6: Serial Communication Established\nFlag  7: AVR Boost Active*\nFlag  8: AVR Trim Active*\n\nFlag  9: Overload\nFlag 10: Runtime Calibration\nFlag 11: Batteries Discharged\nFlag 12: Manual Bypass\n\nFlag 13: Software Bypass\nFlag 14: In Bypass due to Internal Fault\nFlag 15: In Bypass due to Supply Failure*\nFlag 16: In Bypass due to Fan Failure*\n\nFlag 17: Sleeping on a Timer\nFlag 18: Sleeping until Utility Power Returns\nFlag 19: On\nFlag 20: Rebooting\n\nFlag 21: Battery Communication Lost*\nFlag 22: Graceful Shutdown Initiated\nFlag 23: Smart Boost or Smart Trim Fault*\nFlag 24: Bad Output Voltage*\n\nFlag 25: Battery Charger Failure*\nFlag 26: High Battery Temperature\nFlag 27: Self Test In Progress\nFlag 28: Low Battery / On Battery\n\nFlag 29: Graceful Shutdown Issued by Upstream Device\nFlag 30: Graceful Shutdown Issued by Downstream Device\nFlag 31: No Batteries Attached*\nFlag 32: Synchronized command is in progress\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2))
upsAdvStateAbnormalConditions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 1), DisplayString()).setMaxAccess('readonly').setDescription("An ASCII string containing the 32 flags representing\nthe current active UPS faults. If the Network Card\nis unable to determine the values of the flags, this\nvariable is set to 'UNKNOWN'. If this variable is not\nsupported by the connected UPS, this variable is set to\n'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 32, and read from left to\nright. The flags are defined as follows:\n\nFlag  1: Power Module Failure\nFlag  2: Main Intelligence Module Failure\nFlag  3: Redundant Intelligence Module Failure\nFlag  4: Battery Failure\n \nFlag  5: Load(kVA) Alarm Threshold Violation\nFlag  6: Redundancy Lost\nFlag  7: Redundancy Below Alarm Threshold\nFlag  8: Bypass notin Range; Either Frequency or Voltage\n\nFlag  9: Bypass Contactor Stuck in Bypass Condition\nFlag 10: Bypass Contactor Stuck in On-Line Condition\nFlag 11: In Bypass due to an Internal Fault\nFlag 12: In Bypass due to an Overload\n\nFlag 13: In Maintenance Bypass\nFlag 14: Input Circuit Braker Tripped Open\nFlag 15: System Level Fan Failure\nFlag 16: Redundant Intelligent Module in Control\n\nFlag 17: IIC Inter-Module Communication Failure\nFlag 18: No Working Power Modules\nFlag 19: Load Shutdown From Bypass; Input Frequency\nFlag 20: Runtime Below Alarm Threshold\n\nFlag 21: Extended Run Frame Fault\nFlag 22: Output Voltage out of Range\nFlag 23: UPS Not Synchronized\nFlag 24: No Batteries Installed\n\nFlag 25: Battery Voltage High\nFlag 26: UPS Specific Fault Detected\nFlag 27: Site Wiring Fault\nFlag 28: Backfeed Protection Relay Opened\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>")
upsAdvStateSymmetra3PhaseSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 2), DisplayString()).setMaxAccess('readonly').setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Symmetra\n3-Phase UPS models. If the Network Card is unable to\ndetermine the values of the flags, this variable is set\nto 'UNKNOWN'. If the connected UPS does not use this\nvariable, it is set to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: External Switch Gear Failure\nFlag  2: External Transformer Over Temperature\nFlag  3: External DC Circuit Breaker Tripped\nFlag  4: System Power Supply Failure\n  \nFlag  5: Battery Monitor Card Failure\nFlag  6: Battery Monitor Card Removed\nFlag  7: XR Communication Card Failure\nFlag  8: XR Communication Card Removed\n\nFlag  9: External Switch Gear Monitoring Card Failure\nFlag 10: External Switch Gear Monitoring Card Removed\nFlag 11: Internal DC Circuit Breaker Tripped\nFlag 12: Static Bypass Switch Failure\n\nFlag 13: System EEPROM Removed\nFlag 14: System EEPROM Failure\nFlag 15: UPS in Forced Bypass\nFlag 16: <Not Used>\n\nFlag 17: <Not Used>\nFlag 18: <Not Used>\nFlag 19: <Not Used>\nFlag 20: <Not Used>\n\nFlag 21: <Not Used>\nFlag 22: <Not Used>\nFlag 23: <Not Used>\nFlag 24: <Not Used>\n\nFlag 25: <Not Used>\nFlag 26: <Not Used>\nFlag 27: <Not Used>\nFlag 28: <Not Used>\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvStateDP300ESpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 3), DisplayString()).setMaxAccess('readonly').setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Silcon\nDP300E UPS models. If the Network Card is unable to\ndetermine the values of the flags, this variable is set\nto 'UNKNOWN'. If the connected UPS does not use this\nvariable, it is set to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: Peak Current Limiter Active\nFlag  2: Bypass Power Supply Fault\nFlag  3: Delta Current Limiter Active\nFlag  4: Fan Fault\n  \nFlag  5: High DC warning\nFlag  6: Inverter Voltage Error\nFlag  7: Parallel Synchronization Error\nFlag  8: Second Power Supply Fault\n\nFlag  9: Internal Power Supply Fault\nFlag 10: <Not Used>\nFlag 11: <Not Used>\nFlag 12: <Not Used>\n\nFlag 13: <Not Used>\nFlag 14: Bypass Static Switch High Temperature\nFlag 15: High Battery Temperature\nFlag 16: Battery Weak\n\nFlag 17: <Not Used>\nFlag 18: System Locked in Operation Mode\nFlag 19: RAM1 Memory Write Error\nFlag 20: Memory Write Error\n\nFlag 21: Communication to VQ Bypass Lost\nFlag 22: Communication to VQ Output Lost\nFlag 23: Communication to DMU Lost\nFlag 24: Communication to Controller Lost\n\nFlag 25: Communication to Parallel IF Lost\nFlag 26: External Shutdown Accepted\nFlag 27: DC Capacitor Charge Error\nFlag 28: Communication to VQ Mains Lost\n\nFlag 29: Bypass Synchronization Error\nFlag 30: Charge Error\nFlag 31: <Not Used>\nFlag 32: <Not Used>\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsOutletGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12))
upsOutletGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1))
upsOutletGroupStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of outlet groups for the UPS.')
upsOutletGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2)).setDescription('Allows for getting status of the outlet groups. The number of\nentries is contained in the upsOutletGroupStatusTableSize OID.')
upsOutletGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsOutletGroupStatusIndex')).setDescription('The outlet group status to get.')
upsOutletGroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet group entry.')
upsOutletGroupStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet group. This OID is provided\nfor informational purposes only. This value is set\nby the upsOutletGroupConfigName OID.')
upsOutletGroupStatusGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('upsOutletGroupStatusOn', 1), ('upsOutletGroupStatusOff', 2), ('upsOutletGroupStatusUnknown', 3), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the outlet group state. If the outlet\ngroup is on, the upsOutletGroupStatusOn (1) value will be returned. If\nthe outlet group is off, the upsOutletGroupStatusOff (2) value will be\nreturned. If the state of the outlet group cannot be determined, the\nupsOutletGroupStatusUnknown (3) value will be returned.')
upsOutletGroupStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('upsOutletGroupCommandPending', 1), ('upsOutletGroupNoCommandPending', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the command pending\nstate of the outlet group. If a command is pending on the \noutlet group, the upsOutletGroupCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet group, the upsOutletGroupNoCommandPending (2)\nwill be returned.')
upsOutletGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2))
upsOutletGroupConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of outlet groups for the UPS.')
upsOutletGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2)).setDescription('The list of outlet groups to configure. The number of entries\nis defined by the upsOutletGroupConfigTableSize OID.')
upsOutletGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsOutletGroupConfigIndex')).setDescription('The outlet groups to configure.')
upsOutletGroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet group entry.')
upsOutletGroupConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet group.')
upsOutletGroupConfigPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet group will delay \npowering on when the delayed on or reboot command is applied.\nAllowed values are -1 (for Never) or 0 to 600 seconds.')
upsOutletGroupConfigPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet group will delay \npowering off when the delayed off command is applied.\nAllowed values are 0 to 600 seconds.')
upsOutletGroupConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before initiating the power on sequence.\nAllowed values are 0 to 600 seconds.')
upsOutletGroupControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3))
upsOutletGroupControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of outlet groups for the UPS.')
upsOutletGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2)).setDescription('Allows for control of individual outlet groups. The number of\nentries is contained in the upsOutletGroupControlTableSize OID.')
upsOutletGroupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsOutletGroupControlIndex')).setDescription('The outlet group to control.')
upsOutletGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet group entry.')
upsOutletGroupControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet group. This OID is provided\nfor informational purposes only. This value is set\nby the upsOutletGroupConfigName OID.')
upsOutletGroupControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,2,5,6,4,8,1,)).subtype(namedValues=namedval.NamedValues(('upsOutletGroupImmediateOn', 1), ('upsOutletGroupImmediateOff', 2), ('upsOutletGroupImmediateReboot', 3), ('upsOutletGroupDelayedOn', 4), ('upsOutletGroupDelayedOff', 5), ('upsOutletGroupDelayedReboot', 6), ('upsOutletGroupCancelPendingCommand', 7), ('upsOutletGroupControlUnknown', 8), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the outlet group state. If the outlet\ngroup is on, the upsOutletGroupImmediateOn (1) value will be returned. If\nthe outlet group is off, the upsOutletGroupImmediateOff (2) value will be\nreturned. \n\nIf the state of the outlet group cannot be determined, the\nupsOutletGroupControlUnknown (8) value will be returned.\n\nSetting this variable to upsOutletGroupImmediateOn (1) will turn the\noutlet group on.\n\nSetting this variable to upsOutletGroupImmediateOff (2) will turn the\noutlet group off. \n\nSetting this variable to upsOutletGroupImmediateReboot (3) will turn the outlet\ngroup off, wait the upsOutletGroupConfigRebootDuration OID time, wait the\nupsOutletGroupConfigPowerOnDelay OID, and then turn the outlet group on.\n\nSetting this variable to upsOutletGroupDelayedOn (4) will turn the outlet\ngroup on after the upsOutletGroupConfigPowerOnDelay OID has elapsed.\n\nSetting this variable to upsOutletGroupDelayedOff (5) will turn the outlet\ngroup off after the upsOutletGroupConfigPowerOffDelay OID has elapsed.\n\nSetting this variable to upsOutletGroupDelayedReboot (6) will turn the outlet\ngroup off after the upsOutletGroupConfigPowerOffDelay OID has elapsed, wait the\nupsOutletGroupConfigRebootDuration OID time, wait the\nupsOutletGroupConfigPowerOnDelay OID, and then turn the outlet group on.\n\nSetting this variable to upsOutletGroupCancelPendingCommand (7) will\ncause any pending command to this outlet group to be canceled.')
upsDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13))
upsDiagnosticIM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1))
upsDiagIMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of Intelligence Modules in or attached to the UPS.')
upsDiagIMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2)).setDescription('Allows for diagnostics of individual Intelligence Modules. The number of\nentries is contained in the upsDiagIMTableSize OID.')
upsDiagIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagIMIndex')).setDescription('The diagnostics and information of an Intelligence Module.')
upsDiagIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Intelligence Module entry.')
upsDiagIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('imUnknown', 1), ('imMIM', 2), ('imRIM', 3), ))).setMaxAccess('readonly').setDescription('The type of the Intelligence Module.\nimUnknown(1) indicates the IM type is unknown.\nimMIM(2) indicates the IM type is a Main Intelligence Module.\nimRIM(3) indicates the IM type is Redundant Intelligence Module.')
upsDiagIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Intelligence Module.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagIMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Intelligence Module.')
upsDiagIMSlaveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The slave firmware revision of the Intelligence Module.')
upsDiagIMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Intelligence Module.')
upsDiagIMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Intelligence Module.')
upsDiagIMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('The manufacture date of the Intelligence Module.')
upsDiagnosticPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2))
upsDiagPMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of Power Modules in or attached to the UPS.')
upsDiagPMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2)).setDescription('Allows for diagnostics of Individual Power modules. The number of\nentries is contained in the upsDiagPMTableSize OID.')
upsDiagPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagPMIndex')).setDescription('The diagnostics of an Power Module.')
upsDiagPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Power Module entry.')
upsDiagPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Power Module.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagPMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Power Module.')
upsDiagPMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Power Module.')
upsDiagPMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Power Module.')
upsDiagPMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The manufacture date of the Power Module.')
upsDiagnosticBatteries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3))
upsDiagBatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of batteries in or attached to the UPS.')
upsDiagBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2)).setDescription('Allows for diagnostics of individual batteries. The number of\nentries is contained in the upsDiagBattTableSize OID.')
upsDiagBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagBatteryIndex')).setDescription('The diagnostics of a battery.')
upsDiagBatteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the battery frame entry.\nFrame 0 indicates the Main frame. Extended Run (XR) frames\nstart from index 1.')
upsDiagBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index to the battery entry.')
upsDiagBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,7,3,6,1,2,5,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('failed', 4), ('highTemperature', 5), ('replaceImmediately', 6), ('lowCapacity', 7), ))).setMaxAccess('readonly').setDescription('The status of the battery.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the battery status is OK.\nfailed(4) indicates the battery status is failed.\nhighTemperature(5) indicates the battery has a high temperature condition.\nreplaceImmediately(6) indicates the battery must be replaced immediately.\nlowCapacity(7) indicates the battery has a low capacity.')
upsDiagBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the battery.')
upsDiagBatteryFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the battery.')
upsDiagBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The manufacture date of the battery.')
upsDiagBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The battery type or rating for the battery.')
upsDiagnosticSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4))
upsDiagSubSysFrameTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of frames attached to the UPS including the Main frame.')
upsDiagSubSysFrameTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2)).setDescription('Allows for diagnostics of individual XR Frames.')
upsDiagSubSysFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysFrameIndex')).setDescription('The diagnostics of an XR Frame.')
upsDiagSubSysFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,5,1,2,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('frameTypeMain', 3), ('frameTypeXR', 4), ('frameTypeLXR', 5), ))).setMaxAccess('readonly').setDescription('The type of Frame.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nframeTypeMain(3) indicates the frame type is the Main Frame.\nframeTypeXR(4) indicates the frame type is an XR Frame.\nframeTypeLXR(5) indicates the frame type is an LXR Frame.')
upsDiagSubSysFrameFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the frame.')
upsDiagSubSysFrameHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the frame.')
upsDiagSubSysFrameSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the frame.')
upsDiagSubSysFrameManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The manufacture date of the frame.')
upsDiagSubSysIntBypSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of Internal Bypass switches attached to the UPS.')
upsDiagSubSysIntBypSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4)).setDescription('Allows for diagnostics of the Internal Bypass Switch.')
upsDiagSubSysIntBypSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysIntBypSwitchIndex')).setDescription('The diagnostics of the Internal Bypass Switch.')
upsDiagSubSysIntBypSwitchFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysIntBypSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The Internal Bypass Switch index entry.')
upsDiagSubSysIntBypSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The Internal Bypass Switch status.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysIntBypSwitchFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Internal Bypass Switch.')
upsDiagSubSysIntBypSwitchHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Internal Bypass Switch.')
upsDiagSubSysIntBypSwitchSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Internal Bypass Switch.')
upsDiagSubSysIntBypSwitchManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The manufacture date of the Internal Bypass Switch.')
upsDiagSubSysBattMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('The number of Battery Monitor Boards attached to the UPS.')
upsDiagSubSysBattMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6)).setDescription('Allows for diagnostics of the Battery Monitor Board.')
upsDiagSubSysBattMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysBattMonitorIndex')).setDescription('The diagnostics of the Battery Monitor Board.')
upsDiagSubSysBattMonitorFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysBattMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of the Battery Monitor Board.')
upsDiagSubSysBattMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Battery Monitor Board.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysBattMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Battery Monitor Board.')
upsDiagSubSysBattMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Battery Monitor Board.')
upsDiagSubSysBattMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Battery Monitor Board.')
upsDiagSubSysBattMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date of the manufacture for the Battery Monitor Board.')
upsDiagSubSysExternalSwitchGearTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of External Switch Gears attached to the UPS.')
upsDiagSubSysExternalSwitchGearTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8)).setDescription('Allows for diagnostics of the individual External Switch Gear.')
upsDiagSubSysExternalSwitchGearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysExternalSwitchGearIndex')).setDescription('The diagnostics of an individual External Switch Gear.')
upsDiagSubSysExternalSwitchGearFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysExternalSwitchGearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of the External Switch Gear.')
upsDiagSubSysExternalSwitchGearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the External Switch Gear.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysExternalSwitchGearFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the External Switch Gear monitor card.')
upsDiagSubSysExternalSwitchGearHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the External Switch Gear monitor card.')
upsDiagSubSysExternalSwitchGearSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the External Switch Gear monitor card.')
upsDiagSubSysExternalSwitchGearManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date of the manufacture for the External Switch Gear monitor card.')
upsDiagSubSysDisplayInterfaceCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of Display Interface Cards attached to the UPS.')
upsDiagSubSysDisplayInterfaceCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10)).setDescription('Allows for diagnostics of individual Display Interface Cards.')
upsDiagSubSysDisplayInterfaceCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysDisplayInterfaceCardIndex')).setDescription('The diagnostics of a Display Interface Card.')
upsDiagSubSysDisplayInterfaceCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysDisplayInterfaceCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of the Display Interface Card.')
upsDiagSubSysDisplayInterfaceCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Display Interface Card.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysDCCircuitBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 11), Integer32()).setMaxAccess('readonly').setDescription('The number of DC Circuit Breakers attached to the UPS.')
upsDiagSubSysDCCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12)).setDescription('Allows for diagnostics of individual DC Circuit Breakers.')
upsDiagSubSysDCCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysDCCircuitBreakerIndex')).setDescription('The diagnostics of a DC Circuit Breaker.')
upsDiagSubSysDCCircuitBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysDCCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of the DC Circuit Breaker.')
upsDiagSubSysDCCircuitBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('opened', 3), ('closed', 4), ))).setMaxAccess('readonly').setDescription('The status of the DC Circuit Breaker.\nunknown(1) indicates the circuit breaker status is unknown.\nnotInstalled(2) indicates the circuit breaker is not installed.\nopened(3) indicates the circuit breaker is opened.\nclosed(4) indicates the circuit breaker is closed.')
upsDiagSubSysSystemPowerSupplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 13), Integer32()).setMaxAccess('readonly').setDescription('The number of System Power Supplies attached to the UPS.')
upsDiagSubSysSystemPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14)).setDescription('Allows for diagnostics of individual System Power Supplies.')
upsDiagSubSysSystemPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysSystemPowerSupplyIndex')).setDescription('The diagnostics of a System Power Supply.')
upsDiagSubSysSystemPowerSupplyFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysSystemPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of a System Power Supply.')
upsDiagSubSysSystemPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the System Power Supply.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysSystemPowerSupplyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the System Power Supply monitor card.')
upsDiagSubSysSystemPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the System Power Supply monitor card.')
upsDiagSubSysSystemPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the System Power Supply monitor card.')
upsDiagSubSysSystemPowerSupplyManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date of the manufacture for the System Power Supply monitor card.')
upsDiagSubSysXRCommunicationCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 15), Integer32()).setMaxAccess('readonly').setDescription('The number of XR Communication Cards attached to the UPS.')
upsDiagSubSysXRCommunicationCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16)).setDescription('Allows for diagnostics of individual XR Communication Cards.')
upsDiagSubSysXRCommunicationCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysXRCommunicationCardIndex')).setDescription('The diagnostics of an XR Communication Card.')
upsDiagSubSysXRCommunicationCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysXRCommunicationCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of an XR Communication Card.')
upsDiagSubSysXRCommunicationCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the XR Communication Card.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysXRCommunicationCardFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the XR Communication card.')
upsDiagSubSysXRCommunicationCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the XR Communication card.')
upsDiagSubSysExternalPowerFrameBoardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 17), Integer32()).setMaxAccess('readonly').setDescription('The number of External Power Frame Boards attached to the UPS.')
upsDiagSubSysExternalPowerFrameBoardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18)).setDescription('Allows for diagnostics of individual External Power Frame Boards.')
upsDiagSubSysExternalPowerFrameBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysExternalPowerFrameBoardIndex')).setDescription('The diagnostics of an External Power Frame Board.')
upsDiagSubSysExternalPowerFrameBoardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysExternalPowerFrameBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of an External Power Frame Board.')
upsDiagSubSysExternalPowerFrameBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the External Power Frame Board.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysChargerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 19), Integer32()).setMaxAccess('readonly').setDescription('The number of Chargers attached to the UPS.')
upsDiagSubSysChargerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20)).setDescription('Allows for diagnostics of individual chargers.')
upsDiagSubSysChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysChargerIndex')).setDescription('The diagnostics of a charger.')
upsDiagSubSysChargerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of a charger.')
upsDiagSubSysChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Charger.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysInverterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 21), Integer32()).setMaxAccess('readonly').setDescription('The number of Inverters attached to the UPS.')
upsDiagSubSysInverterTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22)).setDescription('Allows for diagnostics of individual Inverters.')
upsDiagSubSysInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysInverterIndex')).setDescription('The diagnostics of a Inverter.')
upsDiagSubSysInverterFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of a Inverter.')
upsDiagSubSysInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Inverter.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysInverterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Inverter monitor.')
upsDiagSubSysInverterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Inverter monitor.')
upsDiagSubSysInverterSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Inverter monitor.')
upsDiagSubSysInverterManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date of the manufacture for the Inverter monitor.')
upsDiagSubSysPowerFactorCorrectionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 23), Integer32()).setMaxAccess('readonly').setDescription('The number of Power Factor Correction devices attached to the UPS.')
upsDiagSubSysPowerFactorCorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24)).setDescription('Allows for diagnostics of individual PowerFactorCorrections.')
upsDiagSubSysPowerFactorCorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1)).setIndexNames((0, 'PowerNet-MIB', 'upsDiagSubSysPowerFactorCorrectionIndex')).setDescription('The diagnostics of a Power Factor Correction.')
upsDiagSubSysPowerFactorCorrectionFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The frame index entry.')
upsDiagSubSysPowerFactorCorrectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The index of a Power Factor Correction.')
upsDiagSubSysPowerFactorCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('offOk', 3), ('onOk', 4), ('offFail', 5), ('onFail', 6), ('lostComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the Power Factor Correction.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.')
upsDiagSubSysPowerFactorCorrectionFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Power Factor Correction monitor.')
upsDiagSubSysPowerFactorCorrectionHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Power Factor Correction monitor.')
upsDiagSubSysPowerFactorCorrectionSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Power Factor Correction monitor.')
upsDiagSubSysPowerFactorCorrectionManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The date of the manufacture for the Power Factor Correction monitor.')
upsDiagnosticExternalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5))
upsDiagSwitchGear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1))
upsDiagSwitchGearStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,5,3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('fail', 4), ('lostComm', 5), ('overtemp', 6), ))).setMaxAccess('readonly').setDescription('The status of the Switch Gear.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nfail(4) indicates the device status has failed.\nlostComm(5) indicates the device has lost communication.\novertemp(6) indicates the device has an over temperature condition.')
upsDiagSwitchGearInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('opened', 3), ('closed', 4), ))).setMaxAccess('readonly').setDescription('The status of the Switch Gear Input Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.')
upsDiagSwitchGearOutputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('opened', 3), ('closed', 4), ))).setMaxAccess('readonly').setDescription('The status of the Switch Gear Output Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.')
upsDiagSwitchGearBypassSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('opened', 3), ('closed', 4), ))).setMaxAccess('readonly').setDescription('The status of the Switch Gear Bypass Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.')
upsDiagMCCBBox = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2))
upsDiagMCCBBoxStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('opened', 3), ('closed', 4), ))).setMaxAccess('readonly').setDescription('The status of the MCCB Box (Molded Case Circuit Breaker Box) external device.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nopened(3) indicates the circuit is opened.\nclosed(4) indicates the circuit is closed.')
upsDiagTransformer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3))
upsDiagTransformerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,5,3,7,8,4,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('fail', 4), ('lostComm', 5), ('overtemp', 6), ('opened', 7), ('closed', 8), ))).setMaxAccess('readonly').setDescription('The status of the External Transformer.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nfail(4) indicates the device status has failed.\nlostComm(5) indicates the device has lost communication.\novertemp(6) indicates the device has an over temperature condition.\nopened(7) indicates the circuit is opened.\nclosed(8) indicates the circuit is closed.')
upsDiagnosticComBus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6))
upsDiagComBusInternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,6,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('lostComm', 4), ('rxFailure', 5), ('txFailure', 6), ))).setMaxAccess('readonly').setDescription('The status of the internal MIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.')
upsDiagComBusInternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,6,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('lostComm', 4), ('rxFailure', 5), ('txFailure', 6), ))).setMaxAccess('readonly').setDescription('The status of the internal RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.')
upsDiagComBusMIMtoRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,6,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('lostComm', 4), ('rxFailure', 5), ('txFailure', 6), ))).setMaxAccess('readonly').setDescription('The status of the MIM to RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.')
upsDiagComBusExternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,6,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('lostComm', 4), ('rxFailure', 5), ('txFailure', 6), ))).setMaxAccess('readonly').setDescription('The status of the external MIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.')
upsDiagComBusExternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,4,6,3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('notInstalled', 2), ('ok', 3), ('lostComm', 4), ('rxFailure', 5), ('txFailure', 6), ))).setMaxAccess('readonly').setDescription('The status of the external RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.')
measureUps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2))
mUpsEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1))
mUpsEnvironAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess('readonly').setDescription('The ambient temperature in Celsius for Probe 1.')
mUpsEnvironRelativeHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess('readonly').setDescription('The relative humidity as a percentage for Probe 1.')
mUpsEnvironAmbientTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess('readonly').setDescription('The ambient temperature in Celsius for Probe 2.')
mUpsEnvironRelativeHumidity2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 4), Gauge32()).setMaxAccess('readonly').setDescription('The relative humidity as a percentage for Probe 2.')
mUpsContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2))
mUpsContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported by the Measure-UPS.')
mUpsContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2)).setDescription('A list of contacts supported by the Measure-UPS.')
mUpsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'contactNumber')).setDescription('A contact entry containing information for a given contact.')
contactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('An index identifying the contact on the Measure-UPS.')
normalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('open', 2), ('closed', 3), ))).setMaxAccess('readwrite').setDescription('The normal operating position of the contact. If the normal\noperating position cannot be set then it is controlled via the\ndip switch on the Measure-UPS and is therefore read-only.')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the contact.')
monitoringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('enabled', 2), ('disabled', 3), ))).setMaxAccess('readwrite').setDescription('A flag indicating whether this contact is \nmonitored, or not.')
currentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('noFault', 2), ('fault', 3), ))).setMaxAccess('readonly').setDescription('This value indicates the current state of the contact.\nIf the contact is not in its normal state.  This value\nis set to fault(2).')
miniSNMPadapter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3))
serialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1))
serialPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 1))
serialPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2))
serialPort2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1))
serialPort2Mode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('localConsole', 1), ('passthrough', 2), ))).setMaxAccess('readwrite').setDescription("Setting this variable to passthrough will enable mini's port2\nbehave like a UPS port. Choosing localConsole will enable the port\nto be used as local console.")
serialPort2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2))
setPulseOnTXD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('noSetPulseOnTXD', 1), ('setPulseOnTXD', 2), ('setTXDLow', 3), ('setTXDHigh', 4), ))).setMaxAccess('readwrite').setDescription('Setting this variable to setPulseOnTXD(2) \ncauses adapter to generate a PULSE on TXD pin of serial port 2.\nThe duration in the prototype implementation will be 1 second.\n\nSetting this value to noSetPulseOnTXD(1) has no\neffect.\n\nThe value noSetPulseOnTXD(1) will always be returned\nwhen the variable is read.\n\nSetting this value to setTXDLow(3), or setTXDHigh(4) will keep TXD\nalways low or high respectively.')
masterswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4))
sPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1))
sPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the PDU. This value \nis set at the factory.')
sPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('An 8 byte ID string identifying the PDU firmware revision. \nThis value is set at the factory.')
sPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The date when the PDU was manufactured in mm/dd/yy format.\nThis value is set at the factory. The year 2000 will be \nrepresented by 00.')
sPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A 10-character string identifying the model number of \nthe PDU internal. This value is set at the factory.')
sPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A 12-character string identifying the serial number of \nthe PDU internal microprocessor. This value is set at\nthe factory.')
sPDUMasterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2))
sPDUMasterControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,5,2,7,4,6,)).subtype(namedValues=namedval.NamedValues(('turnAllOnNow', 1), ('turnAllOnSequence', 2), ('turnAllOffNow', 3), ('rebootAllNow', 4), ('rebootAllSequence', 5), ('noCommand', 6), ('turnAllOffSequence', 7), ))).setMaxAccess('readwrite').setDescription("Setting this OID to turnAllOnNow (1) will turn all outlets\non immediately.\n\nSetting this OID to turnAllOnSequence (2) will turn all outlets\non as defined by each outlet's sPDUOutletPowerOnTime OID value.\n\nSetting this OID to turnAllOff (3) will turn all outlets\noff immediately.\n\nSetting this OID to rebootAllNow (4) will reboot all outlets\nimmediately.\n\nFor MasterSwitch firmware version 1.X, setting this OID to \nrebootAllSequence (5) reboots all outlets, with power returned \nto the outlets in the sequence defined by each outlet's \nsPDUOutletPowerOnTime OID value.\n\nFor MasterSwitch firmware version 2.X, setting this OID to \nrebootAllSequence (5) will cause a turnAllOffSequence to be performed. \nOnce all outlets are off, the MasterSwitch will then delay the \nsPDUMasterConfigReboot OID time, and then perform a turnAllOnSequence.    \n\nFor MasterSwitch firmware version 2.X, setting this OID to \nturnAllOffSequence (7) will turn all outlets off as defined by \neach outlet's sPDUOutletPowerOffTime OID value.\n\nFor MasterSwitch firmware version 1.X, setting this OID to \nturnAllOffSequence (7) will have no effect.\n\nGetting this OID will return the noCommand (6) value.")
sPDUMasterState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess('readonly').setDescription("Getting this OID will cause the status of all outlets to be \nreturned. This OID is provided for informational purposes only.\nTo change the outlet state, the user should use the sPDUOutletCtl\nOID in the sPDUOutletControlTable.\n\nThe format of the data returned is a character string consisting\nof the word 'On' if the outlet is on or 'Off' if the outlet is\noff. At least one space will delimit each outlet entry in the \nstring. \n\nIf the outlet states are unknown, the character string 'Unknown'\nwill be returned. This signifies that there is an inconsistency \nin the PDU. In the rare case that this should happen, the user \nis advised to shut down all equipment powered by the PDU and \nthen cycle the PDU's power. This will put the PDU in a consistent\nstate.")
sPDUMasterPending = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 3), DisplayString()).setMaxAccess('readonly').setDescription("Getting this OID will cause the command pending status of all outlets to be returned.\n\nThe format of the data returned is a character string consisting\nof the word 'Yes' if a command is pending for the outlet or 'No'\nif there is no command pending for the outlet. At least one \nspace will delimit each outlet entry in the string. \n\nIf the pending states are unknown, the character string 'Unknown'\nwill be returned. This signifies that there is an inconsistency \nin the PDU. In the rare case that this should happen, the user \nis advised to shut down all equipment powered by the PDU and then\ncycle the PDU's power. This will put the PDU in a consistent state.")
sPDUMasterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3))
sPDUMasterConfigPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 1), Integer32()).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, between when\npower is provided to the PDU and when the PDU\nprovides basic master power to the outlets.       \n\nAllowed values are:\n\n-1 never apply power automatically.\n0 apply power immediately.\n15 apply power in 15 seconds.\n30 apply power in 30 seconds.\n45 apply power in 45 seconds.\n60 apply power in 60 seconds  (1 minute).\n120 apply power in 120 seconds (2 minutes).\n300 apply power in 300 seconds (5 minutes).\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUMasterConfigReboot = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 2), Integer32()).setMaxAccess('readwrite').setDescription('During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is read-only for the MasterSwitch version 2.X and is the \nmaximum sPDUOutletRebootDuration OID of the individual outlets.')
sPDUMasterConfigPDUName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the PDU.')
sPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4))
sPDUOutletControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of outlets for the PDU.')
sPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2)).setDescription('Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUOutletControlTableSize OID.')
sPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletControlIndex')).setDescription('The outlets to control.')
sPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('commandPending', 1), ('noCommandPending', 2), ('commandPendingUnknown', 3), ))).setMaxAccess('readonly').setDescription("Reports whether the current outlet has a pending command.\n\nIf the commandPendingUnknown (3) value is returned, all \ndevices powered by the PDU should be shut down. The PDU's\npower should then be cycled to clear this condition.")
sPDUOutletCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,2,1,3,7,4,6,)).subtype(namedValues=namedval.NamedValues(('outletOn', 1), ('outletOff', 2), ('outletReboot', 3), ('outletUnknown', 4), ('outletOnWithDelay', 5), ('outletOffWithDelay', 6), ('outletRebootWithDelay', 7), ))).setMaxAccess('readwrite').setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the outletOn (1) value will be returned.\nIf the outlet is off, the outletOff (2) value will be\nreturned. \n\nIf the state of the outlet cannot be determined, the \noutletUnknown (4) value will be returned. If the \noutletUnknown condition should occur, all devices \npowered by the PDU should be shut down. The PDU's power \nshould then be cycled to clear this condition.\n\nSetting this variable to outletOn (1) will turn the outlet on.\n\nSetting this variable to outletOff (2) will turn the outlet off. \n\nSetting this variable to outletReboot (3) will reboot the outlet.\n\nSetting this variable to outletOnWithDelay (5) will turn the outlet on\nafter the sPDUOutletPowerOnTime OID has elapsed. This option is not\nvalid for MasterSwitch firmware version 1.X.\n\nSetting this variable to outletOffWithDelay (6) will turn the outlet off\nafter the sPDUOutletPowerOffTime OID has elapsed. This option is not valid\nfor MasterSwitch firmware version 1.X.\n\nSetting this variable to outletRebootWithDelay (7) will turn the outlet off\nafter the sPDUOutletPowerOffTime OID has elapsed, wait the sPDUOutletRebootDuration\nOID time, then turn the outlet back on.  \nThis option is not valid for MasterSwitch firmware version 1.X.")
sPDUOutletCtlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. Maximum size is 20 characters.\nThis OID is provided for informational purposes only.\nThis value is set by the sPDUOutletName OID.')
sPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5))
sPDUOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of outlets for the PDU.')
sPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2)).setDescription('The list of outlets to configure. The number of\nentries is defined by the sPDUOutletConfigTableSize\nOID.')
sPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigIndex')).setDescription('The outlets to control.')
sPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering on when the MasterSwitch is powered on.\n       \nAllowed values are:\n\n-1 never power on automatically.\n0  power on with the Master Switch.\n15 power on 15 seconds after the MasterSwitch has power applied.\n30 power on 30 seconds after the MasterSwitch has power applied.\n45 power on 45 seconds after the MasterSwitch has power applied.\n60 power on 60 seconds (1 minute) after the MasterSwitch has power applied.\n120 power on 120 seconds (2 minutes) after the MasterSwitch has power applied.\n300 power on 300 seconds (5 minutes) after the MasterSwitch has power applied.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet. Maximum size is 20 characters.')
sPDUOutletPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering off.\n       \nAllowed values are:\n\n-1 never power off automatically.\n0  power off with the MasterSwitch.\n15 power off 15 seconds after being commanded.\n30 power off 30 seconds after being commanded.\n45 power off 45 seconds after being commanded.\n60 power off 60 seconds (1 minute) after being commanded.\n120 power off 120 seconds (2 minutes) after being commanded.\n300 power off 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is not available for MasterSwitch firmware version 1.X.')
sPDUOutletRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is not available for MasterSwitch firmware version 1.X.')
masterswitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5))
sPDUIdentVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1))
sPDUIdentVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch VMs controllable\nby this IP address.')
sPDUIdentVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2)).setDescription('Allows for query of the individual MasterSwitch VMs. \nThe number of entries is contained in the \nsPDUIdentVMTableSize OID.')
sPDUIdentVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUIdentVMIndex')).setDescription('The MasterSwitch VMs to query.')
sPDUIdentVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM entry.')
sPDUIdentNameVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A 23-character string identifying the \nMasterSwitch VM. ')
sPDUIdentHardwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The hardware version of the MasterSwitch VM. \nThis value is set at the factory.')
sPDUIdentFirmwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('An 6-character ID string identifying the MasterSwitch VM \nfirmware version. This value is set at the factory.')
sPDUIdentDateOfManufactureVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The date when the MasterSwitch VM was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ')
sPDUIdentModelNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A 17-character string identifying the model number of \nthe MasterSwitch VM. This value is set at the factory.')
sPDUIdentSerialNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A 17-character string identifying the serial number of \nthe MasterSwitch VM. This value is set at the factory.')
sPDUMasterControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2))
sPDUMasterControlVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch VMs controllable\nby this IP address.')
sPDUMasterControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2)).setDescription('Allows for control of the individual MasterSwitch VMs.\nThe number of entries is contained in the \nsPDUMasterControlVMTableSize OID.')
sPDUMasterControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterControlVMIndex')).setDescription('The MasterSwitch VMs to control.')
sPDUMasterControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM entry.')
sPDUMasterControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch VM. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigVMName OID.')
sPDUMasterControlVMCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(9,3,7,11,8,1,10,5,2,4,6,)).subtype(namedValues=namedval.NamedValues(('noCommandAllVM', 1), ('cancelAllPendingCommandsVM', 10), ('audioAlarmMute', 11), ('immediateAllOnVM', 2), ('immediateAllOffVM', 3), ('immediateAllRebootVM', 4), ('delayedAllOnVM', 5), ('delayedAllOffVM', 6), ('sequencedAllRebootVM', 7), ('delayedAllRebootVM', 8), ('delayedSequenceAllRebootVM', 9), ))).setMaxAccess('readwrite').setDescription("Setting this OID to immediateAllOnVM (2) will turn all outlets\non immediately.\n\nSetting this OID to immediateAllOffVM (3) will turn all outlets\noff immediately.\n\nSetting this OID to immediateAllRebootVM (4) will reboot all outlets\nimmediately.\n\nSetting this OID to delayedAllOnVM (5) will turn all outlets on as \ndefined by each outlet's sPDUOutletConfigVMPowerOnTime OID value. \n      \nSetting this OID to delayedAllOffVM (6) will turn all outlets \noff as defined by each outlet's sPDUOutletConfigVMPowerOffTime OID value.\n\nSetting this OID to sequencedAllRebootVM (7) will cause a \nimmediateAllOffVM command to be performed. The MasterSwitch VM will \nthen delay the sPDUMasterStatusVMRebootDuration OID time, and then \nperform a delayedAllOnVM command.    \n\nSetting this OID to delayedAllRebootVM (8) will cause a delayedAllOffVM\ncommand to be performed. Each outlet will then wait its \nsPDUOutletConfigVMRebootDuration before returning power to the outlet.\n\nSetting this OID to delayedSequenceAllRebootVM (9) will cause a \ndelayedAllOffVM command to be performed. Once all outlets are off, \nthe MasterSwitch VM will then delay the sPDUMasterStatusVMRebootDuration \nOID time, and then perform a delayedAllOnVM command.    \n\nSetting this OID to cancelAllPendingCommandsVM (10) will cause all pending\ncommands on the MasterSwitch VM to be canceled.\n\n\nSetting this OID to audioAlarmMute (11) will temporarily silence the audible\nalarm for the duration of the current overload condition. The audible alarm\nwill be activated on subsequent overload alarms.\n\nGetting this OID will return the noCommandAllVM (1) value.")
sPDUMasterConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3))
sPDUMasterConfigVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch VMs configurable\nby this IP address.')
sPDUMasterConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2)).setDescription('Allows for configuration of the individual MasterSwitch VMs.\nThe number of entries is contained in the \nsPDUMasterConfigVMTableSize OID.')
sPDUMasterConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterConfigVMIndex')).setDescription('The MasterSwitch VMs to configure.')
sPDUMasterConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM entry.')
sPDUMasterConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the MasterSwitch VM. Maximum size is 23 characters.')
sPDUMasterConfigVMColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, between when\npower is provided to the MasterSwitch VM and \nwhen the MasterSwitch VM provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n-1 never apply power automatically.\n0 apply power immediately.\n15 apply power in 15 seconds.\n30 apply power in 30 seconds.\n45 apply power in 45 seconds.\n60 apply power in 60 seconds  (1 minute).\n120 apply power in 120 seconds (2 minutes).\n300 apply power in 300 seconds (5 minutes).\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUMasterConfigVMAudioAlarmActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('audioAlarmActiveNever', 1), ('audioAlarmActiveOnOverload', 2), ('audioAlarmActiveOnOverloadImminent', 3), ))).setMaxAccess('readwrite').setDescription('Setting this OID to audioAlarmActiveNever (1) will disable\nthe audio alarm on the MasterSwitch VM.\n\nSetting this OID to audioAlarmActiveOnOverload (2) will \nactivate the audio alarm on the MasterSwitch VM when an\noverload condition is present.       \n\nSetting this OID to audioAlarmActiveOnOverloadImminent (3) \nwill activate the audio alarm on the MasterSwitch VM when\nthe load on the MasterSwitch VM has surpassed the\nsPDUMasterConfigVMHighLoadWarningThreshold OID value.')
sPDUMasterConfigVMHighLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented as a percentage of full load.')
sPDUMasterConfigVMLowLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented as a percentage of full load.')
sPDUMasterConfigVMOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('alwaysAllowTurnON', 1), ('restrictOnWarning', 2), ('restrictOnOverload', 3), ))).setMaxAccess('readwrite').setDescription('This OID controls the behavior of the MasterSwitch VM\nwhen an overload condition is possible and additional \noutlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets to turn on.\n\nSetting this OID to restrictOnWarning (2) will not allow \noutlets to turn on if the sPDUMasterConfigVMHighLoadWarningThreshold\nOID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets to turn on if the MasterSwitch Vm is in an \noverload condition.')
sPDUMasterStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4))
sPDUMasterStatusVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch VMs at\nthis IP address.')
sPDUMasterStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2)).setDescription('Allows for gathering of status from the individual \nMasterSwitch VMs. The number of entries is contained \nin the sPDUMasterStatusVMTableSize OID.')
sPDUMasterStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterStatusVMIndex')).setDescription('The MasterSwitch VMs to gather status from.')
sPDUMasterStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM entry.')
sPDUMasterStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch VM. Maximum size is 23 characters.')
sPDUMasterStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('commandPendingMasterTrueVM', 1), ('commandPendingMasterFalseVM', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return commandPendingMasterTrueVM (1)\nif the MasterSwitch VM has a pending command on any of its\noutlets.\n\ncommandPendingMasterFalseVM (2) will be returned if there are\nno pending commands.')
sPDUMasterStatusVMOverloadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('overloadConditionTrueVM', 1), ('overloadConditionFalseVM', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return overloadConditionTrueVM (1)\nif the sPDUMasterConfigVMHighLoadWarningThreshold OID is\nviolated.\n\noverloadConditionFalseVM (2) will be returned if the \nsPDUMasterConfigVMHighLoadWarningThreshold OID is not\nviolated.')
sPDUMasterStatusVMLowLoadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('lowLoadConditionTrueVM', 1), ('lowLoadConditionFalseVM', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return lowLoadConditionTrueVM (1)\nif the sPDUMasterConfigVMLowLoadWarningThreshold OID is\nviolated.\n\nlowLoadConditionFalseVM (2) will be returned if the \nsPDUMasterConfigVMHighLoadWarningThreshold OID is not\nviolated. ')
sPDUMasterStatusVMCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the total amount of power\nbeing consumed by the load. It is represented as a \npercentage of full load.')
sPDUMasterStatusVMMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the total amount of power\nthat this MasterSwitch VM can provide. It is represented\nin Amps.')
sPDUMasterStatusVMOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the number of controllable\noutlets for this MasterSwitch VM.')
sPDUMasterStatusVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the largest\nsPDUOutletConfigVMRebootDuration OID time \nfor this MasterSwitch VM.')
sPDUOutletControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5))
sPDUOutletControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1)).setDescription('Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.')
sPDUOutletControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletControlVMIndex'), (0, 'PowerNet-MIB', 'sPDUOutletControlVMOutletIndex')).setDescription('The outlets to control.')
sPDUOutletControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM.')
sPDUOutletControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch VM. Maximum size is 23 characters.\nThis OID is provided for informational purposes only.')
sPDUOutletControlVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletControlVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. Maximum size is 23 characters.\nThis OID is provided for informational purposes only.')
sPDUOutletControlVMOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,5,2,6,7,)).subtype(namedValues=namedval.NamedValues(('immediateOnVM', 1), ('immediateOffVM', 2), ('immediateRebootVM', 3), ('delayedOnVM', 4), ('delayedOffVM', 5), ('delayedRebootVM', 6), ('cancelPendingCommandVM', 7), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnVM (1) value will be returned.\nIf the outlet is off, the immediateOffVM (2) value will be\nreturned. \n\n\nSetting this variable to immediateOnVM (1) will immediately turn the outlet on.\n\nSetting this variable to immediateOffVM (2) will immediately turn the outlet off. \n\nSetting this variable to immediateRebootVM (3) will immediately reboot the outlet.\n\nSetting this variable to delayedOnVM (4) will turn the outlet on\nafter the sPDUOutletConfigVMPowerOnTime OID time has elapsed.   \n\nSetting this variable to delayedOffVM (5) will turn the outlet off\nafter the sPDUOutletConfigVMPowerOffTime OID time has elapsed.\n\nSetting this variable to delayedRebootVM  (6) will cause the \nMasterSwitch VM to perform a delayedOffVM command, wait the \nsPDUOutletConfigVMRebootDuration OID time, and then perform the\nimmediateOnVM command.\n\nSetting this variable to cancelPendingCommandVM (7) will cause any\npending command to this outlet to be canceled.')
sPDUOutletConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6))
sPDUOutletConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.')
sPDUOutletConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigVMIndex'), (0, 'PowerNet-MIB', 'sPDUOutletConfigVMOutletIndex')).setDescription('The outlets to configure.')
sPDUOutletConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM.')
sPDUOutletConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch VM. Maximum size is 23 characters.')
sPDUOutletConfigVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletConfigVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet. Maximum size is 23 characters.')
sPDUOutletConfigVMPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering on at coldstart or when a command that requires \na turn-on delay is issued.\n       \nAllowed values are:\n\n-1 never power on.\n0  power on immediately.\n15 power on 15 seconds after being commanded.\n30 power on 30 seconds after being commanded.\n45 power on 45 seconds after being commanded.\n60 power on 60 seconds (1 minute) after being commanded.\n120 power on 120 seconds (2 minutes) after being commanded.\n300 power on 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUOutletConfigVMPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering off when a command that requires \na turn-off delay is issued.\n\n       \nAllowed values are:\n\n-1 never power off automatically.\n0  power off immediately.\n15 power off 15 seconds after being commanded.\n30 power off 30 seconds after being commanded.\n45 power off 45 seconds after being commanded.\n60 power off 60 seconds (1 minute) after being commanded.\n120 power off 120 seconds (2 minutes) after being commanded.\n300 power off 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUOutletConfigVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.')
sPDUOutletStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7))
sPDUOutletStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1)).setDescription('Allows for getting of status of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.')
sPDUOutletStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletStatusVMIndex'), (0, 'PowerNet-MIB', 'sPDUOutletStatusVMOutletIndex')).setDescription('The outlets to gather status from.')
sPDUOutletStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch VM.')
sPDUOutletStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch VM. Maximum size is 23 characters.')
sPDUOutletStatusVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletStatusVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. Maximum size is 23 characters.')
sPDUOutletStatusVMOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('outletStatusVMOn', 1), ('outletStatusVMOff', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusOnVM (1) value will be returned.\nIf the outlet is off, the outletStatusOffVM (2) value will be\nreturned. ')
sPDUOutletStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('outletStatusVMCommandPending', 1), ('outletStatusVMNoCommandPending', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusVMCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusVMNoCommandPending (2)\nwill be returned.')
masterswitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6))
sPDUIdentMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1))
sPDUIdentMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch pluses controllable\nby this IP address.')
sPDUIdentMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2)).setDescription('Allows for query of the individual MasterSwitch pluses. \nThe number of entries is contained in the \nsPDUIdentMSPTableSize OID.')
sPDUIdentMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUIdentMSPIndex')).setDescription('The MasterSwitch pluses to query.')
sPDUIdentMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus entry.')
sPDUIdentNameMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUIdentHardwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The hardware version of the MasterSwitch plus. \nThis value is set at the factory.')
sPDUIdentFirmwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('An 6-character ID string identifying the MasterSwitch plus \nfirmware version. This value is set at the factory.')
sPDUIdentDateOfManufactureMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The date when the MasterSwitch plus was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ')
sPDUIdentModelNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A 17-character string identifying the model number of \nthe MasterSwitch plus. This value is set at the factory.')
sPDUIdentSerialNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A 17-character string identifying the serial number of \nthe MasterSwitch plus. This value is set at the factory.')
sPDUMasterControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2))
sPDUMasterControlMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch pluses controllable\nby this IP address.')
sPDUMasterControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2)).setDescription('Allows for control of the individual MasterSwitch pluses.\nThe number of entries is contained in the \nsPDUMasterControlMSPTableSize OID.')
sPDUMasterControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterControlMSPIndex')).setDescription('The MasterSwitch pluses to control.')
sPDUMasterControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus entry.')
sPDUMasterControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUMasterControlMSPCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,5,6,2,9,7,3,10,1,4,)).subtype(namedValues=namedval.NamedValues(('noCommandAllMSP', 1), ('restoreFactoryDefaultsMSP', 10), ('immediateAllOnMSP', 2), ('sequencedAllOnMSP', 3), ('immediateAllOffMSP', 4), ('gracefulAllRebootMSP', 5), ('immediateAllRebootMSP', 6), ('gracefulAllShutdownMSP', 7), ('overrideAllBatCapThreshMSP', 8), ('cancelAllPendingCommandsMSP', 9), ))).setMaxAccess('readwrite').setDescription("Setting this OID to immediateAllOnMSP (2) will turn all outlets\non immediately.\n\nSetting this OID to sequencedAllOnMSP (3) will turn all outlets\non as defined by each outlet's sPDUOutletConfigMSPPowerOnDelay OID value.\n\nSetting this OID to immediateAllOffMSP (4) will turn all outlets\noff immediately.\n\nSetting this OID to gracefulAllRebootMSP (5) will reboot all outlets\n(after the device running PowerChute confirms shutdown) as defined \nby each outlet's sPDUOutletConfigMSPRebootDuration OID time value.\n\nSetting this OID to immediateAllRebootMSP (6) will reboot all outlets\nimmediately.\n\nSetting this OID to gracefulAllShutdownMSP (7) will shutdown all outlets\n(after the device running PowerChute confirms shutdown) as defined \nby each outlet's sPDUOutletConfigMSPPowerOffDelay OID time value.  Each \noutlet will then turn on after the sum of its \nsPDUOutletConfigMSPRestartDelay and sPDUOutletConfigMSPPowerOnDelay OID \nvalues.\n\nSetting this OID to overrideAllBatCapThreshMSP (8) will cause the \noutlet to ignore the Battery Capacity Threshold and proceed turning on\nthe outlets as defined by each outlet's sPDUOutletConfigMSPPowerOnDelay \nOID value.\n             \nSetting this OID to cancelAllPendingCommandsMSP (9) will cause all pending\ncommands on the MasterSwitch plus to be canceled.\n\nSetting this OID to restoreFactoryDefaultsMSP (10) will cause the settings of\nthe MasterSwitch plus to be restored to the factory defaults.\n\nGetting this OID will return the noCommandAllMSP (1) value.")
sPDUMasterConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3))
sPDUMasterConfigMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch pluses configurable\nby this IP address.')
sPDUMasterConfigMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2)).setDescription('Allows for configuration of the individual MasterSwitch pluses.\nThe number of entries is contained in the \nsPDUMasterConfigMSPTableSize OID.')
sPDUMasterConfigMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterConfigMSPIndex')).setDescription('The MasterSwitch pluses to configure.')
sPDUMasterConfigMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus entry.')
sPDUMasterConfigMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the MasterSwitch plus. Maximum size is 23 characters.')
sPDUMasterConfigMSPPowerOnTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, between when\npower is provided to the MasterSwitch plus and \nwhen the MasterSwitch plus provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2hrs, 46 mins, 39 secs).\n0 indicates to apply power immediately.')
sPDUMasterConfigMSPManualButton = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('manualButtonDisabled', 1), ('manualButtonEnabled', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to manualButtonDisabled (1) will disable\nthe manual button on the MasterSwitch plus.\n\nSetting this OID to manualButtonEnabled (2) will enable\nthe manual button on the MasterSwitch plus.')
sPDUMasterStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4))
sPDUMasterStatusMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of MasterSwitch pluses at\nthis IP address.')
sPDUMasterStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2)).setDescription('Allows for gathering of status from the individual \nMasterSwitch pluses. The number of entries is contained \nin the sPDUMasterStatusMSPTableSize OID.')
sPDUMasterStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUMasterStatusMSPIndex')).setDescription('The MasterSwitch pluses to gather status from.')
sPDUMasterStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus entry.')
sPDUMasterStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUMasterStatusMSPOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the number of controllable\noutlets for this MasterSwitch plus.')
sPDUOutletControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5))
sPDUOutletControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1)).setDescription('Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.')
sPDUOutletControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletControlMSPIndex'), (0, 'PowerNet-MIB', 'sPDUOutletControlMSPOutletIndex')).setDescription('The outlets to control.')
sPDUOutletControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus.')
sPDUOutletControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletControlMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletControlMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.')
sPDUOutletControlMSPOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,7,8,5,4,2,3,6,)).subtype(namedValues=namedval.NamedValues(('immediateOnMSP', 1), ('delayedOnMSP', 2), ('immediateOffMSP', 3), ('gracefulRebootMSP', 4), ('immediateRebootMSP', 5), ('gracefulshutdownMSP', 6), ('overrideBatCapThreshMSP', 7), ('cancelPendingCommandMSP', 8), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnMSP (1) value will be returned.\nIf the outlet is off, the immediateOffMSP (3) value will be\nreturned.  \n\nSetting this variable to immediateOnMSP (1) will immediately turn the outlet on.\n\nSetting this variable to delayedOnMSP (2) will turn the outlet on\nafter the sPDUOutletConfigMSPPowerOnDelay OID time has elapsed. \n\nSetting this variable to immediateOffMSP (3) will immediately turn the outlet off. \n\nSetting this variable to gracefulRebootMSP (4) will cause the outlet to wait for\ndevice confirmation (if applicable) and then turn the outlet off after the\nsPDUOutletConfigMSPPowerOffDelay OID time has elapsed.  The outlet will then turn\non after the sPDUOutletConfigMSPRebootDuration OID time has elapsed. \n\nSetting this variable to immediateRebootMSP (5) will immediately reboot the outlet.\n\nSetting this variable to gracefulshutdownMSP (6) will cause the outlet to wait for\ndevice confirmation (if applicable) and then turn the outlet off after the\nsPDUOutletConfigMSPPowerOffDelay OID time has elapsed.  The outlet will then turn\non after the sum of the sPDUOutletConfigMSPRestartTime OID time and the \nsPDUOutletConfigMSPPowerOnDelay OID time has elapsed. \n\nSetting this variable to overrideBatCapThreshMSP (7) will cause the outlet to \nignore the Battery Capacity Threshold and proceed waiting on the\nsPDUOutletConfigMSPPowerOnDelay OID time before turning the outlet on.\n    \nSetting this variable to cancelPendingCommandMSP (8) will cause any\npending command to this outlet to be canceled.')
sPDUOutletConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6))
sPDUOutletConfigMSPall = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1))
sPDUOutletConfigMSPallTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.')
sPDUOutletConfigMSPallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigMSPallIndex'), (0, 'PowerNet-MIB', 'sPDUOutletConfigMSPallOutletIndex')).setDescription('The outlets to configure.')
sPDUOutletConfigMSPallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus.')
sPDUOutletConfigMSPallName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletConfigMSPallOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletConfigMSPallOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet. Maximum size is 23 characters.')
sPDUOutletConfigMSPallOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('modeGracefulShutdown', 1), ('modeAnnunciator', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to modeGracefulShutdown (1) will put this\noutlet into the Graceful Shutdown control mode.\n\nSetting this OID to modeAnnunciator (2) will put this outlet\ninto the Annunciator control mode.')
sPDUOutletConfigMSPgs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2))
sPDUOutletConfigMSPgsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.')
sPDUOutletConfigMSPgsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigMSPgsIndex'), (0, 'PowerNet-MIB', 'sPDUOutletConfigMSPgsOutletIndex')).setDescription('The outlets to configure.')
sPDUOutletConfigMSPgsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus.')
sPDUOutletConfigMSPgsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletConfigMSPgsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletConfigMSPgsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.')
sPDUOutletConfigMSPgsOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('modeGracefulShutdown', 1), ('modeAnnunciator', 2), ))).setMaxAccess('readonly').setDescription('The Control Mode of the outlet.\nThis OID is provided for informational purposes only.')
sPDUOutletConfigMSPgsDeviceConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('deviceConfirmNo', 1), ('deviceConfirmYes', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to deviceConfirmNo (1) cause the outlet to\nNOT wait for device confirmation while performing graceful\noperations.\n\nSetting this OID to deviceConfirmYes (2) cause the outlet to\nwait for device confirmation while performing graceful\noperations.')
sPDUOutletConfigMSPgsLowBattWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in 6 second intervals, between \nwhen the UPS goes on battery and the power down sequence for\nthe outlet is initiated.     \n\nAllowed values are:\n\n-2 - Never initiate the power down sequence on low battery warning.\n-1 - Initiate power down sequence based on remaining runtime.\n1 - 9999 six second intervals (6 secs - 16hrs, 39 mins, 54 secs).\n0 indicates to immediately initiate power down sequence on low \n battery warning.')
sPDUOutletConfigMSPgsLowBattMult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 7))).setMaxAccess('readwrite').setDescription(' Only applicable if sPDUOutletConfigMSPgsLowBattWarning OID is \nset to -1 (On Runtime Remaining).\n \nAllows you to set the value to stagger the shutdown sequence of the outlets.\n1 provides the longest delay (the outlet to shutoff first), and 7 would\nprovide the shortest delay (the outlet to shut off last).\n \nAllowed values are:\n1 - 7.')
sPDUOutletConfigMSPgsRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in 6 minute intervals, between \nwhen the outlet is turned off and the outlet is turned back on\nwhen performing a Graceful Shutdown.    \n\nAllowed values are:\n\n-1 - Never turn outlet back on after a Graceful shutdown.\n0 - 9999 six minute intervals (0 - 999hrs, 54 mins).')
sPDUOutletConfigMSPgsPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, between the UPS entering\nnormal (on-line) state and the outlet being powered on.\n\nAllowed values are:\n\n-1 - Remain Off when the UPS enters the on-line state.\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).')
sPDUOutletConfigMSPgsPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, between when the server\nshuts down and the outlet is powered off.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).')
sPDUOutletConfigMSPgsBattCapThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription(' The minimum battery capacity, as a percent (0-100%), required\nof the UPS before an outlet will be allowed to power on.\n\nAllowed values are:\n\n0 - 100 percent.')
sPDUOutletConfigMSPgsRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 9999))).setMaxAccess('readwrite').setDescription(' The amount of delay, in seconds, from outlet off until\noutlet on during a reboot.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).')
sPDUOutletConfigMSPannun = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3))
sPDUOutletConfigMSPannunTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.')
sPDUOutletConfigMSPannunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigMSPannunIndex'), (0, 'PowerNet-MIB', 'sPDUOutletConfigMSPannunOutletIndex')).setDescription('The outlets to configure.')
sPDUOutletConfigMSPannunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus.')
sPDUOutletConfigMSPannunName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletConfigMSPannunOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletConfigMSPannunOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.')
sPDUOutletConfigMSPannunOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('modeGracefulShutdown', 1), ('modeAnnunciator', 2), ))).setMaxAccess('readonly').setDescription('The Control Mode of the outlet.\nThis OID is provided for informational purposes only.')
sPDUOutletConfigMSPannunInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('initialStateOff', 1), ('initialStateOn', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to initialStateOff (1) causes the outlet \nto default to off when in the non-alarmed condition.\n\nSetting this OID to initialStateOn (2) causes the outlet \nto default to on when in the non-alarmed condition.')
sPDUOutletConfigMSPannunAlarmActionDly = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 9999))).setMaxAccess('readwrite').setDescription(' The amount of time, in seconds, that an enabled Measure-UPS\nalarm must be asserted before an alarm condition is recognized.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).')
sPDUOutletConfigMSPmups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4))
sPDUOutletConfigMSPmupsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.')
sPDUOutletConfigMSPmupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletConfigMSPmupsIndex'), (0, 'PowerNet-MIB', 'sPDUOutletConfigMSPmupsOutletIndex')).setDescription('The outlets to configure.')
sPDUOutletConfigMSPmupsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch plus.')
sPDUOutletConfigMSPmupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletConfigMSPmupsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletConfigMSPmupsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.')
sPDUOutletConfigMSPmupsZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nZone 1 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 1 alarm for this outlet.')
sPDUOutletConfigMSPmupsZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nZone 2 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 2 alarm for this outlet.')
sPDUOutletConfigMSPmupsZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nZone 3 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 3 alarm for this outlet.')
sPDUOutletConfigMSPmupsZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nZone 4 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 4 alarm for this outlet.')
sPDUOutletConfigMSPmupsP1LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 1 low humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 low humidity alarm for this outlet.')
sPDUOutletConfigMSPmupsP1HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 1 high humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 high humidity alarm for this outlet.')
sPDUOutletConfigMSPmupsP1LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 1 low temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 low temperature alarm for this outlet.')
sPDUOutletConfigMSPmupsP1HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 1 high temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 high temperature alarm for this outlet.')
sPDUOutletConfigMSPmupsP2LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 2 low humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 low humidity alarm for this outlet.')
sPDUOutletConfigMSPmupsP2HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 2 high humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 high humidity alarm for this outlet.')
sPDUOutletConfigMSPmupsP2LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 2 low temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 low temperature alarm for this outlet.')
sPDUOutletConfigMSPmupsP2HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disableAlarm', 1), ('enableAlarm', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to disableAlarm (1) disables the\nProbe 2 high temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 high temperature alarm for this outlet.')
sPDUOutletStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7))
sPDUOutletStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1)).setDescription('Allows for getting of status of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.')
sPDUOutletStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'sPDUOutletStatusMSPIndex'), (0, 'PowerNet-MIB', 'sPDUOutletStatusMSPOutletIndex')).setDescription('The outlets to gather status from.')
sPDUOutletStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the MasterSwitch MSP.')
sPDUOutletStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.')
sPDUOutletStatusMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
sPDUOutletStatusMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.')
sPDUOutletStatusMSPOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('outletStatusMSPOn', 1), ('outletStatusMSPOff', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusMSPOn (1) value will be returned.\nIf the outlet is off, the outletStatusMSPOff (2) value will be\nreturned. ')
sPDUOutletStatusMSPCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('outletStatusMSPCommandPending', 1), ('outletStatusMSPNoCommandPending', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusMSPCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusMSPNoCommandPending (2)\nwill be returned.')
sPDUOutletStatusMSPOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('modeGracefulShutdown', 1), ('modeAnnunciator', 2), ))).setMaxAccess('readonly').setDescription('The Control Mode of the outlet.\nThis OID is provided for informational purposes only.')
dcDM3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7))
dm3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1))
dm3IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1))
dm3IdentSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC description records.')
dm3IdentSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2)).setDescription('Allows for accessing description records of the powerplant. The number of\nentries is contained in the dm3IdentSysDescriptionTableSize OID.')
dm3IdentSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3IdentSysDescriptionIndex')).setDescription('The powerplant description record to reference.')
dm3IdentSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant description record.')
dm3IdentSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A 16 character text field describing the DC power plant device.\nThis field can be configured from the dm3ConfigSysDescriptionText OID.')
dm3IdentSysModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Model type of the DC power plant.')
dm3IdentSysCntrlRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Integer representation of the hardware revision of the Master Controller board.')
dm3IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Integer representation of the power plant Master Controller firmware revision.')
dm3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2))
dm3ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1))
dm3ConfigSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC description records.')
dm3ConfigSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2)).setDescription('Allows for accessing description records of the powerplant. The number of\nentries is contained in the dm3ConfigSysDescriptionTableSize OID.')
dm3ConfigSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigSysDescriptionIndex')).setDescription('The powerplant description record to reference.')
dm3ConfigSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant description record.')
dm3ConfigSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('16 character text field describing the DC power plant device.')
dm3ConfigSysHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription("Ambient high temperature threshold.  Temperature sensor located on Master\nController board.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigSysHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the System High Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigSysLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription("Ambient low temperature threshold.  Temperature sensor located on Master\nController board.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigSysLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the System Low Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigSysHardwareTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the System Hardware Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('accessEnabled', 1), ('accessDisabled', 2), ))).setMaxAccess('readwrite').setDescription('\nThis OID is used to disable remote write access to the power plant.\nSetting this OID to accessEnabled (1) will have no affect.\nSetting this OID to accessDisabled (2) will disable the ability to \nremotely configure the DC powerplant.\n\nOnce remote access is disabled, it can only be restored from the front\npanel of the DC power plant.')
dm3ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2))
dm3ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant LVDs controllable\nby this IP address.')
dm3ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2)).setDescription('Allows for accessing settings of the LVDs. The number of\nentries is contained in the dm3ConfigLVDTableSize OID.')
dm3ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigLVDIndex')).setDescription('The LVD to configure.')
dm3ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant LVD.')
dm3ConfigLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the LVD. The maximum value is 16 characters.')
dm3ConfigLVDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabledYes', 1), ('enabledNo', 2), ))).setMaxAccess('readwrite').setDescription('This OID is used to control and indicate if the LVD is on or off.\nSetting this OID to enabledYes (1) will enable (turn on) the LVD.\nSetting this OID to enabledNo (2) will disable (turn off) the LVD.')
dm3ConfigLVDTripThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('LVD Trip threshold.  If voltage exceeds threshold, the LVD will trip.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigLVDResetThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('LVD Reset threshold.  If voltage exceeds threshold, the LVD will reset.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigLVDOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the LVD Open Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigLVDHWAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the LVD Hardware Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3))
dm3ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 1), Integer32()).setMaxAccess('readwrite').setDescription('Battery Float Voltage.  This setting controls the power plant voltage.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 2), Integer32()).setMaxAccess('readwrite').setDescription('Battery Maximum Recharge Rate.  This setting controls the battery max\nrecharge rate.  The value is based on C/20 for 240 AHr battery string.\n\nValues are represented in thousandths of Amps (mA).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattDischargeThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 3), Integer32()).setMaxAccess('readwrite').setDescription('Battery discharge threshold.  If battery output current exceeds threshold\na battery discharge alarm will occur.\n\nValues are represented in thousandths of Amps (mA).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattDischargeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery Discharge Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 5), Integer32()).setMaxAccess('readwrite').setDescription('Battery high voltage threshold.  If system battery voltage exceeds threshold\na battery high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 7), Integer32()).setMaxAccess('readwrite').setDescription('Battery low voltage threshold.  If system battery voltage is under threshold\na battery low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 9), Integer32()).setMaxAccess('readwrite').setDescription("Battery high temperature threshold.  If system battery temperature exceeds threshold\na battery high temperature alarm will occur.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery High Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 11), Integer32()).setMaxAccess('readwrite').setDescription("Battery low temperature threshold.  If system battery temperature is under threshold\na battery low temperature alarm will occur.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery Low Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 13), Integer32()).setMaxAccess('readwrite').setDescription('Battery Amp-Hour Size.  Units are thousandths of Amp hours (mAHr).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigCompMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('tempcompOn', 1), ('tempcompOff', 2), ))).setMaxAccess('readwrite').setDescription('This OID is used to configure and get the state of the battery\ntemperature compensation.\n\nSetting this OID to tempcompOn (1) will enable/turn on the battery temperature compensation.\nSetting this OID to tempcompOff (2) will disable/turn off the battery temperature compensation.')
dm3ConfigCompTempCoeff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 15), Integer32()).setMaxAccess('readwrite').setDescription('Compensation Temperature Coefficient. (uV/degC/cell).\n\nUnits are presented in microvolts.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigHighKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 16), Integer32()).setMaxAccess('readwrite').setDescription('High Knee for temperature compensation:  Compensation temperature coefficient \nbecomes 0mV/degC/cell.\n\nValues are represented in thousandths of degrees Celsius.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigLowKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 17), Integer32()).setMaxAccess('readwrite').setDescription('Low Knee for temperature compensation:  Compensation temperature coefficient \nbecomes 0mV/degC/cell.\n\nValues are represented in thousandths of degrees Celsius.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigBattHwCurrentAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery Current Hardware Alarm (indicating current is outside realistic\nlimits, or a possible measurement fault;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigBattHwTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Battery Temperature Hardware Alarm (indicating temperature is outside realistic\nlimits, or a possible measurement fault;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4))
dm3ConfigRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1))
dm3ConfigRectThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1))
dm3ConfigRectHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('Rectifier high voltage threshold.  If rectifier voltage exceeds threshold\na rectifier high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigRectLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('Rectifier low voltage threshold.  If rectifier voltage is under threshold\na rectifier low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigRectFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Rectifier Fail Safe point.  This OID represents the value sent to rectifier controllers\nto use in the event of communications loss with the Master Controller or Master Controller\nboard failure.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigRectFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('Rectifier Communication Fail timeout.  This OID represents the time interval in which there is no \ncommunication between the rectifier and the master controller at which the rectifier will reset \nall its values to default.\n\nValues are represented in hundredths of Seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigRectAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2))
dm3ConfigRectHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRectLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRectConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('This alarm is activated when a new rectifier is detected;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRect1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('This setting indicates the action if ONE rectifier of a N+1 system has failed;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRect2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('This setting indicates the action if TWO OR MORE rectifiers of a N+1 system have failed;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRectDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Controller Diagnostics Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.')
dm3ConfigRectImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Imbalance Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigRectCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Current Limit Alarm (indicating rectifier in the Current Limit state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.')
dm3ConfigRectStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Standby Alarm (indicating output DC has been turned off);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.')
dm3ConfigRectFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Fan Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.')
dm3ConfigRectFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.')
dm3ConfigRectHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Rectifier Hardware Voltage Alarm (indicating voltage outside realistic limits,\nor a possible measurement fault);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2))
dm3ConfigConvThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1))
dm3ConfigConvHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('Converter high voltage threshold.  If converter voltage exceeds threshold\na converter high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('Converter low voltage threshold.  If converter voltage exceeds threshold\na converter low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Converter Fail Safe point.  This OID represents the value sent to converter controllers\nto use in the event of communications loss with the Master Controller or Master Controller\nboard failure.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('Converter Set point.  This OID represents the initial set point used in the\nvoltage control loop.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvFailMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('Converter Fail Maximum limit.  This OID represents the value sent to the converter\ncontrollers to define the maximum set point allowed.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvFailMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('Converter Fail Minimum limit.  This OID represents the value sent to the converter\ncontrollers to define the minimum set point allowed.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('Converter Communication Fail timeout.  This OID represents the time interval in which there is no \ncommunication between the converter and the master controller at which the converter will reset \nall its values to default.\n\nValues are represented in hundredths of Seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigConvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2))
dm3ConfigConvHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConvLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Configuration Alarm (indicating a new converter has been detected);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConv1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter 1ofN Alarm (indicating action if ONE converter of a N+1 system has failed);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConv2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter 2ofN Alarm (indicating action if TWO OR MORE converters of a N+1 system has failed);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigConvDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Diagnostics Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Imbalance Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Current Limit Alarm (indicating the converter is in the Current Limit state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Standby Alarm (indicating the converter is in the Standby state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Fan Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigConvHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,6,5,8,7,1,9,10,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmNofN', 10), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('For the Converter Voltage Alarm (indicating voltage outside realistic limits, or a\npossible measurement fault);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.')
dm3ConfigRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5))
dm3ConfigOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1))
dm3ConfigOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant Output Relays controllable\nby this IP address.')
dm3ConfigOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2)).setDescription('Allows for accessing settings of the Output Relays. The number of\nentries is contained in the dm3ConfigOutRlyTableSize OID.')
dm3ConfigOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigOutRlyIndex')).setDescription('The output relay to configure.')
dm3ConfigOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant output relay.')
dm3ConfigOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the output relay. The maximum value is 16 characters.')
dm3ConfigOutRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Output Relay Delay.  This OID represents the time delay from the initiation of an\noutput relay action to when the output relay action does occur.  If the alarm condition\ndisappears before the end of the delay, no action will occur.  Delay for Major \nand Minor alarms is not configurable and is always set to 0.\n\nValues are represented in hundredths of seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigOutRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('Output Relay Alarm.  This setting indicates what action to perform in the event of\nan output relay alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\n\nRelay Alarm for Major and Minor alarms is not configurable and is always set to \nalarmMajor and alarmMinor respectively.')
dm3ConfigInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2))
dm3ConfigInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant Input Relays controllable\nby this IP address.')
dm3ConfigInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2)).setDescription('Allows for accessing settings of the Input Relays. The number of\nentries is contained in the dm3ConfigInRlyTableSize OID.')
dm3ConfigInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigInRlyIndex')).setDescription('The input relay to configure.')
dm3ConfigInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant input relay.')
dm3ConfigInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the input relay. The maximum value is 16 characters.')
dm3ConfigInRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Input Relay Delay.  This OID represents the time delay from the initiation of an\ninput relay action to when the input relay action does occur.   If the alarm condition\ndisappears before the end of the delay, no action will occur.\n\nValues are represented in hundredths of seconds.\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.')
dm3ConfigInRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('Input Relay Alarm.  This setting indicates what action to perform in the event of\nan input relay alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6))
dm3ConfigBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1))
dm3ConfigBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant circuit breakers controllable\nby this IP address.')
dm3ConfigBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2)).setDescription('Allows for accessing settings of the circuit breakers. The number of\nentries is contained in the dm3ConfigBreakersTableSize OID.')
dm3ConfigBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigBreakersIndex')).setDescription('The circuit breaker to configure.')
dm3ConfigBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant circuit breaker.')
dm3ConfigBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the circuit breaker. The maximum value is 16 characters.')
dm3ConfigBreakersAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('Circuit Breaker Alarm.  This setting indicates what action to perform in the event of\na circuit breaker alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3ConfigFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2))
dm3ConfigFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant Fuses controllable\nby this IP address.')
dm3ConfigFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2)).setDescription('Allows for accessing settings of the Fuses. The number of\nentries is contained in the dm3ConfigFusesTableSize OID.')
dm3ConfigFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3ConfigFusesIndex')).setDescription('The fuse to configure.')
dm3ConfigFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant fuse.')
dm3ConfigFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the fuse. The maximum value is 16 characters.')
dm3ConfigFusesAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=namedval.NamedValues(('alarmIgnore', 1), ('alarmRelay1', 2), ('alarmRelay2', 3), ('alarmRelay3', 4), ('alarmRelay4', 5), ('alarmRelay5', 6), ('alarmRelay6', 7), ('alarmMinor', 8), ('alarmMajor', 9), ))).setMaxAccess('readwrite').setDescription('Fuses Alarm.  This setting indicates what action to perform in the event of\na Fuse alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.')
dm3Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3))
dm3StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1))
dm3StatusSystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription("System temperature based on sensor on Master Controller PCB.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dm3StatusSystemStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Time stamp at DC powerplant initialization.\nThe time is represented as MMM,DD,YYYY,HH:MM:SS.')
dm3StatusSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('accessEnabled', 1), ('accessDisabled', 2), ))).setMaxAccess('readonly').setDescription('Remote Access indicator\nThis setting indicates if configuration (write) access to the powerplant is enabled or \ndisabled at the powerplant level.\nThis value will be accessEnabled (1) if remote configuration is enabled, and \naccessDisabled (2) if remote configuration is disabled.')
dm3StatusSysSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('This variable shows the current active security access level of controller.  This\ncan only be changed directly from the front panel.')
dm3StatusSysTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('saneYES', 1), ('saneNO', 2), ))).setMaxAccess('readonly').setDescription('System temperature sanity indicator.  Indicates if the system temperature is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates temperature is reasonable, a value of saneNo (2) indicates it is not.')
dm3StatusSysAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,2,)).subtype(namedValues=namedval.NamedValues(('alarmMinor', 1), ('alarmMajor', 2), ('alarmBoth', 3), ('alarmNone', 4), ))).setMaxAccess('readonly').setDescription('System Alarm State.  Reflects the alarm status of the overall DC system.\nIf a minor alarm is present, the value will be alarmMinor(1).\nIf a major alarm is present, the value will be alarmMajor(2).\nIf both minor and a major alarm is present, the value will be alarmBoth(3).\nIf no alarm is present, the value will be alarmNone(4).')
dm3StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nin the DC system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
dm3StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2))
dm3StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant alarms viewable\nby this IP address.')
dm3StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2)).setDescription('Allows for accessing system alarms. The number of\nentries is contained in the dm3StatusAlarmsTableSize OID.')
dm3StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusAlarmsIndex')).setDescription('The alarm to display.')
dm3StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the system alarm.')
dm3StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The 16 character text describing the active alarm condition.')
dm3StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3))
dm3StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Battery Current:  This OID shows the battery current in thousandths of Amps (mA).')
dm3StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 2), Integer32()).setMaxAccess('readonly').setDescription("Battery Temperature:\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dm3StatusBattCurrentSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('saneYES', 1), ('saneNO', 2), ))).setMaxAccess('readonly').setDescription('Battery current sanity indicator.  Indicates if the battery current is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates current is reasonable, a value of saneNo (2) indicates it is not.')
dm3StatusBattTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('saneYES', 1), ('saneNO', 2), ))).setMaxAccess('readonly').setDescription('Battery temperature sanity indicator.  Indicates if the battery temperature is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates temperature is reasonable, a value of saneNo (2) indicates it is not.')
dm3StatusOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4))
dm3StatusOEMrectOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier offset value in thousandths of Volts (mV).')
dm3StatusOEMrectGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier gain value in thousandths of Volts (mV/V).')
dm3StatusOEMconvOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter offset value in thousandths of Volts (mV).')
dm3StatusOEMconvGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter gain value in thousandths of Volts (mV/V).')
dm3StatusOEMshuntOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the shunt offset value in thousandths of Amps (mA).')
dm3StatusOEMshuntGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 6), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the shunt gain value in thousandths of Amps (mA/A).')
dm3StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5))
dm3StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant LVDs viewable\nby this IP address.')
dm3StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2)).setDescription('Allows for accessing settings of the LVDs. The number of\nentries is contained in the dm3StatusLVDTableSize OID.')
dm3StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusLVDIndex')).setDescription('The LVD to gather status from.')
dm3StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant LVD.')
dm3StatusLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the LVD. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigLVDName OID.\nThis OID is provided for informational purposes only.')
dm3StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('statusClosed', 1), ('statusOpened', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.')
dm3StatusLVDHwFault = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusFault', 1), ('statusNofault', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusFault (1) if the LVD is faulted.\nstatusNofault (2) will be returned if the LVD is not faulted.')
dm3StatusPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6))
dm3StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1))
dm3StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant rectifiers viewable\nby this IP address.')
dm3StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2)).setDescription('Allows for accessing settings of the rectifiers. The number of\nentries is contained in the dm3StatusRectTableSize OID.')
dm3StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusRectIndex')).setDescription('The rectifier to gather status from.')
dm3StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant rectifier.')
dm3StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier ID.  This enumerates the number of the rectifier within \na group of rectifiers.')
dm3StatusRectDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('This OID shows the 16-character rectifier description.')
dm3StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier current in thousandths of Amps (mA).')
dm3StatusRectCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier is in the Current Limit state.\nstatusFalse (2) will be returned if the rectifier is not in the Current Limit state.')
dm3StatusRectStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier is in the Standby state.\nstatusFalse (2) will be returned if the rectifier is not in the Standby state.')
dm3StatusRectFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier Fan has failed.\nstatusFalse (2) will be returned if the rectifier Fan has not failed.')
dm3StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier has failed.\nstatusFalse (2) will be returned if the rectifier has not failed.')
dm3StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier device type.')
dm3StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier physical address (the address on the bus).')
dm3StatusRectCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier is present after\npower-up or set-configuration.\n statusFalse (2) will be returned if the rectifier is not configured.')
dm3StatusRectPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier device PCB serial number.')
dm3StatusRectFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier device firmware revision.')
dm3StatusRectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier is present.\nstatusFalse (2) will be returned if the rectifier is not present.')
dm3StatusRectDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier diagnostics have passed.\nstatusFalse (2) will be returned if the rectifier diagnostics have not passed.')
dm3StatusRectState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier device state as defined by the device status register.')
dm3StatusSysRectVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('saneYES', 1), ('saneNO', 2), ))).setMaxAccess('readonly').setDescription('Rectifier voltage sanity indicator.  Indicates if the rectifier voltage is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates voltage is reasonable, a value of saneNo (2) indicates it is not.')
dm3StatusSysRectAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier is available.\nstatusFalse (2) will be returned if the rectifier is not available.')
dm3StatusSysRectType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the type of rectifier the system has.  There can only be a single type of\nrectifier in the power plant')
dm3StatusSysRectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the system level rectifier voltage in thousandths of Volts (mV).')
dm3StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the system level rectifier current in thousandths of Amps (mA).')
dm3StatusConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2))
dm3StatusConvTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant converters viewable\nby this IP address.')
dm3StatusConvTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2)).setDescription('Allows for viewing status of the converters. The number of\nentries is contained in the dm3StatusConvTableSize OID.')
dm3StatusConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusConvIndex')).setDescription('The converter to gather status from.')
dm3StatusConvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant converter.')
dm3StatusConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter ID.  This enumerates the number of the converter within \na group of converters.')
dm3StatusConvDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('This OID shows the 16 character converter description.')
dm3StatusConvCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter current in thousandths of Amps (mA).')
dm3StatusConvCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter is in the Current Limit state.\nstatusFalse (2) will be returned if the converter is not in the Current Limit state.')
dm3StatusConvStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter is in the Standby state.\nstatusFalse (2) will be returned if the converter is not in the Standby state.')
dm3StatusConvFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter Fan has failed.\nstatusFalse (2) will be returned if the converter Fan has not failed.')
dm3StatusConvFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter has failed.\nstatusFalse (2) will be returned if the converter has not failed.')
dm3StatusConvDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter device type.')
dm3StatusConvPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter physical address (the address on the bus).')
dm3StatusConvCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter is present after\npower-up or set-configuration.\n statusFalse (2) will be returned if the converter is not configured.')
dm3StatusConvPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter device PCB serial number.')
dm3StatusConvFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter device firmware version.')
dm3StatusConvPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter is present.\nstatusFalse (2) will be returned if the converter is not present.')
dm3StatusConvDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter diagnostics have passed.\nstatusFalse (2) will be returned if the converter diagnostics have not passed.')
dm3StatusConvState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter state as defined by the device status register.')
dm3StatusSysConvVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('saneYES', 1), ('saneNO', 2), ))).setMaxAccess('readonly').setDescription('Converter voltage sanity indicator.  Indicates if the converter voltage is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates voltage is reasonable, a value of saneNo (2) indicates it is not.')
dm3StatusSysConvAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the converter is available.\nstatusFalse (2) will be returned if the converter is not available.')
dm3StatusSysConvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the converter type.')
dm3StatusSysConvVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the system level converter voltage in thousandths of volts (mV).')
dm3StatusSysConvCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the system level converter current in thousandths of Amps (mA).')
dm3StatusRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7))
dm3StatusOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1))
dm3StatusOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant output relays viewable\nby this IP address.')
dm3StatusOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2)).setDescription('Allows for viewing status of the output relays. The number of\nentries is contained in the dm3StatusOutRlyTableSize OID.')
dm3StatusOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusOutRlyIndex')).setDescription('The output relay to gather status from.')
dm3StatusOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant output relay.')
dm3StatusOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the output relay. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigOutRlyName OID.\nThis OID is provided for informational purposes only.')
dm3StatusOutRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusOn', 1), ('statusOff', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusOn (1) if the output relay is enabled/on.\nstatusOff (2) will be returned if the output relay is disabled/off.')
dm3StatusInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2))
dm3StatusInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant input relays viewable\nby this IP address.')
dm3StatusInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2)).setDescription('Allows for viewing status of the input relays. The number of\nentries is contained in the dm3StatusInRlyTableSize OID.')
dm3StatusInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusInRlyIndex')).setDescription('The input relays to gather status from.')
dm3StatusInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant input relay.')
dm3StatusInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the input relay. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigInRlyName OID.\nThis OID is provided for informational purposes only.')
dm3StatusInRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusOn', 1), ('statusOff', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusOn (1) if the input relay is enabled/on.\nstatusOff (2) will be returned if the input relay is disabled/off.')
dm3StatusDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8))
dm3StatusBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1))
dm3StatusBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant circuit breakers viewable\nby this IP address.')
dm3StatusBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2)).setDescription('Allows for viewing status of the circuit breakers. The number of\nentries is contained in the dm3StatusBreakersTableSize OID.')
dm3StatusBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusBreakersIndex')).setDescription('The circuit breaker to gather status from.')
dm3StatusBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant circuit breaker.')
dm3StatusBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the circuit breaker. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigBreakersName OID.\nThis OID is provided for informational purposes only.')
dm3StatusBreakersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('statusClosed', 1), ('statusOpen', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusClosed (1) if the circuit breaker is closed.\nstatusOpen (2) will be returned if the circuit breaker is open.')
dm3StatusFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2))
dm3StatusFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant fuses controllable\nby this IP address.')
dm3StatusFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2)).setDescription('Allows for viewing status of the fuses. The number of\nentries is contained in the dm3StatusFusesTableSize OID.')
dm3StatusFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dm3StatusFusesIndex')).setDescription('The fuse to gather status from.')
dm3StatusFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant fuse.')
dm3StatusFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the fuse. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigFuseName OID.\nThis OID is provided for informational purposes only.')
dm3StatusFusesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('statusClosed', 1), ('statusOpen', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusClosed (1) if the fuse is closed.\nstatusOpen (2) will be returned if the fuse is open.')
automaticTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1))
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('The hardware version of the Automatic Transfer Switch. \nThis value is set at the factory.')
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A string identifying the Automatic Transfer Switch \nfirmware version.')
atsIdentFirmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The date of release for this Automatic Transfer Switch \nfirmware version. ')
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The date when the Automatic Transfer Switch was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ')
atsIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A string identifying the model number of the Automatic Transfer Switch. \nThis value is set at the factory.')
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A string identifying the serial number of \nthe Automatic Transfer Switch. This value is set at the factory.')
atsIdentNominalLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('RMS Utility Voltage measured in V.')
atsIdentNominalLineFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Utility Power Frequency measured in Hz.')
atsCalibration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2))
atsCalibrationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1))
atsCalibrationNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of inputs to this device.')
atsCalibrationNumInputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of phases per input for this device.')
atsCalibrationInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3)).setDescription('The number of phases per input line to this device.')
atsCalibrationInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsCalibrationInputTableIndex'), (0, 'PowerNet-MIB', 'atsCalibrationInputPhaseTableIndex')).setDescription('An entry containing calibration information applicable to a\nparticular input phase.')
atsCalibrationInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The input identifier.')
atsCalibrationInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The input phase identifier.')
atsLineVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The Line Voltage Calibration factor.\nThis value is set at the factory.')
atsCalibrationPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2))
atsCalibrationPowerSupplyVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of power supply voltages supported by this device.\nThis variable indicates the number of rows in the\natsCalibrationPowerSupplyTable. There is one entry per\nsupported voltage: 24V, 12V and 5V')
atsCalibrationPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2)).setDescription('A list of Power Supply table entries.')
atsCalibrationPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsCalibrationPowerSupplyVoltageTableIndex')).setDescription('An entry containing information applicable to a\nparticular Power Supply Voltage.')
atsCalibrationPowerSupplyVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The power supply voltage identifier.\nThree power supply voltages are supported by the ATS:\n 24V , 12V and 5V .\nThe value of this index indicates the power supply voltage:\n 1 = 24V\n 2 = 12V\n 3 = 5V')
atsCalibrationPowerSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('powerSupply24V', 1), ('powerSupply12V', 2), ('powerSupply', 3), ))).setMaxAccess('readonly').setDescription('This value describes the power supply voltage.')
atsPowerSupplyVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The Line Voltage Calibration factor.\nThis value is set at the factory.')
atsCalibrationOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3))
atsCalibrationNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of output lines from this device.\nThis variable indicates the number of rows in the\natsCalibrationOutputTable.')
atsCalibrationNumOutputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of output phases utilized in this\ndevice.')
atsCalibrationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3)).setDescription('A list of output table entries.')
atsCalibrationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsCalibrationOutputTableIndex'), (0, 'PowerNet-MIB', 'atsCalibrationOutputPhasesTableIndex')).setDescription('An entry containing information applicable to a\nparticular output.')
atsCalibrationOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The output identifier.')
atsCalibrationOutputPhasesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ('neutral', 4), ))).setMaxAccess('readonly').setDescription('Description of each calibration factor for each \noutput phase utilized in this device and one for neutral. ')
atsOutputCurrentCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The output current calibration factor measured in Amps.')
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3))
atsControlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Setting this variable will cause the Automatic Transfer Switch to \nperform a power-on reset.')
atsControlClearAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('clear', 2), ))).setMaxAccess('readwrite').setDescription('Setting this variable will clear all alarms in the Automatic Transfer Switch.')
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4))
atsConfigProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 1), DisplayString()).setMaxAccess('readwrite').setDescription('A configurable character string.')
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('sourceA', 1), ('sourceB', 2), ('none', 3), ))).setMaxAccess('readwrite').setDescription('This variable returns the preferred source of power when both sources are OK.')
atsConfigFrontPanelLockout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disableFrontPanel', 1), ('enableFrontPanel', 2), ))).setMaxAccess('readwrite').setDescription('Setting this variable to disableFrontPanel(1) will disallow source \npreference configuration of the Automatic Transfer Switch via the\nFront Panel. Once this value is set, it can only be re-enabled through\nthe serial interface of the ATS.\nWhen this variable is set to enableFrontPanel(2), source preference \nconfiguration of the Automatic Transfer Switch via the Front Panel\nis allowed.')
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('high', 1), ('low', 2), ))).setMaxAccess('readwrite').setDescription('This variable defines the sensitivity to changes in voltage: \nhigh(1) for best protection, low(2) for frequent small line \nvoltage changes.')
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('wide', 1), ('medium', 2), ('narrow', 3), ))).setMaxAccess('readwrite').setDescription('This variable defines the range of acceptable voltage from a power source.\nIf the voltage measured from the selected input source is not within this\nrange, the Automatic Transfer Switch will switch over (transfer) to the \nalternate power source.')
atsConfigCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('The threshold (in Amps) at which an Over Current Alarm will be generated.')
atsConfigResetValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Resets the ATS configuration to its default values.')
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5))
atsStatusDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1))
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('atsNeverDiscovered', 1), ('atsCommEstablished', 2), ('atsCommLost', 3), ))).setMaxAccess('readonly').setDescription('This variable returns the current communication status\nof the Automatic Transfer Switch. ')
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('sourceA', 1), ('sourceB', 2), ))).setMaxAccess('readonly').setDescription('This variable returns the current source of power. ')
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('atsRedundancyLost', 1), ('atsFullyRedundant', 2), ))).setMaxAccess('readonly').setDescription('This variable returns the current redundancy state of the ATS.\natsRedundancyLost(1) indicates that the ATS is unable to\nswitch over to the alternate power source if the current source fails.\natsFullyRedundant(2) indicates that the ATS will switch over to \nthe alternate power source if the current source fails.')
atsStatusOverCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('atsOverCurrent', 1), ('atsCurrentOK', 2), ))).setMaxAccess('readonly').setDescription('This variable returns the output current state of the ATS.\natsOverCurrent(1) indicates that the ATS has exceeded the output \ncurrent threshold and will not allow a switch over to the alternate power\nsource if the current source fails.\natsCurrentOK(2) indicates that the output current is below the \noutput current threshold.')
atsStatus5VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('atsPowerSupplyFailure', 1), ('atsPowerSupplyOK', 2), ))).setMaxAccess('readonly').setDescription('This variable returns the present state of the ATS 5-volt power supply.\natsPowerSupplyFailure(1) indicates the 5-volt power supply has failed\nand that the ATS serial port Configuration Menu is not accessible .\natsPowerSupplyOK(2) indicates that the ATS 5-volt power supply\nis operating within tolerance.')
atsStatus24VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('atsPowerSupplyFailure', 1), ('atsPowerSupplyOK', 2), ))).setMaxAccess('readonly').setDescription('This variable returns the present state of the ATS 24-volt power supply.\natsPowerSupplyFailure(1) indicates the 24-volt power supply has failed\nand the ATS is unable to switch over to the alternate power source if \nthe current source fails.\natsPowerSupplyOK(2) indicates that the ATS 24-volt power supply\nis operating within tolerance.')
atsStatusResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2))
atsStatusResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Resets the maximum and minimum ATS values:\natsInputMaxVoltage,       atsInputMinVoltage,\natsInputMaxCurrent,       atsInputMinCurrent,\natsInputMaxPower,         atsInputMinPower,\natsOutputMaxCurrent,      atsOutputMinCurrent,\natsOutputMaxLoad,         atsOutputMinLoad,\natsOutputMaxPercentLoad,  atsOutputMinPercentLoad,\natsOutputMaxPower,        atsOutputMinPower,\natsOutputMaxPercentPower, atsOutputMinPercentPower.\nThese variables represent the maximum and minimum ATS values\nsince the last time they were read or reset by this OID.\nValues unsupported by this ATS will return (-1).')
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3))
atsNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of input feeds to this device.\nThis variable indicates the number of rows in the\ninput table.')
atsInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2)).setDescription('A list of input table entries.  The number of entries\nis given by the value of atsNumInputs.')
atsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsInputTableIndex')).setDescription('An entry containing information applicable to a\nparticular input.')
atsInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The input identifier.')
atsNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of input phases utilized in this\ndevice.  The sum of all the atsNumInputPhases\nvariable indicates the number of rows in the \ninput phase table.')
atsInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('singlePhase', 2), ('splitPhase', 3), ('threePhasePhaseToNeutral', 4), ('threePhasePhaseToPhase', 5), ))).setMaxAccess('readonly').setDescription('The input voltage orientation: \n1: unknown for this Source\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.')
atsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The input frequency in Hertz, or -1 if it's unsupported\nby this Source.")
atsInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('main', 2), ('bypass', 3), ))).setMaxAccess('readonly').setDescription('The input type.')
atsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 6), DisplayString()).setMaxAccess('readwrite').setDescription('A name given to a particular input.')
atsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3)).setDescription('A list of input table entries.  The number of entries\nis given by the sum of the atsNumInputPhases.')
atsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsInputPhaseTableIndex'), (0, 'PowerNet-MIB', 'atsInputPhaseIndex')).setDescription('An entry containing information applicable to a\nparticular input phase.')
atsInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The input identifier.')
atsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The input phase identifier.')
atsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The input voltage in VAC, or -1 if it's unsupported\nby this Source.")
atsInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The maximum input voltage in VAC measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The minimum input voltage in VAC measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription("The input current in amperes, or -1 if it's\nunsupported by this Source.")
atsInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The maximum input current in amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The minimum input current in amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription("The input power in Watts, or -1 if it's unsupported\nby this Source.")
atsInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The maximum input power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The minimum input power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsStatusOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4))
atsNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of output feeds to this device.\nThis variable indicates the number of rows in the\noutput table.')
atsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2)).setDescription('A list of output table entries.  The number of entries\nis given by the value of atsOutputNumPhases.')
atsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsOutputTableIndex')).setDescription('An entry containing information applicable to a\nparticular output.')
atsOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The output identifier.')
atsNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of output phases utilized in this\ndevice.  The sum of all the atsNumOutputPhases\nvariable indicates the number of rows in the \noutput phase table.')
atsOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('singlePhase', 2), ('splitPhase', 3), ('threePhasePhaseToNeutral', 4), ('threePhasePhaseToPhase', 5), ))).setMaxAccess('readonly').setDescription('The output voltage orientation: \n1: unknown for this ATS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.')
atsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The output frequency in Hertz, or -1 if it's\nunsupported by this ATS.")
atsOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3)).setDescription('A list of output table entries.  The number of\nentries is given by the sum of the atsNumOutputPhases.')
atsOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'atsOutputPhaseTableIndex'), (0, 'PowerNet-MIB', 'atsOutputPhaseIndex')).setDescription('An entry containing information applicable to a\nparticular output phase.')
atsOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The output identifier.')
atsOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ('neutral', 4), ))).setMaxAccess('readonly').setDescription('Description of each output phase utilized in \nthis device and one for neutral. ')
atsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The output voltage in VAC, or -1 if it's unsupported\nby this ATS.")
atsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The output current in 0.1 amperes drawn \nby the load on the ATS, or -1 if it's unsupported\nby this ATS.")
atsOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The maximum output current in 0.1 amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The minimum output current in 0.1 amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription("The output load in VA, or -1 if it's unsupported\nby this ATS.")
atsOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The maximum output load in VA measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1)  if unsupported.')
atsOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The minimum output load in VA measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 10), Integer32()).setMaxAccess('readonly').setDescription("The percentage of the ATS load capacity in VA at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this ATS.")
atsOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The maximum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The minimum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 13), Integer32()).setMaxAccess('readonly').setDescription("The output power in Watts, or -1 if it's\nunsupported by this ATS.")
atsOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The maximum output power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The minimum output power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 16), Integer32()).setMaxAccess('readonly').setDescription("The percentage of the ATSpower capacity in Watts at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this ATS.")
atsOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 17), Integer32()).setMaxAccess('readonly').setDescription('The maximum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
atsOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('The minimum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.')
dc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9))
dcmim2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1))
dcmim2IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1))
dcmim2IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Integer representation of the power plant Master Controller firmware revision.')
dcmim2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2))
dcmim2ControlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1))
dcmim2ControlRunFunctBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('battTestOff', 1), ('battTestOn', 2), ))).setMaxAccess('readwrite').setDescription('Getting this OID will return the battery functional test state. If \nthe test is off, the battTestOff (1) value will be returned.\nIf the test is on, the battTestOn (2) value will be\nreturned.  \n\nSetting this OID to battTestOff (1) will turn the battery functional test off.\nSetting this OID to battTestOn (2) will turn the battery functional test on.')
dcmim2ControlRunCapacityBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('battTestOff', 1), ('battTestOn', 2), ))).setMaxAccess('readwrite').setDescription('Getting this OID will return the battery capacity test state. If \nthe test is off, the battTestOff (1) value will be returned.\nIf the test is on, the battTestOn (2) value will be\nreturned.  \n\nSetting this OID to battTestOff (1) will turn the battery capacity test off.\nSetting this OID to battTestOn (2) will turn the battery capacity test on.')
dcmim2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3))
dcmim2ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1))
dcmim2ConfigSysHighTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription("Trip level (threshold) at which System High Temp alarm condition is created. \nRange 28 to 100 (degC).\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysHighTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription("Level at which System High Temp alarm condition is reset (cleared). \nRange 25 to (upper temp - 3) (degC).\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysLowTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription("Trip level (threshold) at which System Low Temp alarm condition is created. \nRange -100 to 10 (degC).\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysLowTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription("Level at which System Low Temp alarm condition is reset (cleared). \nRange (lower temp + 3) to 13 (degC).\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2))
dcmim2ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('Battery Float Voltage defined at 25 degrees Celsius.\n\nValues are represented in thousandths of Volts (mV).')
dcmim2ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('Battery Maximum Recharge Rate.  This is the maximum current used\nduring battery charging.  \n\nValues are represented in thousandths of Amps (mA).')
dcmim2ConfigBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('Battery capacity (Amp-Hour Size) as specified by the battery manufacturer.\n\nValues are represented in thousandths of Amp hours (mAHr).')
dcmim2ConfigBattType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 4), Integer32()).setMaxAccess('readwrite').setDescription('Type of battery in the powerplant\n\nValid values range from 0 to 254.')
dcmim2ConfigBattFunctTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 5), Integer32()).setMaxAccess('readwrite').setDescription('Duration of the battery functional test.\n\nValues are represented in thousandths of seconds (mSecs).')
dcmim2ConfigBattFunctTestThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 6), Integer32()).setMaxAccess('readwrite').setDescription('Threshold the battery voltage of the system must remain above\nin order to pass the battery functional test.\n\nValues are represented in thousandths of Volts (mV).')
dcmim2ConfigBattCapacityTestPercent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 7), Integer32()).setMaxAccess('readwrite').setDescription('Threshold for good battery capacity test results.\n\nValues range from 0 to 100 percent.')
dcmim2ConfigBattCapacityTestEndThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 8), Integer32()).setMaxAccess('readwrite').setDescription('Safeguard voltage at which battery capacity test will end \nif there is a battery problem.\n\nValues are represented in thousandths of Volts (mV).')
dcmim2ConfigBattCapacityTestCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 9), Integer32()).setMaxAccess('readwrite').setDescription('Constant current value used during battery capacity testing.\n\nValues are represented in thousandths of Amps (mA).')
dcmim2ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3))
dcmim2ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant LVDs controllable\nby this IP address.')
dcmim2ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2)).setDescription('Allows for accessing settings of the LVDs. The number of\nentries is contained in the dcmim2ConfigLVDTableSize OID.')
dcmim2ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dcmim2ConfigLVDIndex')).setDescription('The LVD to configure.')
dcmim2ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant LVD.')
dcmim2ConfigLVDTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('LVD Trip threshold.  System bus voltage at which LVD will trip (open)\nduring a battery backup operation.\n\nValues are represented in thousandths of Volts (mV).')
dcmim2ConfigLVDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('LVD Reset threshold.  System bus voltage at which LVD will reset (close)\nafter AC power has been restored.\n\nValues are represented in thousandths of Volts (mV).')
dcmim2ConfigLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('statusClosed', 1), ('statusOpened', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.')
dcmim2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4))
dcmim2StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1))
dcmim2StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('System (Total Rectifier) current in thousandths of Amps (mA).')
dcmim2StatusSysLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Load current in thousandths of Amps (mA).')
dcmim2StatusSysBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('System bus voltage in thousandths of Volts (mV).')
dcmim2StatusSysAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("System temperature based on sensor on Master Controller PCB.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2StatusSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('Length of time since the DC Powerplant controller has been powered up.')
dcmim2StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nin the DC system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
dcmim2StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2))
dcmim2StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant rectifiers viewable\nby this IP address.')
dcmim2StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2)).setDescription('Allows for accessing settings of the rectifiers. The number of\nentries is contained in the dcmim2StatusRectTableSize OID.')
dcmim2StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dcmim2StatusRectIndex')).setDescription('The rectifier to gather status from.')
dcmim2StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant rectifier.')
dcmim2StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier device type.')
dcmim2StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier ID.  This enumerates the number of the rectifier within \na group of rectifiers.')
dcmim2StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the rectifier physical address (the address on the bus).')
dcmim2StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusTrue', 1), ('statusFalse', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusTrue (1) if the rectifier has failed.\nstatusFalse (2) will be returned if the rectifier has not failed.')
dcmim2StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('This OID shows the individual rectifier current in thousandths of Amps (mA).')
dcmim2StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3))
dcmim2StatusBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Battery Float Voltage represented in thousandths of Volts (mV).')
dcmim2StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Battery Current:  This OID shows the battery current in thousandths of Amps (mA).')
dcmim2StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 3), Integer32()).setMaxAccess('readonly').setDescription("Battery Temperature:  \n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2StatusBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Battery capacity (Amp-Hour Size) as specified by the battery manufacturer.\nValues are represented in thousandths of Amp hours (mAHr).')
dcmim2StatusBattTestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('Battery capacity (Amp-Hour Size) as determined by the battery capacity test.  \nValues are represented in thousandths of Amp hours (mAHr).')
dcmim2StatusBattFunctTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,5,2,1,3,)).subtype(namedValues=namedval.NamedValues(('functTestNotPerformed', 1), ('functTestInProcess', 2), ('functTestInterrupted', 3), ('functTestPass', 4), ('functTestFail', 5), ))).setMaxAccess('readonly').setDescription('Results of the last battery functional test that was run.')
dcmim2StatusBattCapacityTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,1,3,5,)).subtype(namedValues=namedval.NamedValues(('capacityTestNotPerformed', 1), ('capacityTestInProcess', 2), ('capacityTestInterrupted', 3), ('capacityTestPass', 4), ('capacityTestFail', 5), ))).setMaxAccess('readonly').setDescription('Results of the last battery capacity test that was run.')
dcmim2StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4))
dcmim2StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant LVDs accessible\nby this IP address.')
dcmim2StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2)).setDescription('Allows for accessing the LVDs. The number of\nentries is contained in the dcmim2StatusLVDTableSize OID.')
dcmim2StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dcmim2StatusLVDIndex')).setDescription('The LVD to access.')
dcmim2StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the DC powerplant LVD.')
dcmim2StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('statusClosed', 1), ('statusOpened', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.')
dcmim2StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5))
dcmim2StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of DC powerplant alarms viewable\nby this IP address.')
dcmim2StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2)).setDescription('Allows for accessing system alarms. The number of\nentries is contained in the dcmim2StatusAlarmsTableSize OID.')
dcmim2StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'dcmim2StatusAlarmsIndex')).setDescription('The alarm to display.')
dcmim2StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the system alarm.')
dcmim2StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The 16 character text describing the active alarm condition.')
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1))
emIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1))
emIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the Environmental Monitor.')
emConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2))
emConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of temperature and humidity probes available.')
emConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2)).setDescription('A list of probes supported by the Environmental Monitor\nand their configurations.')
emConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'emConfigProbeNumber')).setDescription('The Environmental Monitor probe configurations.')
emConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index into an Environmental Monitor probe entry.')
emConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name of the probe set by the user,\npossibly denoting its location or purpose.')
emConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription("The high temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription("The low temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
emConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The high humidity alarm threshold for the probe in\npercent relative humidity.')
emConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('The low humidity alarm threshold for the probe in\npercent relative humidity.')
emConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The high temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The high humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The low humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription("The maximum temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription("The minimum temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 14), Integer32()).setMaxAccess('readwrite').setDescription('The maximun humidity alarm threshold for the probe in\npercent relative humidity.')
emConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('The minimum humidity alarm threshold for the probe in\npercent relative humidity.')
emConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The maximum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The minimum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The maximum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The minimum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
emConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 20), Integer32()).setMaxAccess('readwrite').setDescription("The number of degrees beyond the temperature thresholds\nat which an active temperature alarm will be cleared.\nThis configuration setting applies to all temperature\nthresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 21), Integer32()).setMaxAccess('readwrite').setDescription("The number of percent RH points beyond the humidity\nthresholds at which an active humidity alarm will be\ncleared. This configuration setting applies to all\nhumidity thresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess('readwrite').setDescription('A string describing the location of the probe.')
emConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported by the Environmental\nMonitor.')
emConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4)).setDescription('A list of contacts supported by the Environmental Monitor\nand their configurations.')
emConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'emConfigContactNumber')).setDescription('The Environmental Monitor contact configurations.')
emConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of an Environmental Monitor contact.')
emConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for an Environmental Monitor\ncontact set by the user, possibly denoting its\nlocation or purpose.')
emConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('An Environmental Monitor contact alarm enable/disable.\nNo alarm will be generated if the contact is disabled(1).\nAn alarm will be generated if the contact is enabled(2)\nand the contact has been faulted.')
emConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('critical', 1), ('warning', 2), ('informational', 3), ))).setMaxAccess('readwrite').setDescription('The severtity of the alarm that will be triggered when\nthe input caontact is activated. The alarms can be\ncritical(1), warning(2) or informational(3).')
emConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The contact state that will be considered normal, i.e.\nwill not trigger an alarm. The states are open(1) or \nclosed(2).')
emConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive label for the contact denoting its\nlocation or purpose.')
emStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3))
emStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noComm', 1), ('comm', 2), ('commLost', 3), ))).setMaxAccess('readonly').setDescription('The communication status between the agent\nand the Environmental Monitor.\n\nnoComm(1),   Communication has never been established.\ncomm(2),     Communication has been established.\ncommLost(3), Communication was established, but was lost.')
emStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of available probes on the Environmental\nMonitor.')
emStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3)).setDescription('A list of probes supported by the Environmental Monitor\nand their status.')
emStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'emStatusProbeNumber')).setDescription('The status of the probe.')
emStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the probe.')
emStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive name for the probe set by the user,\npossibly denoting its location or purpose.')
emStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disconnected', 1), ('connected', 2), ))).setMaxAccess('readonly').setDescription('The connected status of the probe, either      \ndisconnected(1) or connected(2).')
emStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The current temperature reading from the probe displayed\nin the units shown in the 'emStatusProbeTempUnits' OID\n(Celsius or Fahrenheit).")
emStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
emStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The current humidity reading from the probe in\npercent relative humidity.')
emStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('highTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a highTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is greater than or equal to\nthe high temperature threshold value, the \n'emConfigProbeHighTempThreshold' OID, and the value of the\n'emConfigProbeHighTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeHighTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('lowTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a lowTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is less than or equal to\nthe low temperature threshold value, the \n'emConfigProbeLowTempThreshold' OID, and the value of the\n'emConfigProbeLowTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeLowTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('highHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high humidity violation status of the probe humidity\nreading. This OID will show a highTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is greater than or equal to\nthe high humidity threshold value, the \n'emConfigProbeHighHumidThreshold' OID, and the value of the\n'emConfigProbeHighHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'emConfigProbeHighHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
emStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('lowHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The low humidity violation status of the probe humidity\nreading. This OID will show a lowTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is less than or equal to\nthe low humidity threshold value, the \n'emConfigProbeLowHumidThreshold' OID, and the value of the\n'emConfigProbeLowHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'emConfigProbeLowHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
emStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('maxTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The max temperature violation status of the probe\ntemperature reading. This OID will show a maxTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is greater than or equal to\nthe maximun temperature threshold value, the \n'emConfigProbeMaxTempThreshold' OID, and the value of the\n'emConfigProbeMaxTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeMaxTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('minTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The minimum temperature violation status of the probe\ntemperature reading. This OID will show a minTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is less than or equal to\nthe minimum temperature threshold value, the \n'emConfigProbeMinTempThreshold' OID, and the value of the\n'emConfigProbeMinTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeMinTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('maxHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The maximum humidity violation status of the probe humidity\nreading. This OID will show a maxTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is greater than or equal to\nthe maximum humidity threshold value, the \n'emConfigProbeMaxHumidThreshold' OID, and the value of the\n'emConfigProbeMaxHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'emConfigProbeMaxHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
emStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('minHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The minimum humidity violation status of the probe humidity\nreading. This OID will show a minTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is less than or equal to\nthe minimum humidity threshold value, the \n'emConfigProbeMinHumidThreshold' OID, and the value of the\n'emConfigProbeMinHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'emConfigProbeMinHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
emStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported by the\nEnvironmental Monitor.')
emStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5)).setDescription('A list of contacts supported by the Environmental Monitor\nand their status.')
emStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1)).setIndexNames((0, 'PowerNet-MIB', 'emStatusContactNumber')).setDescription('The status of the contact.')
emStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the Environmental Monitor contact.')
emStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive name for the Environmental Monitor contact\nset by the user, possibly denoting its location or purpose.')
emStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('noFault', 1), ('fault', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The status of the Environmental Monitor contact. The status\nwill show noFault(1) if the contact is in the normal state\nand the 'emConfigContactEnable' OID is enabled. The status will\nshow a fault(2) if the contact is faulted and the \n'emContactEnable' OID is enabled. If the 'emConfigContactEnable'\nOID is disabled, the status will show disabled(3).")
integrated = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2))
iemIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1))
iemIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Integrated Environmental\nMonitor.')
iemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2))
iemConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of temperature and humidity probes available.')
iemConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2)).setDescription('A list of probes supported by the Environmental Monitor\nand their configurations.')
iemConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'iemConfigProbeNumber')).setDescription('The Environmental Monitor probe configurations.')
iemConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to a Environmental Monitor probe entry.')
iemConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the probe set by the user,\npossibly denoting its location or purpose.')
iemConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription("The high temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription("The low temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
iemConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The high humidity alarm threshold for the probe in\npercent relative humidity.')
iemConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('The low humidity alarm threshold for the probe in\npercent relative humidity.')
iemConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The high temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The high humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The low humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription("The maximun temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription("The minimun temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 14), Integer32()).setMaxAccess('readwrite').setDescription('The maximum humidity alarm threshold for the probe in\npercent relative humidity.')
iemConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('The minimum humidity alarm threshold for the probe in\npercent relative humidity.')
iemConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The maximum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The maximum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The minimum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.')
iemConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 20), Integer32()).setMaxAccess('readwrite').setDescription("The number of degrees beyond the temperature thresholds\nat which an active temperature alarm will be cleared.\nThis configuration setting applies to all temperature\nthresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 21), Integer32()).setMaxAccess('readwrite').setDescription("The number of percent RH points beyond the humidity\nthresholds at which an active humidity alarm will be\ncleared. This configuration setting applies to all\nhumidity thresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 22), DisplayString()).setMaxAccess('readwrite').setDescription('A string describing the location of the probe.')
iemConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts available on the Environmental\nMonitor.')
iemConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4)).setDescription('A list of contacts supported by the Environmental Monitor\nand their configurations.')
iemConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'iemConfigContactNumber')).setDescription('The Environmental Monitor contact configurations.')
iemConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of an Environmental Monitor contact.')
iemConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the Environmental Monitor contact\nset by the user, possibly denoting its location or purpose.')
iemConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('An Environmental Monitor contact alarm enable/disable.')
iemConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('critical', 1), ('warning', 2), ('informational', 3), ))).setMaxAccess('readwrite').setDescription('The severtity of the alarm that will be triggered when\nthe input contact is activated. The alarms can be\ncritical(1), warning(2) or informational(3).\nNOTE: informational(3) is deprecated (and no longer valid) for this OID.')
iemConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The contact state that will be considered normal, i.e.\nwill not trigger an alarm. The states are open(1) or \nclosed(2).')
iemConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive label for the contact denoting its\nlocation or purpose.')
iemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3))
iemStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of available probes on the Environmental\nMonitor.')
iemStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2)).setDescription('A list of probes supported by the Environmental Monitor\nand their status.')
iemStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'iemStatusProbeNumber')).setDescription('The status of the probe.')
iemStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the probe.')
iemStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive name for the probe set by the user.')
iemStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('disconnected', 1), ('connected', 2), ))).setMaxAccess('readonly').setDescription('The connected status of the probe, either      \ndisconnected(1) or connected(2).')
iemStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The current temperature reading from the probe displayed\nin the units shown in the 'iemStatusProbeTempUnits' OID\n(Celsius or Fahrenheit).")
iemStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
iemStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The current humidity reading from the probe in percent\nrelative humidity.')
iemStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('highTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a highTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is greater than or equal to\nthe high temperature threshold value, the \n'iemConfigProbeHighTempThreshold' OID, and the value of the\n'iemConfigProbeHighTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeHighTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('lowTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a lowTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is less than or equal to\nthe low temperature threshold value, the \n'iemConfigProbeLowTempThreshold' OID, and the value of the\n'iemPConfigrobeLowTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeLowTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('highHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The high humidity violation status of the probe humidity\nreading. This OID will show a highTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is greater than or equal to\nthe high humidity threshold value, the \n'iemConfigProbeHighHumidThreshold' OID, and the value of the\n'iemConfigProbeHighHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeHighHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('lowHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The low humidity violation status of the probe humidity\nreading. This OID will show a lowTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is less than or equal to\nthe low humidity threshold value, the \n'iemConfigProbeLowHumidThreshold' OID, and the value of the\n'iemConfigProbeLowHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeLowHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('maxTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The max temperature violation status of the probe\ntemperature reading. This OID will show a maxTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is greater than or equal to\nthe maximun temperature threshold value, the \n'iemConfigProbeMaxTempThreshold' OID, and the value of the\n'iemConfigProbeMaxTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeMaxTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('minTempViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The minimum temperature violation status of the probe\ntemperature reading. This OID will show a minTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is less than or equal to\nthe minimum temperature threshold value, the \n'iemConfigProbeMinTempThreshold' OID, and the value of the\n'iemConfigProbeMinTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeMinTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('maxHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The maximum humidity violation status of the probe humidity\nreading. This OID will show a maxTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is greater than or equal to\nthe maximum humidity threshold value, the \n'iemConfigProbeMaxHumidThreshold' OID, and the value of the\n'iemConfigProbeMaxHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'iemConfigProbeMaxHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
iemStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noViolation', 1), ('minHumidViolation', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The minimum humidity violation status of the probe humidity\nreading. This OID will show a minTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is less than or equal to\nthe minimum humidity threshold value, the \n'iemConfigProbeMinHumidThreshold' OID, and the value of the\n'iemConfigProbeMinHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeMinHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive location for the probe set by the user.')
iemStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported on the\nEnvironmental Monitor.')
iemStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4)).setDescription('A list of contacts supported by the Environmental Monitor\nand their status.')
iemStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'iemStatusContactNumber')).setDescription('The status of the contact.')
iemStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the Environmental Monitor contact.')
iemStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive name for the Environmental Monitor contact\nset by the user, denoting its location or purpose.')
iemStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('noFault', 1), ('fault', 2), ('disabled', 3), ))).setMaxAccess('readonly').setDescription("The status of the Environmental Monitor contact. The status\nwill show noFault(1) if the contact is in the normal state\nand the 'iemConfigContactEnable' OID is enabled. The status will\nshow a fault(2) if the contact is faulted and the \n'iemConfigContactEnable' OID is enabled. If the\n'iemConfigContactEnable' OID is disabled, the status will show\ndisabled(3).")
iemStatusRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of output relays supported on the\nEnvironmental Monitor.')
iemStatusRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7)).setDescription('A list of output relays supported by the\nEnvironmental Monitor and their status.')
iemStatusRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1)).setIndexNames((0, 'PowerNet-MIB', 'iemStatusRelayNumber')).setDescription('The status of the relay.')
iemStatusRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the output relay.')
iemStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A descriptive name for the output relay set by the\nuser, denoting its location or purpose.')
iemStatusRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('faultState', 1), ('normalState', 2), ))).setMaxAccess('readonly').setDescription('The status of the output relay, either faultState(1) or\nnormalState(2).')
envMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3))
emsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1))
emsIdentEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \ndevice. ')
emsIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the model number of \nthe device. This value is set at the factory.')
emsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the device.')
emsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the device. \nThis value is set at the factory.')
emsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The date when the device was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ')
emsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the serial number of \nthe device. This value is set at the factory.')
emsOutputRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2))
emsOutputRelayControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1)).setDescription('Allows for control of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.')
emsOutputRelayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutputRelayControlOutputRelayIndex')).setDescription('The output relays to control.')
emsOutputRelayControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the output relay entry.')
emsOutputRelayControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the output relay.\nThis OID is provided for informational purposes only.')
emsOutputRelayControlOutputRelayCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('immediateCloseEMS', 1), ('immediateOpenEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the output relay state. If \nthe output relay is closed, the immediateCloseEMS (1) value will be returned.\nIf the output relay is open, the immediateOpenEMS (2) value will be\nreturned. \n       \nSetting this variable to immediateCloseEMS (1) will immediately close the relay.\n\nSetting this variable to immediateOpenEMS (2) will immediately open the relay.')
emsOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3))
emsOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1)).setDescription('Allows for control of individual outlet switches. The number of\nentries is contained in the emsStatusOutletCount OID.')
emsOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutletControlOutletIndex')).setDescription('The outlets to control.')
emsOutletControlOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
emsOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet.\nThis OID is provided for informational purposes only.')
emsOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('immediateOnEMS', 1), ('immediateOffEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnEMS (1) value will be returned.\nIf the outlet is off, the immediateOffEMS (2) value will be\nreturned. \n\nSetting this variable to immediateOnEMS (1) will immediately turn the outlet on.\n\nSetting this variable to immediateOffEMS (2) will immediately turn the outlet off.')
emsSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4))
emsSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1)).setDescription('Allows for control/reset of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.')
emsSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsSensorControlSensorIndex')).setDescription('The sensors to control/reset.')
emsSensorControlSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the sensor entry.')
emsSensorControlSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The system name of the sensor.  This describes the hardware system\nintent of this sensor.')
emsSensorControlSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The name of the sensor as given by the system user.')
emsSensorControlSensorCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('noCommandEMS', 1), ('resetCommandEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return noCommandEMS(1).  \n\nSetting this variable to resetCommandEMS(2) will issue a reset command to the\nsensor.  Some sensors cannot be manually reset and will not be affected \nby this command.')
emsAlarmDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5))
emsAlarmDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1)).setDescription('Allows for control of individual alarm devices. \nNote: Some alarm devices are not controllable.  The number of\nentries is contained in the emsStatusAlarmDeviceCount OID.')
emsAlarmDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsAlarmDeviceControlDeviceIndex')).setDescription('The alarm devices to control.')
emsAlarmDeviceControlDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the alarm device entry.')
emsAlarmDeviceControlDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the alarm device.\nThis OID is provided for informational purposes only.')
emsAlarmDeviceControlDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('alarmDeviceOnEMS', 1), ('alarmDeviceOffEMS', 2), ('alarmDeviceNotInstalledEMS', 3), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the device state. If \nthe device is active, the alarmDeviceOnEMS (1) value will be returned.\nIf the device is inactive, the alarmDeviceOffEMS (2) value will be\nreturned. If the device is not installed, the \nalarmDeviceNotInstalledEMS (3) value will be returned.\n\nActions resulting from setting this variable are device-dependent.\n\nSetting this variable to alarmDeviceOnEMS (1) will turn that device (ex. Beacon) on.       \nSetting this variable to alarmDeviceOffEMS (2) will turn that device off.')
emsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6))
emsConfigName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the device.')
emsConfigCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,3,2,)).subtype(namedValues=namedval.NamedValues(('lightDisabled', 1), ('lightOnInformational', 2), ('lightOnWarning', 3), ('lightOnSevere', 4), ))).setMaxAccess('readwrite').setDescription('The setting of this OID determines the level of event that will\ntrigger the check-log light on the EMS. This is not available on the EMU2.\n\nlightDisabled (1) disables the check-log light.\nlightOnInformational (2) lights check-log for any event of \n informational severity or above.\nlightOnWarning (3) lights check-log for any event of \n warning severity or above.\nlightOnSevere (4) lights check-log for any event of severe severity.')
emsProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7))
emsProbeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1)).setDescription('Allows for configuration of individual probes. The number of\nentries is contained in the emsStatusProbeCount OID.')
emsProbeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsProbeConfigProbeIndex')).setDescription('The probes to configure.')
emsProbeConfigProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the probe entry.')
emsProbeConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the probe.')
emsProbeConfigProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('Probe high temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('Probe low temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('Probe high humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeConfigProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('Probe low humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeConfigProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('Probe maximum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('Probe minimum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeDeltaTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('Probe delta temperature. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 10), Integer32()).setMaxAccess('readwrite').setDescription('Probe maximum humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeConfigProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription('Probe minimum humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeConfigProbeDeltaHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription('Probe delta humidity. \n\nValues are represented in whole number percentage.')
emsProbeConfigProbeSTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription('Probe short-term increasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeSTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 14), Integer32()).setMaxAccess('readwrite').setDescription('Probe short-term increasing temperature time used for rate of change alarms. \n\nValues are represented in whole number minutes.')
emsProbeConfigProbeSTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('Probe short-term decreasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeSTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 16), Integer32()).setMaxAccess('readwrite').setDescription('Probe short-term decreasing temperature time used for rate of change alarms. \n\nValues are represented in whole number minutes.')
emsProbeConfigProbeLTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 17), Integer32()).setMaxAccess('readwrite').setDescription('Probe long-term increasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeLTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 18), Integer32()).setMaxAccess('readwrite').setDescription('Probe long-term increasing temperature time used for rate of change alarms. \n\nValues are represented in whole number hours.')
emsProbeConfigProbeLTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 19), Integer32()).setMaxAccess('readwrite').setDescription('Probe long-term decreasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeConfigProbeLTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 20), Integer32()).setMaxAccess('readwrite').setDescription('Probe long-term decreasing temperature time used for rate of change alarms. \n\nValues are represented in whole number hours.')
emsInputContactConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8))
emsInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1)).setDescription('Allows for configuration of individual input contacts. The number of\nentries is contained in the emsStatusInputContactCount OID.')
emsInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsInputContactConfigInputContactIndex')).setDescription('The input contacts to configure.')
emsInputContactConfigInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the input contact entry.')
emsInputContactConfigInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the input contact.')
emsInputContactConfigInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the normal state of the input contact. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n\nSetting this variable will change the normal state of the input contact')
emsOutputRelayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9))
emsOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1)).setDescription('Allows for configuration of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.')
emsOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutputRelayConfigOutputRelayIndex')).setDescription('The output relays to configure.')
emsOutputRelayConfigOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the output relay entry.')
emsOutputRelayConfigOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the output relay.')
emsOutputRelayConfigOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the normal state of the output relay. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n       \nSetting this variable will change the normal state of the output relay')
emsOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10))
emsOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the emsStatusOutletCount OID.')
emsOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutletConfigOutletIndex')).setDescription('The outlets to configure.')
emsOutletConfigOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
emsOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet.')
emsOutletConfigOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyOnEMS', 1), ('normallyOffEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the normal state of the outlet. If \nthe normal state is on, the normallyOnEMS (1) value will be returned.\nIf the normal state is off, the normallyOffEMS (2) value will be\nreturned. \n\nSetting this variable will change the normal state of the outlet')
emsSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11))
emsSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1)).setDescription('Allows for configuration of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.')
emsSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsSensorConfigSensorIndex')).setDescription('The sensors to configure.')
emsSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the sensor entry.')
emsSensorConfigSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The system name of the sensor.  This describes the hardware system\nintent of this sensor.')
emsSensorConfigSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the sensor as given by the system user.')
emsSensorConfigSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the normal state of the sensor. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n\nSetting this variable will change the normal state of the sensor.  Note:\nOnly the AUX sensor in the EMS has a configurable Normal State')
emsSensorConfigSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('The delay (in seconds) after a sensor detects an alarm condition before the\ncondition is reported.')
emsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12))
emsStatusEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 1), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \ndevice. ')
emsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('noComm', 1), ('comm', 2), ('commLost', 3), ))).setMaxAccess('readonly').setDescription('The communication status between the agent\nand the device.\n\nnoComm(1),   Communication has never been established.\ncomm(2),     Communication has been established.\ncommLost(3), Communication was established, but was lost.')
emsStatusProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 3), Integer32()).setMaxAccess('readonly').setDescription('The total number of T/H probes (both local and remote) that\nis supported by this device.')
emsStatusInputContactCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 4), Integer32()).setMaxAccess('readonly').setDescription('The total number of Input Contacts that\nis supported by this device.')
emsStatusOutputRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 5), Integer32()).setMaxAccess('readonly').setDescription('The total number of Output Relays that\nis supported by this device.')
emsStatusOutletCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 6), Integer32()).setMaxAccess('readonly').setDescription('The total number of  AC Outlets that\nis supported by this device.')
emsStatusSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 7), Integer32()).setMaxAccess('readonly').setDescription('The total number of Sensors that\nis supported by this device.')
emsStatusAlinkAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 8), Integer32()).setMaxAccess('readonly').setDescription("The total number of remote Aru's supported by this device.")
emsStatusAlinkProbeDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 9), Integer32()).setMaxAccess('readonly').setDescription('The total number of remote T/H probes supported by this device.')
emsStatusAlarmDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of alarm devices supported by this device.')
emsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
emsStatusCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('lightOff', 1), ('lightOn', 2), ))).setMaxAccess('readonly').setDescription('The status of the check-log light on the device.\nFor the EMU2, this will always indicate lightOff(1).\n\nlightOff (1) indicates the light is off (no new log entries).\nlightOn (2) indicates the light is on (new log entries present).')
emsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 13), Integer32()).setMaxAccess('readonly').setDescription('The status of the EMS hardware.  This integer should be interpreted\nas a bit map, with each bit representing the presence or absence of\na specific hardware error condition.\n\n0 indicates there are no error conditions detected in the EMS hardware.\n1 indicates a Current Limit error condition related to the Alink port.\n2 indicates incorrect hardware is plugged into an EMS port.\n3 indicates that both of these error conditions are present.')
emsProbeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13))
emsProbeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1)).setDescription('Allows for access of individual probes. The number of\nentries is contained in the emsStatusProbeCount OID.')
emsProbeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsProbeStatusProbeIndex')).setDescription('The probes to access.')
emsProbeStatusProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the probe entry.')
emsProbeStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the probe.')
emsProbeStatusProbeTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Probe temperature reading. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeStatusProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Probe high temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeStatusProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Probe low temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeStatusProbeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Probe humidity reading. \n\nValues are represented in whole number percentage.')
emsProbeStatusProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Probe high humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeStatusProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Probe low humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeStatusProbeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 9), DisplayString()).setMaxAccess('readonly').setDescription('A label indicating the type (Local[L] or Remote[R]) and Number\nof the probe.  For example, the first local probe would be L1 and\nthe third remote probe would be R3.')
emsProbeStatusProbeCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('commsNeverDiscovered', 1), ('commsEstablished', 2), ('commsLost', 3), ))).setMaxAccess('readonly').setDescription(' The state of communications to the probe.\ncommNeverDiscovered(1) indicates there has never been communications with this device.\ncommsEstablished(2) indicates communication is normal and active with this device.\ncommsLost(3) indicates communication had been established, but is no longer.')
emsProbeStatusProbeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 11), Integer32()).setMaxAccess('readonly').setDescription("The alarm status of the probe.  This integer should be interpreted\nas a bit map, with each bit representing the presence or absence of\nthe specific alarm conditions listed below.  The bit will be '1' if\nthe condition is present, and '0' if the condition is not present.\n\nBit  Hex. Value  Description\n1    0x0001      Maximum temperature exceeded.\n2    0x0002      High temperature exceeded.\n3    0x0004      Low temperature exceeded.\n4    0x0008      Minimum temperature exceeded.\n5    0x0010      Short-term increasing temperature rate exceeded.\n6    0x0020      Short-term decreasing temperature rate exceeded.\n7    0x0040      Long-term increasing temperature rate exceeded.\n8    0x0080      Long-term decreasing temperature rate exceeded.\n9    0x0100      Maximum humidity exceeded.\n10   0x0200      High humidity exceeded.\n11   0x0400      Low humidity exceeded.\n12   0x0800      Minimum humidity exceeded.")
emsProbeStatusProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('Probe maximum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeStatusProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('Probe minimum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).')
emsProbeStatusProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('Probe maximum humidity threshold. \n\nValues are represented in whole number percentage.')
emsProbeStatusProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('Probe minimum humidity threshold. \n\nValues are represented in whole number percentage.')
emsInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14))
emsInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1)).setDescription('Allows for access of individual input contacts. The number of\nentries is contained in the emsStatusInputContactCount OID.')
emsInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsInputContactStatusInputContactIndex')).setDescription('The input contacts to access.')
emsInputContactStatusInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the input contact entry.')
emsInputContactStatusInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the input contact.')
emsInputContactStatusInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('contactClosedEMS', 1), ('contactOpenEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the state of the input contact. If \nthe input contact is closed, the contactClosedEMS (1) value will be returned.\nIf the input contact state is open, the contactOpenEMS (2) value will be\nreturned. ')
emsInputContactStatusInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the normal state of the input contact. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is open, the normallyOpenEMS (2) value will be\nreturned. ')
emsOutputRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15))
emsOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1)).setDescription('Allows for access of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.')
emsOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutputRelayStatusOutputRelayIndex')).setDescription('The output relays to access.')
emsOutputRelayStatusOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the output relay entry.')
emsOutputRelayStatusOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the output relay.')
emsOutputRelayStatusOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('relayClosedEMS', 1), ('relayOpenEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the state of the output relay. If \nthe output relay is closed, the relayClosedEMS (1) value will be returned.\nIf the output relay is open, the relayOpenEMS (2) value will be\nreturned. ')
emsOutputRelayStatusOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the normal state of the output relay. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is open, the normallyOpenEMS (2) value will be\nreturned. ')
emsOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16))
emsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1)).setDescription('Allows for access of individual outlets. The number of\nentries is contained in the emsStatusOutletCount OID.')
emsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsOutletStatusOutletIndex')).setDescription('The outlets to access.')
emsOutletStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
emsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet.')
emsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('outletOnEMS', 1), ('outletOffEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the state of the outlet. If \nthe outlet is on, the outletOnEMS (1) value will be returned.\nIf the outlet is off, the outletOffEMS (2) value will be\nreturned. ')
emsOutletStatusOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyOnEMS', 1), ('normallyOffEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the normal state of the outlet. If \nthe normal state is on, the normallyOnEMS (1) value will be returned.\nIf the normal state is off, the normallyOffEMS (2) value will be\nreturned. ')
emsAlarmDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17))
emsAlarmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1)).setDescription('Allows for access of individual alarm devices. The number of\nentries is contained in the emsStatusAlarmDeviceCount OID.')
emsAlarmDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsAlarmDeviceStatusDeviceIndex')).setDescription('The alarm devices to access.')
emsAlarmDeviceStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the alarm device entry.')
emsAlarmDeviceStatusDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the alarm device.\nThis OID is provided for informational purposes only.')
emsAlarmDeviceStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('alarmDeviceOnEMS', 1), ('alarmDeviceOffEMS', 2), ('alarmDeviceNotInstalledEMS', 3), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the device state. If \nthe device is active, the alarmDeviceOnEMS (1) value will be returned.\nIf the device is inactive, the alarmDeviceOffEMS (2) value will be\nreturned.  If the device is not installed, the \nalarmDeviceNotInstalledEMS (3) value will be returned.')
emsSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18))
emsSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1)).setDescription('Allows for access of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.')
emsSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'emsSensorStatusSensorIndex')).setDescription('The sensors to access.')
emsSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the sensor entry.')
emsSensorStatusSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The system name of the sensor.  This describes the hardware system\nintent of this sensor.')
emsSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The name of the sensor as given by the system user.')
emsSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('sensorFaultedEMS', 1), ('sensorOKEMS', 2), ('sensorNotInstalledEMS', 3), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the sensor state. If the sensor is faulted, \nthe sensorFaultedEMS (1) value will be returned.\nIf the sensor is not faulted, the sensorOKEMS (2) value will be\nreturned. If the sensor is not installed, the  sensorNotInstalledEMS (3) \nvalue will be returned.')
emsSensorStatusSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normallyClosedEMS', 1), ('normallyOpenEMS', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the normal state of the sensor. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.')
emsSensorStatusSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The delay (in seconds) after a sensor detects an alarm condition before the\ncondition is reported.')
modEnvMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4))
memModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1))
memModulesStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memModulesStatusTable.')
memModulesStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2)).setDescription('Allows for getting status information from the modules\nattached to the system.')
memModulesStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'memModulesStatusModuleNumber')).setDescription('The unit to get data from.')
memModulesStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The module number.')
memModulesStatusModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The module name.')
memModulesStatusModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The location of the module.')
memModulesStatusModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The model number of the module.')
memModulesStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the module.')
memModulesStatusFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision of the module.')
memModulesStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision.')
memModulesConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memModulesConfigTable.')
memModulesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4)).setDescription('Allows for getting status information from the modules\nattached to the system.')
memModulesConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'memModulesConfigModuleNumber')).setDescription('The unit to get data from.')
memModulesConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The module number.')
memModulesConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The module name.')
memModulesConfigModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the module.')
memSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2))
memSensorsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
memSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memSensorsStatusTable.')
memSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3)).setDescription('Allows for getting sensor status information.')
memSensorsStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'memSensorsStatusModuleNumber'), (0, 'PowerNet-MIB', 'memSensorsStatusSensorNumber')).setDescription('The unit to get data from.')
memSensorsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the sensor is attached to.')
memSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this sensor on the module.')
memSensorsStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The sensor name.')
memSensorsStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The location of the sensor.')
memSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription("The sensor's current temperature reading. \nUnits are displayed in the scale shown in\nthe memSensorsStatusSysTempUnits OID (Celsius or Fahrenheit).")
memSensorsHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The current humidity reading from the sensor.')
memSensorsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('notInstalled', 1), ('commsOK', 2), ('commsLost', 3), ))).setMaxAccess('readonly').setDescription('The communications status of the sensor.')
memSensorsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('memNormal', 1), ('memWarning', 2), ('memCritical', 3), ))).setMaxAccess('readonly').setDescription('The alarm status of the sensor.')
memSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memSensorsConfigTable.')
memSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5)).setDescription('Allows for getting configuration information from \nsensors attached to the system.')
memSensorsConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1)).setIndexNames((0, 'PowerNet-MIB', 'memSensorsConfigModuleNumber'), (0, 'PowerNet-MIB', 'memSensorsConfigSensorNumber')).setDescription('The unit to get data from.')
memSensorsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the sensor is attached to.')
memSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this sensor on the module.')
memSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the sensor.')
memSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the sensor.')
memSensorsAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('Enable or disable alarm generation on this sensor.')
memSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which the MEM will generate a maximum\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which the MEM will generate a high\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which the MEM will generate a low\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which the MEM will generate a minimum\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 10), Integer32()).setMaxAccess('readwrite').setDescription('The change in temperature required to cause a\ntemperature alarm to change from an active to an inactive state.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature short-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not decrease\nbeyond the value specified by the temperature short-term\ndecreasing rate threshold value.')
memSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature short-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 14), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not increase\nbeyond the value specified by the temperature short-term\nincreasing rate threshold value.')
memSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature long-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 16), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not decrease\nbeyond the value specified by the temperature long-term\ndecreasing rate threshold value.')
memSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 17), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature long-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.')
memSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 18), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not increase\nbeyond the value specified by the temperature long-term\nincreasing rate threshold value.')
memSensorsHumidityMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 19), Integer32()).setMaxAccess('readwrite').setDescription('The humidity at which the maximum humidity threshold alarm\nwill be generated.')
memSensorsHumidityHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 20), Integer32()).setMaxAccess('readwrite').setDescription('The humidity at which the high humidity threshold alarm\nwill be generated.')
memSensorsHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 21), Integer32()).setMaxAccess('readwrite').setDescription('The humidity at which the low humidity threshold alarm\nwill be generated.')
memSensorsHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 22), Integer32()).setMaxAccess('readwrite').setDescription('The humidity at which the minimum humidity threshold alarm\nwill be generated.')
memSensorsHumidityThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 23), Integer32()).setMaxAccess('readwrite').setDescription('The change in humidity required to cause an active humidity\nalarm to change to the inactive state.')
memInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3))
memInputsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memInputsStatusTable.')
memInputsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2)).setDescription('Allows for getting input status information.')
memInputsStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'memInputsStatusModuleNumber'), (0, 'PowerNet-MIB', 'memInputsStatusInputNumber')).setDescription('The unit to get data from.')
memInputsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the input is attached to.')
memInputsStatusInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this input on the module.')
memInputsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The input name.')
memInputsStatusInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The location of the input.')
memInputsStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('inputClosedHighMEM', 1), ('inputOpenLowMEM', 2), ('inputDisabled', 3), ('inputStateNotApplicable', 4), ))).setMaxAccess('readonly').setDescription('The current state of the input. This OID will return \ninputStateNotAplicable(4) for analog input types. ')
memInputsStatusCurrentAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The current analog value of the input in the units defined\nby the user.')
memInputsStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('memNormal', 1), ('memWarning', 2), ('memCritical', 3), ))).setMaxAccess('readonly').setDescription('The alarm status of the input.')
memInputsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memInputsConfigTable.')
memInputsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4)).setDescription('Allows for getting input configuration information.')
memInputsConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'memInputsConfigModuleNumber'), (0, 'PowerNet-MIB', 'memInputsConfigInputNumber')).setDescription('The unit to get data from.')
memInputsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the input is attached to.')
memInputsConfigInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this input on the module.')
memInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the input.')
memInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the input.')
memInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,5,2,)).subtype(namedValues=namedval.NamedValues(('noConnection', 1), ('dryContact', 2), ('digital', 3), ('analogmAmps', 4), ('analogVolts', 5), ))).setMaxAccess('readwrite').setDescription('The type of input this contact will take.')
memInputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('Enable or disable alarm generation on this input.')
memInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('inputClosedHighMEM', 1), ('inputOpenLowMEM', 2), ('inputDisabled', 3), ('inputStateNotApplicable', 4), ))).setMaxAccess('readwrite').setDescription('Defines the normal (no alarm) state of the input.')
memInputAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,1,3,)).subtype(namedValues=namedval.NamedValues(('inputSeverityinformational', 1), ('inputSeveritywarning', 2), ('inputSeveritysevere', 3), ('inputSeverityNotApplicable', 4), ))).setMaxAccess('readwrite').setDescription('Defines the severity of the event that is associated\nwith the abnormal state of the input.  This OID will return \ninputSeverityNotApplicable(4) for analog input types. ')
memInputNumberCalibrationPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('The number of calibration points that are required for\nthis input.')
memInputAnalogCalibrationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 10), DisplayString()).setMaxAccess('readwrite').setDescription('The electrical value that the input sensor will measure at the\nfirst calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).')
memInputAnalogCalibrationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 11), DisplayString()).setMaxAccess('readwrite').setDescription('The electrical value that the input sensor will measure at the\nsecond calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).')
memInputAnalogCalibrationPoint3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 12), DisplayString()).setMaxAccess('readwrite').setDescription('The electrical value that the input sensor will measure at the\nthird calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).')
memInputAnalogCalibrationPoint4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 13), DisplayString()).setMaxAccess('readwrite').setDescription('The electrical value that the input sensor will measure at the\nfourth calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).')
memInputAnalogCalibrationPoint5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 14), DisplayString()).setMaxAccess('readwrite').setDescription('The electrical value that the input sensor will measure at the\nfifth calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).')
memInputAnalogCalibrationPoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 15), DisplayString()).setMaxAccess('readwrite').setDescription('The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfirst calibration point.')
memInputAnalogCalibrationPoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 16), DisplayString()).setMaxAccess('readwrite').setDescription('The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nsecond calibration point.')
memInputAnalogCalibrationPoint3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 17), DisplayString()).setMaxAccess('readwrite').setDescription('The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nthird calibration point.')
memInputAnalogCalibrationPoint4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 18), DisplayString()).setMaxAccess('readwrite').setDescription('The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfourth calibration point.')
memInputAnalogCalibrationPoint5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 19), DisplayString()).setMaxAccess('readwrite').setDescription('The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfifth calibration point.')
memInputAnalogMeasurementUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 20), DisplayString()).setMaxAccess('readwrite').setDescription('The units of measure to be used for this input.')
memInputAnalogMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 21), DisplayString()).setMaxAccess('readwrite').setDescription('The input value at which a maximum threshold violation\nalarm will be generated on this input.')
memInputAnalogHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 22), DisplayString()).setMaxAccess('readwrite').setDescription('The input value at which a high threshold violation\nalarm will be generated on this input.')
memInputAnalogLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 23), DisplayString()).setMaxAccess('readwrite').setDescription('The input value at which a low threshold violation\nalarm will be generated on this input.')
memInputAnalogMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 24), DisplayString()).setMaxAccess('readwrite').setDescription('The input value at which a minimum threshold violation\nalarm will be generated on this input.')
memInputAnalogThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 25), DisplayString()).setMaxAccess('readwrite').setDescription('The change in value required to cause an alarm on this input\nto change from active to inactive.')
memOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4))
memOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memOutputStatusTable.')
memOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2)).setDescription('Allows for getting output status information.')
memOutputStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'memOutputStatusModuleNumber'), (0, 'PowerNet-MIB', 'memOutputStatusOutputNumber')).setDescription('The unit to get data from.')
memOutputStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the output is attached to.')
memOutputStatusOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this output on the module.')
memOutputStatusOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The output name.')
memOutputStatusOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The location of the output.')
memOutputStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('memOutputClosed', 1), ('memOutputOpen', 2), ))).setMaxAccess('readonly').setDescription('The state of the output.')
memOutputConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memOutputConfigTable.')
memOutputConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4)).setDescription('Allows for getting output configuration information.')
memOutputConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'memOutputConfigModuleNumber'), (0, 'PowerNet-MIB', 'memOutputConfigOutputNumber')).setDescription('The unit to get data from.')
memOutputConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the output is attached to.')
memOutputConfigOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this output on the module.')
memOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the output.')
memOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the output.')
memOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('memOutputClosed', 1), ('memOutputOpen', 2), ))).setMaxAccess('readwrite').setDescription('The state of the output that will not generate an alarm.')
memOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('memActionClose', 1), ('memActionOpen', 2), ))).setMaxAccess('readwrite').setDescription('Manual control actions for the output. SNMP get command will return the state\nof the output, SNMP set of this OID controls the output.')
memOutlets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5))
memOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memOutletStatusTable.')
memOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2)).setDescription('Allows for getting outlet status information.')
memOutletStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'memOutletStatusModuleNumber'), (0, 'PowerNet-MIB', 'memOutletStatusOutletNumber')).setDescription('The unit to get data from.')
memOutletStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the outlet is attached to.')
memOutletStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this outlet on the module.')
memOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The outlet name.')
memOutletStatusOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The location of the outlet.')
memOutletStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('The state of the outlet.')
memOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memOutletConfigTable.')
memOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4)).setDescription('Allows for getting outlet configuration information.')
memOutletConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'memOutletConfigModuleNumber'), (0, 'PowerNet-MIB', 'memOutletConfigOutletNumber')).setDescription('The unit to get data from.')
memOutletConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the Outlet is attached to.')
memOutletConfigOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this Outlet on the module.')
memOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the Outlet.')
memOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the Outlet.')
memOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readwrite').setDescription('The state of the Outlet that will not generate an alarm.')
memOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('turnOff', 1), ('turnOn', 2), ))).setMaxAccess('readwrite').setDescription('Manual control actions for the Outlet.  Get displays state\nof outlet, set controls outlet.')
memBeacons = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6))
memBeaconStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memBeaconStatusTable.')
memBeaconStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2)).setDescription('Allows for getting beacon status information.')
memBeaconStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'memBeaconStatusModuleNumber'), (0, 'PowerNet-MIB', 'memBeaconStatusBeaconNumber')).setDescription('The unit to get data from.')
memBeaconStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the beacon is attached to.')
memBeaconStatusBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this beacon on the module.')
memBeaconStatusBeaconName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The beacon name.')
memBeaconStatusBeaconLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The location of the beacon.')
memBeaconStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('The state of the beacon.')
memBeaconConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the memBeaconConfigTable.')
memBeaconConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4)).setDescription('Allows for getting beacon configuration information.')
memBeaconConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'memBeaconConfigModuleNumber'), (0, 'PowerNet-MIB', 'memBeaconConfigBeaconNumber')).setDescription('The unit to get data from.')
memBeaconConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the module that the beacon is attached to.')
memBeaconConfigBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of this beacon on the module.')
memBeaconConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the beacon.')
memBeaconConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the beacon.')
memBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('turnOff', 1), ('turnOn', 2), ))).setMaxAccess('readwrite').setDescription('Control action (on/off) for the beacon. Setting this OID will turn the\nbeacon on/off.  Getting this OID will respond with the current state.')
netlock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11))
nlIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 1))
nlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 2))
rPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12))
rPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1))
rPDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the Rack PDU. \nThe maximum string size is device dependent.')
rPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the Rack PDU. \nThis value is set at the factory.')
rPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('An 8-byte ID string identifying the Rack PDU firmware revision. \nThis value is set at the factory.')
rPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The date when the Rack PDU was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. The year 2000 will be \nrepresented by 00.')
rPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A 10-character string identifying the model number of \nthe Rack PDU. This value is set at the factory.')
rPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A 12-character string identifying the serial number of \nthe Rack PDU. This value is set at the factory.')
rPDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the electrical rating of the device.')
rPDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the number of outlets contained in the device.')
rPDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the number of phases supported by the device.')
rPDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the number of circuit breakers supported by the device.\nThis is the same as the number of banks of outlets.\n0 will be returned if the unit has no phase breakers. ')
rPDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return rating of the circuit breakers on the device if it has any.')
rPDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('orientHorizontal', 1), ('orientVertical', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the intended physical orientation of the device.\n\nOrientHorizonatal(1) indicates Horizontal.\nOrientVertical(2) indicates Vertical.')
rPDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,4,)).subtype(namedValues=namedval.NamedValues(('seqPhaseToNeutral', 1), ('seqPhaseToPhase', 2), ('seqPhToNeu21PhToPh', 3), ('seqPhToPhGrouped', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return outlet layout for the device.\n\nSeqPhaseToNeutral(1) indicates outlet layout as follows:\n1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\n\nSeqPhaseToPhase(2) indicates outlet layout as follows:\n1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\nSeqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\nSeqPhToPhGrouped(4) indicates outlet layout as follows:\nOtlts1-8::(3-1),Otlts9-16::(2-3),Otlts17-24::(1-2).')
rPDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('displayNormal', 1), ('displayReverse', 2), ))).setMaxAccess('readwrite').setDescription('Getting this OID will return the intended physical orientation of the Seven-Segment Display.\n\nNormal(1) indicates Normal.\nReverse(2)indicates Upside-Down.')
rPDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('Getting/Setting this OID will return/set the Line to Line Volatage.\n\nThe valid range is between 0V to 440V')
rPDUIdentDevicePowerWatts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the Power in Watts.')
rPDUIdentDevicePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 17), Integer32()).setMaxAccess('readwrite').setDescription('Getting/setting this OID will return/set the \nPower Factor in thousanths (1000 is power factor of 1).  \nValid range is from 0 to 1000.')
rPDUIdentDevicePowerVA = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 18), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the Power in VA.')
rPDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2))
rPDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1))
rPDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the maximum rated power\nthat each phase of the Rack PDU can provide. It is \nrepresented in Amps.\n\n0 will be returned if the unit is banked.')
rPDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of phases available with this Rack PDU.')
rPDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the maximum rated power\nthat a bank of the Rack PDU can provide. It is \nrepresented in Amps.\n\n0 will be returned if the device does not have any banks.')
rPDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The number of banks of outlets available with this Rack PDU.\nA bank of outlets has a unique circuit breaker for a subset \nof the total number of outlets on the rPDU.\n\n0 will be returned if the unit no banks.')
rPDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The size of the Bank Table.')
rPDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6)).setDescription('Allows for getting the Bank Max Load in the Rack PDU.')
rPDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDULoadDevBankIndex')).setDescription('The Rack PDU Banks Access.')
rPDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Rack PDU bank entry.')
rPDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the bank number.')
rPDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the maximum rated power\nthat each bank of the Rack PDU can provide. It is \nrepresented in Amps.')
rPDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The size of the Outlet Table.')
rPDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8)).setDescription('Allows for getting the Max Outlet Load in an Outlet Monitored Rack PDU.')
rPDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDULoadDevOutletIndex')).setDescription('This gives access to Max Outlet Load of an Outlet Monitored Rack PDU')
rPDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Outlet Monitored Rack PDU Max Outlet Load entry.')
rPDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the Outlet number.')
rPDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the maximum rated power\nthat each Outlet of an Outlet Monitored Rack PDU can provide. It is \nrepresented in Amps. ')
rPDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2))
rPDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1)).setDescription('Allows for configuration of each Rack PDU phase.\nThe number of entries is contained in the \nrPDULoadDevNumPhases OID.')
rPDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDULoadPhaseConfigIndex')).setDescription('The Rack PDU phase to configure.')
rPDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('The index to the Rack PDU phase entry.')
rPDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDULoadPhaseConfigNearOverloadThreshold OID.')
rPDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDULoadPhaseConfigLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadPhaseConfigOverloadThreshold OID.')
rPDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDULoadPhaseConfigNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxPhaseLoad OID.')
rPDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('noLoadAlarm', 1), ('underCurrentAlarm', 2), ('nearOverCurrentAlarm', 3), ('overCurrentAlarm', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the current Phase Alarm.')
rPDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3))
rPDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1)).setDescription('Allows for getting of status of each Rack PDU phase/bank.\nThe number of entries is calculated by adding\nthe number of phases (rPDULoadDevNumPhases OID) and\nthe number of banks of outlets (rPDULoadDevNumBanks)\nNumber of entries = #phases + #banks.\nNOTE: If a device has phase and bank information, all phase information\nshall precede the bank information.')
rPDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDULoadStatusIndex')).setDescription('The Rack PDU phase/bank to gather status from.')
rPDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Rack PDU phase/bank entry. All phase information will precede\nany bank information')
rPDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess('readonly').setDescription('Getting this OID will return the phase/bank load measured\nin tenths of Amps.')
rPDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,1,3,)).subtype(namedValues=namedval.NamedValues(('phaseLoadNormal', 1), ('phaseLoadLow', 2), ('phaseLoadNearOverload', 3), ('phaseLoadOverload', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the phase/bank load state.\n\nphaseLoadNormal(1) indicates that the phase/bank is \noperating properly within the rPDULoadConfigLowLoadThreshold \nand rPDULoadConfigNearOverloadThreshold OID values.\n\nphaseLoadLow(2) indicates that the phase/bank load has\ndropped below the rPDULoadConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadNearOverload(3) indicates that the phase/bank load\nis greater than or equal to the \nrPDULoadConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadOverload(4) indicates that the phase/bank load is\ngreater than or equal to the rPDULoadConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.')
rPDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The phase number to which this record refers.')
rPDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The bank number to which this record refers.  A value of 0 will be returned if\nany bank is not present or if it is phase related.')
rPDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4))
rPDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1)).setDescription('Allows for configuration of each Rack PDU bank.\nThe number of entries is contained in the \nrPDULoadDevNumBanks OID.')
rPDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDULoadBankConfigIndex')).setDescription('The Rack PDU bank to configure.')
rPDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Rack PDU bank entry.')
rPDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDULoadBankConfigNearOverloadThreshold OID.')
rPDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDULoadBankConfigLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadBankConfigOverloadThreshold OID.')
rPDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDULoadBankConfigNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxBankLoad OID.')
rPDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('noLoadAlarm', 1), ('underCurrentAlarm', 2), ('nearOverCurrentAlarm', 3), ('overCurrentAlarm', 4), ))).setMaxAccess('readonly').setDescription(' Getting this OID will return the current Bank Alarm.')
rPDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3))
rPDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1))
rPDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,1,6,5,4,2,8,3,)).subtype(namedValues=namedval.NamedValues(('noCommandAll', 1), ('immediateAllOn', 2), ('immediateAllOff', 3), ('immediateAllReboot', 4), ('delayedAllOn', 5), ('delayedAllOff', 6), ('delayedAllReboot', 7), ('cancelAllPendingCommands', 8), ))).setMaxAccess('readwrite').setDescription("Setting this OID to immediateAllOn (2) will turn all outlets\non immediately.\n\nSetting this OID to immediateAllOff (3) will turn all outlets\noff immediately.\n\nSetting this OID to immediateAllReboot (4) will reboot all outlets\nimmediately.\n\nSetting this OID to delayedAllOn (5) will turn all outlets on as \ndefined by each outlet's rPDUOutletConfigPowerOnTime OID value. \n      \nSetting this OID to delayedAllOff (6) will turn all outlets \noff as defined by each outlet's rPDUOutletConfigPowerOffTime OID value.\n\nSetting this OID to delayedAllReboot (7) will cause a \ndelayedAllOff command to be performed. Once all outlets are off, \nthe Switched Rack PDU will then delay the largest \nrPDUOutletConfigRebootDuration OID time, and then perform a \ndelayedAllOn command.    \n\nSetting this OID to cancelAllPendingCommands (8) will cause all pending\ncommands on the Switched Rack PDU to be canceled.\n\nGetting this OID will return the noCommandAll (1) value.")
rPDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('The amount of delay, in seconds, between when\npower is provided to the Switched Rack PDU and \nwhen the Switched Rack PDU provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n-1       - never apply power automatically.\n0        - apply power immediately.\n1 to 300 - delay up to 300 seconds (5 minutes).')
rPDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of controlled outlets on this Switched Rack PDU.')
rPDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The total number of outlets on this Rack PDU.')
rPDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The total number of monitored outlets on this Rack PDU.')
rPDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2))
rPDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1)).setDescription('Allows for management of outlets on a per phase basis.')
rPDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletPhaseIndex')).setDescription('The phase to manage.')
rPDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('The index to the Switched Rack PDU phase entry.')
rPDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('alwaysAllowTurnON', 1), ('restrictOnNearOverload', 2), ('restrictOnOverload', 3), ))).setMaxAccess('readwrite').setDescription('This OID controls the behavior of a Switched Rack PDU \nphase when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding phase to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding phase to turn on if the \nrPDULoadConfigNearOverloadThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding phase to turn on if the \nrPDULoadConfigOverloadThreshold OID is exceeded.')
rPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3))
rPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1)).setDescription('Allows for control of the individual outlets.\nThe number of entries is contained in the \nrPDUOutletDevNumCntrlOutlets OID.')
rPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletControlIndex')).setDescription('The outlet to control.')
rPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
rPDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.\nThis OID is provided for informational purposes only.')
rPDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ('phase1-2', 4), ('phase2-3', 5), ('phase3-1', 6), ))).setMaxAccess('readonly').setDescription('The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
rPDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,5,4,3,6,7,1,)).subtype(namedValues=namedval.NamedValues(('immediateOn', 1), ('immediateOff', 2), ('immediateReboot', 3), ('delayedOn', 4), ('delayedOff', 5), ('delayedReboot', 6), ('cancelPendingCommand', 7), ))).setMaxAccess('readwrite').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOn (1) value will be returned.\nIf the outlet is off, the immediateOff (2) value will be\nreturned. \n\n\nSetting this variable to immediateOn (1) will immediately turn \nthe outlet on.\n\nSetting this variable to immediateOff (2) will immediately turn \nthe outlet off. \n\nSetting this variable to immediateReboot (3) will immediately \nreboot the outlet.\n\nSetting this variable to delayedOn (4) will turn the outlet on\nafter the rPDUOutletConfigPowerOnTime OID time has elapsed.   \n\nSetting this variable to delayedOff (5) will turn the outlet off\nafter the rPDUOutletConfigPowerOffTime OID time has elapsed.\n\nSetting this variable to delayedReboot  (6) will cause the \nSwitched Rack PDU to perform a delayedOff command, wait the \nrPDUOutletConfigRebootDuration OID time, and then perform a \ndelayedOn command. \n\nSetting this variable to cancelPendingCommand (7) will cause any\npending command to this outlet to be canceled.')
rPDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The bank associated with this outlet.')
rPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4))
rPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1)).setDescription('Allows for configuration of individual outlets. The number of\nentries is contained in the rPDUOutletDevNumCntrlOutlets OID.')
rPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletConfigIndex')).setDescription('The outlet to configure.')
rPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
rPDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.')
rPDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ('phase1-2', 4), ('phase2-3', 5), ('phase3-1', 6), ))).setMaxAccess('readonly').setDescription('The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
rPDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering on at coldstart or when a command that requires \na turn-on delay is issued.\n       \nAllowed values are:\n\n-1        - never power on.\n0         - power on immediately.\n1 to 7200 - power on up to 7200 seconds after being\n           commanded.')
rPDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time (in seconds) the outlet will delay \npowering off when a command that requires \na turn-off delay is issued.\n\nAllowed values are:\n\n-1        - never power off.\n0         - power off immediately.\n1 to 7200 - power off up to 7200 seconds after being\n           commanded.')
rPDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed range is any value between 5 and 60 seconds (1 minute).')
rPDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The bank associated with this outlet.')
rPDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('The size of the Outlet Config Monitored Table')
rPDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3)).setDescription('Allows for getting/setting of outlet thresholds of an Outlet Monitored Rack PDU.')
rPDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletConfigMonitoredIndex')).setDescription('This gives access to Monitored Outlet entries')
rPDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the RACK PDU Phase entry.')
rPDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the Monitored Outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.')
rPDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The outlet number of an Outlet Monitored RACK PDU.')
rPDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDUOutletConfigMonitoredNearOverloadThreshold OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.')
rPDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDUOutletConfigMonitoredLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDUOutletConfigMonitoredOverloadThreshold OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.')
rPDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDUOutletConfigMonitoredNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxOutletLoad OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.')
rPDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5))
rPDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1)).setDescription('Allows for getting of status of individual outlets. The number of\nentries is contained in the rPDUOutletDevNumCntrlOutlets OID.')
rPDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletStatusIndex')).setDescription('The outlet to gather status from.')
rPDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the outlet entry.')
rPDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the outlet. The maximum string size is device dependent.\nThis OID is provided for informational purposes only.')
rPDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ('phase1-2', 4), ('phase2-3', 5), ('phase3-1', 6), ))).setMaxAccess('readonly').setDescription('The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
rPDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('outletStatusOn', 1), ('outletStatusOff', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusOn (1) value will be returned.\nIf the outlet is off, the outletStatusOff (2) value will be\nreturned.')
rPDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('outletStatusCommandPending', 1), ('outletStatusNoCommandPending', 2), ))).setMaxAccess('readonly').setDescription('Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusNoCommandPending (2)\nwill be returned.')
rPDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The bank associated with this outlet.')
rPDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 7), Gauge32()).setMaxAccess('readonly').setDescription('Getting this OID will return the measured Outlet load for an Outlet Monitored Rack PDU\nin tenths of Amps.')
rPDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6))
rPDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1)).setDescription('Allows for management of outlets on a per bank basis.')
rPDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUOutletBankIndex')).setDescription('The bank to manage.')
rPDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the Switched Rack PDU bank entry.')
rPDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('alwaysAllowTurnON', 1), ('restrictOnNearOverload', 2), ('restrictOnOverload', 3), ))).setMaxAccess('readwrite').setDescription('This OID controls the behavior of a Switched Rack PDU \nbank when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding bank to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding bank to turn on if the \nrPDULoadBankConfigNearOverloadThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding bank to turn on if the \nrPDULoadBankConfigOverloadThreshold OID is exceeded.')
rPDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4))
rPDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1))
rPDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('powerSupplyOneOk', 1), ('powerSupplyOneFailed', 2), ))).setMaxAccess('readonly').setDescription('Getting this OID will return powerSupply1Ok(1) if power\nsupply 1 is functioning normally.  If not functioning normally, \nthis OID will return powerSupply1Failed(2).')
rPDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('powerSupplyTwoOk', 1), ('powerSupplyTwoFailed', 2), ('powerSupplyTwoNotPresent', 3), ))).setMaxAccess('readonly').setDescription('Getting this OID will return powerSupply2Ok(1) if power\nsupply 2 is functioning normally.  If not functioning normally, \nthis OID will return powerSupply2Failed(2).\n\nMetered Rack PDUs do not have a redundant powersupply.')
rPDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('allAvailablePowerSuppliesOK', 1), ('powerSupplyOneFailed', 2), ('powerSupplyTwoFailed', 3), ('powerSupplyOneandTwoFailed', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return powerSupply Alarm')
rPDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5))
rPDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The size of the Status Bank Table')
rPDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2)).setDescription('Allows for getting of status of each Rack PDU Bank')
rPDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUStatusBankIndex')).setDescription('This gives access to Bank entries')
rPDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the RACK PDU Bank entry.')
rPDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the bank number.')
rPDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,3,2,)).subtype(namedValues=namedval.NamedValues(('bankLoadNormal', 1), ('bankLoadLow', 2), ('bankLoadNearOverload', 3), ('bankLoadOverload', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the bank load state.\n\nbankLoadNormal(1) indicates that the bank is \noperating properly within the rPDULoadBankConfigLowLoadThreshold \nand rPDULoadBankConfigNearOverloadThreshold OID values.\n\nbankLoadLow(2) indicates that the bank load has\ndropped below the rPDULoadBankConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nbankLoadNearOverload(3) indicates that the bank load\nis greater than or equal to the \nrPDULoadBankConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nbankLoadOverload(4) indicates that the bank load is\ngreater than or equal to the rPDULoadBankConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.')
rPDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 3), Integer32()).setMaxAccess('readonly').setDescription('The size of the Status Phase Table')
rPDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4)).setDescription('Allows for getting of status of each Rack PDU Phase')
rPDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUStatusPhaseIndex')).setDescription('This gives access to Phase entries')
rPDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the RACK PDU Phase entry.')
rPDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the phase number.')
rPDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,1,3,)).subtype(namedValues=namedval.NamedValues(('phaseLoadNormal', 1), ('phaseLoadLow', 2), ('phaseLoadNearOverload', 3), ('phaseLoadOverload', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the Phase load state.\n\nphaseLoadNormal(1) indicates that the Phase is \noperating properly within the rPDULoadPhaseConfigLowLoadThreshold \nand rPDULoadPhaseConfigNearOverloadThreshold OID values.\n\nphaseLoadLow(2) indicates that the Phase load has\ndropped below the rPDULoadPhaseConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadNearOverload(3) indicates that the Phase load\nis greater than or equal to the \nrPDULoadPhaseConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadOverload(4) indicates that the Phase load is\ngreater than or equal to the rPDULoadPhaseConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.')
rPDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 5), Integer32()).setMaxAccess('readonly').setDescription('The size of the Status Outlet Table')
rPDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6)).setDescription('Allows for getting of status of each Outlet of an Outlet Monitored Rack PDU.')
rPDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1)).setIndexNames((0, 'PowerNet-MIB', 'rPDUStatusOutletIndex')).setDescription('This gives access to Outlet entries')
rPDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the RACK PDU Outlet entry.')
rPDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Getting this OID will return the Outlet number.')
rPDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,2,1,)).subtype(namedValues=namedval.NamedValues(('outletLoadNormal', 1), ('outletLoadLow', 2), ('outletLoadNearOverload', 3), ('outletLoadOverload', 4), ))).setMaxAccess('readonly').setDescription('Getting this OID will return the Outlet load state.\n\noutletLoadNormal(1) indicates that the Outlet is \noperating properly within the rPDUOutletConfigMonitoredLowLoadThreshold \nand rPDUOutletConfigMonitoredNearOverloadThreshold OID values.\n\noutletLoadLow(2) indicates that the Outlet load has\ndropped below the rPDUOutletConfigMonitoredLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noutletLoadNearOverload(3) indicates that the Outlet load\nis greater than or equal to the \nrPDUOutletConfigMonitoredNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noutletLoadOverload(4) indicates that the Outlet load is\ngreater than or equal to the rPDUOutletConfigMonitoredOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.')
airConditioners = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13))
airFM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1))
airFMIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1))
airFMIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the device. ')
airFMIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the airFMIdentTable. ')
airFMIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3)).setDescription('Allows for getting identification information \nfrom each module in the system. ')
airFMIdentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'airFMIdentModuleIndex')).setDescription('The module to get information from.')
airFMIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the module information.')
airFMIdentModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \nmodel number. ')
airFMIdentModuleDateOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \nmanufacture date. ')
airFMIdentModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \nunit serial number. ')
airFMIdentModuleFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \nfirmware revision. ')
airFMIdentModuleHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the \nhardware revision. ')
airFMStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2))
airFMStatusSystemOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusOn', 1), ('statusOff', 2), ))).setMaxAccess('readonly').setDescription('The operating state of the system.')
airFMStatusSystemAverageRetTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The system average return air \ntemperature in tenths of degrees Celsius.  ')
airFMStatusSystemAverageRetTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The system average return air \ntemperature in tenths of degrees Fahrenheit.')
airFMStatusSystemAverageRetHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The system average return air \nhumidity in tenths of percent RH.')
airFMStatusSystemActionTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The system action air \ntemperature in tenths of degrees Celsius. ')
airFMStatusSystemActionTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The system action air \ntemperature in tenths of degrees Fahrenheit. ')
airFMStatusSystemActionHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The system action air humidity in tenths of percent RH.')
airFMStatusSystemRemoteHighTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The system remote high air \ntemperature in tenths of degrees Celsius. ')
airFMStatusSystemRemoteHighTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The system remote high air \ntemperature in tenths of degrees Fahrenheit. ')
airFMStatusSystemRemoteAvgTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The system remote average air \ntemperature in tenths of degrees Celsius. ')
airFMStatusSystemRemoteAvgTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The system remote average air \ntemperature in tenths of degrees Fahrenheit. ')
airFMStatusSystemRemoteAvgHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The system remote average air \nhumidity in tenths of percent RH. ')
airFMStatusSystemRemoteLowTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The system remote low air \ntemperature in tenths of degrees Celsius. ')
airFMStatusSystemRemoteLowTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The system remote low air \ntemperature in tenths of degrees Fahrenheit. ')
airFMStatusSystemCoolingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 15), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabledYes', 1), ('enabledNo', 2), ))).setMaxAccess('readonly').setDescription('The state of the system cooling\nfunction enable.  ')
airFMStatusSystemReheatingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 16), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabledYes', 1), ('enabledNo', 2), ))).setMaxAccess('readonly').setDescription('The state of the system reheating\nfunction enable.  ')
airFMStatusSystemHumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabledYes', 1), ('enabledNo', 2), ))).setMaxAccess('readonly').setDescription('The state of the system humidify\nfunction enable.  ')
airFMStatusSystemDehumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('enabledYes', 1), ('enabledNo', 2), ))).setMaxAccess('readonly').setDescription('The state of the system dehumidify\nfunction enable.  ')
airFMStatusModuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 19), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the airFMStatusModuleTable.')
airFMStatusModuleTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20)).setDescription('Allows for getting information from each module\nin the system.')
airFMStatusModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1)).setIndexNames((0, 'PowerNet-MIB', 'airFMStatusModuleIndex')).setDescription('The module to get status from.')
airFMStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index of the module information.')
airFMStatusModuleOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The module output capacity in kilowatts.')
airFMStatusModuleSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The module supply air temperature in \ntenths of degrees Celsius.')
airFMStatusModuleSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The module supply air temperature in \ntenths of degrees Fahrenheit.')
airFMStatusModuleSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The module supply air humidity in tenths of percent RH.')
airFMStatusModuleReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The module return air temperature in \ntenths of degrees Celsius.')
airFMStatusModuleReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The module return air temperature in \ntenths of degrees Fahrenheit.')
airFMStatusModuleReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The module return air humidity in tenths of percent RH.')
airFMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3))
airFMGroupSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(6,4,3,2,1,5,7,)).subtype(namedValues=namedval.NamedValues(('statusOnLine', 1), ('statusIdle', 2), ('statusLoadShare', 3), ('statusOffLine', 4), ('statusFailed', 5), ('statusDisabled', 6), ('statusUndefined', 7), ))).setMaxAccess('readonly').setDescription('The status of this system within the group.')
airFMGroupSysRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of hours the system has been running.')
airFMGroupSysRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('rolePrimary', 1), ('roleBackup', 2), ))).setMaxAccess('readonly').setDescription('The role of this system within the group.')
airPA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2))
airPAIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1))
airPAIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device name.')
airPAModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device model number.')
airPADateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying when the device was produced.')
airPASerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device serial number.')
airPAFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device firmware revision.')
airPAHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device hardware revision.')
airPAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2))
airPASystemPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('powerON', 1), ('powerOFF', 2), ))).setMaxAccess('readonly').setDescription("The status of the unit's system power setting.\n\nON(1)   The system power is turned on.\nOFF(2)  The system power is turned off. ")
airPAOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('modeOFF', 1), ('modeVENTING', 2), ('modeCOOLING', 3), ))).setMaxAccess('readonly').setDescription("The current operating mode of the unit.\n\nOFF(1)      The system is off.\nVENTING(2)  The system's venting function is active.\nCOOLING(3)  The system's cooling function is active. ")
airPASetpointTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The temperature setpoint in Fahrenheit to which the unit is controlling. ')
airPASetpointTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The temperature setpoint in Celsius to which the unity is controlling. ')
airPABlowerSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('speedLOW', 1), ('speedHIGH', 2), ))).setMaxAccess('readonly').setDescription("The unit's blower speed setting.\n\nLOW(1)      The blower speed is low.\nHIGH(2)     The blower speed is high. ")
airPACompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusON', 1), ('statusOFF', 2), ))).setMaxAccess('readonly').setDescription("The unit's compressor status.\n\nON(1)   The compressor is turned on.\nOFF(2)  The compressor is turned off. ")
airPACondenserFan = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusON', 1), ('statusOFF', 2), ))).setMaxAccess('readonly').setDescription("The unit's condenser fan status.\n\nON(1)   The condenser fan is turned on.\nOFF(2)  The condenser fan is turned off. ")
airPACondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('statusON', 1), ('statusOFF', 2), ))).setMaxAccess('readonly').setDescription("The unit's condensate pump status.\n\nON(1)   The condensate pump is turned on.\nOFF(2)  The condensate pump is turned off. ")
airPASupplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The supply temperature in degrees Fahrenheit. ')
airPASupplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The supply temperature in degrees Celsius. ')
airPAReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The return temperature in degrees Fahrenheit. ')
airPAReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The return temperature in degrees Celsius. ')
airPARemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The remote temperature in degrees Fahrenheit. ')
airPARemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The remote temperature in degrees Celsius. ')
airPARemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 15), Integer32()).setMaxAccess('readonly').setDescription('The remote humidity. ')
airIR = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3))
airIRAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1))
airIRAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of active alarm conditions in the airIRAlarmConditionTable.')
airIRAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2)).setDescription('Table of active alarm conditions for the device.')
airIRAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'airIRAlarmConditionsIndex')).setDescription('Alarm condition specification')
airIRAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Alarm condition index.')
airIREventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Code for the alarm.')
airIRAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess('readonly').setDescription('Description of the alarm.')
airIRRC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2))
airIRRCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1))
airIRRCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1))
airIRRCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Group coolant output in tenths of kW.')
airIRRCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Group coolant demand in tenths of kW.')
airIRRCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in cubic feet per minute.')
airIRRCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in liters per second.')
airIRRCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of \ndegrees Celsius.')
airIRRCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2))
airIRRCGroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Fahrenheit.')
airIRRCGroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Celsius.')
airIRRCGroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRRCGroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 4), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Celsius.')
airIRRCGroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('low', 1), ('med-low', 2), ('med', 3), ('med-high', 4), ('high', 5), ))).setMaxAccess('readwrite').setDescription('The preferred fan speed setting.')
airIRRCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3))
airIRRCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 1), Integer32()).setMaxAccess('readwrite').setDescription('The number of cooling units present in the group.')
airIRRCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('racs', 1), ('hacs', 2), ('in-row', 3), ))).setMaxAccess('readwrite').setDescription('The group configuration type.')
airIRRCGroupConfigPctGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 3), Integer32()).setMaxAccess('readwrite').setDescription('The glycol mixture in percent.')
airIRRCGroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 4), Integer32()).setMaxAccess('readwrite').setDescription('The gain component of the PID in hundredths.')
airIRRCGroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 5), Integer32()).setMaxAccess('readwrite').setDescription('The integral component of the PID in hundredths.')
airIRRCGroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 6), Integer32()).setMaxAccess('readwrite').setDescription('The derivative component of the PID in hundredths.')
airIRRCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2))
airIRRCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1))
airIRRCUnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('The unit identification number.')
airIRRCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit name.')
airIRRCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit location.')
airIRRCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit model number.')
airIRRCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit serial number.')
airIRRCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit firmware version.')
airIRRCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit controller hardware revision.')
airIRRCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit manufacture date.')
airIRRCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2))
airIRRCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('standby', 1), ('on', 2), ('idle', 3), ))).setMaxAccess('readonly').setDescription('The cooling unit operating mode.')
airIRRCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling output in tenths of kW.')
airIRRCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling demand in tenths of kW.')
airIRRCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in cubic feet per minute.')
airIRRCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in hundredths of \nliters per second.')
airIRRCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Fahrenheit.')
airIRRCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Celsius.')
airIRRCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Fahrenheit.')
airIRRCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Celsius.')
airIRRCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in \nhundredths of inches of water.')
airIRRCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in Pa.')
airIRRCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in \nhundredths of inches of water.')
airIRRCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 15), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in Pa.')
airIRRCUnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 16), Integer32()).setMaxAccess('readonly').setDescription('The unit average fan speed in tenths of percent.')
airIRRCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the input contact.')
airIRRCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 18), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the output relay.')
airIRRCUnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('sourceA', 1), ('sourceB', 2), ))).setMaxAccess('readonly').setDescription('The power source that is powering the unit.')
airIRRCUnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 20), Integer32()).setMaxAccess('readonly').setDescription('The fluid valve position in percent open.')
airIRRCUnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 21), Integer32()).setMaxAccess('readonly').setDescription('The fluid flow in tenths of gallons per minute.')
airIRRCUnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 22), Integer32()).setMaxAccess('readonly').setDescription('The fluid flow in hundredths of liters per second.')
airIRRCUnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 23), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the entering fluid in \ntenths of degrees Fahrenheit.')
airIRRCUnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 24), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the entering fluid in \ntenths of degrees Celsius.')
airIRRCUnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 25), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the Leaving fluid in \ntenths of degrees Fahrenheit.')
airIRRCUnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 26), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the Leaving fluid in \ntenths of degrees Celsius.')
airIRRCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3))
airIRRCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Unit air filter run hours.')
airIRRCUnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 1 run hours.')
airIRRCUnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 2 run hours.')
airIRRCUnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 3 run hours.')
airIRRCUnitRunHoursFan4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 4 run hours.')
airIRRCUnitRunHoursFan5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 5 run hours.')
airIRRCUnitRunHoursFan6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 6 run hours.')
airIRRCUnitRunHoursFan7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 8), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 7 run hours.')
airIRRCUnitRunHoursFan8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 9), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 8 run hours.')
airIRRCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 10), Integer32()).setMaxAccess('readonly').setDescription('Unit fan left power supply run hours.')
airIRRCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 11), Integer32()).setMaxAccess('readonly').setDescription('Unit fan right power supply run hours.')
airIRRCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 12), Integer32()).setMaxAccess('readonly').setDescription('Unit condensate pump run hours.')
airIRRCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4))
airIRRCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('Air filter service interval in weeks.')
airIRRCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The air filter service interval alarm enable/disable.')
airIRRCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5))
airIRRCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 1), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.')
airIRRCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 4), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Celsius.')
airIRRCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 5), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 6), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Celsius.')
airIRRCUnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 7), Integer32()).setMaxAccess('readwrite').setDescription('Unit entering fluid high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRCUnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 8), Integer32()).setMaxAccess('readwrite').setDescription('Unit incoming fluid high temperature threshold in \ntenths of degrees Celsius.')
airIRRCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6))
airIRRCUnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('automatic', 1), ('maximum', 2), ))).setMaxAccess('readwrite').setDescription('The cooling capacity options setting.')
airIRRCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 2), Integer32()).setMaxAccess('readwrite').setDescription('The startup delay in seconds.')
airIRRCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('The idle on leak options setting.')
airIRRCUnitConfigPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('sourceA', 1), ('sourceB', 2), ('sourceAandB', 3), ))).setMaxAccess('readwrite').setDescription('The configured power source of the unit.')
airIRRCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the input contact.')
airIRRCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the output relay.')
airIRRCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('anyAlarm', 1), ('criticalAlarm', 2), ))).setMaxAccess('readwrite').setDescription('The source of output relay change.')
airIRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3))
airIRRP100 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1))
airIRRP100Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1))
airIRRP100GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1))
airIRRP100GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in cubic feet per minute.')
airIRRP100GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in liters per second.')
airIRRP100GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP100GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of \ndegrees Celsius.')
airIRRP100GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP100GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRP100GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Group coolant demand in tenths of kiloWatts.')
airIRRP100GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Group coolant output in tenths of kiloWatts.')
airIRRP100GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The amount of humidification the group is demanding \nfrom the humidifiers in percent.')
airIRRP100GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of humidification the group is \nsupplying in percent.')
airIRRP100GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The amount of dehumidification the group is demanding \nfrom the electric heaters in percent.')
airIRRP100GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of dehumidification the group is \nsupplying in percent.')
airIRRP100GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The amount of heating the group is demanding \nfrom the electric heaters in percent.')
airIRRP100GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of heating the group is \nsupplying in percent.')
airIRRP100GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2))
airIRRP100GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP100GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Celsius.')
airIRRP100GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP100GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 4), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Celsius.')
airIRRP100GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 5), Integer32()).setMaxAccess('readwrite').setDescription('Group humidify setpoint in tenths of\npercent relative humidity.')
airIRRP100GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 6), Integer32()).setMaxAccess('readwrite').setDescription('Group dehumidify setpoint in tenths of\npercent relative humidity.')
airIRRP100GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 7), Integer32()).setMaxAccess('readwrite').setDescription('Group dehumidify deadband in percent relative humidity.')
airIRRP100GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 8), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP100GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 9), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Celsius.')
airIRRP100GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('low', 1), ('med-low', 2), ('med', 3), ('med-high', 4), ('high', 5), ))).setMaxAccess('readwrite').setDescription('The preferred fan speed setting.')
airIRRP100GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3))
airIRRP100GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 1), Integer32()).setMaxAccess('readwrite').setDescription('The number of cooling units present in the group.')
airIRRP100GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('racs', 1), ('hacs', 2), ('in-row', 3), ))).setMaxAccess('readwrite').setDescription('The group configuration type.')
airIRRP100GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 3), Integer32()).setMaxAccess('readwrite').setDescription('The gain component of the cool PID in hundredths.')
airIRRP100GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 4), Integer32()).setMaxAccess('readwrite').setDescription('The integral component of the cool PID in hundredths.')
airIRRP100GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 5), Integer32()).setMaxAccess('readwrite').setDescription('The derivative component of the cool PID in hundredths.')
airIRRP100GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 6), Integer32()).setMaxAccess('readwrite').setDescription('The percent relative humidity below the setpoint that \nwill cause the humidifier to run at 100% capacity.')
airIRRP100GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 7), Integer32()).setMaxAccess('readwrite').setDescription('The gain component of the reheat PID in hundredths.')
airIRRP100GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 8), Integer32()).setMaxAccess('readwrite').setDescription('The integral component of the reheat PID in hundredths.')
airIRRP100GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 9), Integer32()).setMaxAccess('readwrite').setDescription('The derivative component of the reheat PID in hundredths.')
airIRRP100Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2))
airIRRP100UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1))
airIRRP100UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('The unit identification number.')
airIRRP100UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit name.')
airIRRP100UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit location.')
airIRRP100UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit model number.')
airIRRP100UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit serial number.')
airIRRP100UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit firmware version.')
airIRRP100UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit controller hardware revision.')
airIRRP100UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit manufacture date.')
airIRRP100UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2))
airIRRP100UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('standby', 1), ('on', 2), ('idle', 3), ))).setMaxAccess('readonly').setDescription('The cooling unit operating mode.')
airIRRP100UnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The relative humidity of the supply air in\ntenths of percent.')
airIRRP100UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The relative humidity of the return air in\ntenths of percent.')
airIRRP100UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in cubic feet per minute.')
airIRRP100UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in hundredths of \nliters per second.')
airIRRP100UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The unit average fan speed in tenths of percent.')
airIRRP100UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling demand in tenths of kiloWatts.')
airIRRP100UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling output in tenths of kiloWatts.')
airIRRP100UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 15), Integer32()).setMaxAccess('readonly').setDescription('The amount of humidification the unit is demanding \nfrom the humidifier in percent.')
airIRRP100UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 16), Integer32()).setMaxAccess('readonly').setDescription('The actual humidification output of the unit\nin percent.')
airIRRP100UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 17), Integer32()).setMaxAccess('readonly').setDescription('The amount of dehumidification the unit is \ndemanding in percent.')
airIRRP100UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 18), Integer32()).setMaxAccess('readonly').setDescription('The actual dehumidification output of the unit\nin percent.')
airIRRP100UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 19), Integer32()).setMaxAccess('readonly').setDescription('The amount of heating the unit is demanding \nfrom the electric heater in percent.')
airIRRP100UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 20), Integer32()).setMaxAccess('readonly').setDescription('The actual heating output of the unit\nin percent.')
airIRRP100UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the input contact.')
airIRRP100UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the output relay.')
airIRRP100UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 23), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 24), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 25), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 26), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 27), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP100UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 28), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP100UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 29), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in \nhundredths of inches of water.')
airIRRP100UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 30), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in Pa.')
airIRRP100UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 31), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in \nhundredths of inches of water.')
airIRRP100UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 32), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in Pa.')
airIRRP100UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 33), Integer32()).setMaxAccess('readonly').setDescription('The humidifier current of the unit\nin amperes.')
airIRRP100UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 34), Integer32()).setMaxAccess('readonly').setDescription('The water conductivity in the humidifier of the unit\nin microSiemens/cm.')
airIRRP100UnitStatusCompressorDriveSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 35), Integer32()).setMaxAccess('readonly').setDescription('The compressor drive speed in hundredths of Hertz.')
airIRRP100UnitStatusCompressorDrivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 36), Integer32()).setMaxAccess('readonly').setDescription('The compressor drive power consumption in \ntenths of kiloWatts.')
airIRRP100UnitStatusCompressorDriveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 37), Integer32()).setMaxAccess('readonly').setDescription('The compressor drive voltage consumption in \ntenths of volts.')
airIRRP100UnitStatusCompressorDriveCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 38), Integer32()).setMaxAccess('readonly').setDescription('The compressor drive voltage consumption in \ntenths of amperes.')
airIRRP100UnitStatusCompressorDriveDCLinkVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 39), Integer32()).setMaxAccess('readonly').setDescription('The compressor drive DC link voltage in \ntenths of volts.')
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 40), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the compressor drive heatsink\nin tenths of degrees Fahrenheit.')
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 41), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the compressor drive heatsink\nin tenths of degrees Celsius.')
airIRRP100UnitStatusCompressorDriveControlCardTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 42), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the compressor drive control card\nin tenths of degrees Fahrenheit.')
airIRRP100UnitStatusCompressorDriveControlCardTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 43), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the compressor drive control card\nin tenths of degrees Celsius.')
airIRRP100UnitStatusCompressorDriveWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 44), Integer32()).setMaxAccess('readonly').setDescription('The four byte warning status of the compressor drive \nin hexadecimal.')
airIRRP100UnitStatusCompressorDriveAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 45), Integer32()).setMaxAccess('readonly').setDescription('The four byte alarm status of the compressor drive \nin hexadecimal.')
airIRRP100UnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 46), Integer32()).setMaxAccess('readonly').setDescription('Unit suction pressure in PSI.')
airIRRP100UnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 47), Integer32()).setMaxAccess('readonly').setDescription('Unit suction pressure in kPa.')
airIRRP100UnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 48), Integer32()).setMaxAccess('readonly').setDescription('Unit discharge pressure in PSI.')
airIRRP100UnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 49), Integer32()).setMaxAccess('readonly').setDescription('Unit discharge pressure in kPa.')
airIRRP100UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3))
airIRRP100UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Unit air filter run hours.')
airIRRP100UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Unit condensate pump run hours.')
airIRRP100UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Unit fan right power supply run hours.')
airIRRP100UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 1 run hours.')
airIRRP100UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('Unit heater 1 run hours.')
airIRRP100UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 2 run hours.')
airIRRP100UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('Unit Heater 2 run hours.')
airIRRP100UnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 8), Integer32()).setMaxAccess('readonly').setDescription('Unit compressor run hours.')
airIRRP100UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4))
airIRRP100UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('Air filter service interval in weeks.')
airIRRP100UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The air filter service interval alarm enable/disable.')
airIRRP100UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 3), Integer32()).setMaxAccess('readwrite').setDescription('Humidifier service interval in weeks.')
airIRRP100UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The humidifier service interval alarm enable/disable.')
airIRRP100UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 5), Integer32()).setMaxAccess('readwrite').setDescription('Heater service interval in weeks.')
airIRRP100UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The heater service interval alarm enable/disable.')
airIRRP100UnitServiceIntervalCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 7), Integer32()).setMaxAccess('readwrite').setDescription('Compressor service interval in weeks.')
airIRRP100UnitServiceIntervalCompressorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The compressor service interval alarm enable/disable.')
airIRRP100UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 9), Integer32()).setMaxAccess('readwrite').setDescription('Condensate pump service interval in weeks.')
airIRRP100UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The condensate pump service interval alarm enable/disable.')
airIRRP100UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 11), Integer32()).setMaxAccess('readwrite').setDescription('Fans service interval in weeks.')
airIRRP100UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The fans service interval alarm enable/disable.')
airIRRP100UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5))
airIRRP100UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 1), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP100UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.')
airIRRP100UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP100UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 4), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Celsius.')
airIRRP100UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 5), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP100UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 6), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Celsius.')
airIRRP100UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 7), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply humidity high threshold in \ntenths of percent relative humidity.')
airIRRP100UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 8), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply humidity low threshold in \ntenths of percent relative humidity.')
airIRRP100UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6))
airIRRP100UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 1), Integer32()).setMaxAccess('readwrite').setDescription('The startup delay in seconds.')
airIRRP100UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('automatic', 1), ('maximum', 2), ))).setMaxAccess('readwrite').setDescription('The cooling capacity options setting.')
airIRRP100UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('The idle on leak options setting.')
airIRRP100UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the input contact.')
airIRRP100UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the output relay.')
airIRRP100UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('anyAlarm', 1), ('criticalAlarm', 2), ))).setMaxAccess('readwrite').setDescription('The source of output relay change.')
airIRRP100UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable humidification.')
airIRRP100UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('auto', 1), ('drainOff', 2), ))).setMaxAccess('readwrite').setDescription('The humidifier drain control.')
airIRRP100UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable dehumidification.')
airIRRP100UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable reheat.')
airIRRP100UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable heat assist.')
airIRRP500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2))
airIRRP500Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1))
airIRRP500GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1))
airIRRP500GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in cubic feet per minute.')
airIRRP500GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Group air flow in liters per second.')
airIRRP500GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP500GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Group maximum rack inlet temperature in tenths of \ndegrees Celsius.')
airIRRP500GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP500GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Group minimum rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRP500GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Group coolant demand in tenths of kiloWatts.')
airIRRP500GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('Group coolant output in tenths of kiloWatts.')
airIRRP500GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The amount of humidification the group is demanding \nfrom the humidifiers in percent.')
airIRRP500GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of humidification the group is \nsupplying in percent.')
airIRRP500GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The amount of dehumidification the group is demanding \nfrom the electric heaters in percent.')
airIRRP500GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of dehumidification the group is \nsupplying in percent.')
airIRRP500GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The amount of heating the group is demanding \nfrom the electric heaters in percent.')
airIRRP500GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The actual amount of heating the group is \nsupplying in percent.')
airIRRP500GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2))
airIRRP500GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP500GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('Group cooling setpoint in tenths of\ndegrees Celsius.')
airIRRP500GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP500GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 4), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Celsius.')
airIRRP500GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 5), Integer32()).setMaxAccess('readwrite').setDescription('Group humidify setpoint in tenths of\npercent relative humidity.')
airIRRP500GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 6), Integer32()).setMaxAccess('readwrite').setDescription('Group dehumidify setpoint in tenths of\npercent relative humidity.')
airIRRP500GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 7), Integer32()).setMaxAccess('readwrite').setDescription('Group dehumidify deadband in \npercent relative humidity.')
airIRRP500GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 8), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRRP500GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 9), Integer32()).setMaxAccess('readwrite').setDescription('Group supply air setpoint in tenths of\ndegrees Celsius.')
airIRRP500GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('low', 1), ('med-low', 2), ('med', 3), ('med-high', 4), ('high', 5), ))).setMaxAccess('readwrite').setDescription('The preferred fan speed setting.')
airIRRP500GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3))
airIRRP500GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 1), Integer32()).setMaxAccess('readwrite').setDescription('The number of cooling units.')
airIRRP500GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('racs', 1), ('hacs', 2), ('in-row', 3), ))).setMaxAccess('readwrite').setDescription('The group configuration type.')
airIRRP500GroupConfigPercentGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 3), Integer32()).setMaxAccess('readwrite').setDescription('The glycol mixture in percent.')
airIRRP500GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 4), Integer32()).setMaxAccess('readwrite').setDescription('The gain component of the cool PID in hundredths.')
airIRRP500GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 5), Integer32()).setMaxAccess('readwrite').setDescription('The integral component of the cool PID in hundredths.')
airIRRP500GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 6), Integer32()).setMaxAccess('readwrite').setDescription('The derivative component of the cool PID in hundredths.')
airIRRP500GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 7), Integer32()).setMaxAccess('readwrite').setDescription('The percent relative humidity below the setpoint that\nwill cause the humidifier to run at 100% capacity.')
airIRRP500GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 8), Integer32()).setMaxAccess('readwrite').setDescription('The gain component of the reheat PID in hundredths.')
airIRRP500GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 9), Integer32()).setMaxAccess('readwrite').setDescription('The integral component of the reheat PID in hundredths.')
airIRRP500GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 10), Integer32()).setMaxAccess('readwrite').setDescription('The derivative component of the reheat PID in hundredths.')
airIRRP500Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2))
airIRRP500UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1))
airIRRP500UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess('readwrite').setDescription('The unit identification number.')
airIRRP500UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit name.')
airIRRP500UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit location.')
airIRRP500UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit model number.')
airIRRP500UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit serial number.')
airIRRP500UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit firmware version.')
airIRRP500UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit controller hardware revision.')
airIRRP500UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit manufacture date.')
airIRRP500UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2))
airIRRP500UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('standby', 1), ('on', 2), ('idle', 3), ))).setMaxAccess('readonly').setDescription('The cooling unit operating mode.')
airIRRP500UnitStatusMaximumRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The maximum unit rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusMaximumRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The maximum unit rack inlet temperature in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The relative humidity of the supply air in\ntenths of percent.')
airIRRP500UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The relative humidity of the return air in\ntenths of percent.')
airIRRP500UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in cubic feet per minute.')
airIRRP500UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in hundredths of \nliters per second.')
airIRRP500UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The unit average fan speed in tenths of percent.')
airIRRP500UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling demand in tenths of kiloWatts.')
airIRRP500UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling output in tenths of kiloWatts.')
airIRRP500UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 15), Integer32()).setMaxAccess('readonly').setDescription('The amount of humidification the unit is demanding \nfrom the humidifier in percent.')
airIRRP500UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 16), Integer32()).setMaxAccess('readonly').setDescription('The actual humidification output of the unit\nin percent.')
airIRRP500UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 17), Integer32()).setMaxAccess('readonly').setDescription('The amount of dehumidification the unit is \ndemanding in percent.')
airIRRP500UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 18), Integer32()).setMaxAccess('readonly').setDescription('The actual dehumidification output of the unit\nin percent.')
airIRRP500UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 19), Integer32()).setMaxAccess('readonly').setDescription('The amount of heating the unit is demanding \nfrom the electric heater in percent.')
airIRRP500UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 20), Integer32()).setMaxAccess('readonly').setDescription('The actual heating output of the unit\nin percent.')
airIRRP500UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 21), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the input contact.')
airIRRP500UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 22), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the output relay.')
airIRRP500UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 23), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 24), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 25), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 26), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 27), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.')
airIRRP500UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 28), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.')
airIRRP500UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 29), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in \nhundredths of inches of water.')
airIRRP500UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 30), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in Pa.')
airIRRP500UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 31), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in \nhundredths of inches of water.')
airIRRP500UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 32), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in Pa.')
airIRRP500UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 33), Integer32()).setMaxAccess('readonly').setDescription('The humidifier current of the unit\nin amperes.')
airIRRP500UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 34), Integer32()).setMaxAccess('readonly').setDescription('The water conductivity in the humidifier of the unit\nin microSiemens/cm.')
airIRRP500UnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 35), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('sourceA', 1), ('sourceB', 2), ))).setMaxAccess('readonly').setDescription('The power source that is powering the unit.')
airIRRP500UnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 36), Integer32()).setMaxAccess('readonly').setDescription('The fluid valve position in percent open.')
airIRRP500UnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 37), Integer32()).setMaxAccess('readonly').setDescription('The fluid flow in tenths of gallons per minute.')
airIRRP500UnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 38), Integer32()).setMaxAccess('readonly').setDescription('The fluid flow in hundredths of liters per second.')
airIRRP500UnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 39), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the entering fluid in \ntenths of degrees Fahrenheit.')
airIRRP500UnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 40), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the entering fluid in \ntenths of degrees Celsius.')
airIRRP500UnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 41), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the Leaving fluid in \ntenths of degrees Fahrenheit.')
airIRRP500UnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 42), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the Leaving fluid in \ntenths of degrees Celsius.')
airIRRP500UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3))
airIRRP500UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Unit air filter run hours in hours.')
airIRRP500UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Unit condensate pump run hours in hours.')
airIRRP500UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Unit fan right power supply run hours in hours.')
airIRRP500UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 1 run hours in hours.')
airIRRP500UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('Unit heater 1 run hours in hours.')
airIRRP500UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 2 run hours in hours.')
airIRRP500UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('Unit Heater 2 run hours in hours.')
airIRRP500UnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 8), Integer32()).setMaxAccess('readonly').setDescription('Unit fan 3 run hours in hours.')
airIRRP500UnitRunHoursHeater3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 9), Integer32()).setMaxAccess('readonly').setDescription('Unit heater 3 run hours in hours.')
airIRRP500UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4))
airIRRP500UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('Air filter service interval in weeks.')
airIRRP500UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The air filter service interval alarm enable/disable.')
airIRRP500UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 3), Integer32()).setMaxAccess('readwrite').setDescription('Humidifier service interval in weeks.')
airIRRP500UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The humidifier service interval alarm enable/disable.')
airIRRP500UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 5), Integer32()).setMaxAccess('readwrite').setDescription('Heater service interval in weeks.')
airIRRP500UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The heater service interval alarm enable/disable.')
airIRRP500UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 7), Integer32()).setMaxAccess('readwrite').setDescription('Condensate pump service interval in weeks.')
airIRRP500UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The condensate pump service interval alarm enable/disable.')
airIRRP500UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 9), Integer32()).setMaxAccess('readwrite').setDescription('Fans service interval in weeks.')
airIRRP500UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The fans service interval alarm enable/disable.')
airIRRP500UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5))
airIRRP500UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 1), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP500UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.')
airIRRP500UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air temperature high threshold in \ntenths of degrees Fahrenheit.')
airIRRP500UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 4), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature high threshold in \ntenths of degrees Celsius.')
airIRRP500UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 5), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP500UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 6), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Celsius.')
airIRRP500UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 7), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply humidity high threshold in \ntenths of percent relative humidity.')
airIRRP500UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 8), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply humidity low threshold in \ntenths of percent relative humidity.')
airIRRP500UnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 9), Integer32()).setMaxAccess('readwrite').setDescription('Entering fluid high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRRP500UnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 10), Integer32()).setMaxAccess('readwrite').setDescription('Entering fluid high temperature threshold in \ntenths of degrees Celsius.')
airIRRP500UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6))
airIRRP500UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 1), Integer32()).setMaxAccess('readwrite').setDescription('The startup delay in seconds.')
airIRRP500UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('automatic', 1), ('maximum', 2), ))).setMaxAccess('readwrite').setDescription('The cooling capacity options setting.')
airIRRP500UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('The idle on leak options setting.')
airIRRP500UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the input contact.')
airIRRP500UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the output relay.')
airIRRP500UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('anyAlarm', 1), ('criticalAlarm', 2), ))).setMaxAccess('readwrite').setDescription('The source of output relay change.')
airIRRP500UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable humidification.')
airIRRP500UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('auto', 1), ('drainOff', 2), ))).setMaxAccess('readwrite').setDescription('The humidifier drain control.')
airIRRP500UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable dehumidification.')
airIRRP500UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable reheat.')
airIRRP500UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('Enable/disable heat assist.')
airIRSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4))
airIRSCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1))
airIRSCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1))
airIRSCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit name.')
airIRSCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A character string identifying the  \nunit location.')
airIRSCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit model number.')
airIRSCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit serial number.')
airIRSCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit firmware version.')
airIRSCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit controller hardware revision.')
airIRSCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the  \nunit manufacture date.')
airIRSCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2))
airIRSCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('standby', 1), ('on', 2), ('idle', 3), ))).setMaxAccess('readonly').setDescription('The cooling unit operating mode.')
airIRSCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling output in tenths of kW.')
airIRSCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The unit cooling demand in tenths of kW.')
airIRSCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in cubic feet per minute.')
airIRSCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The unit air flow in hundredths of \nliters per second.')
airIRSCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The unit rack inlet temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 8), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 9), Integer32()).setMaxAccess('readonly').setDescription('The unit supply air temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 10), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 11), Integer32()).setMaxAccess('readonly').setDescription('The unit return air temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 12), Integer32()).setMaxAccess('readonly').setDescription('The unit suction temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 13), Integer32()).setMaxAccess('readonly').setDescription('The unit suction temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 14), Integer32()).setMaxAccess('readonly').setDescription('The unit superheat temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 15), Integer32()).setMaxAccess('readonly').setDescription('The unit superheat temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 16), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in \nhundredths of inches of water.')
airIRSCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 17), Integer32()).setMaxAccess('readonly').setDescription('The unit containment differential pressure in Pa.')
airIRSCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 18), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in \nhundredths of inches of water.')
airIRSCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 19), Integer32()).setMaxAccess('readonly').setDescription('The unit air filter differential pressure in Pa.')
airIRSCUnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 20), Integer32()).setMaxAccess('readonly').setDescription('Unit suction pressure in PSI.')
airIRSCUnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 21), Integer32()).setMaxAccess('readonly').setDescription('Unit suction pressure in kPa.')
airIRSCUnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 22), Integer32()).setMaxAccess('readonly').setDescription('Unit discharge pressure in PSI.')
airIRSCUnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 23), Integer32()).setMaxAccess('readonly').setDescription('Unit discharge pressure in kPa.')
airIRSCUnitStatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 24), Integer32()).setMaxAccess('readonly').setDescription('The unit average evaporator fan speed in tenths of percent.')
airIRSCUnitStatusCondenserFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 25), Integer32()).setMaxAccess('readonly').setDescription('The unit average condenser fan speed in tenths of percent.')
airIRSCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 26), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the input contact.')
airIRSCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 27), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('The state of the output relay.')
airIRSCUnitStatusCondOutletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 28), Integer32()).setMaxAccess('readonly').setDescription('The unit condenser outlet air temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusCondOutletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 29), Integer32()).setMaxAccess('readonly').setDescription('The unit condenser outlet air temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusCondInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 30), Integer32()).setMaxAccess('readonly').setDescription('The unit condenser inlet air temperature in tenths of\ndegrees Fahrenheit.')
airIRSCUnitStatusCondInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 31), Integer32()).setMaxAccess('readonly').setDescription('The unit condenser inlet air temperature in tenths of\ndegrees Celsius.')
airIRSCUnitStatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 32), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('The state (off/on) of the compressor.')
airIRSCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3))
airIRSCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('Unit air filter run hours.')
airIRSCUnitRunHoursEvaporatorFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Unit evaporator fan 1 run hours.')
airIRSCUnitRunHoursEvaporatorFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Unit evaporator fan 2 run hours.')
airIRSCUnitRunHoursEvaporatorFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Unit evaporator fan 3 run hours.')
airIRSCUnitRunHoursCondenserFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('Unit condenser fan 1 run hours.')
airIRSCUnitRunHoursCondenserFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('Unit condenser fan 2 run hours.')
airIRSCUnitRunHoursCondenserFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('Unit condenser fan 3 run hours.')
airIRSCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 8), Integer32()).setMaxAccess('readonly').setDescription('Unit fan left power supply run hours.')
airIRSCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 9), Integer32()).setMaxAccess('readonly').setDescription('Unit fan right power supply run hours.')
airIRSCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 10), Integer32()).setMaxAccess('readonly').setDescription('Unit condensate pump run hours.')
airIRSCUnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 11), Integer32()).setMaxAccess('readonly').setDescription('Unit compressor run hours.')
airIRSCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4))
airIRSCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('Air filter service interval in weeks.')
airIRSCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('enable', 1), ('disable', 2), ))).setMaxAccess('readwrite').setDescription('The air filter service interval alarm enable/disable.')
airIRSCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5))
airIRSCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 1), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRSCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription('Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.')
airIRSCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 3), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRSCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 4), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air high temperature threshold in \ntenths of degrees Celsius.')
airIRSCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 5), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.')
airIRSCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 6), Integer32()).setMaxAccess('readwrite').setDescription('Unit return air high temperature threshold in \ntenths of degrees Celsius.')
airIRSCUnitSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6))
airIRSCUnitSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 1), Integer32()).setMaxAccess('readwrite').setDescription('Unit cooling setpoint in tenths of\ndegrees Fahrenheit.')
airIRSCUnitSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 2), Integer32()).setMaxAccess('readwrite').setDescription('Unit cooling setpoint in tenths of\ndegrees Celsius.')
airIRSCUnitSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 3), Integer32()).setMaxAccess('readwrite').setDescription('Unit cooling deadband in tenths of\ndegrees Fahrenheit.')
airIRSCUnitSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 4), Integer32()).setMaxAccess('readwrite').setDescription('Unit cooling deadband in tenths of\ndegrees Celsius.')
airIRSCUnitSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('low', 1), ('med-low', 2), ('med', 3), ('med-high', 4), ('high', 5), ))).setMaxAccess('readwrite').setDescription('The preferred fan speed setting.')
airIRSCUnitSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 6), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air setpoint in tenths of\ndegrees Fahrenheit.')
airIRSCUnitSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 7), Integer32()).setMaxAccess('readwrite').setDescription('Unit supply air setpoint in tenths of\ndegrees Celsius.')
airIRSCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7))
airIRSCUnitConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('racs', 1), ('spot', 2), ('in-row', 3), ))).setMaxAccess('readwrite').setDescription('The unit configuration type.')
airIRSCUnitConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('discrete', 1), ('proportional', 2), ))).setMaxAccess('readwrite').setDescription('The unit capacity control.')
airIRSCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 3), Integer32()).setMaxAccess('readwrite').setDescription('The startup delay in seconds.')
airIRSCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('The idle on leak options setting.')
airIRSCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the input contact.')
airIRSCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal state of the output relay.')
airIRSCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('anyAlarm', 1), ('criticalAlarm', 2), ))).setMaxAccess('readwrite').setDescription('The source of output relay change.')
airIRSCUnitConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 8), Integer32()).setMaxAccess('readwrite').setDescription('The altitude of the unit above sea level in feet.')
airIRSCUnitConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 9), Integer32()).setMaxAccess('readwrite').setDescription('The altitude of the unit above sea level in meters.')
airIRSCUnitConfigOpControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('standby', 1), ('on', 2), ))).setMaxAccess('readwrite').setDescription('The unit operational control.')
rARU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14))
rARUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1))
rARUIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1)).setDescription('Allows for query of the individual devices. \nThe number of entries is contained in the \nrARUStatusAruDeviceCount OID.')
rARUIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUIdentAruIndex')).setDescription('The device to query.')
rARUIdentAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUIdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the device. ')
rARUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2))
rARUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1)).setDescription('Allows for configuration of the individual ARU devices accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.')
rARUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUConfigAruIndex')).setDescription('The ARUs to configure.')
rARUConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUConfigAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the ARU.')
rARUConfigAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(15,5,6,13,10,2,8,7,1,14,9,4,12,16,18,17,3,11,)).subtype(namedValues=namedval.NamedValues(('aruOff', 1), ('aru400cfm', 10), ('aru600cfm', 11), ('aru700cfm', 12), ('aru900cfm', 13), ('aru1000cfm', 14), ('aru1400cfm', 15), ('aru1600cfm', 16), ('aru1800cfm', 17), ('aru2000cfm', 18), ('aru85F-29C', 2), ('aru90F-32C', 3), ('aru95F-35C', 4), ('aru100F-38C', 5), ('aru7kW-1200cfm', 6), ('aru5kW-800cfm', 7), ('aru3kW-500cfm', 8), ('aru2kW-300cfm', 9), ))).setMaxAccess('readwrite').setDescription('This OID defines the desired base airflow of the ARU, and sets the \nspeed of the ARU fans when the temperature override is inactive.\n\nValues specified in cfm (cubic feet per minute) can be converted\nto metric values using the conversion factor:\n\n   1 cfm = 1.70 m^3/hr (cubic meters per hour).\n\nValues (1) through (9) are for support of legacy (1st generation) ARUs.\nWriting these values to a 2nd generation ARU will result in the following:\nA value greater than (9) will be ignored by a 1st generation ARU.\n\n   aruOff      (1) - Ignored\n   aru85F-29C  (2) - 1200 cfm\n   aru90F-32C  (3) - 800 cfm\n   aru95F-35C  (4) - 500 cfm\n   aru100F-38C (5) - 400 cfm\n   aru7kW      (6) - 1200 cfm\n   aru5kW      (7) - 800 cfm\n   aru3kW      (8) - 500 cfm\n   aru2kW      (9) - 400 cfm\n\nNOTE: -1 will be returned if the ARU is not communicating.')
rARUConfigAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('This OID is used to enable/disable the remote temperature override setting of the ARU.\n\nIf this OID is set to 1, the remote setting for temperature override is disabled.\nIf this OID is set to 2, the remote setting for temperature override is enabled.')
rARUConfigAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('This OID is the Temperature Override setpoint of the ARU.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees using the \nunits specified in the rARUStatusSysTempUnits OID (Celsius or Fahrenheit).')
rARUConfigAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('aruOn', 1), ('aruOff', 2), ))).setMaxAccess('readwrite').setDescription('This is the master on/off control for the ARU.')
rARUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3))
rARUStatusAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The total number of ARUs accessible from this IP.')
rARUStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('celsius', 1), ('fahrenheit', 2), ))).setMaxAccess('readonly').setDescription('The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.')
rARUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3)).setDescription('Allows for query of the individual ARUs accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.')
rARUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUStatusAruIndex')).setDescription('The ARUs to access.')
rARUStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUStatusAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the ARU.')
rARUStatusAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(15,5,6,13,10,2,8,7,1,14,9,4,12,16,18,17,3,11,)).subtype(namedValues=namedval.NamedValues(('aruOff', 1), ('aru400cfm', 10), ('aru600cfm', 11), ('aru700cfm', 12), ('aru900cfm', 13), ('aru1000cfm', 14), ('aru1400cfm', 15), ('aru1600cfm', 16), ('aru1800cfm', 17), ('aru2000cfm', 18), ('aru85F-29C', 2), ('aru90F-32C', 3), ('aru95F-35C', 4), ('aru100F-38C', 5), ('aru7kW-1200cfm', 6), ('aru5kW-800cfm', 7), ('aru3kW-500cfm', 8), ('aru2kW-300cfm', 9), ))).setMaxAccess('readonly').setDescription('This OID defines the desired base airflow of the ARU, or the \nspeed of the ARU fans when the temperature override is inactive.\n\nSee also the rARUConfigAruRemoteSetpoint OID.\n\nNOTE: -1 will be returned if the ARU is not communicating.')
rARUStatusAruManualSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,10,8,7,2,9,1,4,6,3,)).subtype(namedValues=namedval.NamedValues(('aruOff', 1), ('aruRem', 10), ('aru85F-29C', 2), ('aru90F-32C', 3), ('aru95F-35C', 4), ('aru100F-38C', 5), ('aru7kW', 6), ('aru5kW', 7), ('aru3kW', 8), ('aru2kW', 9), ))).setMaxAccess('readonly').setDescription("Manual operating setpoint of the ARU, which is set on the\npanel of the ARU. If the ARU doesn't have a manual , \nthe OID will always return a value of aruRem (10).\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees or kW.\nIf the manual setpoint is set to Remote, or if the ARU doesn't\nhave a manual switch, this OID will return aruRem.")
rARUStatusAruTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('ARU temperature probe #1 reading. \nThe summary exhaust temperature on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).')
rARUStatusAruTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('ARU temperature probe #2 reading. \nThe exhaust temperature in the upper plenum on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).')
rARUStatusAruTemp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('ARU temperature probe #3 reading. \nThe exhaust temperature in the lower plenum on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).')
rARUStatusAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readonly').setDescription('This OID indicates whether the ARU remote temperature override is enabled or disabled.\nIf this OID is a 1, the remote setting for temperature override is disabled.\nIf this OID is a 2, the remote setting for temperature override is enabled.')
rARUStatusAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('ARU remote temperature override setpoint setting. \n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).')
rARUStatusAruAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription("An ASCII string containing the 8 flags representing\nthe current alarm state of the ARU. If the state of \nthe ARU is unknown, this variable is set to 'UNKNOWN'.\n\nThe flags are numbered 1 to 8, read from left to\nright. The flags are defined as follows:\n\nFlag  1: Fan Fail 1\nFlag  2: Fan Fail 2\nFlag  3: Fan Fail 3\nFlag  4: Smoke (if ARU is equipped with smoke detector)\n     \nFlag  5: High Temp (Out of Thermal Control)\nFlag  6: Over Temp (Exhaust Temp. Exceeds Override Setpoint)\nFlag  7: Fan Fail 4 (Gen 2 ARU only)\nFlag  8: Reserved")
rARUStatusAruCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('commsNeverDiscovered', 1), ('commsEstablished', 2), ('commsLost', 3), ))).setMaxAccess('readonly').setDescription('The state of communications to the device.\ncommNeverDiscovered(1) indicates there has never been communications with this device.\ncommsEstablished(2) indicates communication is normal and active with this device.\ncommsLost(3) indicates communication had been established, but is no device.')
rARUStatusAruTempOvrdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('inactive', 1), ('active', 2), ))).setMaxAccess('readonly').setDescription('Specifies whether the ARU is increasing airflow because\nexhaust air temperature has exceeded the setting specified in the \nrARUConfigAruTempOvrdSetpoint OID.')
rARUStatusAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('aruOn', 1), ('aruOff', 2), ))).setMaxAccess('readonly').setDescription('This is the master on/off control for the ARU.')
rARUStatusAruTotalAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The total airflow provided by the aru. Specified in cfm (cubic feet per minute).\nCan be converted to metric values using the conversion factor:\n1 cfm = 1.70 m^3/hr (cubic meters per hour).')
rARUFanStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4))
rARUFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1)).setDescription('Allows for query of the individual devices. \nThe number of entries is contained in the \nrARUStatusAruDeviceCount OID.')
rARUFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUFanStatusAruIndex'), (0, 'PowerNet-MIB', 'rARUFanStatusFanIndex')).setDescription('The device to query.')
rARUFanStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUFanStatusNominalFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The nominal rotational speed (RPM) of the fans when they are\noperating at the 100% level.')
rARUFanStatusSelectedFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The currently selected ARU speed level, \nspecified in percent of full capacity.')
rARUFanStatusReplacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,6,5,3,4,2,7,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('khr20', 2), ('khr25', 3), ('khr30', 4), ('khr35', 5), ('khr40', 6), ('khr50', 7), ))).setMaxAccess('readwrite').setDescription('Threshold above which a run hour alarm will exist, indicating\nthat it might be time to proactively replace a fan.')
rARUFanStatusFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The index to an individual fan table entry.')
rARUFanStatusFanOperatingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,5,4,1,3,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('off', 2), ('onOk', 3), ('onDegraded', 4), ('offFailed', 5), ))).setMaxAccess('readonly').setDescription('The current operating state of the fan.')
rARUFanStatusFanRpmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The current rotational speed of the fan, \nspecified in rotations per minute (RPM).')
rARUFanStatusFanFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The flow rate provided by the fan, based on its measured rotational speed.\nSpecified in cfm (cubic feet per minute). Can be converted to metric values\nusing the conversion factor: 1 cfm = 1.70 m^3/hr (cubic meters per hour).')
rARUFanStatusFanInServiceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 9), DisplayString()).setMaxAccess('readwrite').setDescription('The installation/replacement date of the fan.')
rARUFanStatusFanRunhourCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The total time for which the fan has been running.\nSpecified in 10ths of hours.')
rARUFanStatusFanRunhourReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription("Writing yes to this This OID will reset a fan's total run hour counter,\nwhich is shown in the rARUFanStatusFanRunhourCounter OID.")
rARUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5))
rARUPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1)).setDescription('Allows for query of the individual ARUs accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.')
rARUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUPowerStatusAruIndex')).setDescription('The device to query.')
rARUPowerStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUPowerStatusPrimaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not line voltage is present on AC input 1.')
rARUPowerStatusAuxiliaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not line voltage is present on AC input 2.')
rARUPowerStatusRedundantAcConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('singleCord', 1), ('dualCord', 2), ))).setMaxAccess('readwrite').setDescription('Indicates whether or not a dual cord is in use.\nWhen this setting is set to dualCord (2), aruRedundantPowerLostAlarm\ntraps will be generated when either primary or auxiliary input\nvoltage is not present. When this setting is set to singleCord (1),\naruRedundantPowerLostAlarm traps will not be generated.')
rARUSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6))
rARUSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the rARUSensorsStatusTable.')
rARUSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2)).setDescription('Allows for getting environmental sensor status information.')
rARUSensorsStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUSensorsStatusAruIndex'), (0, 'PowerNet-MIB', 'rARUSensorsStatusSensorNumber')).setDescription('The unit to get data from.')
rARUSensorsStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of the sensor on the device.')
rARUSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("The sensor's current temperature reading. The temperature scale \nis based on the system preferences configuration.")
rARUSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the rARUSensorsConfigTable.')
rARUSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4)).setDescription('Allows for getting configuration information from \nenvironmental sensors attached to the device.')
rARUSensorsConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'rARUSensorsConfigAruIndex'), (0, 'PowerNet-MIB', 'rARUSensorsConfigSensorNumber')).setDescription('The unit to get data from.')
rARUSensorsConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to the ARU entry.')
rARUSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of the sensor on the device.')
rARUSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the sensor.')
rARUSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('The location of the sensor.')
rARUSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which a maximum temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which a high temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 7), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which a low temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('The temperature at which a min temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('The change in temperature required to cause a\ntemperature alarm to change from an active to an\ninactive state. The temperature scale is based on \nthe system preferences configuration.')
rARUSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 10), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature short-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not decrease\nbeyond the value specified by the temperature short-term\ndecreasing rate threshold value.')
rARUSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature short-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 13), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not increase\nbeyond the value specified by the temperature short-term\nincreasing rate threshold value.')
rARUSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 14), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature long-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 15), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not decrease\nbeyond the value specified by the temperature long-term\ndecreasing rate threshold value.')
rARUSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 16), Integer32()).setMaxAccess('readwrite').setDescription('The value of the temperature long-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.')
rARUSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 17), Integer32()).setMaxAccess('readwrite').setDescription('The time over which the temperature may not increase\nbeyond the value specified by the temperature long-term\nincreasing rate threshold value.')
xPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15))
xPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1))
xPDUIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the PDU.')
xPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the PDU. \nThis value is set at the factory.')
xPDUIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the application firmware revision of the  PDU.')
xPDUIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the application operating system firmware revision of the PDU.')
xPDUIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the PDU controller firmware revision.')
xPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The date when the PDU was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.')
xPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the model number of \nthe PDU. This value is set at the factory.')
xPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the serial number of \nthe PDU. This value is set at the factory.')
xPDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2))
xPDUDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The nominal main input voltage to the PDU. \nMeasured in Volts,  line-to-line for a delta service or \nline-to-neutral for a wye service.')
xPDUDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('delta', 1), ('wye', 2), ))).setMaxAccess('readonly').setDescription('The type of utility input to the PDU. Either 3 wires (delta), or 4 wires (wye).')
xPDUDeviceNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The nominal line-to-neutral output voltage to the load measured in Volts.')
xPDUDeviceMainInputBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The rating of the main input breaker measured in Amps.')
xPDUDevicePanelBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The rating of the panel breaker measured in Amps.')
xPDUDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not a transformer is installed in the PDU.')
xPDUDeviceLoadTieBreakerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not a load tie breaker is installed in the PDU.')
xPDUDeviceLoadTestPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not a load test port is installed in the PDU.')
xPDUDeviceFusesPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not the UPS feed from the PDU includes fuses.')
xPDUDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not cooling fans are installed in the PDU.')
xPDUDeviceBypassInputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription("Indicates whether or not the PDU is equipped with a second feed for\nthe UPS's bypass input.")
xPDUDeviceCrossTieOutputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not the PDU is equipped with a cross-tie output.')
xPDUDeviceEarthGroundMonitorPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ))).setMaxAccess('readonly').setDescription('Indicates whether or not the PDU can provide ground current measurements.')
xPDUDeviceInfraXureType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('typeB', 1), ('typeC', 2), ))).setMaxAccess('readonly').setDescription('Indicates the configuration of this PDU system. \nType-B PDU is in a distributed UPS system and has bypass capabilities. \nType-C PDU receives power from a larger central UPS.')
xPDUACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3))
xPDUMainInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1))
xPDUMainInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold above which an input over voltage condition will be generated.\nSpecified as percent deviation from nominal.')
xPDUMainInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold below which an input under voltage condition will be generated.\nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.')
xPDUMainInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of Main input voltage entries.')
xPDUMainInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4)).setDescription('A list of input voltage table entries. The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUMainInputVoltageTableSize OID.')
xPDUMainInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUMainInputVoltagePhaseIndex')).setDescription('An entry containing information applicable to a \nparticular main input voltage phase.')
xPDUMainInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each input phase entry in the table.')
xPDUMainInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Line-to-line PDU input voltage when an isolation transformer is present, \nor -1 if no transformer present in this PDU. Measured in tenths of Volts.')
xPDUMainInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Line-to-neutral PDU input voltage when an isolation transformer is not present,\nor -1 if a transformer is present in this PDU. Measured in tenths of Volts.')
xPDUBypassInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2))
xPDUBypassInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold above which a bypass input over voltage condition will be generated. \nSpecified as percent deviation from nominal.')
xPDUBypassInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold below which an bypass input under voltage condition will be generated. \nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.')
xPDUBypassInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of bypass input voltage entries.')
xPDUBypassInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4)).setDescription('A list of output table entries.  The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUBypassInputVoltageTableSize OID.')
xPDUBypassInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUBypassInputVoltagePhaseIndex')).setDescription('An entry containing information applicable to a \nparticular bypass input voltage phase.')
xPDUBypassInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Index of each bypass input phase entry in the table.')
xPDUBypassInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Line-to-line bypass input voltage, or -1 if no bypass \nfeed is present in this PDU. Measured in tenths of Volts.')
xPDUBypassInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Line-to-neutral bypass input voltage, or -1 if no bypass\nfeed is present in this PDU. Measured in tenths of Volts.')
xPDUUPSInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3))
xPDUUPSInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of UPS input voltage entries.')
xPDUUPSInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2)).setDescription('A list of UPS input table entries.  The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUUPSInputVoltageTableSize OID.')
xPDUUPSInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUUPSInputVoltagePhaseIndex')).setDescription('An entry containing information applicable to a \nparticular UPS input voltage phase.')
xPDUUPSInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each UPS input phase entry in the table.')
xPDUUPSInputVoltageLtoNPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('notPresent', 1), ('present', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('Indicates whether or not voltage is present at the UPS feed.')
xPDUSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4))
xPDUSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The system output frequency in tenths of Hertz.')
xPDUSystemOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('Shows the neutral current measured at the system output in tenths of Amps.')
xPDUSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('Shows the total system output power in tenths of kW.')
xPDUSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('Shows the total system output power in tenths of kVA.')
xPDUSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('Indicates the total power factor of the system output.\nA value of 100 representing a unity power factor (1.00).\nMeasured in hundredths.')
xPDUSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,5,10,8,9,1,7,4,3,)).subtype(namedValues=namedval.NamedValues(('freqToleranceOff', 1), ('freqToleranceNine', 10), ('freqTolerancePointTwo', 2), ('freqTolerancePointFive', 3), ('freqToleranceOne', 4), ('freqToleranceOnePointFive', 5), ('freqToleranceTwo', 6), ('freqToleranceThree', 7), ('freqToleranceFour', 8), ('freqToleranceFive', 9), ))).setMaxAccess('readwrite').setDescription('Shows the circuit panel output frequency tolerance in Hertz.')
xPDUSystemOutputMaxKWPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 7), Integer32()).setMaxAccess('readwrite').setDescription('Defines 100% load in kW. \nPurpose is to set to match UPS capabilities.')
xPDUSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold above which an output over voltage condition will be generated. \nSpecified as percent deviation from nominal.')
xPDUSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 30))).setMaxAccess('readwrite').setDescription('Threshold below which an output under voltage condition will be generated. \nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.')
xPDUSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold above which an over current condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.')
xPDUSystemOutputOverCurrentNeutralThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold above which an Over current neutral condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.')
xPDUSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which an under current condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.')
xPDUSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 13), Integer32()).setMaxAccess('readonly').setDescription('The number of System Output phase entries.')
xPDUSystemOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14)).setDescription('A list of system output table entries.\nThe number of entries is contained in the \nxPDUSystemOutputTableSize OID.')
xPDUSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUSystemOutputPhaseIndex')).setDescription('An entry containing information applicable to a \nparticular system output phase.')
xPDUSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each output phase entry in the table.')
xPDUSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Line-to-line system output voltage available at the circuit panel. \nMeasured in tenths of Volts.')
xPDUSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Line-to-neutral system output voltage available at the circuit panel. \nMeasured in tenths of Volts.')
xPDUSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('System load current per phase. Measured in tenths of Amps.')
xPDUSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('System output power per phase. Measured in tenths of kW.')
xPDUSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('System output power per phase. Measured in tenths of kVA.')
xPDUSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Indicates the Power Factor of the system output per phase.\nA value of 100 representing a unity Power Factor (1.00).\nMeasured in hundredths.')
xPDUGroundMonitorPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5))
xPDUGroundCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('Shows the current measured in the earth ground conductor.\nMeasured in tenths of Amps, or -1 if not available.')
xPDUGroundCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('Threshold above which a ground current over current \ncondition will be generated. Specified in tenths of Amps.')
xPDUCircuitBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4))
xPDUSystemBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1))
xPDUSystemBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of system breaker entries.')
xPDUSystemBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2)).setDescription('A list of system breaker entries.\nThe number of entries is contained in the \nxPDUSystemBreakerTableSize OID.')
xPDUSystemBreakerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUSystemBreakerTableIndex')).setDescription('An entry containing information applicable to a \nparticular system breaker.')
xPDUSystemBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of system breaker entries in the table.')
xPDUSystemBreakerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 79))).setMaxAccess('readonly').setDescription('A brief description of the system breakers.')
xPDUSystemBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('Indicates whether this breaker is open(1) or closed(2).')
xPDUBranchBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2))
xPDUNumOfBranchBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of branch breakers (panel positions) in the Panel.\nreturns 42 for a 1-panel or 84 for a 2-panel system.')
xPDUBranchBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of branch breaker entries determined by the xPDUNumOfBranchBreakers OID.')
xPDUBranchBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3)).setDescription('A list of branch breaker table entries. The \nnumber of entries is given by the value of xPDUBranchBreakerTableSize\nThe number of entries is contained in the xPDUBranchBreakerTableSize OID.')
xPDUBranchBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUBranchBreakerTableIndex')).setDescription('An entry containing information applicable to a \nparticular branch breaker (panel position).')
xPDUBranchBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of branch breaker entries in the table.')
xPDUBranchBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Indicates current rating of this breaker.  \n0=Breaker is not present.\n1=Earth leakage connection.\n2=Neutral connection.\nA value greater than 2 indicates breaker current rating in Amps.\nA value above 60 Amp will signify a remote feed.\nThe xPDUBranchBreakerRDPFeed OID will indicate which breakers are\nconfigured as a remote drop.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.')
xPDUBranchBreakerRDPFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('remoteDistribution', 1), ('noRemoteDistribution', 2), ))).setMaxAccess('readonly').setDescription('Indicates that a breaker position is feeding a remote \ndistribution panel.')
xPDUBranchBreakerTieIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('breakerUnTied', 1), ('breakerTied', 2), ))).setMaxAccess('readwrite').setDescription("Indicates whether or not the breaker in this position \nis logically associated with the breaker immediately below it.\nThis setting is used grouping the breakers feeding \na multi-pole branch circuit.\nNote: When setting an entry's branch breaker tie indicator to breakerTied,\nall the positions that are tied to this breaker will take on the rating\nand thresholds for this entry of the table.")
xPDUBranchBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Indicates the branch current in tenths of  Amps or -1 when not available.')
xPDUBranchBreakerOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold above which a branch circuit high current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.')
xPDUBranchBreakerUnderCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which a branch circuit low current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.')
xPDUBranchBreakerMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold above which a branch circuit maximum current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.')
xPDUBranchBreakerMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which a branch circuit minimum current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.')
xPDUBranchBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 10), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the breaker.')
xPDUBranchBreakerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 11), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the location of the breaker.')
xPDUInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5))
xPDUInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported by the PDU.')
xPDUInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of input contact entries.')
xPDUInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3)).setDescription('A list of contacts supported by the PDU.\nThe number of entries is contained in the \nxPDUInputContactTableSize OID.')
xPDUInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUInputContactNumber')).setDescription('A contact entry containing information for a given contact.')
xPDUInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('An index identifying the contact on the PDU.')
xPDUInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the contact.')
xPDUInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal operating position of the contact.')
xPDUInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('This value indicates the current state of the contact.')
xPDUOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6))
xPDUOutputRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of output relays supported by the PDU.')
xPDUOutputRelaysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of output relay entries.')
xPDUOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3)).setDescription('A list of output relays supported by the PDU.\nThe number of entries is contained in the \nxPDUOutputRelayTableSize OID.')
xPDUOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'xPDUOutputRelayNumber')).setDescription('A output relay entry containing information for a given contact.')
xPDUOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('An index identifying the output relay on the PDU.')
xPDUOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the output relay.')
xPDUOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal operating position of the output relay.')
xPDUOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('This value indicates the current state of the output relay.')
xPDUMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7))
xPDUEPOMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('armed', 1), ('disarmed', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('Indicates whether the EPO System is armed(1) or disarmed(2).')
xPDUTransformTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('overtemp', 2), ('noTransformerPresent', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription("Indicates if the PDU's isolation transformer is over temperature.")
xPDUCoolingFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,4,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('failed', 2), ('noCoolingFansPresent', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription("Indicates if one or more of the PDU's cooling fans have failed.")
battMan = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16))
battManIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1))
battManIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the battery manager.')
battManIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The battery manager network interface hardware revision. \nThis value is set at the factory.')
battManIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The battery manager network interface firmware revision. \nThis value is set at the factory and can change with firmware update.')
battManIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The date the battery manager was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.')
battManIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The battery manager model number character string. \nThis value is set at the factory.')
battManIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The battery manager serial number character string. \nThis value is set at the factory.')
battManSystemCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2))
battManOhmicValueCorrectionFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('The system ohmic value correction factor in percent.')
battManUnitCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3))
battManUnitCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManUnitCalibTable.')
battManUnitCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2)).setDescription('Allows for getting calibration information from each unit in the system.')
battManUnitCalibTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManUnitCalibIndex')).setDescription('The unit to get data from.')
battManUnitCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of unit calibration entries in the table.')
battManUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the unit.')
battManBatteryVoltageZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The unit battery voltage zero calibration in millivolts.')
battManBatteryVoltageSpanCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The unit battery voltage span calibration in percent.')
battManStringCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4))
battManStringCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManStringCalibTable.')
battManStringCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2)).setDescription('Allows for getting calibration information from each string in the system.')
battManStringCalibTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManStringCalibIndex')).setDescription('The string to get data from.')
battManStringCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of string calibration entries in the table.')
battManDCCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('The string DC current zero calibration in tenths of amps.')
battManACCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The string AC current zero calibration in tenths of amps.')
battManProbeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,4,5,)).subtype(namedValues=namedval.NamedValues(('amps1000', 1), ('amps500', 2), ('amps100', 3), ('amps200', 4), ('amps2000', 5), ))).setMaxAccess('readwrite').setDescription('The string probe range in amps.')
battManBatteryCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5))
battManString1BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString1BatteryCalibTable.')
battManString1BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2)).setDescription('Allows for getting calibration information from each battery in String 1.')
battManString1BatteryCalibTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString1BatteryCalibIndex')).setDescription('The string to get data from.')
battManString1BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of battery calibration entries in the table.')
battManString1BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('The battery inter-tier ohmic value in ohms.  This corresponds to the ohmic \nvalue for the positive terminal of the battery.')
battManString2BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString2BatteryCalibTable.')
battManString2BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4)).setDescription('Allows for getting calibration information from each battery in String 2.')
battManString2BatteryCalibTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString2BatteryCalibIndex')).setDescription('The string to get data from.')
battManString2BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of battery calibration entries in the table.')
battManString2BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 2), Integer32()).setMaxAccess('readwrite').setDescription('The battery inter-tier ohmic value in ohms.')
battManConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6))
battManConfigApplication = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('silcon', 1), ('other', 2), ))).setMaxAccess('readwrite').setDescription('This OID has been deprecated.')
battManConfigBatteryChemistry = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('leadAcid', 1), ('nickel-Cadmium', 2), ))).setMaxAccess('readwrite').setDescription('The battery chemistry of the monitored batteries: \nLeadAcid(1) Lead Acid or \nNickel-Cadmium(2) Nickel-Cadmium.')
battManConfigBatteryAHCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 3), Integer32()).setMaxAccess('readwrite').setDescription('The amp hour capacity of the monitored batteries 5-2000 AH.')
battManConfigNumberofStrings = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 4), Integer32()).setMaxAccess('readwrite').setDescription('The number of strings in the battery manager system (1 - 2 Silcon)/(1 Other).')
battManConfigBatteriesperString = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 5), Integer32()).setMaxAccess('readwrite').setDescription('The number of batteries per string.')
battManConfigCellsperBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 6), Integer32()).setMaxAccess('readwrite').setDescription('The number of cells per battery (1 - 6 for lead-acid, 1 - 2 for NiCd.')
battManConfigMinCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 7), Integer32()).setMaxAccess('readwrite').setDescription('The minimum battery cell voltage alarm limit in millivolts DC.')
battManConfigMaxCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 8), Integer32()).setMaxAccess('readwrite').setDescription('The maximum battery cell voltage alarm limit in millivolts DC.')
battManConfigMaxPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 9), Integer32()).setMaxAccess('readwrite').setDescription('The maximum pilot battery temperature alarm limit in tenths of degrees Fahrenheit.')
battManConfigMaxPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 10), Integer32()).setMaxAccess('readwrite').setDescription('The maximum pilot battery temperature alarm limit in tenths of degrees Celsius.')
battManConfigMaxAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 11), Integer32()).setMaxAccess('readwrite').setDescription('The maximum ambient temperature alarm limit in tenths of degrees Fahrenheit.')
battManConfigMaxAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 12), Integer32()).setMaxAccess('readwrite').setDescription('The maximum ambient temperature alarm limit in tenths of degrees Celsius.')
battManConfigMinAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 13), Integer32()).setMaxAccess('readwrite').setDescription('The Minimum Ambient Temperature alarm limit in tenths of degrees Fahrenheit.')
battManConfigMinAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 14), Integer32()).setMaxAccess('readwrite').setDescription('The Minimum Ambient Temperature alarm limit in tenths of degrees Celsius.')
battManConfigMaxRippleCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 15), Integer32()).setMaxAccess('readwrite').setDescription('The maximum ripple current alarm limit for the monitored battery \nstrings in percent of AH capacity.')
battManConfigMaxCurrentAcceptanceDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 16), Integer32()).setMaxAccess('readwrite').setDescription('The maximum current acceptance deviation alarm limit in percent.')
battManConfigMonitorWireLength = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 17), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('fiftyFeetOrLess', 1), ('moreThanFiftyFeet', 2), ))).setMaxAccess('readwrite').setDescription('The monitor wire length:\nfiftyFeetOrLess (1) indicates that the wire length is less than or equal to 50 feet.\nmoreThanFiftyFeet (2) indicates that the wire length is greater than 50 feet.')
battManConfigDischargeVoltageAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 18), Integer32()).setMaxAccess('readwrite').setDescription('The discharge voltage alarm level in percent.')
battManConfigAutoAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 19), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription('The annunciator output signal reset method:\ndisabled(1) means the annunciator signal output will be reset when the reset button is pressed.\nenabled(2) means the annunciator will stop signaling when all alarm conditions clear.')
battManConfigSuspendCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 20), Integer32()).setMaxAccess('readwrite').setDescription('This is used along with the number of cells per battery \nand the number of batteries per string to determine if \na battery string has violated the low voltage limit. If \nso, the Battery Management System will enter suspend mode.\nMeasured in millivolts DC')
battManConfigOhmicTestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 21), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time in seconds after a discharge event before \ndata will be collected for the ohmic value calculation.')
battManConfigNumberOfBoosts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 22), Integer32()).setMaxAccess('readwrite').setDescription('The number of consecutive times the Battery Management \nSystem applies a charge to each battery during a boost \ncycle.  Batteries with a Rated Battery AH Capacity \nless than or equal to 120 AH will always have a value\nof one for number of boosts.')
battManAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7))
battManAlarmManagementController = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('The Management Controller Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.')
battManAlarmBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('The Batteries Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.')
battManAlarmCharger = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('The Charger Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.')
battManAlarmEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('The Environment Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.')
battManSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8))
battManSystemAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 1), Integer32()).setMaxAccess('readonly').setDescription('The system ambient temperature in tenths of degrees Celsius.')
battManSystemAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 2), Integer32()).setMaxAccess('readonly').setDescription('The system ambient temperature in tenths of degrees Fahrenheit.')
battManSystemPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 3), Integer32()).setMaxAccess('readonly').setDescription('The system pilot temperature in tenths of degrees Celsius.')
battManSystemPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 4), Integer32()).setMaxAccess('readonly').setDescription('The system pilot temperature in tenths of degrees Fahrenheit.')
battManSystemAmbientHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system has a high temperature alarm.')
battManSystemAmbientLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system has a low temperature alarm.')
battManSystemPilotBatteryHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system has a pilot battery high temperature alarm.')
battManSystemPilotProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system pilot probe is disconnected.')
battManSystemAmbientProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system ambient probe is disconnected.')
battManSystemConfigurationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system is not configured correctly.')
battManSystemSuspendVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the system has suspended voltage scans.')
battManStringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9))
battManStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManStringTable.')
battManStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2)).setDescription('Allows for getting information from each string \nin the system. ')
battManStringTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManStringIndex')).setDescription('The string to get data from.')
battManStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of string entries in the table.')
battManStringCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The string current in tenths of amps.')
battManStringRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The string ripple current in tenths of amps.')
battManStringChargerHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the string charger has a high voltage alarm.')
battManStringChargerLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the string charger has a low voltage alarm.')
battManStringCurrentProbeDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the string charger probe is disconnected.')
battManStringOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the string is in the on-battery state.')
battManStringHighRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the string has a high ripple current.')
battManStringVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The sum of the voltages for all of the batteries on a \nstring in millivolts DC.')
battManStringDischargeLess5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of recorded discharges lasting less than \n5 seconds.')
battManStringDischarge5to10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The number of recorded discharges lasting between 5 \nand 10 seconds.')
battManStringDischarge10to60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The number of recorded discharges lasting between 10 \nand 60 seconds.')
battManStringDischargeMore60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The number of recorded discharges lasting more than \n60 seconds (1 minute).')
battManBatteryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10))
battManString1BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString1BatteryTable.')
battManString1BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2)).setDescription('Allows for getting information from each string \nin the system. ')
battManString1BatteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString1BatteryIndex')).setDescription('The string to get data from.')
battManString1BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of string entries in the table.')
battManString1BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery voltage in millivolts DC.')
battManString1BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The lowest battery discharge voltage during the last power event in millivolts DC.')
battManString1BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that a battery cell is shorted.')
battManString1BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that a fuse or connection is open.')
battManString1BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has low capacity.')
battManString1BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a high ohmic value.')
battManString1BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a thermal runaway condition.')
battManString1BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a dryout condition.')
battManString1BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe user level high voltage limit.')
battManString1BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe user level low voltage limit.')
battManString1BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe chemistry level high voltage limit.')
battManString1BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe chemistry level low voltage limit.')
battManString1BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates the battery has an open \ncell or an inter-connection is abnormal.')
battManString2BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 3), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString2BatteryTable.')
battManString2BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4)).setDescription('Allows for getting information from each string \nin the system. ')
battManString2BatteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString2BatteryIndex')).setDescription('The string to get data from.')
battManString2BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of string entries in the table.')
battManString2BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery voltage in millivolts DC.')
battManString2BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The lowest battery discharge voltage during the last power event in millivolts DC.')
battManString2BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that a battery cell is shorted.')
battManString2BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that a fuse or connection is open.')
battManString2BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has low capacity.')
battManString2BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a high ohmic value.')
battManString2BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a thermal runaway condition.')
battManString2BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has a dryout condition.')
battManString2BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe user level high voltage limit.')
battManString2BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe user level low voltage limit.')
battManString2BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe chemistry level high voltage limit.')
battManString2BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates a battery has violated \nthe chemistry level low voltage limit.')
battManString2BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 14), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates the battery has an open \ncell or an inter-connection is abnormal.')
battManInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11))
battManInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManInputContactTable.')
battManInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2)).setDescription('Allows for getting information from each contact \nin the system. ')
battManInputContactTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManInputContactIndex')).setDescription('The contact to get data from.')
battManInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of contact entries in the table.')
battManInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the input contact.')
battManInputContactAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates that the alarm condition is active for this contact.')
battManInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('When set to open(1), the input contact is in the open state.\nWhen set to closed(2), the input contact is in the closed state.')
battManInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('When set to open(1), the input contact is normally open.\nWhen set to closed(2), the input contact is normally closed.')
battManInputContactAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The input contact alarm delay time in seconds.')
battManControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12))
battManRemoteAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('noOperation', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to reset(2) will reset the user interface annunciator.\nGetting this OID will do nothing and return the noOperation(1) value.')
battManResetChargeCurrentDeviationBenchmark = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('noOperation', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to reset(2) will reset the charge current deviation benchmark.\nGetting this OID will do nothing and return the noOperation(1) value.')
battManResetLowestDischargeVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('noOperation', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to reset(2) will reset the lowest discharge voltages.\nGetting this OID will do nothing and return the noOperation(1) value.')
battManResetDischargeCounters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('noOperation', 1), ('reset', 2), ))).setMaxAccess('readwrite').setDescription('Setting this OID to reset(2) will reset all discharge event counters.\nGetting this OID will do nothing and return the noOperation(1) value.')
battManTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13))
battManString1OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 1), DisplayString()).setMaxAccess('readonly').setDescription('Informational text showing the date/time, load, and pilot temperature for the string\nduring the last discharge when ohmic values were recorded.')
battManString1OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString1OhmicValueTable.')
battManString1OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3)).setDescription('Allows for getting ohmic value information from each battery in String 1.')
battManString1OhmicValueTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString1OhmicValueIndex')).setDescription('The string to get data from.')
battManString1OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The battery number.')
battManString1OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery inter-tier ohmic value in ohms.\nNote: Zero or negative values are invalid and may indicate \nfaulty calibration of ohmic value correction factors.')
battManString1ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 4), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString1ResponseTestChangeTable.')
battManString1ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5)).setDescription('Allows for getting response test change information from each battery in String 1.')
battManString1ResponseTestChangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString1ResponseTestChangeIndex')).setDescription('The string to get data from.')
battManString1ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of the entries in the table.')
battManString1ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery response test change in percent.')
battManString2OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 6), DisplayString()).setMaxAccess('readonly').setDescription('Informational text showing the date/time, load, and pilot temperature for the string\nduring the last discharge when ohmic values were recorded.')
battManString2OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString2OhmicValueTable.')
battManString2OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8)).setDescription('Allows for getting ohmic value information from each battery in String 2.')
battManString2OhmicValueTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString2OhmicValueIndex')).setDescription('The string to get data from.')
battManString2OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of battery calibration entries in the table.')
battManString2OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery inter-tier ohmic value in ohms.\nNote: Negative values are invalid and may indicate faulty calibration\nof ohmic value correction factors.')
battManString2ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManString2ResponseTestChangeTable.')
battManString2ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10)).setDescription('Allows for getting response test change information from each battery in String 2.')
battManString2ResponseTestChangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManString2ResponseTestChangeIndex')).setDescription('The string to get data from.')
battManString2ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of the entries in the table.')
battManString2ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The battery response test change in percent.')
battManUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14))
battManUnitStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of entries in the battManUnitStatusTable.')
battManUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2)).setDescription('Allows for getting status information from each unit in the system.')
battManUnitStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'battManUnitStatusIndex')).setDescription('The unit to get data from.')
battManUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of unit status entries in the table.')
battManUnitStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The battery manager unit serial number character string. \nThis value is set at the factory.')
battManUnitHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The battery manager unit hardware revision. \nThis value is set at the factory.')
battManUnitFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The battery manager unit firmware revision. \nThis value is set at the factory and can change with firmware update.')
battManUnitCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates the system has lost \ncommunication with the unit.')
battManUnitRelayStuck = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('When set to alarm(2), indicates the unit monitor relay \nis stuck.')
xATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17))
xATSIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1))
xATSIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name of the transfer switch unit.')
xATSIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision of the transfer switch. \nThis value is set at the factory.')
xATSIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the application firmware revision of the  transfer switch.')
xATSIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the application operating system firmware revision of the transfer switch.')
xATSIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('An ID string identifying the transfer switch controller firmware revision.')
xATSIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The date when the transfer switch was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.')
xATSIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the model number of the transfer switch.\nThis value is set at the factory.')
xATSIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the serial number of the transfer switch.\nThis value is set at the factory.')
xATSDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2))
xATSDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('threeWire', 1), ('fourWire', 2), ))).setMaxAccess('readonly').setDescription('The type of utility input to the transfer switch.\nEither 3 wires (delta), or 4 wires (wye).')
xATSDeviceNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The nominal line-to-neutral system voltage.\nMeasured in Volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service. -1 if not available.')
xATSDeviceNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The nominal system frequency. Measured in tenths of Hertz.\n-1 if not available.')
xATSDeviceTransferSwitchRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The rating of the transfer switch.\nMeasured in Amps.')
xATSDeviceDCBackUpPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('Indicates if a DC backup is present or not.')
xATSSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3))
xATSSwitchStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1))
xATSSwitchStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,5,4,)).subtype(namedValues=namedval.NamedValues(('none', 1), ('source1', 2), ('source2', 3), ('fault', 4), ('unknown', 5), ))).setMaxAccess('readonly').setDescription('The source which is currently selected, i.e. supplying power to the load.')
xATSSwitchStatusOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,2,1,3,)).subtype(namedValues=namedval.NamedValues(('automatic', 1), ('notInAutoAbnormal', 2), ('notInAuto', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription('The current operating mode of the transfer switch. When the ATS is in\nautomatic mode, generator starting and ATS transferring is all done automatically\nas needed based on the state of source 1.  Automatic operation is halted when the\nATS is in either of the notInAuto modes.\nA mode of notInAuto indicates that the automatic operation switch is in the\ndisabled position, as indicated by the xATSSwitchStatusAutomaticOperationSwitch OID.\nThe notInAutoAbnormal condition indicates that an abnormal\ncondition has caused the transfer switch to halt automatic operation.\nIn this case, traps can indicate the exact problem. In the case of\nnotInAutoAbnormal, refer to the operation manual for details\non how debug the condition and restore automatic operation.')
xATSSwitchStatusAutomaticOperationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The position of the automatic operation switch on the front of the transfer switch.')
xATSSwitchStatusEngineStartSignal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('run', 1), ('stop', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The position of the Start/Stop contact which signals the generator\nengine to start/run. When the ATS is in automatic mode,\ngenerator starting/stopping is under ATS control.')
xATSSwitchSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2))
xATSSwitchSettingsLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 1), Integer32()).setMaxAccess('readwrite').setDescription('The lowest acceptable voltage condition at source 1. \nWhen any phase of source 1 is lower than this voltage,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service.\n-1 if not available.')
xATSSwitchSettingsHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('The highest acceptable voltage condition at source 1. \nWhen any phase of source 1 is greater than this voltage,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service.\n-1 if not available.')
xATSSwitchSettingsMaxFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('The maximum acceptable frequency deviation condition from nominal at source 1. \nWhen source 1 frequency is outside the specified range,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in  tenths of Hertz above or below nominal.\nA value of zero indicates that frequency is ignored when \ndetermining source quality.\n-1 if not available.')
xATSSwitchSettingsMinPhaseBalance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 4), Integer32()).setMaxAccess('readwrite').setDescription('The minimum required phase balance at source 1. \nWhen the percentage difference between the minimum and maximum \nphase voltage measurements at source 1 is greater than this value,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation.\nSpecified as a percentage. A value of zero indicates that phase balance\nis ignored when determining source quality. -1 if not available.')
xATSSwitchSettingsNominalRotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,1,2,3,)).subtype(namedValues=namedval.NamedValues(('abc', 1), ('cba', 2), ('any', 3), ('unknown', 4), ))).setMaxAccess('readwrite').setDescription('The nominal phase rotation (or phase sequence) required by the load.\nFor certain types of equipment, such as rotating machinery, phase rotation\nis critical for proper operation as it determines the direction which motors\nwill rotate (clockwise or counterclockwise).\nSource quality will be seen as bad if the rotation measured at that\nATS input does not match this setting.\nIf this setting is set to any, phase rotation is ignored.')
xATSSwitchSettingsAllowClosedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ('unknown', 3), ))).setMaxAccess('readwrite').setDescription('This setting enables seamless (closed) transfers between sources. \nWhen possible, both source 1 and source 2 are closed to the output \nfor a brief time. If closed transfer is not possible within the amount\nof time specified by the xATSSwitchSettingsMaxSyncTime OID,\nan open transfer will be executed.')
xATSSwitchSettingsMaxSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 7), Integer32()).setMaxAccess('readwrite').setDescription('When attempting/seeking to perform a closed transfer, this setting defines\nthe maximum time allowed before the transfer switch will give up and perform\nan open transfer. Specified in seconds.\n-1 if not available.')
xATSSwitchSettingsNeutralTransferTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 8), Integer32()).setMaxAccess('readwrite').setDescription('This setting defines how long both source 1 and source 2 will be \ndisconnected from the output, during an open transfer. \nSpecified in seconds.\n-1 if not available.')
xATSSwitchSettingsClearLatchedAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('Clears any latched alarm conditions.')
xATSSwitchSettingsSetToFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('Sets all transfer switch settings to factory default values.')
xATSSwitchTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3))
xATSSwitchTimersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of transfer switch timer entries.')
xATSSwitchTimersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2)).setDescription('A list of timers supported by ATS.\nThe number of entries is contained in the xATSSwitchTimersTableSize OID.')
xATSSwitchTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSwitchTimersIndex')).setDescription('An entry containing information about an individual ATS timer.')
xATSSwitchTimersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of timer entries in the table.')
xATSSwitchTimersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Name of the individual timer.Refer to ATS operation manual,\nor on-line help, for detailed descriptions of ATS timers.')
xATSSwitchTimersAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('This aborts the individual timer.')
xATSSwitchTimersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('inactive', 1), ('active', 2), ))).setMaxAccess('readonly').setDescription('The status of the individual timer. Designates whether this timer\nentry is currently running or inactive.')
xATSSwitchTimersRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The time remaining for this timer entry.\nSpecified in seconds.')
xATSSwitchTimersDelaySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 6), Integer32()).setMaxAccess('readwrite').setDescription('The delay settings associated with this timer entry.\nWhen this timer entry is active, the timer value must exceed this setting\nbefore the ATS behavior associated with this timer is executed.\nRefer to ATS operation manual, or on-line help, for detailed \ndescriptions of ATS timers.')
xATSSwitchBlockMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4))
xATSSwitchBlockMapTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of blocking map entries, or how many ATS actions can be blocked.')
xATSSwitchBlockMapTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2)).setDescription('A list of blocking maps supported by the ATS.\nThe number of entries is contained in the xATSSwitchBlockMapTableSize OID.')
xATSSwitchBlockMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSwitchBlockMapIndex')).setDescription('An entry containing information about a specific ATS blocking map.')
xATSSwitchBlockMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of blocking map entries in the table.')
xATSSwitchBlockMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A string describing the ATS action to be blocked.')
xATSSwitchBlockMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription("Represents the status of this blocking map entry, in bit-mapped format.\nA non-zero value indicates that this entry's ATS action is currently being blocked.\nThe bit(s) set indicate which input(s) are causing the blocking (bit0, bit1, etc).\n\nbit 0 - Contact 1\nbit 1 - Contact 2\nbit 2 - Contact 3\nbit 3 - Contact 4.")
xATSSwitchBlockMapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('This setting designates the inputs that block the ATS action\nThe mapping is specified as a bit-field, where each bit set indicates\nthe input that blocks the ATS action associated with the entry.\n\nbit 0 - Contact 1\nbit 1 - Contact 2\nbit 2 - Contact 3\nbit 3 - Contact 4.')
xATSSwitchStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5))
xATSSwitchStatisticsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of transfer switch statistics entries.')
xATSSwitchStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2)).setDescription('A list of statistics supported by ATS.\nThe number of entries is contained in the xATSSwitchStatisticsTableSize OID.')
xATSSwitchStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSwitchStatisticsIndex')).setDescription('An entry containing information about an individual ATS statistic.')
xATSSwitchStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Index of ATS statistics entries in the table.')
xATSSwitchStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('This is the name of the ATS statistic associated with this entry.')
xATSSwitchStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('This is the value of the ATS statistic associated with this entry.')
xATSSwitchStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('This will reset the individual ATS statistic associated with this entry.')
xATSACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4))
xATSSource1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1))
xATSSource1Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('String used to identify source 1.')
xATSSource1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('tripped', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription('The current position of the switch at source 1.')
xATSSource1Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('The frequency at source 1 in tenths of Hertz.\n-1 if unavailable.')
xATSSource1Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,6,3,4,7,2,5,)).subtype(namedValues=namedval.NamedValues(('sourceGood', 1), ('lowVoltage', 2), ('highVoltage', 3), ('phaseImbalance', 4), ('freqOutOfRange', 5), ('badRotation', 6), ('unknown', 7), ))).setMaxAccess('readonly').setDescription('The current line quality of source 1.')
xATSSource1Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('abc', 1), ('cba', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The phase rotation measured at the source 1 input of the ATS.\nThe sequence is a reference to the order in which the three phases \npass the zero-crossing boundary in time.')
xATSSource1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of input voltage entries at the source 1 input of the ATS.')
xATSSource1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7)).setDescription('A list of voltage table entries for source 1. The number of \nentries are the phase entries. The number of entries is contained in the \nxATSSource1TableSize OID.')
xATSSource1PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSource1Index')).setDescription('An entry containing information applicable to a\nparticular input voltage phase at the source 1 input of the ATS.')
xATSSource1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each phase utilized at source 1.')
xATSSource1VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Source 1 line-to-line input voltage. \nMeasured in tenths of Volts.')
xATSSource1VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Source 1 line-to-neutral input voltage. \nMeasured in tenths of Volts. -1 for a 3-wire service type.')
xATSSource2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2))
xATSSource2Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 1), DisplayString()).setMaxAccess('readwrite').setDescription('String used to identify source 2.')
xATSSource2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('tripped', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription('The current position of the switch at source 2.')
xATSSource2Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 3), Integer32()).setMaxAccess('readonly').setDescription('The frequency at source 2 in tenths of Hertz.\n-1 if not available.')
xATSSource2Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,6,3,4,7,2,5,)).subtype(namedValues=namedval.NamedValues(('sourceGood', 1), ('lowVoltage', 2), ('highVoltage', 3), ('phaseImbalance', 4), ('freqOutOfRange', 5), ('badRotation', 6), ('unknown', 7), ))).setMaxAccess('readonly').setDescription('The current line quality of source 2.')
xATSSource2Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('abc', 1), ('cba', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The phase rotation measured at the source 2 input of the ATS.\n-1 if not available.')
xATSSource2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of input voltage entries at the source 2 input of the ATS.')
xATSSource2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7)).setDescription('A list of voltage table entries for the source 2. The number of\nentries are the phase entries. The number of entries is contained in the\nxATSSource2TableSize OID.')
xATSSource2PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSource2Index')).setDescription('An entry containing information applicable to a\nparticular input voltage phase at the source 2 input of the ATS.')
xATSSource2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each phase utilized at the source 2.')
xATSSource2VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Source 2 line-to-line input voltage. \nMeasured in tenths of Volts.')
xATSSource2VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Source 2 line-to-neutral input voltage. \nMeasured in tenths of Volts. -1 for a 3-wire service type.')
xATSSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3))
xATSSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The system output frequency in tenths of Hertz.')
xATSSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('Shows the total system output power in tenths of kW.')
xATSSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Shows the total system output power in tenths of kVA.')
xATSSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Indicates the total power factor of the system output.\nA value of 100 representing a unity power factor (1.00)\nSpecified in hundredths.')
xATSSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,6,5,10,8,9,1,7,4,3,)).subtype(namedValues=namedval.NamedValues(('freqToleranceOff', 1), ('freqToleranceNine', 10), ('freqTolerancePointTwo', 2), ('freqTolerancePointFive', 3), ('freqToleranceOne', 4), ('freqToleranceOnePointFive', 5), ('freqToleranceTwo', 6), ('freqToleranceThree', 7), ('freqToleranceFour', 8), ('freqToleranceFive', 9), ))).setMaxAccess('readwrite').setDescription('Shows the panel output frequency tolerance in +/- Hertz.')
xATSSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 6), Integer32()).setMaxAccess('readwrite').setDescription('Threshold above which an output over voltage condition will be generated. \nSpecified as tenths of percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.')
xATSSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 7), Integer32()).setMaxAccess('readwrite').setDescription('Threshold below which an output under voltage condition will be generated. \nSpecified as tenths of percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.')
xATSSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold above which an over current condition will be generated. \nSpecified as a percent of the transfer switch rating (xATSDeviceTransferSwitchRating OID).\nA value of zero indicates that the threshold is disabled.')
xATSSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which an under current condition will be generated. \nSpecified as a percent of the transfer switch rating (xATSDeviceTransferSwitchRating OID).\nA value of zero indicates that the threshold is disabled.')
xATSSystemOutputAlarmDelayThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 10), Integer32()).setMaxAccess('readwrite').setDescription('Delay the generation of an output alarm.\nSpecified in seconds.')
xATSSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 11), Integer32()).setMaxAccess('readonly').setDescription('The number of system output phase entries.')
xATSSystemOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12)).setDescription('A list of system output table entries.\nThe number of entries is contained in the xATSSystemOutputTableSize OID.')
xATSSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSSystemOutputPhaseIndex')).setDescription('An entry containing information applicable to a \nparticular system output phase.')
xATSSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each system output phase utilized in this device.')
xATSSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Line-to-line system output voltage available at the circuit panel. \nMeasured in tenths of Volts. -1 if not available.')
xATSSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Line-to-neutral system output voltage available at the circuit panel.\nMeasured in tenths of Volts. -1 for a 3-wire service type or if not available.')
xATSSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('System load current per phase. Measured in Amps.\n-1 if not available.')
xATSSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('System output power per phase. Measured in tenths of kW.')
xATSSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('system output power per phase. Measured in tenths of kVA.')
xATSSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('indicates the power factor of the system output per phase.\nA value of 100 representing a unity power factor (1.00).\nMeasured in hundredths.')
xATSTesting = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5))
xATSTestingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1))
xATSTestingStatusSelectTestProcess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,2,3,)).subtype(namedValues=namedval.NamedValues(('engineStartTest', 1), ('systemLoadTest', 2), ('generatorHoldTest', 3), ('cancelTest', 4), ))).setMaxAccess('readwrite').setDescription('Type of tests that can be selected when no test has been scheduled.\nengineStartTest and systemLoadTest may be selected when no tests \nare running.  Tests that are selected may be canceled manually.')
xATSTestingStatusTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,5,6,1,10,8,9,4,3,2,)).subtype(namedValues=namedval.NamedValues(('noTestInProcess', 1), ('holdingOnGenerator', 10), ('testPending', 2), ('startingEngine', 3), ('engineWarmingUp', 4), ('awaitingTransferToS2', 5), ('testingWithLoad', 6), ('awaitingRetransferToS1', 7), ('testingWithoutLoad', 8), ('stoppingEngine', 9), ))).setMaxAccess('readonly').setDescription('The present system test status/state.')
xATSTestingStatusProfileWarmupTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time that the generator will warm up during a test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value engineWarmingUp.\nSpecified in seconds.')
xATSTestingStatusProfileLoadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time that ATS will apply the system load to the generator\nduring a system load test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value testingWithLoad.\nSpecified in minutes.')
xATSTestingStatusProfileUnloadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 5), Integer32()).setMaxAccess('readwrite').setDescription('The amount of time that the generator will run following the warm up \nportion of a start test, or the loaded portion of a load test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value testingWithoutLoad.\nSpecified in seconds.')
xATSTestingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2))
xATSTestingResultsLastDateOfTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 1), DisplayString()).setMaxAccess('readonly').setDescription("Date of the last test that was performed, either scheduled or manual.\nTest results are available in the xATSTestingResultsLastResult OID.\nSpecified in the dd/mm/yyyy format, or 'none' if not available.")
xATSTestingResultsLastResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(9,11,13,12,16,2,7,10,18,5,19,15,3,8,1,17,14,4,6,)).subtype(namedValues=namedval.NamedValues(('noResultsAvailable', 1), ('genFailedDuringWarmup', 10), ('failureOnXferToS1', 11), ('genFailedLoaded', 12), ('failureOnRexferToS2', 13), ('failedOnCooldown', 14), ('genFailedToStop', 15), ('failedAtsInternalFault', 16), ('failedAtsNotInAuto', 17), ('canceledManualTest', 18), ('canceledScheduledTest', 19), ('startTestPassed', 2), ('loadTestPassed', 3), ('startSignalFailure', 4), ('failedGenNotInAuto', 5), ('failedGenEmerStop', 6), ('failedGenShutdown', 7), ('failedGenDidNotStart', 8), ('failedS2NeverGood', 9), ))).setMaxAccess('readonly').setDescription('The result of the last ATS/generator system test.')
xATSTestingResultsTestLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 3), DisplayString()).setMaxAccess('readonly').setDescription("Time of day at which the last test was performed, either scheduled or manual. \nTest results are available in the xATSTestingResultsLastResult OID.\nSpecified in the hh:mm:ss format, or 'none' if not available.")
xATSTestingResultsLastCrankDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('The time spent cranking the generator before it started during the last test.\nSpecified in seconds, or -1 if not available.')
xATSTestingResultsLastWarmupDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 5), Integer32()).setMaxAccess('readonly').setDescription('The time spent in the engineWarmingUp state during the last system test.\nSpecified in seconds, or -1 if not available.')
xATSTestingResultsLastLoadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 6), Integer32()).setMaxAccess('readonly').setDescription('The time spent in the testingWithLoad state during the last system test.\nSpecified in seconds, or -1 if not available.')
xATSTestingResultsLastUnloadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 7), Integer32()).setMaxAccess('readonly').setDescription('The time spent in the testingWithoutLoad state during the last system test.\nSpecified in seconds, or -1 if not available.')
xATSTestingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3))
xATSTestingScheduleFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,1,2,)).subtype(namedValues=namedval.NamedValues(('never', 1), ('daily', 2), ('weekly', 3), ('monthly', 4), ))).setMaxAccess('readwrite').setDescription('The frequency of running scheduled tests.')
xATSTestingScheduleTestDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The desired day for the scheduled test. This object applies only\nwhen the xATSTestingScheduleFrequency OID is set to weekly or monthly.\nFor weekly test frequency, the string is the day the test will be run.\nFor monthly test frequency, the string indicates the day, \nand the instance within the month.\nFor example, for monthly frequency: 2nd Sunday, 3rd Monday, 4th Tuesday,\n             for weekly frequency: Sunday, Monday, Tuesday.')
xATSTestingScheduleTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The time of day that the scheduled test will occur.\nSpecified in the format hh:mm.')
xATSTestingScheduleTestWithLoadInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,4,3,1,)).subtype(namedValues=namedval.NamedValues(('applyLoadEveryTest', 1), ('neverApplyLoad', 2), ('applyLoadMonthly', 3), ('applyLoadMonthlyDetailed', 4), ))).setMaxAccess('readwrite').setDescription('This setting specifies which system tests should include applying the\nload to the generator. The applyLoadMonthlyDetailed entry\nin the list will apply load once, for each month represented in the\nxATSTestingScheduleTestWithLoadSelectMonth OID.')
xATSTestingScheduleTestWithLoadSelectMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 5), DisplayString()).setMaxAccess('readwrite').setDescription("The detailed selection for testing with load on a month-by-month basis.\nThis object is applicable when the xATSTestingScheduleTestWithLoadInterval\nis set to applyLoadMonthlyDetailed. Otherwise this selection will be ignored.\nFormat for this string is a comma-separated entry of months.\nFor example: Jan,Mar,Dec.\nThe string will return 'No Months Scheduled' if no months have been selected.")
xATSTestingScheduleNextTestDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 6), DisplayString()).setMaxAccess('readonly').setDescription('The date of the next scheduled test, in the format dd-mmm-yyyy.')
xATSTestingSimulatePowerFail = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4))
xATSTestingSimulatePowerFailTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,7,8,4,6,1,3,2,)).subtype(namedValues=namedval.NamedValues(('cancelSimulation', 1), ('fiveSecondsSimulation', 2), ('tenSecondsSimulation', 3), ('thirtySecondsSimulation', 4), ('oneMinuteSimulation', 5), ('threeMinutesSimulation', 6), ('fiveMinutesSimulation', 7), ('tenMinutesSimulation', 8), ))).setMaxAccess('readwrite').setDescription('This object executes a simulated power failure for the duration indicated.\nSimulation can be aborted by selecting cancelSimulation.')
xATSTestingSimulatePowerFailTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('Indicates the time remaining in seconds, for a simulated power failure.\na value of zero indicates that simulated power failure is not active.')
xATSInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6))
xATSInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of contacts supported by the ATS.')
xATSInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of input contact entries.')
xATSInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3)).setDescription('A list of contacts supported by the ATS.\nThe number of entries is contained in the \nxATSInputContactTableSize OID.')
xATSInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSInputContactNumber')).setDescription('A contact entry containing information for a given contact.')
xATSInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('An index identifying the contact on the ATS.')
xATSInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the contact.')
xATSInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal operating position of the contact.')
xATSInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('This value indicates the current state of the contact.')
xATSOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7))
xATSOutputRelayNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of output relays supported by the ATS.')
xATSOutputRelayTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 2), Integer32()).setMaxAccess('readonly').setDescription('The number of output relay entries.')
xATSOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3)).setDescription('A list of output relays supported by the ATS.\nThe number of entries is contained in the \nxATSOutputRelayTableSize OID.')
xATSOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSOutputRelayNumber')).setDescription('A output relay entry containing information for a given contact.')
xATSOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('An index identifying the output relay on the ATS.')
xATSOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The description of the purpose/use of the output relay.')
xATSOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readwrite').setDescription('The normal operating position of the output relay.')
xATSOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ))).setMaxAccess('readonly').setDescription('This value indicates the current state of the output relay.')
xATSMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 8))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18))
xATSGenerator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1))
xATSGeneratorIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1))
xATSGeneratorIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the model number of the generator. \nThis value is set at the factory.')
xATSGeneratorIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying the serial number of the generator. \nThis value is set at the factory.')
xATSGeneratorIdentDateofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('A character string identifying when the generator was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.')
xATSGeneratorIdentVoltageConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription("The voltage for which the generator's alternator is designed.\nSpecified in Volts line-to-line.")
xATSGeneratorIdentMaxPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The max power rating of the generator. Specified in kW.')
xATSGeneratorIdentAlternatorFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription("The frequency for which the generator's alternator is designed.\nSpecified in Hertz.")
xATSGeneratorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2))
xATSGeneratorStatusGeneratorName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The name or label for the generator connected to the source 2 of the ATS.')
xATSGeneratorStatusOperational = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,9,11,8,1,6,5,7,10,3,4,)).subtype(namedValues=namedval.NamedValues(('nocomm', 1), ('shutdown', 10), ('unknown', 11), ('off', 2), ('ready', 3), ('starting', 4), ('idle', 5), ('running', 6), ('normalStop', 7), ('emergencyStop', 8), ('notInAuto', 9), ))).setMaxAccess('readonly').setDescription('The operational status of the generator. unavailable when unrecognized status is received.')
xATSGeneratorStatusModeSwitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,4,3,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('manual', 2), ('automatic', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription("The position of the generator's auto-mode switch.\nIn automatic mode, the generator is started and stopped via the\nremote start contact, which has state indicated in the\nxATSGeneratorStatusRemoteStart OID.\nIn manual mode generator start/stop control is via local command only.\nOff prevents the generator from running.")
xATSGeneratorStatusRemoteStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('stop', 1), ('run', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription("The status of the generator's remote start contact, which is \nprovided as an output from the transfer switch to start/stop the \ngenerator when in automatic mode.")
xATSGeneratorAdvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3))
xATSGeneratorAdvStatusBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 1), Integer32()).setMaxAccess('readonly').setDescription("The voltage of the generator's starting battery.\nMeasured in tenths of VDC, or -1 if not available.")
xATSGeneratorAdvStatusOilPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription("The generator's engine oil pressure.\nMeasured in tenths of Psi or kPa, based on the\nvalue of the xATSGeneratorSettingsMetricUnit OID,\nor -1 if not available.")
xATSGeneratorAdvStatusCoolantTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('Current coolant temperature in the generator.\nMeasured in degrees Celsius or Fahrenheit, based on the\nvalue of the xATSGeneratorSettingsMetricUnit OID,\nor -1 if not available.')
xATSGeneratorAdvStatusEngineRPM = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('Current engine speed of the generator. \nMeasured in RPM, or -1 if not available.')
xATSGeneratorAdvStatusOilLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('low', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('Indicates adequate oil level in the generator.')
xATSGeneratorAdvStatusCoolantLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('ok', 1), ('low', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('Indicates adequate coolant level in the generator.')
xATSGeneratorOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4))
xATSGeneratorOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('The output frequency of the generator.\nMeasured in tenths of Hertz, or -1 if not available.')
xATSGeneratorOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 2), Integer32()).setMaxAccess('readonly').setDescription('The total output power of the generator.\nMeasured in tenths of tenths of kW, or -1 if not available.')
xATSGeneratorOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 3), Integer32()).setMaxAccess('readonly').setDescription('The total output power of the generator.\nMeasured in tenths of kVA, or -1 if not available.')
xATSGeneratorOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('Indicates the total load power factor of the generator.\nA value of 100 representing a unity power factor (1.00),\nor -1 when if not available.')
xATSGeneratorOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('The number of generator output phase entries.')
xATSGeneratorOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6)).setDescription('A list of generator output table entries.\nThe number of entries is contained in the xATSGeneratorOutputTableSize OID.')
xATSGeneratorOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1)).setIndexNames((0, 'PowerNet-MIB', 'xATSGeneratorOutputPhaseIndex')).setDescription('An entry containing information applicable to a \nparticular generator output phase.')
xATSGeneratorOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('phase1', 1), ('phase2', 2), ('phase3', 3), ))).setMaxAccess('readonly').setDescription('Description of each generator output phase utilized in this device.')
xATSGeneratorOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Line-to-line generator output voltage. \nMeasured in Volts, or -1 if not available.')
xATSGeneratorOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('Line-to-neutral generator output voltage. \nMeasured in volts, or -1 if not available.')
xATSGeneratorOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('Generator load current per phase.\nMeasured in Amps, or -1 if not available.')
xATSGeneratorOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Generator output power per phase. \nMeasured in tenths of kW, or -1 if not available.')
xATSGeneratorOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Generator output power per phase. \nMeasured in tenths of kVA, or -1 if not available.')
xATSGeneratorOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('Indicates the load power factor of the generator output per phase.\nA value of 100 representing a unity power factor (1.00),\nor -1 if not available.')
xATSGeneratorSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5))
xATSGeneratorSettingsVoltageAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 1), Integer32()).setMaxAccess('readonly').setDescription('The voltage adjust of the generator.\nSpecified in volts line-to-line,\nor -1 if not available.')
xATSGeneratorSettingsFrequencyAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 2), Integer32()).setMaxAccess('readonly').setDescription('The frequency adjust of the generator.\nSpecified in tenths of Hertz.')
xATSGeneratorSettingsStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 3), Integer32()).setMaxAccess('readonly').setDescription("The delay, in seconds, after the remote run signal is activated\nbefore the generator's engine will be cranked to start, \nor -1 if not available.")
xATSGeneratorSettingsStopDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 4), Integer32()).setMaxAccess('readonly').setDescription('The delay, in seconds, before the generator will stop \nafter the remote run signal is deactivated,\nor -1 if not available.')
xATSGeneratorSettingsCrankCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription("When Crank Cycle is enabled, the engine will be cranked up to the time \nspecified by the xATSGeneratorSettingsCrankTime OID. \nIf the generator's engine does not start, there will be a pause as\nspecified by the xATSGeneratorSettingsCrankRestTime OID before the \nengine will be cranked again. This cycle is repeated as specified by\nthe xATSGeneratorSettingsNumberCrank OID.\nWhen crank cycle is disabled, the generator's engine will be \ncranked continuously until it starts.")
xATSGeneratorSettingsCrankTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 6), Integer32()).setMaxAccess('readonly').setDescription('The duration of engine cranking, in seconds, when starting the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.')
xATSGeneratorSettingsCrankRestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 7), Integer32()).setMaxAccess('readonly').setDescription('The pause duration, in seconds, following an unsuccessful attempt to start the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.')
xATSGeneratorSettingsNumberCrank = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of failed crank attempts before giving up on starting the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.')
xATSGeneratorSettingsMetricUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ))).setMaxAccess('readwrite').setDescription("Specifies the use of metric units in generator related OIDs, as well\nas on all other interfaces including the generator's local interface.")
xATSGeneratorService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6))
xATSGeneratorServiceTotalRunHoursLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 1), Integer32()).setMaxAccess('readonly').setDescription('Total time that the generator engine has been run,\nover the life of the generator. Measured in hours.\n-1 if not available.')
xATSGeneratorServiceEngineStartsLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 2), Integer32()).setMaxAccess('readonly').setDescription('Number of engine starts over the life of the generator.\n-1 if not available.')
xATSGeneratorServiceTotalkWhLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 3), Integer32()).setMaxAccess('readonly').setDescription('Total kWh of operation over the life of the generator.\n-1 if not available.')
xATSGeneratorServiceTotalRunHoursSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 4), Integer32()).setMaxAccess('readonly').setDescription('Total time that the generator engine has been run,\nsince last service maintenance. Measured in tenths of hours.\n-1 if not available.')
xATSGeneratorServiceEngineStartsSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 5), Integer32()).setMaxAccess('readonly').setDescription('Number of engine starts since last service maintenance.\n-1 if not available.')
xATSGeneratorServiceTotalkWhMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 6), Integer32()).setMaxAccess('readonly').setDescription('Total kWh of operation since last service maintenance.\n-1 if not available.')
xATSGeneratorServiceResetRecord = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('Resets the engine start counter, engine run-hours, and kWh values that have\naccumulated in the generator since last maintenance.\nAlso, the last service date will be reset to the current system date, and \nany service alarms will be cleared.')
xATSGeneratorServiceRecordResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 8), DisplayString()).setMaxAccess('readonly').setDescription("Date at which the generator's service record was reset, in dd-mmm-yyyy format.")
xATSGeneratorServiceNextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 9), DisplayString()).setMaxAccess('readonly').setDescription("Date at which the next generator service is due in dd-mmm-yyyy format. \nBased on the xATSGeneratorServiceCalendarIntervalThreshold OID \nor '' if the calendar-based threshold is set to off.")
xATSGeneratorServiceRunHoursUntilServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 10), Integer32()).setMaxAccess('readonly').setDescription('Run hours until the next generator service is due, in hours. \nBased on the xATSGeneratorServiceRunHoursThreshold OID \nor -1 if the run hour-based threshold is set to off.')
xATSGeneratorServiceRunHoursThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,6,2,4,5,8,7,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('runThreshold100Hours', 2), ('runThreshold150Hours', 3), ('runThreshold200Hours', 4), ('runThreshold250Hours', 5), ('runThreshold300Hours', 6), ('runThreshold400Hours', 7), ('runThreshold500Hours', 8), ))).setMaxAccess('readwrite').setDescription('Run hour-based service interval. When the run-hours since\nservice surpasses this threshold, generator service is due.')
xATSGeneratorServiceCalendarIntervalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,5,4,6,2,3,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('interval1month', 2), ('interval2month', 3), ('interval3month', 4), ('interval6month', 5), ('intervalyearly', 6), ))).setMaxAccess('readwrite').setDescription('Calendar-based service interval. When the next service date, \nas indicated by the xATSGeneratorServiceNextServiceDate OID\nis in the past, generator is due for service.')
xATSGeneratorFuelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7))
xATSGeneratorFuelSystemType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('diesel', 1), ('propane', 2), ('naturalGas', 3), ('unknown', 4), ))).setMaxAccess('readonly').setDescription('The type of fuel used by the generator.')
xATSGeneratorFuelSystemTankSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 2), Integer32()).setMaxAccess('readonly').setDescription("Size of the generator's fuel tank.\nSpecified in gallons or liters, based on the value of the\nxATSGeneratorSettingsMetricUnit OID, or -1 if not available.")
xATSGeneratorFuelSystemFuelLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 3), Integer32()).setMaxAccess('readonly').setDescription('Fuel remaining in the generator tank.\nMeasured in percent of tank fill, or -1 if not available.')
xATSGeneratorFuelSystemRuntimePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 4), Integer32()).setMaxAccess('readonly').setDescription('The power value used in the runtime remaining calculation.\nMeasured in tenths of kW, or -1 if not available.')
xATSGeneratorFuelSystemEstimatedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 5), Integer32()).setMaxAccess('readonly').setDescription('An estimate of available runtime for the generator, based on\navailable fuel as specified in the xATSGeneratorFuelSystemFuelLevel OID \nand kW load as specified in the xATSGeneratorFuelSystemRuntimePower OID.\nMeasured in tenths of hours, or -1 if not available.')
xATSGeneratorFuelSystemLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,14,4,11,2,10,6,1,13,3,8,5,15,9,12,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('twoDays', 10), ('threeDays', 11), ('fourDays', 12), ('fiveDays', 13), ('sixDays', 14), ('sevenDays', 15), ('oneHour', 2), ('twoHours', 3), ('threeHours', 4), ('fourHours', 5), ('fiveHours', 6), ('sixHours', 7), ('twelveHours', 8), ('oneDay', 9), ))).setMaxAccess('readwrite').setDescription('Threshold below which a low runtime alarm will exist.')
xATSGeneratorFuelSystemVeryLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,14,4,11,2,10,6,1,13,3,8,5,15,9,12,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('twoDays', 10), ('threeDays', 11), ('fourDays', 12), ('fiveDays', 13), ('sixDays', 14), ('sevenDays', 15), ('oneHour', 2), ('twoHours', 3), ('threeHours', 4), ('fourHours', 5), ('fiveHours', 6), ('sixHours', 7), ('twelveHours', 8), ('oneDay', 9), ))).setMaxAccess('readwrite').setDescription('Threshold below which a very low runtime alarm will exist.')
xATSGeneratorFuelSystemLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which a low fuel alarm will exist, with a value of 0 indicating disabled. \nSpecified as percent of tank fill.')
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('Threshold below which a very low fuel alarm will exist, with a value of 0 indicating disabled.\nSpecified as percent of tank fill.')
consolePortServer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19))
cpsAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1))
cpsAP930xSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1))
apCPSpname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription("The product's name.")
apCPSversion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription("The firmware's version.")
apCPSPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3))
apCPSPwNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of the power supplies.')
apCPSPw1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('State of the first power supply. \n0 will indicate not installed,\n1 will indicate power ON,\n2 will indicate power OFF.')
apCPSPw2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('State of the second power supply.\n0 will indicate not installed,\n1 will indicate power ON,\n2 will indicate power OFF.')
apCPSPcmcia = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4))
apCPSNPcmcia = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 1), Integer32()).setMaxAccess('readonly').setDescription('Number of PCMCIA cards available.')
cpsCardIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2)).setDescription('A table of PCMCIA card identifications.')
cpsCardIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsCardIdentIndex')).setDescription('Identification information for a PCMCIA card.')
cpsCardIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number to identify the socket Card.')
cpsCardIdentProd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Product identification string.')
cpsCardIdentMan = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Manufacturer ID code.')
cpsCardIdentFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('Function ID code.')
cpsCardIdentPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('PCI ID')
cpsCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3)).setDescription('A table of socket configuration information.')
cpsCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsCardConfIndex')).setDescription('Configuration information for a socket.')
cpsCardConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number to identify the socket PCMCIA.')
cpsCardConfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Power Settings.')
cpsCardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Interface Type.')
cpsCardConfInter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('Interrupt number.')
cpsCardConfFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('Function.')
cpsCardConfCardv = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('Card values.')
cpsCardConfPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('I/O Port 1.')
cpsCardConfPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription('I/O Port 2.')
cpsCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4)).setDescription('A table of current socket status information.')
cpsCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsCardStatusIndex')).setDescription('Current status information for a socket.')
cpsCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2))).setMaxAccess('readonly').setDescription('Number to identify the socket PCMCIA.')
cpsCardStatusCard = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Current Card State.')
cpsCardStatusFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Current Function.')
apCPSFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('Total amount of flash memory in Mbytes.')
apCPSRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('Total amount of RAM in Mbytes.')
apCPSCPUfreq = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('CPU clock in MHz.')
apCPSDevId = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 8), DisplayString()).setMaxAccess('readonly').setDescription("The product's identifier.")
cpsAP930xConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2))
cpsHostName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('The Host Name.')
cpsConsoleBanner = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The console banner.')
cpsMotd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The motd message.')
cpsEthItf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4))
cpsEthDhcpc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription('0 will indicate DHCP inactive,\n1 will indicate DHCP active,\n2 will indicate DHCP active and the last parameter is saved.')
cpsEthIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 2), IpAddress()).setMaxAccess('readwrite').setDescription('This is the IP address of the Ethernet Interface.')
cpsEthIPmask = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 3), IpAddress()).setMaxAccess('readwrite').setDescription('The mask for the Ethernet network.')
cpsEthMTU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 4), Integer32()).setMaxAccess('readwrite').setDescription('The Maximum Transmission Unit size, which determines \nwhether packets should be broken up.')
cpsEthIPaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 5), IpAddress()).setMaxAccess('readwrite').setDescription('The Ethernet secondary IP address.')
cpsEthIPmask2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 6), IpAddress()).setMaxAccess('readwrite').setDescription('The Ethernet secondary IP mask.')
cpsNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5))
cpsResolverOrder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 15))).setMaxAccess('readwrite').setDescription("Specifies how host lookups are to be performed.\nValid values : empty, 'hosts', 'bind', 'hosts, bind', \n'bind, hosts' ")
cpsMultipleIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 3))).setMaxAccess('readwrite').setDescription('Valid values are ON or OFF. If set to ON, the resolve \nlibrary will return all valid addresses for a host \nthat appears in the /etc/hosts file, instead of only \nthe first.  ')
cpsDNSserv = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3))
cpsDNSpriserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 1), IpAddress()).setMaxAccess('readwrite').setDescription('Internet Address (in dot notation) of primary name \nserver that the resolver should query.')
cpsDNSsecserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 2), IpAddress()).setMaxAccess('readwrite').setDescription('Internet Address (in dot notation) of secondary name \nserver that the resolver should query.')
cpsDNSdomain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('Local domain name.')
cpsSerialPortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6))
cpsSerialGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1))
cpsSerialInclude = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('File used in centralized management.')
cpsSerialNFS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription("Remote Network File System where data buffering will be \nwritten instead of the default directory '/var/run/DB'.")
cpsSerialLockDir = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('The lock directory.')
cpsSerialRlogin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('Location of the rlogin binary that accepts the -i flag.')
cpsSerialPppd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('Location of the pppd binary.')
cpsSerialTelnet = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('Location of the telnet application.')
cpsSerialSsh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 50))).setMaxAccess('readwrite').setDescription('Location of the ssh application.')
cpsSerialLocalLogins = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('This parameter is only necessary when authentication is \nbeing performed for a port.\nThis is useful if the Radius authentication server is down.\n0 indicates OFF,\n1 indicates ON.')
cpsSerialFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('This value (0-7) is the Local facility sent to the syslog daemon.')
cpsSerialDBFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 10), Integer32()).setMaxAccess('readwrite').setDescription('This value (0-7) is the Local facility sent to the syslog daemon.')
cpsSerialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11)).setDescription('')
cpsgroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsGroupIndex')).setDescription('')
cpsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number to identify the group.')
cpsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('The group name.')
cpsGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 80))).setMaxAccess('readwrite').setDescription("The user's names.")
cpsSerialSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2))
cpsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1)).setDescription('This is the specific configuration per serial port.')
cpssportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsSPortNumber')).setDescription('One particular serial port configuration.')
cpsSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number to identify the serial port. Value 0 is ALL.')
cpsSPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 25))).setMaxAccess('readwrite').setDescription('The device name for the serial port.')
cpsSPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('Alias name given to the server connected to the serial port.')
cpsSPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The speed of the serial port.\nSupported values are: \n 50, 75, 110, 134, 150, 200, 300, 600, \n 1200, 1800, 2400, 4800, 9600, 14400, 19200, \n 28800, 38400, 57600, 115200, 230400,  and 460800')
cpsSPortDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(4, 8))).setMaxAccess('readwrite').setDescription('The data size for the serial port.')
cpsSPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2))).setMaxAccess('readwrite').setDescription('The number of stop bits for the serial port.')
cpsSPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 5))).setMaxAccess('readwrite').setDescription('The parity for the serial port.')
cpsSPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 5))).setMaxAccess('readwrite').setDescription('The flow control for the serial port.')
cpsSPortDTRdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess('readwrite').setDescription('This specifies how long (in milliseconds) a DTR signal\nwill be turned off before it is turned on again.')
cpsSPortDCDCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 10), Integer32()).setMaxAccess('readwrite').setDescription('DCD signal controls the connection request.\n0 will indicate nocontrol,\n1 will indicate control.')
cpsSPortLogUtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription('Update the login records in /var/run/utmp file.\n0 will indicate inactive,\n1 will indicate active.')
cpsSPortLogWtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription('Update the login records in /var/run/wtmp file.\n0 will indicate inactive,\n1 will indicate active.')
cpsSPortLogform = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('This is the format to write the login record.')
cpsSPortAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 25))).setMaxAccess('readwrite').setDescription('Authentication type.')
cpsSPortAuthSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 15), IpAddress()).setMaxAccess('readwrite').setDescription('IP address of the primary authentication server.')
cpsSPortAccSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 16), IpAddress()).setMaxAccess('readwrite').setDescription('IP address of the primary accounting server.')
cpsSPortAuthTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 17), Integer32()).setMaxAccess('readwrite').setDescription('This is the timeout (in seconds) for the authentication \nquery to be answered.')
cpsSPortAuthRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 18), Integer32()).setMaxAccess('readwrite').setDescription('This defines the number of times each server is tried \nbefore another is contacted.')
cpsSPortAuthSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 19), IpAddress()).setMaxAccess('readwrite').setDescription('IP address of the secondary authentication server.')
cpsSPortAccSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 20), IpAddress()).setMaxAccess('readwrite').setDescription('IP address of the secondary accounting server.')
cpsSPortAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('This is the shared secret with authentication servers.')
cpsSPortAuthRadP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 22), Integer32()).setMaxAccess('readwrite').setDescription('Radius state.\n0 will indicate inactive,\n1 will indicate active.')
cpsSPortAuthAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('Access restriction.')
cpsSPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription("Defines the serial port's protocol.")
cpsSPortRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('This is the default IP address of the serial port.')
cpsSPortSocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 10))).setMaxAccess('readwrite').setDescription('This defines an alternative labeling system for the serial port.')
cpsSPortRemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 27), IpAddress()).setMaxAccess('readwrite').setDescription('The IP address of the host to which the serial port will connect.')
cpsSPortBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 250))).setMaxAccess('readwrite').setDescription('This defines the banner.')
cpsSPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 250))).setMaxAccess('readwrite').setDescription('This defines the login prompt to the serial port.')
cpsSPortTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('This defines the terminal type.')
cpsSPortAutomUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('This defines the automatic user.')
cpsSPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 32), IpAddress()).setMaxAccess('readwrite').setDescription('The network mask used in dial in connection.')
cpsSPortPppMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 33), Integer32()).setMaxAccess('readwrite').setDescription('The PPP MTU - dial in connection.')
cpsSPortPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 34), Integer32()).setMaxAccess('readwrite').setDescription('The PPP MRU - dial in connection.')
cpsSPortPppOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 35), DisplayString()).setMaxAccess('readwrite').setDescription('The PPP options when the PPP session is autodetected.')
cpsSPortPppFoption = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 36), DisplayString()).setMaxAccess('readwrite').setDescription('The PPP forced options when the user has already been authenticated.')
cpsSPortModemChat = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 37), DisplayString()).setMaxAccess('readwrite').setDescription('The initchat send to modem connected.')
cpsSPortSttyCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 180))).setMaxAccess('readwrite').setDescription('The tty settings after socket connection is established.')
cpsSPortSockTx = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 39), Integer32()).setMaxAccess('readwrite').setDescription('Defines the delay (in milliseconds) before transmission to\nthe Ethernet of data received through a serial port.')
cpsSPortSockPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 40), Integer32()).setMaxAccess('readwrite').setDescription('Keep-alive timer (milliseconds) for the TCP connection.')
cpsSPortSockIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 41), Integer32()).setMaxAccess('readwrite').setDescription('The idle timeout in seconds.')
cpsSPortDBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 42), Integer32()).setMaxAccess('readwrite').setDescription('Maximum size of the data buffering file.')
cpsSPortDBtime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 43), Integer32()).setMaxAccess('readwrite').setDescription('Timestamp in data buffering. \n0 will indicate inactive,\n1 will indicate active.')
cpsSPortDBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 5))).setMaxAccess('readwrite').setDescription('Data buffering mode : circ or line.')
cpsSPortDBsyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 45), Integer32()).setMaxAccess('readwrite').setDescription('Size of the data buffer sent to syslog.')
cpsSPortDBmenu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 46), Integer32()).setMaxAccess('readwrite').setDescription('Menu type for data buffering.\n0 will indicate display Menu,\n1 will indicate inactive,\n2 will indicate DB,\n3 will indicate Parc.')
cpsSPortDBalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 47), Integer32()).setMaxAccess('readwrite').setDescription('Alarm generation status.\n0 will indicate inactive,\n1 will indicate active.')
cpsSPortSSHbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 48), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readwrite').setDescription('Break sequence - ssh session.')
cpsSPortSniffSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 49), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 5))).setMaxAccess('readwrite').setDescription('Sniff session type.')
cpsSPortSniffAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 50), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('List of admin users allowed to sniff session.')
cpsSPortSniffEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 51), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 6))).setMaxAccess('readwrite').setDescription('Escape sequence used in sniff session.')
cpsSPortSniffMsess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 52), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 20))).setMaxAccess('readwrite').setDescription('')
cpsSPortTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 53), Integer32()).setMaxAccess('readwrite').setDescription('Mode negotiated by client telnet with the server.\n0 will indicate text,\n1 will indicate binary.')
cpsSPortSysBufSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 54), Integer32()).setMaxAccess('readwrite').setDescription('Syslog Buffering at all times.\n0 will indicate yes,\n1 will indicate no.')
cpsSPortLFSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 55), Integer32()).setMaxAccess('readwrite').setDescription('LF suppression in socket_server session.\n0 will indicate inactive,\n1 will indicate active.')
cpsSPortAutoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 56), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('Input string used for auto answer.')
cpsSPortAutoOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 57), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 40))).setMaxAccess('readwrite').setDescription('Output string used for auto answer.')
cpsSPortBreakInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 58), Integer32()).setMaxAccess('readwrite').setDescription('The break interval in milliseconds.')
cpsAP930xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3))
cpsInfoSerialTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1)).setDescription('This is the information of the specific serial port.')
cpsisPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1)).setIndexNames((0, 'PowerNet-MIB', 'cpsISPortNumber')).setDescription('One particular serial port.')
cpsISPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Number to identify the serial port.')
cpsISPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The device name for the serial port.')
cpsISPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('Alias name given to the server connected to the serial port.')
cpsISPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 4), Integer32()).setMaxAccess('readonly').setDescription('The speed for serial port.')
cpsISPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The number of transmitted bytes by the serial port.')
cpsISPortRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 6), Integer32()).setMaxAccess('readonly').setDescription('The number of received bytes by the serial port.')
cpsISPortErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of frame errors.')
cpsISPortErrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of parity errors.')
cpsISPortErrBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of breaks errors.')
cpsISPortErrOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The number of overrun errors.')
cpsISPortSigDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 11), Integer32()).setMaxAccess('readonly').setDescription('The state of the DTR signal.\n0 will indicate down,\n1 will indicate up.')
cpsISPortSigCD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 12), Integer32()).setMaxAccess('readonly').setDescription('The state of the DCD signal.\n0 will indicate down,\n1 will indicate up.')
cpsISPortSigDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 13), Integer32()).setMaxAccess('readonly').setDescription('The state of the DSR signal.\n0 will indicate down,\n1 will indicate up.')
cpsISPortSigRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 14), Integer32()).setMaxAccess('readonly').setDescription('The state of the RTS signal.\n0 will indicate down,\n1 will indicate up.')
cpsISPortSigCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 15), Integer32()).setMaxAccess('readonly').setDescription('The state of the CTS signal.\n0 will indicate down,\n1 will indicate up.')
cpsISPortSigRI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 16), Integer32()).setMaxAccess('readonly').setDescription('The state of the RI signal.\n0 will indicate down,\n1 will indicate up.')
cpsAP930xAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4))
apCPSSave = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 1), Integer32()).setMaxAccess('readwrite').setDescription("Exec saveconf command.\n0 will indicate don't save,\n1 will indicate save.")
apCPSSerialHUP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 2), Integer32()).setMaxAccess('readwrite').setDescription('Exec signal_ras hup command.\n0 will indicate no restart,\n1 will indicate restart.')
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20))
accessPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1))
accessPXIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1))
accessPXIdentAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('Access PX alarm status\n1 = Normal\n2 = Warning\n3 = Critical.')
accessPXIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The product number of the Access PX.')
accessPXIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The hardware revision number of the Access PX.')
accessPXIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The date of manufacture of the Access PX.')
accessPXIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the Access PX.')
accessPXConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2))
accessPXConfigCardReaderEnableDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enable', 2), ))).setMaxAccess('readwrite').setDescription('Action to disable/enable the card reader.')
accessPXConfigAutoRelockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('Time (10 - 60) in seconds when the door will automatically relock\nafter it has been unlocked and the handle has not been opened.')
accessPXConfigCardFormat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,2,1,)).subtype(namedValues=namedval.NamedValues(('hidStd26', 1), ('hid37Bit', 2), ('hid37BitWithFacility', 3), ('hidCorp1000', 4), ))).setMaxAccess('readwrite').setDescription('Indicates and controls the HID card format.\nNOTE: This OID is only valid for HID systems.')
accessPXConfigFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3))
accessPXConfigFrontDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,4,)).subtype(namedValues=namedval.NamedValues(('unlock', 1), ('lock', 2), ('notInstalledReadOnly', 3), ('disconnectedReadOnly', 4), ))).setMaxAccess('readwrite').setDescription('Control action (unlock, lock) for the front door. Setting this OID \nwill unlock or lock the front door.  Getting this OID will respond \nwith the current state of the front door lock which could be \n1 = unlocked,\n2 = locked,   \n3 = not installed,\n4 = disconnected.')
accessPXConfigFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 2), Integer32()).setMaxAccess('readwrite').setDescription('Time in minutes, (1 - 120), that the front door can be \nallowed to remain open without generating an alarm condition.')
accessPXStatusFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4))
accessPXStatusFrontDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unlocked', 1), ('locked', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the front door lock: unlocked, locked,\nnot installed, or disconnected.')
accessPXStatusFrontDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the front door: open, closed,\nnot installed, or disconnected.')
accessPXStatusFrontDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the front door handle: open, closed,\nnot installed, or disconnected.')
accessPXStatusFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 4), Integer32()).setMaxAccess('readonly').setDescription('Time in minutes, (1 - 120), that the front door can be \nallowed to remain open without generating an alarm condition.')
accessPXStatusFrontDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 5), Integer32()).setMaxAccess('readonly').setDescription('Front door alarm status\n1 = Normal\n2 = Warning\n3 = Critical\n4 = Front door not installed.')
accessPXConfigRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5))
accessPXConfigRearDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,4,)).subtype(namedValues=namedval.NamedValues(('unlock', 1), ('lock', 2), ('notInstalledReadOnly', 3), ('disconnectedReadOnly', 4), ))).setMaxAccess('readwrite').setDescription('Control action (unlock, lock) for the rear door. Setting this OID \nwill unlock or lock the rear door.  Getting this OID will respond \nwith the current state of the rear door lock which could be \n1 = unlocked,\n2 = locked,\n3 = not installed,\n4 = disconnected.')
accessPXConfigRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 2), Integer32()).setMaxAccess('readwrite').setDescription('Time in minutes, (1 - 120), that the rear door can be \nallowed to remain open without generating an alarm condition.')
accessPXStatusRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6))
accessPXStatusRearDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(('unlocked', 1), ('locked', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the rear door lock: unlocked, locked,\nnot installed, or disconnected.')
accessPXStatusRearDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the rear door: open, closed, \nnot installed, or disconnected.')
accessPXStatusRearDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(('open', 1), ('closed', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('Present state of the rear door handle: open, closed, \nnot installed, or disconnected.')
accessPXStatusRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 4), Integer32()).setMaxAccess('readonly').setDescription('Time in minutes, (1 - 120), that the rear door can be \nallowed to remain open without generating an alarm condition.')
accessPXStatusRearDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 5), Integer32()).setMaxAccess('readonly').setDescription('Rear door alarm status\n1 = Normal\n2 = Warning\n3 = Critical\n4 = Rear door not installed.')
accessPXConfigBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7))
accessPXConfigBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 1), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the Beacon.')
accessPXConfigBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 2), DisplayString()).setMaxAccess('readwrite').setDescription('A descriptive name for the location of the Beacon.')
accessPXConfigBeaconAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,4,1,)).subtype(namedValues=namedval.NamedValues(('turnOff', 1), ('turnOn', 2), ('notInstalledReadOnly', 3), ('disconnectedReadOnly', 4), ))).setMaxAccess('readwrite').setDescription('Control action (turnOff, turnOn) for the beacon. Setting this OID \nwill turn the beacon off or on.  Getting this OID will respond \nwith the current state which could be \n1 = off,\n2 = on,\n3 = not installed, \n4 = disconnected.')
accessPXStatusBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8))
accessPXStatusBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 1), DisplayString()).setMaxAccess('readonly').setDescription('The name of the beacon.')
accessPXStatusBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 2), DisplayString()).setMaxAccess('readonly').setDescription('The name of the location of the beacon.')
accessPXStatusBeaconCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('off', 1), ('on', 2), ('notInstalled', 3), ('disconnected', 4), ))).setMaxAccess('readonly').setDescription('The current state of the beacon: off, on, \nnot installed, or disconnected.')
apcLocalDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21))
apcLocalDisplayIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1))
apcLocalDisplayIdentDisplayType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('noDisplayFound', 1), ('powerviewRM', 2), ('powerviewWW', 3), ))).setMaxAccess('readonly').setDescription('Numeric value used to identify the type of display in use.')
apcLocalDisplayIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The model number of the local display.')
apcLocalDisplayIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The firmware revision number of the local display.')
apcLocalDisplayIdentOptions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A display-specific string identifying options in the local display.')
apcLocalDisplayIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('The date of manufacture of the local display, if available.')
apcLocalDisplayIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('The serial number of the local display, if available.')
apcLocalDisplayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2))
apcLocalDisplayConfigAlarmBeeper = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('beeperDisabled', 1), ('beeperEnabled', 2), ))).setMaxAccess('readwrite').setDescription('The alarm beeper setting for the local display. \nWhen enabled, the alarm beeper will begin to sound whenever \nthere a new alarm becomes active. The alarm beeper will continue to \nperiodically sound until a key is pressed on the display.')
apcLocalDisplayConfigBeeperVolume = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,4,)).subtype(namedValues=namedval.NamedValues(('beeperDisabled', 1), ('beeperLow', 2), ('beeperMedium', 3), ('beeperHigh', 4), ))).setMaxAccess('readwrite').setDescription('The volume setting of the beeper on the local display.')
apcLocalDisplayConfigCheckLogIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,5,3,4,)).subtype(namedValues=namedval.NamedValues(('checklogNotPresent', 1), ('checklogDisabled', 2), ('checklogInformational', 3), ('checklogWarning', 4), ('checklogCritical', 5), ))).setMaxAccess('readwrite').setDescription('The minimum level event severity level required to illuminate \nthe check log light on the local display.\nnotPresent (1) indicates that the display does not have a check log light.')
apcLocalDisplayConfigKeyClick = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,)).subtype(namedValues=namedval.NamedValues(('keyclickDisabled', 1), ('keyclickEnabled', 2), ))).setMaxAccess('readwrite').setDescription('The key click setting of the local display.')
apcLocalDisplayConfigContrast = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(8,3,2,1,7,6,5,4,)).subtype(namedValues=namedval.NamedValues(('contrast1', 1), ('contrast2', 2), ('contrast3', 3), ('contrast4', 4), ('contrast5', 5), ('contrast6', 6), ('contrast7', 7), ('contrast8', 8), ))).setMaxAccess('readwrite').setDescription('The contrast level of the local display.')
software = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2))
powerNetSubAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1))
powerNetSoftwareSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1))
powerNetSoftwareSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 79))).setMaxAccess('readonly').setDescription('A brief description of the PowerNet sub-agent.')
powerNetSoftwareOid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess('readonly').setDescription('The object identifier of the PowerNet sub-agent.')
powerNetSoftwareSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess('readonly').setDescription('The time that the sub-agent has been running.')
powerNetSoftwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2))
powerNetSoftwareTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of software modules supporting the UPS.')
powerNetSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2)).setDescription('A list of the software monitoring the UPS.')
powerNetSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'moduleNumber')).setDescription('An entry containing information on a software module.')
moduleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index into the Software Entry Table')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 79))).setMaxAccess('readonly').setDescription('The name of the software module.')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 8))).setMaxAccess('readonly').setDescription('The version of the software module.')
moduleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 9))).setMaxAccess('readonly').setDescription('The date of the software module represented as mm-dd-yy.')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3))
backUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 1))
smartUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2))
smartUPS250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 1))
smartUPS400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 2))
smartUPS600 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 3))
smartUPS900 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 4))
smartUPS1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 5))
smartUPS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 6))
smartUPS450 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 7))
smartUPS700 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 8))
smartUPS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 9))
smartUPS1400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 10))
smartUPS2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 11))
smartUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 12))
smartUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 13))
smartUPS7500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 14))
smartUPS10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 15))
smartUPS1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 16))
smartUPS3000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 17))
smartUPS5000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 18))
smartUPS8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 19))
matrixUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3))
matrixUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 1))
matrixUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 2))
masterSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4))
masterSwitchV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 1))
masterSwitchV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 2))
masterSwitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 3))
masterSwitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 4))
masterSwitchrPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 5))
symmetraUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5))
symmetraUPS4kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 1))
symmetraUPS8kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 2))
symmetraUPS12kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 3))
symmetraUPS16kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 4))
dp100E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 6))
dp300E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 7))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 1))
environmentalMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 2))
emu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 3))
mem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 4))
redundantSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 9))
dcPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10))
dm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 1))
dcmim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 2))
automaticXferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 11))
netLock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 12))
symmetra3PhaseUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13))
symmetra3PhaseUPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 1))
symmetra3PhaseUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 2))
symmetra3PhaseUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 3))
symmetra3PhaseUPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 4))
networkAir = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14))
airFMSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 1))
rackAirRemovalUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 2))
airPASeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 3))
airIRSC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 4))
airIRRC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 5))
airIRRP100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 6))
airIRRP500Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 7))
infraXurePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 15))
ais5000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16))
ais5000UPS10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 1))
ais5000UPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 2))
ais5000UPS30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 3))
ais5000UPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 4))
ais5000UPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 5))
ais5000UPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 6))
ais5000UPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 7))
smartUPS3Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17))
smartUPS3Phase10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 1))
smartUPS3Phase15kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 2))
smartUPS3Phase20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 3))
smartUPS3Phase30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 4))
smartUPS3Phase40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 5))
battManager = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 18))
infraXureATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 19))
conPortServ = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20))
conPortServAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20, 1))
gutor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21))
gutorPEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 1))
gutorPDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 2))
gutorWEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 3))
gutorWDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 4))
gutorSDC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 5))
accControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22))
accPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22, 1))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 4))
apcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1))
mconfigNumTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The number of managers to send traps to.')
mconfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 318, 2, 1, 2)).setDescription('A list of managers to send traps to.  The number of\nentries is given by the value of mconfigNumTrapReceivers.\nMaximum number of Trap Receivers is four.')
mconfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1)).setIndexNames((0, 'PowerNet-MIB', 'trapIndex')).setDescription('The managers to send traps to.')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The index to a trap receiver entry.')
receiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess('readwrite').setDescription('The IP address of the manager to send a trap to.')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The community name to use in the trap when\nsent to the manager.')
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('information', 1), ('warning', 2), ('severe', 3), ))).setMaxAccess('readonly').setDescription('The severity threshold of traps to send to the manager.\ntraps are labeled in severity as informational(1), warning(2),\nsevere(3).  Only traps of equal or greater severity than\nthis value are sent to the manager.')
acceptThisReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readwrite').setDescription('The value of yes(1) indicates that trap generation for this manager is enabled.\nThe value of no(2) indicates that trap generation for this manager is disabled')
receiveTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,1,)).subtype(namedValues=namedval.NamedValues(('powernet', 1), ('ietf', 2), ('both', 3), ))).setMaxAccess('readonly').setDescription('Type of trap.')
mconfigBOOTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('yes', 1), ('no', 2), ))).setMaxAccess('readonly').setDescription("The value of yes(1) indicates the PowerNet Adapter is configured to\nobtain its IP configuration parameters from a BOOTP server.\n\nThe value of no(2) indicates adapter will assume IP configuration parameters \nvalues saved in adapter's eeprom, which was originally configured at local\nconsole.")
mconfigTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 4), IpAddress()).setMaxAccess('readwrite').setDescription('The IP address of TFTP server. If mconfigBOOTPEnabled is yes(1), then this IP address\nis provided by BOOTP server and not allowed to be modified; otherwise, this IP address\ncan be modified.\n\nBefore using TFTP to load new code image, the image file should be placed in proper\ndirectory of the specified TFTP server. This OID is only supported by AP9605, AP9205, \nand AP9603 PowerNet SNMP Adapters.')
newCodeAuthentViaTFTP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,4,2,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('validNewAgentCodeImage', 2), ('sameAgentCodeImage', 3), ('invalidAgentCodeImage', 4), ))).setMaxAccess('readonly').setDescription('Once mcontrolRestartAgent is set to loadAndExecuteNewAgent (3), PowerNet adapter will\nstart to load the remote image file, for authentication only, instead of saving the code \ninto flash memory. Only if a validNewAgentCodeImage (1) is found will the agent reboot\nthe PowerNet adapter and invoke the loader to load and save new code into the flash memory. \nOtherwise, the current agent code will continue to run.\n\nThis OID shows the result of the above authentication process.  \n         validNewAgentCodeImage (1) means the code image on TFTP server \n         is a valid APC agent code and is different version from the current agent.\n         Once agent identifies this, loader will start to update flash memory with\n         the new agent code.\n\n         sameAgentCodeImage  (2)  means the code image on TFTP server is exactly the\n         same as the currently running agent. Currently running agent will not invoke\n         loader to load the same again.\n         \n         invalidAgentCodeImage  (3) means the code image on TFTP server is NOT a valid\n         APC agent code. Thus, current agent will not load it into the flash memory.\n         \nThe value of this OID will be associated with TRAP codeImageAuthentDone.\nThis OID is only supported by AP9605, AP9205, and AP9603 PowerNet SNMP Adapters.')
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1, 6))
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The current date in the mm/dd/yyyy format. Example: 01/01/2000.')
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The current time in the hh:mm:ss am/pm format. Example: 12:00:00 am.')
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 2))
mcontrolRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,6,5,1,2,3,)).subtype(namedValues=namedval.NamedValues(('restartCurrentAgent', 1), ('continueCurrentAgent', 2), ('loadAndExecuteNewAgent', 3), ('restartWithoutAgent', 4), ('resetNetworkAndRestart', 5), ('resetNetworkLeaveModeAndRestart', 6), ))).setMaxAccess('readwrite').setDescription('Setting this OID to restartCurrentAgent (1) will restart the same SNMP\nagent code currently saved in flash memory. Setting this OID to\nloadAndExecuteNewAgent (3) will enable adapter to load a new agent code\ninto the flash memory and start to execute this new agent code.\nBootp/tftp is the default protocol. loadAndExecuteNewAgent is only\nsupported by AP9605, AP9205, and AP9603 PowerNet SNMP Adapters. Setting\nthis OID to restartWithoutAgent (4) will restart the system and not\nstart the agent. The subsequent time the system restarts the agent will\nalso automatically restart. Setting this OID to\nresetNetworkAndRestart (5) will set the Boot Mode, IP Address, Subnet\nMask, and Default Gateway to defaults, expire any existing DHCP lease\nand then restart the system. Setting this OID to\nresetNetworkLeaveModeAndRestart (6) will leave the Boot Mode at the\ncurrent setting, set the IP Address, Subnet Mask, and Default Gateway to\ndefaults, expire any existing DHCP lease and then restart the system.')
mtrapargs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 3))
mtrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 2), IpAddress()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.')
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 3), DisplayString()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.')
mtrapargsGauge = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 4), Gauge32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 5), TimeTicks()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsInteger02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsInteger03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsIpAddress02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 8), IpAddress()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.')
mtrapargsIpAddress03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 9), IpAddress()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.')
mtrapargsString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 10), DisplayString()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.')
mtrapargsString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 11), DisplayString()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.')
mtrapargsGauge02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 12), Gauge32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsGauge03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 13), Gauge32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsTimeTicks02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 14), TimeTicks()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsTimeTicks03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 15), TimeTicks()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 16), DisplayString()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.')
mtrapargsString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 17), DisplayString()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.')
mtrapargsInteger04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 18), Integer32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mtrapargsInteger05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 19), Integer32()).setMaxAccess('readonly').setDescription('This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.')
mfiletransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4))
mfiletransferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 1))
mfiletransferStatusLastTransferResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 1, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,6,2,5,8,7,4,1,)).subtype(namedValues=namedval.NamedValues(('lastFileTransferResultSuccessful', 1), ('lastFileTransferResultNotAvailable', 2), ('lastFileTransferResultFailureUnknown', 3), ('lastFileTransferResultFailureServerInaccessible', 4), ('lastFileTransferResultFailureServerAccessDenied', 5), ('lastFileTransferResultFailureFileNotFound', 6), ('lastFileTransferResultFailureFileTypeUnknown', 7), ('lastFileTransferResultFailureFileCorrupted', 8), ))).setMaxAccess('readonly').setDescription('Once mfiletransferControlInitiateFileTransfer is set to a value other than doNotInitiateFileTransfer\na file transfer of mfiletransferConfigSettingsFilename will be attempted from either a TFTP or FTP\nserver.\n \nThis OID shows the last attempted file transfer result.\n  lastFileTransferResultSuccessful (1) means the file transfer was successful.\n  lastFileTransferResultNotAvailable (2) means that there have been no previous file transfers.\n  lastFileTransferResultFailureUnknown (3) means that the last file transfer failed for an unknown reason.\n  lastFileTransferResultFailureServerInaccessible (4) means that the TFTP or FTP server could not be found on the network.\n  lastFileTransferResultFailureServerAccessDenied (5) means that the TFTP or FTP server denied access.\n  lastFileTransferResultFailureFileNotFound (6) means that the file could not be located.\n  lastFileTransferResultFailureFileTypeUnknown (7) means the file was examined, but the contents were unknown.\n  lastFileTransferResultFailureFileCorrupt (8) means the transferred file was corrupt.')
mfiletransferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2))
mfiletransferConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1))
mfiletransferConfigSettingsFilename = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The path and name of the file to transfer using the mfiletransferControlInitiateFileTransfer OID.\nIf the file to transfer exists in the default server directory then the path may be omitted.')
mfiletransferConfigTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2))
mfiletransferConfigTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The IP Address in dotted decimal notation of the TFTP server involved in the file transfer.')
mfiletransferConfigFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3))
mfiletransferConfigFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The IP Address in dotted decimal notation of the FTP server involved in the file transfer.')
mfiletransferConfigFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The user identification for logging into the FTP server specified with mfiletransferConfigFTPServerAddress.')
mfiletransferConfigFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The password for logging into the FTP server specified with mfiletransferConfigFTPServerAddress.')
mfiletransferControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 3))
mfiletransferControlInitiateFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 3, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('doNotInitiateFileTransfer', 1), ('initiateFileTransferDownloadViaTFTP', 2), ('initiateFileTransferDownloadViaFTP', 3), ))).setMaxAccess('readwrite').setDescription('Setting this OID to doNotInitiateFileTransfer (1) will do nothing.\n\nSetting this OID to initiateFileTransferDownloadViaTFTP (2) will attempt to transfer the file named in \nmfiletransferConfigSettingsFilename from the TFTP Server identified in mfiletransferConfigTFTPAddress.\n \nSetting this OID to initiateFileTransferDownloadViaFTP (3) will attempt to transfer the file named in \nmfiletransferConfigSettingsFilename from the FTP Server identified in mfiletransferConfigFTPAddress \nusing mfiletransferConfigFTPUser and mfiletransferConfigFTPPassword for the FTP Server login process.')

# Augmentions

# Notifications

apcEnvSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 517)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
emsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 231)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
aruFanPoorPerformanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 512)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'mtrapargsString'), )
apcOutputShortCircuitCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 605)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 4)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 381)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 529)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorHighACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 456)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUSystemInUPSOperationalMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 492)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcEnvLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 533)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 17)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 260)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
apcRegisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 571)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelInputUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 198)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 233)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBypassVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 318)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
msvmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 86)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUBankPhaseNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 224)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
dcInputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 119)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'dm3StatusInRlyIndex'), ('PowerNet-MIB', 'dm3StatusInRlyName'), )
smartBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 6)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 258)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
ceSevereConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 348)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsAlinkPowerOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 296)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 321)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
userModified = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 84)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 410)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 568)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcInformationalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 558)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
smartRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 56)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduUtilityLineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 193)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 379)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 221)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcPINChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 112)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 370)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 516)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
mspOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 103)).setObjects(('PowerNet-MIB', 'sPDUOutletControlMSPOutletIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUOutletControlMSPOutletName'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
emsBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 239)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
emsMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 243)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBreakerPositionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 486)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xPDUBranchCurrentMinAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 627)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcEnvSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 528)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUBankPhaseNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 225)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
upsOutputSwitchOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 357)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 394)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 522)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
msvmNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 95)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
emsMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 244)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
dcFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 138)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSDoorOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 419)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
rsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 108)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
bmsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 380)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcUnregisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 570)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 283)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletControlOutletName'), ('PowerNet-MIB', 'rPDUOutletControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
apcRegisteredUserAccessChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 590)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), )
outletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 42)).setObjects(('PowerNet-MIB', 'sPDUOutletControlIndex'), )
xATSOutputLoadPoweredByGeneratorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 498)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 423)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 473)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 534)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUFuseBlownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 484)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
upsOutputSwitchClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 356)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
temperatureThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 63)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 454)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
temperatureThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 59)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 375)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGenCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 396)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
smwCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 300)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
envMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 362)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 11)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
mupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 66)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 266)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
emsMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 242)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
hardwareFailureBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 20)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcWarningDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 555)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsBypassRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 623)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSNeutralPosition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 397)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUBranchCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 343)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
pduOnBatteryMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 210)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
apcOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 549)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 241)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
emsAlinkPowerOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 297)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
dcBBCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 162)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
msvmLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 94)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
generalDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 125)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
msvmDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 91)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUSystemStateAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 481)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSGeneratorGenericEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 478)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 544)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 539)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
humidityThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 57)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
humidityThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 61)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSInternalATSFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 399)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
atsOverCurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 133)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUBranchCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 341)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcAnalogInputHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 561)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 536)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorHighACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 455)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 48)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSEngineStopAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 402)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
envMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 360)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 82)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGenCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 395)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
emsSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 235)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsSensorStatusSensorIndex'), ('PowerNet-MIB', 'emsSensorStatusSensorName'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 189)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
apcKeyOverrideUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 580)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 249)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsInputContactStatusInputContactNormalState'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsInputContactStatusInputContactState'), ('PowerNet-MIB', 'emsInputContactStatusInputContactName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsInputContactStatusInputContactIndex'), )
pduNoPanelFeedMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 213)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
pduContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 220)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 280)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
envSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 369)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
bmBatManEnvironmentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 186)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 159)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
mspCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 98)).setObjects(('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 409)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 479)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
rmPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 229)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
pduGroundOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 196)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 468)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUInputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 315)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 416)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 267)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
dcOutputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 118)).setObjects(('PowerNet-MIB', 'dm3StatusOutRlyName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'dm3StatusOutRlyIndex'), )
xATSGeneratorVeryLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 466)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
bmBatManChargerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 182)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputNeutralCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 335)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcEnvSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 518)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 1)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 542)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
externalSwitchGearOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 124)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
msvmOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 88)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
airInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 310)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
envMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 359)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcInformationalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 557)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcKeyOverrideLocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 581)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
abnormalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 78)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 323)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 546)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
bmBatManEnvironmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 185)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 531)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
batteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 53)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 532)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 538)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
dcCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 110)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcAnalogInputMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 559)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
smwInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 305)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 451)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorShutdownCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 474)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcDoorLocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 574)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 275)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
emsProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 232)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
dcBatteryBreakerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 148)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
mspDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 102)).setObjects(('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 44)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduInputTransformerOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 217)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 435)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcMainsFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 136)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 535)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
upsEepromFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 509)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorOverspeed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 457)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 111)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
mspOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 100)).setObjects(('PowerNet-MIB', 'sPDUOutletControlMSPOutletIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUOutletControlMSPOutletName'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
emsOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 251)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayState'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayNormalState'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
powerModuleIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 69)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
smartAvrReducingOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 35)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 524)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSDoorOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 420)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 636)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger02'), )
iemRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 176)).setObjects(('PowerNet-MIB', 'iemStatusRelayNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusRelayName'), )
pduCircuitPanelNeutralOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 207)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
chargerFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 52)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 436)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 327)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
pduInputTransformerOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 216)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
aruHighTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 290)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
emsSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 237)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsSensorStatusSensorIndex'), ('PowerNet-MIB', 'emsSensorStatusSensorName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 392)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 278)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xATSNotInAutomaticModeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 406)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 452)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 105)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
contactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 18)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSSwitchTransferEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 398)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
aruFanFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 286)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 415)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 46)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduUtilityLineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 192)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
noBatteries = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 80)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
iemHighHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 168)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), )
envMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 365)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
upsBatterySoftBusStartFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 603)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUBankPhaseOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 227)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
bmBatManBatteryAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 184)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 113)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 269)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletControlOutletName'), ('PowerNet-MIB', 'rPDUOutletControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
atsPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 134)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcRectifierOVPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 150)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 274)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
ceSevereCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 347)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorBatteryCharger = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 475)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
smwWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 302)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
dischargeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 38)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
baseFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 25)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
aruAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 284)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 10)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
msvmPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 97)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 230)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
aruDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 228)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
iemLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 166)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), )
atsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 129)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcDeviceClearUserConfigs = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 592)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
bmsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 378)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmBatManBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 183)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcOutputRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 606)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcCriticalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 553)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcFuseCBAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 155)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorOverspeedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 458)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
temperatureThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 60)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 107)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
smwWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 303)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
temperatureThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 64)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
iemHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 163)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeTempUnits'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusProbeCurrentTemp'), )
pduUtilityLineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 191)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcMultRectFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 147)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 255)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
aruFanFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 287)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
envMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 364)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
emsDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 252)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 521)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
airWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 308)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
atsPowerSupplyFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 135)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 413)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 131)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 385)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
pduUPSInputVoltageLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 218)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 114)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
badVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 49)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 552)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
iemRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 175)).setObjects(('PowerNet-MIB', 'iemStatusRelayNumber'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusRelayName'), )
xPDUInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 344)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcDoorUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 573)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
ceInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 352)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
powerModuleDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 70)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcFuseCBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 154)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
extBatteryFrameIncease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 75)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
smartAvrReducing = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 31)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcDoorSenseDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 586)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 463)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 30)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsCalibrationStackChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 358)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 12)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 382)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcMainsFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 137)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
bypassPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 24)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
logicPowerSuppliesDecreased = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 122)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 253)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
xATSOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 387)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelInputUndercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 202)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorVeryLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 450)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUTransformerTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 339)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
airCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 306)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 635)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
bmBatManKneeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 179)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 8)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 389)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUInputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 313)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcHandleClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 576)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
mspOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 101)).setObjects(('PowerNet-MIB', 'sPDUOutletControlMSPOutletIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUOutletControlMSPOutletName'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
upsPfcInputRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 502)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 83)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 276)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xATSGeneratorControlSwitchNotAuto = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 445)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
aruFanPoorPerformanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 513)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 449)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
intelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 72)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelInputOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 199)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 444)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUSystemInMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 491)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 384)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
gracefullShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 39)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
iemLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 165)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeTempUnits'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusProbeCurrentTemp'), )
apcAdConverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 615)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcFanFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 139)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
msvmLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 93)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
switchedBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 22)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
bmsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 376)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcDcBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 610)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
calibrationEnd = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 37)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduAtypicalBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 212)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 634)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
rintelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 73)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsInternalOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 354)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 326)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
airWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 309)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
aruRedundantPowerLostAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 515)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
rsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 109)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
aruFanRuntimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 511)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'mtrapargsString'), )
apcRegisteredUserConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 572)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSEpoTripped = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 407)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcAnalogInputHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 562)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBranchCurrentMinAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 626)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 245)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
msvmNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 96)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBranchCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 340)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
smwInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 304)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
apcTransformerDCImbalanceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 619)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
airInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 311)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 3)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 371)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcDoorSenseConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 587)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcCurrentLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 142)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 336)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
upsBatterySoftBusStartFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 602)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 256)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcAnalogInputLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 564)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xAPCControllerFirmwareUpdateTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 500)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), )
emsInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 248)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsInputContactStatusInputContactNormalState'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsInputContactStatusInputContactState'), ('PowerNet-MIB', 'emsInputContactStatusInputContactName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsInputContactStatusInputContactIndex'), )
xPDUDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 489)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 551)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsDipSwitchChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 16)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
outletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 41)).setObjects(('PowerNet-MIB', 'sPDUOutletControlIndex'), )
dcRectifierOvertempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 141)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorOutputBreakerOpenCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 462)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcAnalogInputMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 560)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelInputOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 204)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
mspCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 99)).setObjects(('PowerNet-MIB', 'sPDUMasterControlMSPIndex'), ('PowerNet-MIB', 'sPDUMasterControlMSPName'), ('PowerNet-MIB', 'mtrapargsString'), )
msvmOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 87)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
aruRedundantPowerLostAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 514)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 490)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 383)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
upsOutletGroupTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 298)).setObjects(('PowerNet-MIB', 'upsOutletGroupControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
emsBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 240)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
mupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 65)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 257)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
pduForcedBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 215)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
upsBackfeedRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 621)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSDCBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 421)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
iemHighHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 167)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'iemStatusProbeCurrentHumid'), )
aruSmokeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 288)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
dcLVDImminentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 153)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 158)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsPfcFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 609)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcAnalogInputMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 565)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 322)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 281)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
rPDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 277)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
dcBatteryBreakerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 149)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 448)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
aruExhaustTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 293)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
upsInverterOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 505)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 541)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
batteryPackCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 27)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 630)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
rPDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 632)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
pduCircuitPanelInputOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 200)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 414)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 548)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorEStopCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 440)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
chargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 51)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsBatteryOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 507)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorEStop = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 439)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUBypassVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 319)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 547)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUBypassVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 317)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcAdConverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 614)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 550)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 377)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 325)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
dcBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 156)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUBranchCurrentMaxAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 629)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
pduCircuitPanelInputUndercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 201)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 130)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 5)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 469)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorHighBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 441)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
atsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 127)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 577)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsPfcFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 608)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcRectifierOvertempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 140)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 426)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcForcedEntry = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 582)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
logicPowerSuppliesIncreased = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 121)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
bmBatManCommEstab = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 177)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 332)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 333)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
iemLowHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 169)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'iemStatusProbeCurrentHumid'), )
rPDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 272)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
upsInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 612)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsBatteryTempSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 600)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
codeAuthenticationDone = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 32)).setObjects(('PowerNet-MIB', 'mconfigTFTPServerIP'), ('PowerNet-MIB', 'newCodeAuthentViaTFTP'), )
xATSGeneratorHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 428)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 273)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xATSGeneratorLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 424)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorServiceDueAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 471)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
dcCurrentLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 143)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUSystemGroundCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 330)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
abnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 77)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcDoorLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 588)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xAPCControllerFirmwareUpdateTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 499)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 526)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
batteryPackCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 26)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 13)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcTransformerDCImbalanceFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 618)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSStopFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 404)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
envMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 363)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
upsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 33)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcHumidityAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 160)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 393)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 520)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
bmBatManMaintenanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 188)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 525)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
ceWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 350)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 438)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
envHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 254)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 9)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcLogicPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 616)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcEnvHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 537)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 386)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
envSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 367)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcDoorEstablishedComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 589)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 14)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUInputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 314)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsOutletGroupTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 299)).setObjects(('PowerNet-MIB', 'upsOutletGroupControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 429)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 467)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 236)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsSensorStatusSensorIndex'), ('PowerNet-MIB', 'emsSensorStatusSensorName'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUSystemGroundCurrentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 331)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
rsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 104)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger02'), )
xATSGeneratorOutputBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 461)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorGroundFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 495)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcLogicPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 617)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUBankPhaseLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 222)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
atsOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 132)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 545)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
apcDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 578)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 530)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
pduUpsOperationMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 214)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 268)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletControlOutletName'), ('PowerNet-MIB', 'rPDUOutletControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
msvmCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 85)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
envLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 372)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcCriticalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 554)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcAnalogInputLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 563)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBranchCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 342)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsInternalOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 353)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUFuseBlownAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 485)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
rPDUBankPhaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 226)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
upsBackfeedRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 620)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 157)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsEepromFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 508)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcOutputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 117)).setObjects(('PowerNet-MIB', 'dm3StatusOutRlyName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'dm3StatusOutRlyIndex'), )
emsOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 247)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsOutletStatusOutletNormalState'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsOutletStatusOutletName'), ('PowerNet-MIB', 'emsOutletStatusOutletIndex'), ('PowerNet-MIB', 'emsOutletStatusOutletState'), ('PowerNet-MIB', 'mtrapargsString'), )
pduSystemOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 209)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
atsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 126)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmBatManMaintenanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 187)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcRelockTimeout = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 584)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorEngineCold = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 459)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSEpoReset = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 408)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 411)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
rPDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 631)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xPDUOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 328)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSGeneratorGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 477)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduCircuitPanelFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 205)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 324)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduGroundOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 195)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 443)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 412)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorVeryLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 425)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorFuelTankRuptureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 494)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcWarningDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 556)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 482)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
ceWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 349)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
envSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 368)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
xPDUBreakerPositionAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 487)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcUnregisteredUserStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 591)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 465)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
badVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 50)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
baseFanFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 637)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 271)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletControlOutletName'), ('PowerNet-MIB', 'rPDUOutletControlIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xPDUBranchCurrentMaxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 628)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduCircuitPanelNeutralOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 208)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelInputUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 197)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
iemHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 164)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 430)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsInverterOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 504)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 116)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUInputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 312)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 329)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 2)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 128)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
envLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 373)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
xATSGeneratorControlSwitchNotAutoCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 446)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 483)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
msvmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 90)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletIndex'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
rintelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 74)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorBatteryChargerCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 476)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 464)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
envAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 294)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
bmBatManChargerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 181)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcRectifierFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 145)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 391)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
extBatteryFrameDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 76)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 190)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorFuelTankRuptureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 493)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 211)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
dcInputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 120)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'dm3StatusInRlyIndex'), ('PowerNet-MIB', 'dm3StatusInRlyName'), )
bmBatManKneeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 180)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
smartBoostOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 34)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUPhaseConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 282)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDULoadPhaseConfigIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
apcRelockTimeoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 585)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
humidityThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 62)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
humidityThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 58)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
calibrationStart = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 28)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowOilLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 433)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSRemoteStartContactMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 417)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
apcDcBusOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 611)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
pduUtilityLineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 194)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 523)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
externalSwitchGearClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 123)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
softwareBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 21)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
intelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 71)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
upsPfcInputRelayFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 503)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
emsSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 234)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsSensorStatusSensorIndex'), ('PowerNet-MIB', 'emsSensorStatusSensorName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorEngineColdCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 460)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcHandleOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 575)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
pduCircuitPanelInputOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 203)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsBatteryTempSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 601)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcRectifierOVPAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 151)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
smartRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 55)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
dcRectifierFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 144)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 295)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSDCBackupAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 422)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
emsOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 250)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayState'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayNormalState'), ('PowerNet-MIB', 'emsOutputRelayStatusOutputRelayIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
configChangeOutlet = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 45)).setObjects(('PowerNet-MIB', 'sPDUOutletConfigIndex'), )
ceInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 351)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
batteryOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 54)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
apcDeviceClearLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 567)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
restartAgent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 29)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorVeryLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 470)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
envLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 259)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
apcEnvLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 540)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSInternalATSFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 400)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 604)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorGroundFaultAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 496)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
dcBBCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 161)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
iemProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 172)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
airCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 307)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowOilLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 434)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 527)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
upsMpuReset = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 355)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 270)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
pduUPSInputVoltageRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 219)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 15)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 279)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
xATSEngineStartAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 401)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcEnvMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 519)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
deviceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 79)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSStartFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 403)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
aruHighTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 291)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
outletReboot = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 43)).setObjects(('PowerNet-MIB', 'sPDUOutletControlIndex'), )
upsBypassRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 622)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
returnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 23)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xAPCControllerFirmwareUpdateTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 501)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString05'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), )
dcMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 115)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 388)).setObjects(('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 7)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
aruFanRuntimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 510)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUBypassVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 316)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 543)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
batteryIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 67)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
rPDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 633)).setObjects(('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'rPDUOutletStatusIndex'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDUIdentName'), )
upsBatteryReplaced = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 36)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSRemoteStartContactMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 418)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
upsInverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 613)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
accessViolationHTTP = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 47)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorServiceDueAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 472)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
dcLVDImminentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 152)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
contactFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 19)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSGeneratorLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 447)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
smwCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 301)).setObjects(('PowerNet-MIB', 'mtrapargsGauge'), ('PowerNet-MIB', 'mtrapargsString'), )
emsHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 346)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
dcMultRectFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 146)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 390)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
rPDUBankPhaseLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 223)).setObjects(('PowerNet-MIB', 'rPDULoadStatusPhaseNumber'), ('PowerNet-MIB', 'rPDUIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'rPDULoadStatusBankNumber'), ('PowerNet-MIB', 'rPDUIdentName'), )
batteryDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 68)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 427)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
aruSmokeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 289)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorHighBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 442)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 246)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsOutletStatusOutletNormalState'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsOutletStatusOutletName'), ('PowerNet-MIB', 'emsOutletStatusOutletIndex'), ('PowerNet-MIB', 'emsOutletStatusOutletState'), ('PowerNet-MIB', 'mtrapargsString'), )
iemProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 171)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 453)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 238)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
rsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 106)).setObjects(('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
apcForcedEntryCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 583)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
msvmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 89)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletIndex'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUTransformerTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 338)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
upsBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 506)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
iemContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 174)).setObjects(('PowerNet-MIB', 'iemStatusContactNumber'), ('PowerNet-MIB', 'iemStatusContactName'), ('PowerNet-MIB', 'mtrapargsString'), )
iemContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 173)).setObjects(('PowerNet-MIB', 'iemStatusContactNumber'), ('PowerNet-MIB', 'iemStatusContactName'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 432)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xATSNotInAutomaticMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 405)).setObjects(('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
envLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 374)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
apcAnalogInputMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 566)).setObjects(('PowerNet-MIB', 'mtrapargsInteger04'), ('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsString'), )
xPDUOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 320)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
bmBatManCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 178)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
msvmOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 92)).setObjects(('PowerNet-MIB', 'sPDUMasterControlVMName'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletIndex'), ('PowerNet-MIB', 'sPDUOutletControlVMOutletName'), ('PowerNet-MIB', 'sPDUMasterControlVMIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSGeneratorLowCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 431)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUSystemStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 480)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 437)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
xPDUOutputNeutralCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 334)).setObjects(('PowerNet-MIB', 'mtrapargsInteger'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
envMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 361)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsStatusSysTempUnits'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'emsProbeStatusProbeTemperature'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), )
xPDUCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 337)).setObjects(('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), )
apcDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 569)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString04'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )
iemLowHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 170)).setObjects(('PowerNet-MIB', 'iemStatusProbeNumber'), ('PowerNet-MIB', 'iemStatusProbeName'), ('PowerNet-MIB', 'mtrapargsString'), )
aruExhaustTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 292)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
apcOutputRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 607)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
envMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 366)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsProbeStatusProbeName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'emsProbeStatusProbeHumidity'), ('PowerNet-MIB', 'emsProbeStatusProbeIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
aruAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 285)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'rARUStatusAruName'), ('PowerNet-MIB', 'rARUStatusAruIndex'), ('PowerNet-MIB', 'mtrapargsString'), )
xATSOutputLoadPoweredByGeneratorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 497)).setObjects(('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'xATSIdentProductName'), ('PowerNet-MIB', 'xATSIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsInteger'), )
emsHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 345)).setObjects(('PowerNet-MIB', 'emsIdentEMSName'), ('PowerNet-MIB', 'emsIdentSerialNumber'), ('PowerNet-MIB', 'mtrapargsString'), )
pduCircuitPanelFrequencyOutofRangeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 206)).setObjects(('PowerNet-MIB', 'mtrapargsString03'), ('PowerNet-MIB', 'mtrapargsString02'), ('PowerNet-MIB', 'mtrapargsString'), )
noBatteriesCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 81)).setObjects(('PowerNet-MIB', 'mtrapargsString'), )
xPDUBreakerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 488)).setObjects(('PowerNet-MIB', 'mtrapargsInteger03'), ('PowerNet-MIB', 'mtrapargsInteger02'), ('PowerNet-MIB', 'xPDUIdentSerialNumber'), ('PowerNet-MIB', 'xPDUIdentProductName'), ('PowerNet-MIB', 'mtrapargsString'), ('PowerNet-MIB', 'mtrapargsInteger'), )

# Exports

# Objects
mibBuilder.exportSymbols('PowerNet-MIB', apc=apc, products=products, hardware=hardware, ups=ups, upsIdent=upsIdent, upsBasicIdent=upsBasicIdent, upsBasicIdentModel=upsBasicIdentModel, upsBasicIdentName=upsBasicIdentName, upsAdvIdent=upsAdvIdent, upsAdvIdentFirmwareRevision=upsAdvIdentFirmwareRevision, upsAdvIdentDateOfManufacture=upsAdvIdentDateOfManufacture, upsAdvIdentSerialNumber=upsAdvIdentSerialNumber, upsBattery=upsBattery, upsBasicBattery=upsBasicBattery, upsBasicBatteryStatus=upsBasicBatteryStatus, upsBasicBatteryTimeOnBattery=upsBasicBatteryTimeOnBattery, upsBasicBatteryLastReplaceDate=upsBasicBatteryLastReplaceDate, upsAdvBattery=upsAdvBattery, upsAdvBatteryCapacity=upsAdvBatteryCapacity, upsAdvBatteryTemperature=upsAdvBatteryTemperature, upsAdvBatteryRunTimeRemaining=upsAdvBatteryRunTimeRemaining, upsAdvBatteryReplaceIndicator=upsAdvBatteryReplaceIndicator, upsAdvBatteryNumOfBattPacks=upsAdvBatteryNumOfBattPacks, upsAdvBatteryNumOfBadBattPacks=upsAdvBatteryNumOfBadBattPacks, upsAdvBatteryNominalVoltage=upsAdvBatteryNominalVoltage, upsAdvBatteryActualVoltage=upsAdvBatteryActualVoltage, upsAdvBatteryCurrent=upsAdvBatteryCurrent, upsAdvTotalDCCurrent=upsAdvTotalDCCurrent, upsInput=upsInput, upsBasicInput=upsBasicInput, upsBasicInputPhase=upsBasicInputPhase, upsAdvInput=upsAdvInput, upsAdvInputLineVoltage=upsAdvInputLineVoltage, upsAdvInputMaxLineVoltage=upsAdvInputMaxLineVoltage, upsAdvInputMinLineVoltage=upsAdvInputMinLineVoltage, upsAdvInputFrequency=upsAdvInputFrequency, upsAdvInputLineFailCause=upsAdvInputLineFailCause, upsOutput=upsOutput, upsBasicOutput=upsBasicOutput, upsBasicOutputStatus=upsBasicOutputStatus, upsBasicOutputPhase=upsBasicOutputPhase, upsAdvOutput=upsAdvOutput, upsAdvOutputVoltage=upsAdvOutputVoltage, upsAdvOutputFrequency=upsAdvOutputFrequency, upsAdvOutputLoad=upsAdvOutputLoad, upsAdvOutputCurrent=upsAdvOutputCurrent, upsAdvOutputRedundancy=upsAdvOutputRedundancy, upsAdvOutputKVACapacity=upsAdvOutputKVACapacity, upsConfig=upsConfig, upsBasicConfig=upsBasicConfig, upsBasicConfigNumDevices=upsBasicConfigNumDevices, upsBasicConfigDeviceTable=upsBasicConfigDeviceTable, upsBasicConfigDeviceEntry=upsBasicConfigDeviceEntry, deviceIndex=deviceIndex, deviceName=deviceName, vaRating=vaRating, acceptThisDevice=acceptThisDevice, upsAdvConfig=upsAdvConfig, upsAdvConfigRatedOutputVoltage=upsAdvConfigRatedOutputVoltage, upsAdvConfigHighTransferVolt=upsAdvConfigHighTransferVolt, upsAdvConfigLowTransferVolt=upsAdvConfigLowTransferVolt, upsAdvConfigAlarm=upsAdvConfigAlarm, upsAdvConfigAlarmTimer=upsAdvConfigAlarmTimer, upsAdvConfigMinReturnCapacity=upsAdvConfigMinReturnCapacity, upsAdvConfigSensitivity=upsAdvConfigSensitivity, upsAdvConfigLowBatteryRunTime=upsAdvConfigLowBatteryRunTime, upsAdvConfigReturnDelay=upsAdvConfigReturnDelay, upsAdvConfigShutoffDelay=upsAdvConfigShutoffDelay, upsAdvConfigUpsSleepTime=upsAdvConfigUpsSleepTime, upsAdvConfigSetEEPROMDefaults=upsAdvConfigSetEEPROMDefaults, upsAdvConfigDipSwitchSetting=upsAdvConfigDipSwitchSetting, upsAdvConfigDipSwitchEntry=upsAdvConfigDipSwitchEntry, dipSwitchIndex=dipSwitchIndex, dipSwitchStatus=dipSwitchStatus, upsAdvConfigBattExhaustThresh=upsAdvConfigBattExhaustThresh, upsAdvConfigPassword=upsAdvConfigPassword, upsAdvConfigAllowedSetTable=upsAdvConfigAllowedSetTable, apcUpsConfigEntry=apcUpsConfigEntry, apcUpsConfigFieldIndex=apcUpsConfigFieldIndex, apcUpsConfigFieldOID=apcUpsConfigFieldOID, apcUpsConfigFieldValueRange=apcUpsConfigFieldValueRange, upsAdvConfigBattCabAmpHour=upsAdvConfigBattCabAmpHour, upsAdvConfigPositionSelector=upsAdvConfigPositionSelector, upsAdvConfigOutputFreqRange=upsAdvConfigOutputFreqRange, upsAdvConfigUPSFail=upsAdvConfigUPSFail, upsAdvConfigAlarmRedundancy=upsAdvConfigAlarmRedundancy, upsAdvConfigAlarmLoadOver=upsAdvConfigAlarmLoadOver, upsAdvConfigAlarmRuntimeUnder=upsAdvConfigAlarmRuntimeUnder, upsAdvConfigVoutReporting=upsAdvConfigVoutReporting, upsAdvConfigNumExternalBatteries=upsAdvConfigNumExternalBatteries, upsAdvConfigSimpleSignalShutdowns=upsAdvConfigSimpleSignalShutdowns, upsAdvConfigMaxShutdownTime=upsAdvConfigMaxShutdownTime, upsAsiUpsControlServerRequestShutdown=upsAsiUpsControlServerRequestShutdown, upsAdvConfigMinReturnRuntime=upsAdvConfigMinReturnRuntime, upsAdvConfigBasicSignalLowBatteryDuration=upsAdvConfigBasicSignalLowBatteryDuration, upsAdvConfigBypassPhaseLockRequired=upsAdvConfigBypassPhaseLockRequired, upsControl=upsControl, upsBasicControl=upsBasicControl, upsBasicControlConserveBattery=upsBasicControlConserveBattery, upsAdvControl=upsAdvControl, upsAdvControlUpsOff=upsAdvControlUpsOff, upsAdvControlRebootUps=upsAdvControlRebootUps, upsAdvControlUpsSleep=upsAdvControlUpsSleep, upsAdvControlSimulatePowerFail=upsAdvControlSimulatePowerFail, upsAdvControlFlashAndBeep=upsAdvControlFlashAndBeep, upsAdvControlTurnOnUPS=upsAdvControlTurnOnUPS, upsAdvControlBypassSwitch=upsAdvControlBypassSwitch, upsTest=upsTest, upsBasicTest=upsBasicTest, upsAdvTest=upsAdvTest, upsAdvTestDiagnosticSchedule=upsAdvTestDiagnosticSchedule, upsAdvTestDiagnostics=upsAdvTestDiagnostics, upsAdvTestDiagnosticsResults=upsAdvTestDiagnosticsResults, upsAdvTestLastDiagnosticsDate=upsAdvTestLastDiagnosticsDate, upsAdvTestRuntimeCalibration=upsAdvTestRuntimeCalibration, upsAdvTestCalibrationResults=upsAdvTestCalibrationResults, upsAdvTestCalibrationDate=upsAdvTestCalibrationDate, upsComm=upsComm, upsCommStatus=upsCommStatus, upsPhase=upsPhase, upsPhaseResetValues=upsPhaseResetValues, upsPhaseResetMaxMinValues=upsPhaseResetMaxMinValues, upsPhaseInput=upsPhaseInput, upsPhaseNumInputs=upsPhaseNumInputs, upsPhaseInputTable=upsPhaseInputTable, upsPhaseInputEntry=upsPhaseInputEntry)
mibBuilder.exportSymbols('PowerNet-MIB', upsPhaseInputTableIndex=upsPhaseInputTableIndex, upsPhaseNumInputPhases=upsPhaseNumInputPhases, upsPhaseInputVoltageOrientation=upsPhaseInputVoltageOrientation, upsPhaseInputFrequency=upsPhaseInputFrequency, upsPhaseInputType=upsPhaseInputType, upsPhaseInputName=upsPhaseInputName, upsPhaseInputPhaseTable=upsPhaseInputPhaseTable, upsPhaseInputPhaseEntry=upsPhaseInputPhaseEntry, upsPhaseInputPhaseTableIndex=upsPhaseInputPhaseTableIndex, upsPhaseInputPhaseIndex=upsPhaseInputPhaseIndex, upsPhaseInputVoltage=upsPhaseInputVoltage, upsPhaseInputMaxVoltage=upsPhaseInputMaxVoltage, upsPhaseInputMinVoltage=upsPhaseInputMinVoltage, upsPhaseInputCurrent=upsPhaseInputCurrent, upsPhaseInputMaxCurrent=upsPhaseInputMaxCurrent, upsPhaseInputMinCurrent=upsPhaseInputMinCurrent, upsPhaseInputPower=upsPhaseInputPower, upsPhaseInputMaxPower=upsPhaseInputMaxPower, upsPhaseInputMinPower=upsPhaseInputMinPower, upsPhaseOutput=upsPhaseOutput, upsPhaseNumOutputs=upsPhaseNumOutputs, upsPhaseOutputTable=upsPhaseOutputTable, upsPhaseOutputEntry=upsPhaseOutputEntry, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, upsPhaseNumOutputPhases=upsPhaseNumOutputPhases, upsPhaseOutputVoltageOrientation=upsPhaseOutputVoltageOrientation, upsPhaseOutputFrequency=upsPhaseOutputFrequency, upsPhaseOutputPhaseTable=upsPhaseOutputPhaseTable, upsPhaseOutputPhaseEntry=upsPhaseOutputPhaseEntry, upsPhaseOutputPhaseTableIndex=upsPhaseOutputPhaseTableIndex, upsPhaseOutputPhaseIndex=upsPhaseOutputPhaseIndex, upsPhaseOutputVoltage=upsPhaseOutputVoltage, upsPhaseOutputCurrent=upsPhaseOutputCurrent, upsPhaseOutputMaxCurrent=upsPhaseOutputMaxCurrent, upsPhaseOutputMinCurrent=upsPhaseOutputMinCurrent, upsPhaseOutputLoad=upsPhaseOutputLoad, upsPhaseOutputMaxLoad=upsPhaseOutputMaxLoad, upsPhaseOutputMinLoad=upsPhaseOutputMinLoad, upsPhaseOutputPercentLoad=upsPhaseOutputPercentLoad, upsPhaseOutputMaxPercentLoad=upsPhaseOutputMaxPercentLoad, upsPhaseOutputMinPercentLoad=upsPhaseOutputMinPercentLoad, upsPhaseOutputPower=upsPhaseOutputPower, upsPhaseOutputMaxPower=upsPhaseOutputMaxPower, upsPhaseOutputMinPower=upsPhaseOutputMinPower, upsPhaseOutputPercentPower=upsPhaseOutputPercentPower, upsPhaseOutputMaxPercentPower=upsPhaseOutputMaxPercentPower, upsPhaseOutputMinPercentPower=upsPhaseOutputMinPercentPower, upsSyncCtrlGroup=upsSyncCtrlGroup, upsSyncCtrlGroupConfig=upsSyncCtrlGroupConfig, upsSCGMembershipGroupNumber=upsSCGMembershipGroupNumber, upsSCGActiveMembershipStatus=upsSCGActiveMembershipStatus, upsSCGPowerSynchronizationDelayTime=upsSCGPowerSynchronizationDelayTime, upsSCGReturnBatteryCapacityOffset=upsSCGReturnBatteryCapacityOffset, upsSCGMultiCastIP=upsSCGMultiCastIP, upsSyncCtrlGroupStatus=upsSyncCtrlGroupStatus, upsSCGNumOfGroupMembers=upsSCGNumOfGroupMembers, upsSCGStatusTable=upsSCGStatusTable, upsSCGStatusEntry=upsSCGStatusEntry, upsSCGStatusTableIndex=upsSCGStatusTableIndex, upsSCGMemberIP=upsSCGMemberIP, upsSCGACInputStatus=upsSCGACInputStatus, upsSCGACOutputStatus=upsSCGACOutputStatus, upsState=upsState, upsBasicState=upsBasicState, upsBasicStateOutputState=upsBasicStateOutputState, upsAdvState=upsAdvState, upsAdvStateAbnormalConditions=upsAdvStateAbnormalConditions, upsAdvStateSymmetra3PhaseSpecificFaults=upsAdvStateSymmetra3PhaseSpecificFaults, upsAdvStateDP300ESpecificFaults=upsAdvStateDP300ESpecificFaults, upsOutletGroups=upsOutletGroups, upsOutletGroupStatus=upsOutletGroupStatus, upsOutletGroupStatusTableSize=upsOutletGroupStatusTableSize, upsOutletGroupStatusTable=upsOutletGroupStatusTable, upsOutletGroupStatusEntry=upsOutletGroupStatusEntry, upsOutletGroupStatusIndex=upsOutletGroupStatusIndex, upsOutletGroupStatusName=upsOutletGroupStatusName, upsOutletGroupStatusGroupState=upsOutletGroupStatusGroupState, upsOutletGroupStatusCommandPending=upsOutletGroupStatusCommandPending, upsOutletGroupConfig=upsOutletGroupConfig, upsOutletGroupConfigTableSize=upsOutletGroupConfigTableSize, upsOutletGroupConfigTable=upsOutletGroupConfigTable, upsOutletGroupConfigEntry=upsOutletGroupConfigEntry, upsOutletGroupConfigIndex=upsOutletGroupConfigIndex, upsOutletGroupConfigName=upsOutletGroupConfigName, upsOutletGroupConfigPowerOnDelay=upsOutletGroupConfigPowerOnDelay, upsOutletGroupConfigPowerOffDelay=upsOutletGroupConfigPowerOffDelay, upsOutletGroupConfigRebootDuration=upsOutletGroupConfigRebootDuration, upsOutletGroupControl=upsOutletGroupControl, upsOutletGroupControlTableSize=upsOutletGroupControlTableSize, upsOutletGroupControlTable=upsOutletGroupControlTable, upsOutletGroupControlEntry=upsOutletGroupControlEntry, upsOutletGroupControlIndex=upsOutletGroupControlIndex, upsOutletGroupControlName=upsOutletGroupControlName, upsOutletGroupControlCommand=upsOutletGroupControlCommand, upsDiagnostics=upsDiagnostics, upsDiagnosticIM=upsDiagnosticIM, upsDiagIMTableSize=upsDiagIMTableSize, upsDiagIMTable=upsDiagIMTable, upsDiagIMEntry=upsDiagIMEntry, upsDiagIMIndex=upsDiagIMIndex, upsDiagIMType=upsDiagIMType, upsDiagIMStatus=upsDiagIMStatus, upsDiagIMFirmwareRev=upsDiagIMFirmwareRev, upsDiagIMSlaveFirmwareRev=upsDiagIMSlaveFirmwareRev, upsDiagIMHardwareRev=upsDiagIMHardwareRev, upsDiagIMSerialNum=upsDiagIMSerialNum, upsDiagIMManufactureDate=upsDiagIMManufactureDate, upsDiagnosticPowerModules=upsDiagnosticPowerModules, upsDiagPMTableSize=upsDiagPMTableSize, upsDiagPMTable=upsDiagPMTable, upsDiagPMEntry=upsDiagPMEntry, upsDiagPMIndex=upsDiagPMIndex, upsDiagPMStatus=upsDiagPMStatus, upsDiagPMFirmwareRev=upsDiagPMFirmwareRev, upsDiagPMHardwareRev=upsDiagPMHardwareRev, upsDiagPMSerialNum=upsDiagPMSerialNum, upsDiagPMManufactureDate=upsDiagPMManufactureDate, upsDiagnosticBatteries=upsDiagnosticBatteries, upsDiagBatteryTableSize=upsDiagBatteryTableSize, upsDiagBatteryTable=upsDiagBatteryTable, upsDiagBatteryEntry=upsDiagBatteryEntry, upsDiagBatteryFrameIndex=upsDiagBatteryFrameIndex, upsDiagBatteryIndex=upsDiagBatteryIndex, upsDiagBatteryStatus=upsDiagBatteryStatus, upsDiagBatterySerialNumber=upsDiagBatterySerialNumber, upsDiagBatteryFirmwareRev=upsDiagBatteryFirmwareRev, upsDiagBatteryManufactureDate=upsDiagBatteryManufactureDate)
mibBuilder.exportSymbols('PowerNet-MIB', upsDiagBatteryType=upsDiagBatteryType, upsDiagnosticSubsystem=upsDiagnosticSubsystem, upsDiagSubSysFrameTableSize=upsDiagSubSysFrameTableSize, upsDiagSubSysFrameTable=upsDiagSubSysFrameTable, upsDiagSubSysFrameEntry=upsDiagSubSysFrameEntry, upsDiagSubSysFrameIndex=upsDiagSubSysFrameIndex, upsDiagSubSysFrameType=upsDiagSubSysFrameType, upsDiagSubSysFrameFirmwareRev=upsDiagSubSysFrameFirmwareRev, upsDiagSubSysFrameHardwareRev=upsDiagSubSysFrameHardwareRev, upsDiagSubSysFrameSerialNum=upsDiagSubSysFrameSerialNum, upsDiagSubSysFrameManufactureDate=upsDiagSubSysFrameManufactureDate, upsDiagSubSysIntBypSwitchTableSize=upsDiagSubSysIntBypSwitchTableSize, upsDiagSubSysIntBypSwitchTable=upsDiagSubSysIntBypSwitchTable, upsDiagSubSysIntBypSwitchEntry=upsDiagSubSysIntBypSwitchEntry, upsDiagSubSysIntBypSwitchFrameIndex=upsDiagSubSysIntBypSwitchFrameIndex, upsDiagSubSysIntBypSwitchIndex=upsDiagSubSysIntBypSwitchIndex, upsDiagSubSysIntBypSwitchStatus=upsDiagSubSysIntBypSwitchStatus, upsDiagSubSysIntBypSwitchFirmwareRev=upsDiagSubSysIntBypSwitchFirmwareRev, upsDiagSubSysIntBypSwitchHardwareRev=upsDiagSubSysIntBypSwitchHardwareRev, upsDiagSubSysIntBypSwitchSerialNum=upsDiagSubSysIntBypSwitchSerialNum, upsDiagSubSysIntBypSwitchManufactureDate=upsDiagSubSysIntBypSwitchManufactureDate, upsDiagSubSysBattMonitorTableSize=upsDiagSubSysBattMonitorTableSize, upsDiagSubSysBattMonitorTable=upsDiagSubSysBattMonitorTable, upsDiagSubSysBattMonitorEntry=upsDiagSubSysBattMonitorEntry, upsDiagSubSysBattMonitorFrameIndex=upsDiagSubSysBattMonitorFrameIndex, upsDiagSubSysBattMonitorIndex=upsDiagSubSysBattMonitorIndex, upsDiagSubSysBattMonitorStatus=upsDiagSubSysBattMonitorStatus, upsDiagSubSysBattMonitorFirmwareRev=upsDiagSubSysBattMonitorFirmwareRev, upsDiagSubSysBattMonitorHardwareRev=upsDiagSubSysBattMonitorHardwareRev, upsDiagSubSysBattMonitorSerialNum=upsDiagSubSysBattMonitorSerialNum, upsDiagSubSysBattMonitorManufactureDate=upsDiagSubSysBattMonitorManufactureDate, upsDiagSubSysExternalSwitchGearTableSize=upsDiagSubSysExternalSwitchGearTableSize, upsDiagSubSysExternalSwitchGearTable=upsDiagSubSysExternalSwitchGearTable, upsDiagSubSysExternalSwitchGearEntry=upsDiagSubSysExternalSwitchGearEntry, upsDiagSubSysExternalSwitchGearFrameIndex=upsDiagSubSysExternalSwitchGearFrameIndex, upsDiagSubSysExternalSwitchGearIndex=upsDiagSubSysExternalSwitchGearIndex, upsDiagSubSysExternalSwitchGearStatus=upsDiagSubSysExternalSwitchGearStatus, upsDiagSubSysExternalSwitchGearFirmwareRev=upsDiagSubSysExternalSwitchGearFirmwareRev, upsDiagSubSysExternalSwitchGearHardwareRev=upsDiagSubSysExternalSwitchGearHardwareRev, upsDiagSubSysExternalSwitchGearSerialNum=upsDiagSubSysExternalSwitchGearSerialNum, upsDiagSubSysExternalSwitchGearManufactureDate=upsDiagSubSysExternalSwitchGearManufactureDate, upsDiagSubSysDisplayInterfaceCardTableSize=upsDiagSubSysDisplayInterfaceCardTableSize, upsDiagSubSysDisplayInterfaceCardTable=upsDiagSubSysDisplayInterfaceCardTable, upsDiagSubSysDisplayInterfaceCardEntry=upsDiagSubSysDisplayInterfaceCardEntry, upsDiagSubSysDisplayInterfaceCardFrameIndex=upsDiagSubSysDisplayInterfaceCardFrameIndex, upsDiagSubSysDisplayInterfaceCardIndex=upsDiagSubSysDisplayInterfaceCardIndex, upsDiagSubSysDisplayInterfaceCardStatus=upsDiagSubSysDisplayInterfaceCardStatus, upsDiagSubSysDCCircuitBreakerTableSize=upsDiagSubSysDCCircuitBreakerTableSize, upsDiagSubSysDCCircuitBreakerTable=upsDiagSubSysDCCircuitBreakerTable, upsDiagSubSysDCCircuitBreakerEntry=upsDiagSubSysDCCircuitBreakerEntry, upsDiagSubSysDCCircuitBreakerFrameIndex=upsDiagSubSysDCCircuitBreakerFrameIndex, upsDiagSubSysDCCircuitBreakerIndex=upsDiagSubSysDCCircuitBreakerIndex, upsDiagSubSysDCCircuitBreakerStatus=upsDiagSubSysDCCircuitBreakerStatus, upsDiagSubSysSystemPowerSupplyTableSize=upsDiagSubSysSystemPowerSupplyTableSize, upsDiagSubSysSystemPowerSupplyTable=upsDiagSubSysSystemPowerSupplyTable, upsDiagSubSysSystemPowerSupplyEntry=upsDiagSubSysSystemPowerSupplyEntry, upsDiagSubSysSystemPowerSupplyFrameIndex=upsDiagSubSysSystemPowerSupplyFrameIndex, upsDiagSubSysSystemPowerSupplyIndex=upsDiagSubSysSystemPowerSupplyIndex, upsDiagSubSysSystemPowerSupplyStatus=upsDiagSubSysSystemPowerSupplyStatus, upsDiagSubSysSystemPowerSupplyFirmwareRev=upsDiagSubSysSystemPowerSupplyFirmwareRev, upsDiagSubSysSystemPowerSupplyHardwareRev=upsDiagSubSysSystemPowerSupplyHardwareRev, upsDiagSubSysSystemPowerSupplySerialNum=upsDiagSubSysSystemPowerSupplySerialNum, upsDiagSubSysSystemPowerSupplyManufactureDate=upsDiagSubSysSystemPowerSupplyManufactureDate, upsDiagSubSysXRCommunicationCardTableSize=upsDiagSubSysXRCommunicationCardTableSize, upsDiagSubSysXRCommunicationCardTable=upsDiagSubSysXRCommunicationCardTable, upsDiagSubSysXRCommunicationCardEntry=upsDiagSubSysXRCommunicationCardEntry, upsDiagSubSysXRCommunicationCardFrameIndex=upsDiagSubSysXRCommunicationCardFrameIndex, upsDiagSubSysXRCommunicationCardIndex=upsDiagSubSysXRCommunicationCardIndex, upsDiagSubSysXRCommunicationCardStatus=upsDiagSubSysXRCommunicationCardStatus, upsDiagSubSysXRCommunicationCardFirmwareRev=upsDiagSubSysXRCommunicationCardFirmwareRev, upsDiagSubSysXRCommunicationCardSerialNum=upsDiagSubSysXRCommunicationCardSerialNum, upsDiagSubSysExternalPowerFrameBoardTableSize=upsDiagSubSysExternalPowerFrameBoardTableSize, upsDiagSubSysExternalPowerFrameBoardTable=upsDiagSubSysExternalPowerFrameBoardTable, upsDiagSubSysExternalPowerFrameBoardEntry=upsDiagSubSysExternalPowerFrameBoardEntry, upsDiagSubSysExternalPowerFrameBoardFrameIndex=upsDiagSubSysExternalPowerFrameBoardFrameIndex, upsDiagSubSysExternalPowerFrameBoardIndex=upsDiagSubSysExternalPowerFrameBoardIndex, upsDiagSubSysExternalPowerFrameBoardStatus=upsDiagSubSysExternalPowerFrameBoardStatus, upsDiagSubSysChargerTableSize=upsDiagSubSysChargerTableSize, upsDiagSubSysChargerTable=upsDiagSubSysChargerTable, upsDiagSubSysChargerEntry=upsDiagSubSysChargerEntry, upsDiagSubSysChargerFrameIndex=upsDiagSubSysChargerFrameIndex, upsDiagSubSysChargerIndex=upsDiagSubSysChargerIndex, upsDiagSubSysChargerStatus=upsDiagSubSysChargerStatus, upsDiagSubSysInverterTableSize=upsDiagSubSysInverterTableSize, upsDiagSubSysInverterTable=upsDiagSubSysInverterTable, upsDiagSubSysInverterEntry=upsDiagSubSysInverterEntry, upsDiagSubSysInverterFrameIndex=upsDiagSubSysInverterFrameIndex, upsDiagSubSysInverterIndex=upsDiagSubSysInverterIndex, upsDiagSubSysInverterStatus=upsDiagSubSysInverterStatus, upsDiagSubSysInverterFirmwareRev=upsDiagSubSysInverterFirmwareRev, upsDiagSubSysInverterHardwareRev=upsDiagSubSysInverterHardwareRev, upsDiagSubSysInverterSerialNum=upsDiagSubSysInverterSerialNum, upsDiagSubSysInverterManufactureDate=upsDiagSubSysInverterManufactureDate, upsDiagSubSysPowerFactorCorrectionTableSize=upsDiagSubSysPowerFactorCorrectionTableSize, upsDiagSubSysPowerFactorCorrectionTable=upsDiagSubSysPowerFactorCorrectionTable, upsDiagSubSysPowerFactorCorrectionEntry=upsDiagSubSysPowerFactorCorrectionEntry, upsDiagSubSysPowerFactorCorrectionFrameIndex=upsDiagSubSysPowerFactorCorrectionFrameIndex, upsDiagSubSysPowerFactorCorrectionIndex=upsDiagSubSysPowerFactorCorrectionIndex, upsDiagSubSysPowerFactorCorrectionStatus=upsDiagSubSysPowerFactorCorrectionStatus, upsDiagSubSysPowerFactorCorrectionFirmwareRev=upsDiagSubSysPowerFactorCorrectionFirmwareRev, upsDiagSubSysPowerFactorCorrectionHardwareRev=upsDiagSubSysPowerFactorCorrectionHardwareRev, upsDiagSubSysPowerFactorCorrectionSerialNum=upsDiagSubSysPowerFactorCorrectionSerialNum, upsDiagSubSysPowerFactorCorrectionManufactureDate=upsDiagSubSysPowerFactorCorrectionManufactureDate, upsDiagnosticExternalDevices=upsDiagnosticExternalDevices, upsDiagSwitchGear=upsDiagSwitchGear, upsDiagSwitchGearStatus=upsDiagSwitchGearStatus, upsDiagSwitchGearInputSwitchStatus=upsDiagSwitchGearInputSwitchStatus, upsDiagSwitchGearOutputSwitchStatus=upsDiagSwitchGearOutputSwitchStatus, upsDiagSwitchGearBypassSwitchStatus=upsDiagSwitchGearBypassSwitchStatus, upsDiagMCCBBox=upsDiagMCCBBox, upsDiagMCCBBoxStatus=upsDiagMCCBBoxStatus, upsDiagTransformer=upsDiagTransformer, upsDiagTransformerStatus=upsDiagTransformerStatus, upsDiagnosticComBus=upsDiagnosticComBus, upsDiagComBusInternalMIMStatus=upsDiagComBusInternalMIMStatus, upsDiagComBusInternalRIMStatus=upsDiagComBusInternalRIMStatus, upsDiagComBusMIMtoRIMStatus=upsDiagComBusMIMtoRIMStatus, upsDiagComBusExternalMIMStatus=upsDiagComBusExternalMIMStatus, upsDiagComBusExternalRIMStatus=upsDiagComBusExternalRIMStatus, measureUps=measureUps, mUpsEnviron=mUpsEnviron, mUpsEnvironAmbientTemperature=mUpsEnvironAmbientTemperature, mUpsEnvironRelativeHumidity=mUpsEnvironRelativeHumidity, mUpsEnvironAmbientTemperature2=mUpsEnvironAmbientTemperature2, mUpsEnvironRelativeHumidity2=mUpsEnvironRelativeHumidity2, mUpsContact=mUpsContact, mUpsContactNumContacts=mUpsContactNumContacts)
mibBuilder.exportSymbols('PowerNet-MIB', mUpsContactTable=mUpsContactTable, mUpsContactEntry=mUpsContactEntry, contactNumber=contactNumber, normalState=normalState, description=description, monitoringStatus=monitoringStatus, currentStatus=currentStatus, miniSNMPadapter=miniSNMPadapter, serialPort=serialPort, serialPort1=serialPort1, serialPort2=serialPort2, serialPort2Config=serialPort2Config, serialPort2Mode=serialPort2Mode, serialPort2Control=serialPort2Control, setPulseOnTXD=setPulseOnTXD, masterswitch=masterswitch, sPDUIdent=sPDUIdent, sPDUIdentHardwareRev=sPDUIdentHardwareRev, sPDUIdentFirmwareRev=sPDUIdentFirmwareRev, sPDUIdentDateOfManufacture=sPDUIdentDateOfManufacture, sPDUIdentModelNumber=sPDUIdentModelNumber, sPDUIdentSerialNumber=sPDUIdentSerialNumber, sPDUMasterControl=sPDUMasterControl, sPDUMasterControlSwitch=sPDUMasterControlSwitch, sPDUMasterState=sPDUMasterState, sPDUMasterPending=sPDUMasterPending, sPDUMasterConfig=sPDUMasterConfig, sPDUMasterConfigPowerOn=sPDUMasterConfigPowerOn, sPDUMasterConfigReboot=sPDUMasterConfigReboot, sPDUMasterConfigPDUName=sPDUMasterConfigPDUName, sPDUOutletControl=sPDUOutletControl, sPDUOutletControlTableSize=sPDUOutletControlTableSize, sPDUOutletControlTable=sPDUOutletControlTable, sPDUOutletControlEntry=sPDUOutletControlEntry, sPDUOutletControlIndex=sPDUOutletControlIndex, sPDUOutletPending=sPDUOutletPending, sPDUOutletCtl=sPDUOutletCtl, sPDUOutletCtlName=sPDUOutletCtlName, sPDUOutletConfig=sPDUOutletConfig, sPDUOutletConfigTableSize=sPDUOutletConfigTableSize, sPDUOutletConfigTable=sPDUOutletConfigTable, sPDUOutletConfigEntry=sPDUOutletConfigEntry, sPDUOutletConfigIndex=sPDUOutletConfigIndex, sPDUOutletPowerOnTime=sPDUOutletPowerOnTime, sPDUOutletName=sPDUOutletName, sPDUOutletPowerOffTime=sPDUOutletPowerOffTime, sPDUOutletRebootDuration=sPDUOutletRebootDuration, masterswitchVM=masterswitchVM, sPDUIdentVM=sPDUIdentVM, sPDUIdentVMTableSize=sPDUIdentVMTableSize, sPDUIdentVMTable=sPDUIdentVMTable, sPDUIdentVMEntry=sPDUIdentVMEntry, sPDUIdentVMIndex=sPDUIdentVMIndex, sPDUIdentNameVM=sPDUIdentNameVM, sPDUIdentHardwareRevVM=sPDUIdentHardwareRevVM, sPDUIdentFirmwareRevVM=sPDUIdentFirmwareRevVM, sPDUIdentDateOfManufactureVM=sPDUIdentDateOfManufactureVM, sPDUIdentModelNumberVM=sPDUIdentModelNumberVM, sPDUIdentSerialNumberVM=sPDUIdentSerialNumberVM, sPDUMasterControlVM=sPDUMasterControlVM, sPDUMasterControlVMTableSize=sPDUMasterControlVMTableSize, sPDUMasterControlVMTable=sPDUMasterControlVMTable, sPDUMasterControlVMEntry=sPDUMasterControlVMEntry, sPDUMasterControlVMIndex=sPDUMasterControlVMIndex, sPDUMasterControlVMName=sPDUMasterControlVMName, sPDUMasterControlVMCommand=sPDUMasterControlVMCommand, sPDUMasterConfigVM=sPDUMasterConfigVM, sPDUMasterConfigVMTableSize=sPDUMasterConfigVMTableSize, sPDUMasterConfigVMTable=sPDUMasterConfigVMTable, sPDUMasterConfigVMEntry=sPDUMasterConfigVMEntry, sPDUMasterConfigVMIndex=sPDUMasterConfigVMIndex, sPDUMasterConfigVMName=sPDUMasterConfigVMName, sPDUMasterConfigVMColdstartDelay=sPDUMasterConfigVMColdstartDelay, sPDUMasterConfigVMAudioAlarmActivated=sPDUMasterConfigVMAudioAlarmActivated, sPDUMasterConfigVMHighLoadWarningThreshold=sPDUMasterConfigVMHighLoadWarningThreshold, sPDUMasterConfigVMLowLoadWarningThreshold=sPDUMasterConfigVMLowLoadWarningThreshold, sPDUMasterConfigVMOverloadRestriction=sPDUMasterConfigVMOverloadRestriction, sPDUMasterStatusVM=sPDUMasterStatusVM, sPDUMasterStatusVMTableSize=sPDUMasterStatusVMTableSize, sPDUMasterStatusVMTable=sPDUMasterStatusVMTable, sPDUMasterStatusVMEntry=sPDUMasterStatusVMEntry, sPDUMasterStatusVMIndex=sPDUMasterStatusVMIndex, sPDUMasterStatusVMName=sPDUMasterStatusVMName, sPDUMasterStatusVMCommandPending=sPDUMasterStatusVMCommandPending, sPDUMasterStatusVMOverloadCondition=sPDUMasterStatusVMOverloadCondition, sPDUMasterStatusVMLowLoadCondition=sPDUMasterStatusVMLowLoadCondition, sPDUMasterStatusVMCurrentLoad=sPDUMasterStatusVMCurrentLoad, sPDUMasterStatusVMMaxLoad=sPDUMasterStatusVMMaxLoad, sPDUMasterStatusVMOutletCount=sPDUMasterStatusVMOutletCount, sPDUMasterStatusVMRebootDuration=sPDUMasterStatusVMRebootDuration, sPDUOutletControlVM=sPDUOutletControlVM, sPDUOutletControlVMTable=sPDUOutletControlVMTable, sPDUOutletControlVMEntry=sPDUOutletControlVMEntry, sPDUOutletControlVMIndex=sPDUOutletControlVMIndex, sPDUOutletControlVMName=sPDUOutletControlVMName, sPDUOutletControlVMOutletIndex=sPDUOutletControlVMOutletIndex, sPDUOutletControlVMOutletName=sPDUOutletControlVMOutletName, sPDUOutletControlVMOutletCommand=sPDUOutletControlVMOutletCommand, sPDUOutletConfigVM=sPDUOutletConfigVM, sPDUOutletConfigVMTable=sPDUOutletConfigVMTable, sPDUOutletConfigVMEntry=sPDUOutletConfigVMEntry, sPDUOutletConfigVMIndex=sPDUOutletConfigVMIndex, sPDUOutletConfigVMName=sPDUOutletConfigVMName, sPDUOutletConfigVMOutletIndex=sPDUOutletConfigVMOutletIndex, sPDUOutletConfigVMOutletName=sPDUOutletConfigVMOutletName, sPDUOutletConfigVMPowerOnTime=sPDUOutletConfigVMPowerOnTime, sPDUOutletConfigVMPowerOffTime=sPDUOutletConfigVMPowerOffTime, sPDUOutletConfigVMRebootDuration=sPDUOutletConfigVMRebootDuration, sPDUOutletStatusVM=sPDUOutletStatusVM, sPDUOutletStatusVMTable=sPDUOutletStatusVMTable, sPDUOutletStatusVMEntry=sPDUOutletStatusVMEntry, sPDUOutletStatusVMIndex=sPDUOutletStatusVMIndex, sPDUOutletStatusVMName=sPDUOutletStatusVMName, sPDUOutletStatusVMOutletIndex=sPDUOutletStatusVMOutletIndex, sPDUOutletStatusVMOutletName=sPDUOutletStatusVMOutletName, sPDUOutletStatusVMOutletState=sPDUOutletStatusVMOutletState, sPDUOutletStatusVMCommandPending=sPDUOutletStatusVMCommandPending, masterswitchMSP=masterswitchMSP, sPDUIdentMSP=sPDUIdentMSP, sPDUIdentMSPTableSize=sPDUIdentMSPTableSize, sPDUIdentMSPTable=sPDUIdentMSPTable, sPDUIdentMSPEntry=sPDUIdentMSPEntry, sPDUIdentMSPIndex=sPDUIdentMSPIndex, sPDUIdentNameMSP=sPDUIdentNameMSP, sPDUIdentHardwareRevMSP=sPDUIdentHardwareRevMSP, sPDUIdentFirmwareRevMSP=sPDUIdentFirmwareRevMSP, sPDUIdentDateOfManufactureMSP=sPDUIdentDateOfManufactureMSP)
mibBuilder.exportSymbols('PowerNet-MIB', sPDUIdentModelNumberMSP=sPDUIdentModelNumberMSP, sPDUIdentSerialNumberMSP=sPDUIdentSerialNumberMSP, sPDUMasterControlMSP=sPDUMasterControlMSP, sPDUMasterControlMSPTableSize=sPDUMasterControlMSPTableSize, sPDUMasterControlMSPTable=sPDUMasterControlMSPTable, sPDUMasterControlMSPEntry=sPDUMasterControlMSPEntry, sPDUMasterControlMSPIndex=sPDUMasterControlMSPIndex, sPDUMasterControlMSPName=sPDUMasterControlMSPName, sPDUMasterControlMSPCommand=sPDUMasterControlMSPCommand, sPDUMasterConfigMSP=sPDUMasterConfigMSP, sPDUMasterConfigMSPTableSize=sPDUMasterConfigMSPTableSize, sPDUMasterConfigMSPTable=sPDUMasterConfigMSPTable, sPDUMasterConfigMSPEntry=sPDUMasterConfigMSPEntry, sPDUMasterConfigMSPIndex=sPDUMasterConfigMSPIndex, sPDUMasterConfigMSPName=sPDUMasterConfigMSPName, sPDUMasterConfigMSPPowerOnTimeDelay=sPDUMasterConfigMSPPowerOnTimeDelay, sPDUMasterConfigMSPManualButton=sPDUMasterConfigMSPManualButton, sPDUMasterStatusMSP=sPDUMasterStatusMSP, sPDUMasterStatusMSPTableSize=sPDUMasterStatusMSPTableSize, sPDUMasterStatusMSPTable=sPDUMasterStatusMSPTable, sPDUMasterStatusMSPEntry=sPDUMasterStatusMSPEntry, sPDUMasterStatusMSPIndex=sPDUMasterStatusMSPIndex, sPDUMasterStatusMSPName=sPDUMasterStatusMSPName, sPDUMasterStatusMSPOutletCount=sPDUMasterStatusMSPOutletCount, sPDUOutletControlMSP=sPDUOutletControlMSP, sPDUOutletControlMSPTable=sPDUOutletControlMSPTable, sPDUOutletControlMSPEntry=sPDUOutletControlMSPEntry, sPDUOutletControlMSPIndex=sPDUOutletControlMSPIndex, sPDUOutletControlMSPName=sPDUOutletControlMSPName, sPDUOutletControlMSPOutletIndex=sPDUOutletControlMSPOutletIndex, sPDUOutletControlMSPOutletName=sPDUOutletControlMSPOutletName, sPDUOutletControlMSPOutletCommand=sPDUOutletControlMSPOutletCommand, sPDUOutletConfigMSP=sPDUOutletConfigMSP, sPDUOutletConfigMSPall=sPDUOutletConfigMSPall, sPDUOutletConfigMSPallTable=sPDUOutletConfigMSPallTable, sPDUOutletConfigMSPallEntry=sPDUOutletConfigMSPallEntry, sPDUOutletConfigMSPallIndex=sPDUOutletConfigMSPallIndex, sPDUOutletConfigMSPallName=sPDUOutletConfigMSPallName, sPDUOutletConfigMSPallOutletIndex=sPDUOutletConfigMSPallOutletIndex, sPDUOutletConfigMSPallOutletName=sPDUOutletConfigMSPallOutletName, sPDUOutletConfigMSPallOutletCtrlMode=sPDUOutletConfigMSPallOutletCtrlMode, sPDUOutletConfigMSPgs=sPDUOutletConfigMSPgs, sPDUOutletConfigMSPgsTable=sPDUOutletConfigMSPgsTable, sPDUOutletConfigMSPgsEntry=sPDUOutletConfigMSPgsEntry, sPDUOutletConfigMSPgsIndex=sPDUOutletConfigMSPgsIndex, sPDUOutletConfigMSPgsName=sPDUOutletConfigMSPgsName, sPDUOutletConfigMSPgsOutletIndex=sPDUOutletConfigMSPgsOutletIndex, sPDUOutletConfigMSPgsOutletName=sPDUOutletConfigMSPgsOutletName, sPDUOutletConfigMSPgsOutletCtrlMode=sPDUOutletConfigMSPgsOutletCtrlMode, sPDUOutletConfigMSPgsDeviceConfirm=sPDUOutletConfigMSPgsDeviceConfirm, sPDUOutletConfigMSPgsLowBattWarning=sPDUOutletConfigMSPgsLowBattWarning, sPDUOutletConfigMSPgsLowBattMult=sPDUOutletConfigMSPgsLowBattMult, sPDUOutletConfigMSPgsRestartDelay=sPDUOutletConfigMSPgsRestartDelay, sPDUOutletConfigMSPgsPowerOnDelay=sPDUOutletConfigMSPgsPowerOnDelay, sPDUOutletConfigMSPgsPowerOffDelay=sPDUOutletConfigMSPgsPowerOffDelay, sPDUOutletConfigMSPgsBattCapThresh=sPDUOutletConfigMSPgsBattCapThresh, sPDUOutletConfigMSPgsRebootDuration=sPDUOutletConfigMSPgsRebootDuration, sPDUOutletConfigMSPannun=sPDUOutletConfigMSPannun, sPDUOutletConfigMSPannunTable=sPDUOutletConfigMSPannunTable, sPDUOutletConfigMSPannunEntry=sPDUOutletConfigMSPannunEntry, sPDUOutletConfigMSPannunIndex=sPDUOutletConfigMSPannunIndex, sPDUOutletConfigMSPannunName=sPDUOutletConfigMSPannunName, sPDUOutletConfigMSPannunOutletIndex=sPDUOutletConfigMSPannunOutletIndex, sPDUOutletConfigMSPannunOutletName=sPDUOutletConfigMSPannunOutletName, sPDUOutletConfigMSPannunOutletCtrlMode=sPDUOutletConfigMSPannunOutletCtrlMode, sPDUOutletConfigMSPannunInitialState=sPDUOutletConfigMSPannunInitialState, sPDUOutletConfigMSPannunAlarmActionDly=sPDUOutletConfigMSPannunAlarmActionDly, sPDUOutletConfigMSPmups=sPDUOutletConfigMSPmups, sPDUOutletConfigMSPmupsTable=sPDUOutletConfigMSPmupsTable, sPDUOutletConfigMSPmupsEntry=sPDUOutletConfigMSPmupsEntry, sPDUOutletConfigMSPmupsIndex=sPDUOutletConfigMSPmupsIndex, sPDUOutletConfigMSPmupsName=sPDUOutletConfigMSPmupsName, sPDUOutletConfigMSPmupsOutletIndex=sPDUOutletConfigMSPmupsOutletIndex, sPDUOutletConfigMSPmupsOutletName=sPDUOutletConfigMSPmupsOutletName, sPDUOutletConfigMSPmupsZone1=sPDUOutletConfigMSPmupsZone1, sPDUOutletConfigMSPmupsZone2=sPDUOutletConfigMSPmupsZone2, sPDUOutletConfigMSPmupsZone3=sPDUOutletConfigMSPmupsZone3, sPDUOutletConfigMSPmupsZone4=sPDUOutletConfigMSPmupsZone4, sPDUOutletConfigMSPmupsP1LowHum=sPDUOutletConfigMSPmupsP1LowHum, sPDUOutletConfigMSPmupsP1HiHum=sPDUOutletConfigMSPmupsP1HiHum, sPDUOutletConfigMSPmupsP1LowTemp=sPDUOutletConfigMSPmupsP1LowTemp, sPDUOutletConfigMSPmupsP1HiTemp=sPDUOutletConfigMSPmupsP1HiTemp, sPDUOutletConfigMSPmupsP2LowHum=sPDUOutletConfigMSPmupsP2LowHum, sPDUOutletConfigMSPmupsP2HiHum=sPDUOutletConfigMSPmupsP2HiHum, sPDUOutletConfigMSPmupsP2LowTemp=sPDUOutletConfigMSPmupsP2LowTemp, sPDUOutletConfigMSPmupsP2HiTemp=sPDUOutletConfigMSPmupsP2HiTemp, sPDUOutletStatusMSP=sPDUOutletStatusMSP, sPDUOutletStatusMSPTable=sPDUOutletStatusMSPTable, sPDUOutletStatusMSPEntry=sPDUOutletStatusMSPEntry, sPDUOutletStatusMSPIndex=sPDUOutletStatusMSPIndex, sPDUOutletStatusMSPName=sPDUOutletStatusMSPName, sPDUOutletStatusMSPOutletIndex=sPDUOutletStatusMSPOutletIndex, sPDUOutletStatusMSPOutletName=sPDUOutletStatusMSPOutletName, sPDUOutletStatusMSPOutletState=sPDUOutletStatusMSPOutletState, sPDUOutletStatusMSPCommandPending=sPDUOutletStatusMSPCommandPending, sPDUOutletStatusMSPOutletCtrlMode=sPDUOutletStatusMSPOutletCtrlMode, dcDM3=dcDM3, dm3Ident=dm3Ident, dm3IdentSystem=dm3IdentSystem, dm3IdentSysDescriptionTableSize=dm3IdentSysDescriptionTableSize, dm3IdentSysDescriptionTable=dm3IdentSysDescriptionTable, dm3IdentSysDescriptionEntry=dm3IdentSysDescriptionEntry, dm3IdentSysDescriptionIndex=dm3IdentSysDescriptionIndex, dm3IdentSysDescriptionText=dm3IdentSysDescriptionText, dm3IdentSysModel=dm3IdentSysModel, dm3IdentSysCntrlRev=dm3IdentSysCntrlRev, dm3IdentSysFWVersion=dm3IdentSysFWVersion, dm3Config=dm3Config, dm3ConfigSystem=dm3ConfigSystem, dm3ConfigSysDescriptionTableSize=dm3ConfigSysDescriptionTableSize, dm3ConfigSysDescriptionTable=dm3ConfigSysDescriptionTable, dm3ConfigSysDescriptionEntry=dm3ConfigSysDescriptionEntry, dm3ConfigSysDescriptionIndex=dm3ConfigSysDescriptionIndex, dm3ConfigSysDescriptionText=dm3ConfigSysDescriptionText, dm3ConfigSysHighTempThresh=dm3ConfigSysHighTempThresh, dm3ConfigSysHighTempAlarm=dm3ConfigSysHighTempAlarm, dm3ConfigSysLowTempThresh=dm3ConfigSysLowTempThresh, dm3ConfigSysLowTempAlarm=dm3ConfigSysLowTempAlarm, dm3ConfigSysHardwareTempAlarm=dm3ConfigSysHardwareTempAlarm, dm3ConfigSysRemoteAccess=dm3ConfigSysRemoteAccess, dm3ConfigLVD=dm3ConfigLVD, dm3ConfigLVDTableSize=dm3ConfigLVDTableSize, dm3ConfigLVDTable=dm3ConfigLVDTable, dm3ConfigLVDEntry=dm3ConfigLVDEntry, dm3ConfigLVDIndex=dm3ConfigLVDIndex, dm3ConfigLVDName=dm3ConfigLVDName, dm3ConfigLVDEnable=dm3ConfigLVDEnable)
mibBuilder.exportSymbols('PowerNet-MIB', dm3ConfigLVDTripThresh=dm3ConfigLVDTripThresh, dm3ConfigLVDResetThresh=dm3ConfigLVDResetThresh, dm3ConfigLVDOpenAlarm=dm3ConfigLVDOpenAlarm, dm3ConfigLVDHWAlarm=dm3ConfigLVDHWAlarm, dm3ConfigBattery=dm3ConfigBattery, dm3ConfigBattFloatVolt=dm3ConfigBattFloatVolt, dm3ConfigBattMaxRecharge=dm3ConfigBattMaxRecharge, dm3ConfigBattDischargeThresh=dm3ConfigBattDischargeThresh, dm3ConfigBattDischargeAlarm=dm3ConfigBattDischargeAlarm, dm3ConfigBattHighVoltThresh=dm3ConfigBattHighVoltThresh, dm3ConfigBattHighVoltAlarm=dm3ConfigBattHighVoltAlarm, dm3ConfigBattLowVoltThresh=dm3ConfigBattLowVoltThresh, dm3ConfigBattLowVoltAlarm=dm3ConfigBattLowVoltAlarm, dm3ConfigBattHighTempThresh=dm3ConfigBattHighTempThresh, dm3ConfigBattHighTempAlarm=dm3ConfigBattHighTempAlarm, dm3ConfigBattLowTempThresh=dm3ConfigBattLowTempThresh, dm3ConfigBattLowTempAlarm=dm3ConfigBattLowTempAlarm, dm3ConfigBattAmpHour=dm3ConfigBattAmpHour, dm3ConfigCompMethod=dm3ConfigCompMethod, dm3ConfigCompTempCoeff=dm3ConfigCompTempCoeff, dm3ConfigHighKneeTemp=dm3ConfigHighKneeTemp, dm3ConfigLowKneeTemp=dm3ConfigLowKneeTemp, dm3ConfigBattHwCurrentAlarm=dm3ConfigBattHwCurrentAlarm, dm3ConfigBattHwTempAlarm=dm3ConfigBattHwTempAlarm, dm3ConfigPowerModules=dm3ConfigPowerModules, dm3ConfigRectifier=dm3ConfigRectifier, dm3ConfigRectThresh=dm3ConfigRectThresh, dm3ConfigRectHighVoltThresh=dm3ConfigRectHighVoltThresh, dm3ConfigRectLowVoltThresh=dm3ConfigRectLowVoltThresh, dm3ConfigRectFailSafe=dm3ConfigRectFailSafe, dm3ConfigRectFailComm=dm3ConfigRectFailComm, dm3ConfigRectAlarms=dm3ConfigRectAlarms, dm3ConfigRectHighVoltAlarm=dm3ConfigRectHighVoltAlarm, dm3ConfigRectLowVoltAlarm=dm3ConfigRectLowVoltAlarm, dm3ConfigRectConfigAlarm=dm3ConfigRectConfigAlarm, dm3ConfigRect1ofNAlarm=dm3ConfigRect1ofNAlarm, dm3ConfigRect2ofNAlarm=dm3ConfigRect2ofNAlarm, dm3ConfigRectDiagAlarm=dm3ConfigRectDiagAlarm, dm3ConfigRectImbalanceAlarm=dm3ConfigRectImbalanceAlarm, dm3ConfigRectCurrLimitAlarm=dm3ConfigRectCurrLimitAlarm, dm3ConfigRectStandbyAlarm=dm3ConfigRectStandbyAlarm, dm3ConfigRectFanFailAlarm=dm3ConfigRectFanFailAlarm, dm3ConfigRectFailAlarm=dm3ConfigRectFailAlarm, dm3ConfigRectHwVoltAlarm=dm3ConfigRectHwVoltAlarm, dm3ConfigConverter=dm3ConfigConverter, dm3ConfigConvThresh=dm3ConfigConvThresh, dm3ConfigConvHighVoltThresh=dm3ConfigConvHighVoltThresh, dm3ConfigConvLowVoltThresh=dm3ConfigConvLowVoltThresh, dm3ConfigConvFailSafe=dm3ConfigConvFailSafe, dm3ConfigConvSetPoint=dm3ConfigConvSetPoint, dm3ConfigConvFailMax=dm3ConfigConvFailMax, dm3ConfigConvFailMin=dm3ConfigConvFailMin, dm3ConfigConvFailComm=dm3ConfigConvFailComm, dm3ConfigConvAlarms=dm3ConfigConvAlarms, dm3ConfigConvHighVoltAlarm=dm3ConfigConvHighVoltAlarm, dm3ConfigConvLowVoltAlarm=dm3ConfigConvLowVoltAlarm, dm3ConfigConvConfigAlarm=dm3ConfigConvConfigAlarm, dm3ConfigConv1ofNAlarm=dm3ConfigConv1ofNAlarm, dm3ConfigConv2ofNAlarm=dm3ConfigConv2ofNAlarm, dm3ConfigConvDiagAlarm=dm3ConfigConvDiagAlarm, dm3ConfigConvImbalanceAlarm=dm3ConfigConvImbalanceAlarm, dm3ConfigConvCurrLimitAlarm=dm3ConfigConvCurrLimitAlarm, dm3ConfigConvStandbyAlarm=dm3ConfigConvStandbyAlarm, dm3ConfigConvFanFailAlarm=dm3ConfigConvFanFailAlarm, dm3ConfigConvFailAlarm=dm3ConfigConvFailAlarm, dm3ConfigConvHwVoltAlarm=dm3ConfigConvHwVoltAlarm, dm3ConfigRelays=dm3ConfigRelays, dm3ConfigOutputRelays=dm3ConfigOutputRelays, dm3ConfigOutRlyTableSize=dm3ConfigOutRlyTableSize, dm3ConfigOutRlyTable=dm3ConfigOutRlyTable, dm3ConfigOutRlyEntry=dm3ConfigOutRlyEntry, dm3ConfigOutRlyIndex=dm3ConfigOutRlyIndex, dm3ConfigOutRlyName=dm3ConfigOutRlyName, dm3ConfigOutRlyDelay=dm3ConfigOutRlyDelay, dm3ConfigOutRlyAlarm=dm3ConfigOutRlyAlarm, dm3ConfigInputRelays=dm3ConfigInputRelays, dm3ConfigInRlyTableSize=dm3ConfigInRlyTableSize, dm3ConfigInRlyTable=dm3ConfigInRlyTable, dm3ConfigInRlyEntry=dm3ConfigInRlyEntry, dm3ConfigInRlyIndex=dm3ConfigInRlyIndex, dm3ConfigInRlyName=dm3ConfigInRlyName, dm3ConfigInRlyDelay=dm3ConfigInRlyDelay, dm3ConfigInRlyAlarm=dm3ConfigInRlyAlarm, dm3ConfigDistribution=dm3ConfigDistribution, dm3ConfigBreakers=dm3ConfigBreakers, dm3ConfigBreakersTableSize=dm3ConfigBreakersTableSize, dm3ConfigBreakersTable=dm3ConfigBreakersTable, dm3ConfigBreakersEntry=dm3ConfigBreakersEntry, dm3ConfigBreakersIndex=dm3ConfigBreakersIndex, dm3ConfigBreakersName=dm3ConfigBreakersName, dm3ConfigBreakersAlarm=dm3ConfigBreakersAlarm, dm3ConfigFuses=dm3ConfigFuses, dm3ConfigFusesTableSize=dm3ConfigFusesTableSize, dm3ConfigFusesTable=dm3ConfigFusesTable, dm3ConfigFusesEntry=dm3ConfigFusesEntry, dm3ConfigFusesIndex=dm3ConfigFusesIndex, dm3ConfigFusesName=dm3ConfigFusesName, dm3ConfigFusesAlarm=dm3ConfigFusesAlarm, dm3Status=dm3Status, dm3StatusSystem=dm3StatusSystem, dm3StatusSystemTemp=dm3StatusSystemTemp, dm3StatusSystemStart=dm3StatusSystemStart, dm3StatusSysRemoteAccess=dm3StatusSysRemoteAccess, dm3StatusSysSecurityLevel=dm3StatusSysSecurityLevel, dm3StatusSysTempSanity=dm3StatusSysTempSanity, dm3StatusSysAlarmState=dm3StatusSysAlarmState, dm3StatusSysTempUnits=dm3StatusSysTempUnits, dm3StatusAlarms=dm3StatusAlarms, dm3StatusAlarmsTableSize=dm3StatusAlarmsTableSize, dm3StatusAlarmsTable=dm3StatusAlarmsTable, dm3StatusAlarmsEntry=dm3StatusAlarmsEntry, dm3StatusAlarmsIndex=dm3StatusAlarmsIndex, dm3StatusAlarmsText=dm3StatusAlarmsText, dm3StatusBattery=dm3StatusBattery, dm3StatusBattCurrent=dm3StatusBattCurrent, dm3StatusBattTemp=dm3StatusBattTemp, dm3StatusBattCurrentSanity=dm3StatusBattCurrentSanity, dm3StatusBattTempSanity=dm3StatusBattTempSanity, dm3StatusOEM=dm3StatusOEM, dm3StatusOEMrectOffset=dm3StatusOEMrectOffset, dm3StatusOEMrectGain=dm3StatusOEMrectGain, dm3StatusOEMconvOffset=dm3StatusOEMconvOffset, dm3StatusOEMconvGain=dm3StatusOEMconvGain, dm3StatusOEMshuntOffset=dm3StatusOEMshuntOffset, dm3StatusOEMshuntGain=dm3StatusOEMshuntGain, dm3StatusLVD=dm3StatusLVD, dm3StatusLVDTableSize=dm3StatusLVDTableSize)
mibBuilder.exportSymbols('PowerNet-MIB', dm3StatusLVDTable=dm3StatusLVDTable, dm3StatusLVDEntry=dm3StatusLVDEntry, dm3StatusLVDIndex=dm3StatusLVDIndex, dm3StatusLVDName=dm3StatusLVDName, dm3StatusLVDState=dm3StatusLVDState, dm3StatusLVDHwFault=dm3StatusLVDHwFault, dm3StatusPowerModules=dm3StatusPowerModules, dm3StatusRectifier=dm3StatusRectifier, dm3StatusRectTableSize=dm3StatusRectTableSize, dm3StatusRectTable=dm3StatusRectTable, dm3StatusRectEntry=dm3StatusRectEntry, dm3StatusRectIndex=dm3StatusRectIndex, dm3StatusRectID=dm3StatusRectID, dm3StatusRectDesc=dm3StatusRectDesc, dm3StatusRectCurrent=dm3StatusRectCurrent, dm3StatusRectCurrentLimit=dm3StatusRectCurrentLimit, dm3StatusRectStandby=dm3StatusRectStandby, dm3StatusRectFanFail=dm3StatusRectFanFail, dm3StatusRectFail=dm3StatusRectFail, dm3StatusRectDevType=dm3StatusRectDevType, dm3StatusRectPhyAddr=dm3StatusRectPhyAddr, dm3StatusRectCfg=dm3StatusRectCfg, dm3StatusRectPcbRev=dm3StatusRectPcbRev, dm3StatusRectFwVer=dm3StatusRectFwVer, dm3StatusRectPresent=dm3StatusRectPresent, dm3StatusRectDiagPass=dm3StatusRectDiagPass, dm3StatusRectState=dm3StatusRectState, dm3StatusSysRectVoltSanity=dm3StatusSysRectVoltSanity, dm3StatusSysRectAvailable=dm3StatusSysRectAvailable, dm3StatusSysRectType=dm3StatusSysRectType, dm3StatusSysRectVoltage=dm3StatusSysRectVoltage, dm3StatusSysRectCurrent=dm3StatusSysRectCurrent, dm3StatusConverter=dm3StatusConverter, dm3StatusConvTableSize=dm3StatusConvTableSize, dm3StatusConvTable=dm3StatusConvTable, dm3StatusConvEntry=dm3StatusConvEntry, dm3StatusConvIndex=dm3StatusConvIndex, dm3StatusConvID=dm3StatusConvID, dm3StatusConvDesc=dm3StatusConvDesc, dm3StatusConvCurrent=dm3StatusConvCurrent, dm3StatusConvCurrentLimit=dm3StatusConvCurrentLimit, dm3StatusConvStandby=dm3StatusConvStandby, dm3StatusConvFanFail=dm3StatusConvFanFail, dm3StatusConvFail=dm3StatusConvFail, dm3StatusConvDevType=dm3StatusConvDevType, dm3StatusConvPhyAddr=dm3StatusConvPhyAddr, dm3StatusConvCfg=dm3StatusConvCfg, dm3StatusConvPcbRev=dm3StatusConvPcbRev, dm3StatusConvFwVer=dm3StatusConvFwVer, dm3StatusConvPresent=dm3StatusConvPresent, dm3StatusConvDiagPass=dm3StatusConvDiagPass, dm3StatusConvState=dm3StatusConvState, dm3StatusSysConvVoltSanity=dm3StatusSysConvVoltSanity, dm3StatusSysConvAvailable=dm3StatusSysConvAvailable, dm3StatusSysConvType=dm3StatusSysConvType, dm3StatusSysConvVoltage=dm3StatusSysConvVoltage, dm3StatusSysConvCurrent=dm3StatusSysConvCurrent, dm3StatusRelays=dm3StatusRelays, dm3StatusOutputRelays=dm3StatusOutputRelays, dm3StatusOutRlyTableSize=dm3StatusOutRlyTableSize, dm3StatusOutRlyTable=dm3StatusOutRlyTable, dm3StatusOutRlyEntry=dm3StatusOutRlyEntry, dm3StatusOutRlyIndex=dm3StatusOutRlyIndex, dm3StatusOutRlyName=dm3StatusOutRlyName, dm3StatusOutRlyStatus=dm3StatusOutRlyStatus, dm3StatusInputRelays=dm3StatusInputRelays, dm3StatusInRlyTableSize=dm3StatusInRlyTableSize, dm3StatusInRlyTable=dm3StatusInRlyTable, dm3StatusInRlyEntry=dm3StatusInRlyEntry, dm3StatusInRlyIndex=dm3StatusInRlyIndex, dm3StatusInRlyName=dm3StatusInRlyName, dm3StatusInRlyStatus=dm3StatusInRlyStatus, dm3StatusDistribution=dm3StatusDistribution, dm3StatusBreakers=dm3StatusBreakers, dm3StatusBreakersTableSize=dm3StatusBreakersTableSize, dm3StatusBreakersTable=dm3StatusBreakersTable, dm3StatusBreakersEntry=dm3StatusBreakersEntry, dm3StatusBreakersIndex=dm3StatusBreakersIndex, dm3StatusBreakersName=dm3StatusBreakersName, dm3StatusBreakersStatus=dm3StatusBreakersStatus, dm3StatusFuses=dm3StatusFuses, dm3StatusFusesTableSize=dm3StatusFusesTableSize, dm3StatusFusesTable=dm3StatusFusesTable, dm3StatusFusesEntry=dm3StatusFusesEntry, dm3StatusFusesIndex=dm3StatusFusesIndex, dm3StatusFusesName=dm3StatusFusesName, dm3StatusFusesStatus=dm3StatusFusesStatus, automaticTransferSwitch=automaticTransferSwitch, atsIdent=atsIdent, atsIdentHardwareRev=atsIdentHardwareRev, atsIdentFirmwareRev=atsIdentFirmwareRev, atsIdentFirmwareDate=atsIdentFirmwareDate, atsIdentDateOfManufacture=atsIdentDateOfManufacture, atsIdentModelNumber=atsIdentModelNumber, atsIdentSerialNumber=atsIdentSerialNumber, atsIdentNominalLineVoltage=atsIdentNominalLineVoltage, atsIdentNominalLineFrequency=atsIdentNominalLineFrequency, atsCalibration=atsCalibration, atsCalibrationInput=atsCalibrationInput, atsCalibrationNumInputs=atsCalibrationNumInputs, atsCalibrationNumInputPhases=atsCalibrationNumInputPhases, atsCalibrationInputTable=atsCalibrationInputTable, atsCalibrationInputPhaseEntry=atsCalibrationInputPhaseEntry, atsCalibrationInputTableIndex=atsCalibrationInputTableIndex, atsCalibrationInputPhaseTableIndex=atsCalibrationInputPhaseTableIndex, atsLineVoltageCalibrationFactor=atsLineVoltageCalibrationFactor, atsCalibrationPowerSupply=atsCalibrationPowerSupply, atsCalibrationPowerSupplyVoltages=atsCalibrationPowerSupplyVoltages, atsCalibrationPowerSupplyVoltageTable=atsCalibrationPowerSupplyVoltageTable, atsCalibrationPowerSupplyVoltageEntry=atsCalibrationPowerSupplyVoltageEntry, atsCalibrationPowerSupplyVoltageTableIndex=atsCalibrationPowerSupplyVoltageTableIndex, atsCalibrationPowerSupplyVoltage=atsCalibrationPowerSupplyVoltage, atsPowerSupplyVoltageCalibrationFactor=atsPowerSupplyVoltageCalibrationFactor, atsCalibrationOutput=atsCalibrationOutput, atsCalibrationNumOutputs=atsCalibrationNumOutputs, atsCalibrationNumOutputPhases=atsCalibrationNumOutputPhases, atsCalibrationOutputTable=atsCalibrationOutputTable, atsCalibrationOutputEntry=atsCalibrationOutputEntry, atsCalibrationOutputTableIndex=atsCalibrationOutputTableIndex, atsCalibrationOutputPhasesTableIndex=atsCalibrationOutputPhasesTableIndex, atsOutputCurrentCalibrationFactor=atsOutputCurrentCalibrationFactor, atsControl=atsControl, atsControlResetATS=atsControlResetATS, atsControlClearAllAlarms=atsControlClearAllAlarms, atsConfig=atsConfig, atsConfigProductName=atsConfigProductName, atsConfigPreferredSource=atsConfigPreferredSource)
mibBuilder.exportSymbols('PowerNet-MIB', atsConfigFrontPanelLockout=atsConfigFrontPanelLockout, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, atsConfigCurrentLimit=atsConfigCurrentLimit, atsConfigResetValues=atsConfigResetValues, atsStatus=atsStatus, atsStatusDeviceStatus=atsStatusDeviceStatus, atsStatusCommStatus=atsStatusCommStatus, atsStatusSelectedSource=atsStatusSelectedSource, atsStatusRedundancyState=atsStatusRedundancyState, atsStatusOverCurrentState=atsStatusOverCurrentState, atsStatus5VPowerSupply=atsStatus5VPowerSupply, atsStatus24VPowerSupply=atsStatus24VPowerSupply, atsStatusResetValues=atsStatusResetValues, atsStatusResetMaxMinValues=atsStatusResetMaxMinValues, atsStatusInput=atsStatusInput, atsNumInputs=atsNumInputs, atsInputTable=atsInputTable, atsInputEntry=atsInputEntry, atsInputTableIndex=atsInputTableIndex, atsNumInputPhases=atsNumInputPhases, atsInputVoltageOrientation=atsInputVoltageOrientation, atsInputFrequency=atsInputFrequency, atsInputType=atsInputType, atsInputName=atsInputName, atsInputPhaseTable=atsInputPhaseTable, atsInputPhaseEntry=atsInputPhaseEntry, atsInputPhaseTableIndex=atsInputPhaseTableIndex, atsInputPhaseIndex=atsInputPhaseIndex, atsInputVoltage=atsInputVoltage, atsInputMaxVoltage=atsInputMaxVoltage, atsInputMinVoltage=atsInputMinVoltage, atsInputCurrent=atsInputCurrent, atsInputMaxCurrent=atsInputMaxCurrent, atsInputMinCurrent=atsInputMinCurrent, atsInputPower=atsInputPower, atsInputMaxPower=atsInputMaxPower, atsInputMinPower=atsInputMinPower, atsStatusOutput=atsStatusOutput, atsNumOutputs=atsNumOutputs, atsOutputTable=atsOutputTable, atsOutputEntry=atsOutputEntry, atsOutputTableIndex=atsOutputTableIndex, atsNumOutputPhases=atsNumOutputPhases, atsOutputVoltageOrientation=atsOutputVoltageOrientation, atsOutputFrequency=atsOutputFrequency, atsOutputPhaseTable=atsOutputPhaseTable, atsOutputPhaseEntry=atsOutputPhaseEntry, atsOutputPhaseTableIndex=atsOutputPhaseTableIndex, atsOutputPhaseIndex=atsOutputPhaseIndex, atsOutputVoltage=atsOutputVoltage, atsOutputCurrent=atsOutputCurrent, atsOutputMaxCurrent=atsOutputMaxCurrent, atsOutputMinCurrent=atsOutputMinCurrent, atsOutputLoad=atsOutputLoad, atsOutputMaxLoad=atsOutputMaxLoad, atsOutputMinLoad=atsOutputMinLoad, atsOutputPercentLoad=atsOutputPercentLoad, atsOutputMaxPercentLoad=atsOutputMaxPercentLoad, atsOutputMinPercentLoad=atsOutputMinPercentLoad, atsOutputPower=atsOutputPower, atsOutputMaxPower=atsOutputMaxPower, atsOutputMinPower=atsOutputMinPower, atsOutputPercentPower=atsOutputPercentPower, atsOutputMaxPercentPower=atsOutputMaxPercentPower, atsOutputMinPercentPower=atsOutputMinPercentPower, dc2=dc2, dcmim2Ident=dcmim2Ident, dcmim2IdentSystem=dcmim2IdentSystem, dcmim2IdentSysFWVersion=dcmim2IdentSysFWVersion, dcmim2Control=dcmim2Control, dcmim2ControlSystem=dcmim2ControlSystem, dcmim2ControlRunFunctBatteryTest=dcmim2ControlRunFunctBatteryTest, dcmim2ControlRunCapacityBatteryTest=dcmim2ControlRunCapacityBatteryTest, dcmim2Config=dcmim2Config, dcmim2ConfigSystem=dcmim2ConfigSystem, dcmim2ConfigSysHighTempTrip=dcmim2ConfigSysHighTempTrip, dcmim2ConfigSysHighTempReset=dcmim2ConfigSysHighTempReset, dcmim2ConfigSysLowTempTrip=dcmim2ConfigSysLowTempTrip, dcmim2ConfigSysLowTempReset=dcmim2ConfigSysLowTempReset, dcmim2ConfigBattery=dcmim2ConfigBattery, dcmim2ConfigBattFloatVolt=dcmim2ConfigBattFloatVolt, dcmim2ConfigBattMaxRecharge=dcmim2ConfigBattMaxRecharge, dcmim2ConfigBattMfgCapacity=dcmim2ConfigBattMfgCapacity, dcmim2ConfigBattType=dcmim2ConfigBattType, dcmim2ConfigBattFunctTestDuration=dcmim2ConfigBattFunctTestDuration, dcmim2ConfigBattFunctTestThresh=dcmim2ConfigBattFunctTestThresh, dcmim2ConfigBattCapacityTestPercent=dcmim2ConfigBattCapacityTestPercent, dcmim2ConfigBattCapacityTestEndThresh=dcmim2ConfigBattCapacityTestEndThresh, dcmim2ConfigBattCapacityTestCurrent=dcmim2ConfigBattCapacityTestCurrent, dcmim2ConfigLVD=dcmim2ConfigLVD, dcmim2ConfigLVDTableSize=dcmim2ConfigLVDTableSize, dcmim2ConfigLVDTable=dcmim2ConfigLVDTable, dcmim2ConfigLVDEntry=dcmim2ConfigLVDEntry, dcmim2ConfigLVDIndex=dcmim2ConfigLVDIndex, dcmim2ConfigLVDTrip=dcmim2ConfigLVDTrip, dcmim2ConfigLVDReset=dcmim2ConfigLVDReset, dcmim2ConfigLVDState=dcmim2ConfigLVDState, dcmim2Status=dcmim2Status, dcmim2StatusSystem=dcmim2StatusSystem, dcmim2StatusSysRectCurrent=dcmim2StatusSysRectCurrent, dcmim2StatusSysLoadCurrent=dcmim2StatusSysLoadCurrent, dcmim2StatusSysBusVoltage=dcmim2StatusSysBusVoltage, dcmim2StatusSysAmbientTemp=dcmim2StatusSysAmbientTemp, dcmim2StatusSysUpTime=dcmim2StatusSysUpTime, dcmim2StatusSysTempUnits=dcmim2StatusSysTempUnits, dcmim2StatusRectifier=dcmim2StatusRectifier, dcmim2StatusRectTableSize=dcmim2StatusRectTableSize, dcmim2StatusRectTable=dcmim2StatusRectTable, dcmim2StatusRectEntry=dcmim2StatusRectEntry, dcmim2StatusRectIndex=dcmim2StatusRectIndex, dcmim2StatusRectDevType=dcmim2StatusRectDevType, dcmim2StatusRectID=dcmim2StatusRectID, dcmim2StatusRectPhyAddr=dcmim2StatusRectPhyAddr, dcmim2StatusRectFail=dcmim2StatusRectFail, dcmim2StatusRectCurrent=dcmim2StatusRectCurrent, dcmim2StatusBattery=dcmim2StatusBattery, dcmim2StatusBattFloatVolt=dcmim2StatusBattFloatVolt, dcmim2StatusBattCurrent=dcmim2StatusBattCurrent, dcmim2StatusBattTemp=dcmim2StatusBattTemp, dcmim2StatusBattMfgCapacity=dcmim2StatusBattMfgCapacity, dcmim2StatusBattTestCapacity=dcmim2StatusBattTestCapacity, dcmim2StatusBattFunctTestResult=dcmim2StatusBattFunctTestResult, dcmim2StatusBattCapacityTestResult=dcmim2StatusBattCapacityTestResult, dcmim2StatusLVD=dcmim2StatusLVD, dcmim2StatusLVDTableSize=dcmim2StatusLVDTableSize, dcmim2StatusLVDTable=dcmim2StatusLVDTable)
mibBuilder.exportSymbols('PowerNet-MIB', dcmim2StatusLVDEntry=dcmim2StatusLVDEntry, dcmim2StatusLVDIndex=dcmim2StatusLVDIndex, dcmim2StatusLVDState=dcmim2StatusLVDState, dcmim2StatusAlarms=dcmim2StatusAlarms, dcmim2StatusAlarmsTableSize=dcmim2StatusAlarmsTableSize, dcmim2StatusAlarmsTable=dcmim2StatusAlarmsTable, dcmim2StatusAlarmsEntry=dcmim2StatusAlarmsEntry, dcmim2StatusAlarmsIndex=dcmim2StatusAlarmsIndex, dcmim2StatusAlarmsText=dcmim2StatusAlarmsText, environmentalMonitor=environmentalMonitor, external=external, emIdent=emIdent, emIdentFirmwareRevision=emIdentFirmwareRevision, emConfig=emConfig, emConfigProbesNumProbes=emConfigProbesNumProbes, emConfigProbesTable=emConfigProbesTable, emConfigProbesEntry=emConfigProbesEntry, emConfigProbeNumber=emConfigProbeNumber, emConfigProbeName=emConfigProbeName, emConfigProbeHighTempThreshold=emConfigProbeHighTempThreshold, emConfigProbeLowTempThreshold=emConfigProbeLowTempThreshold, emConfigProbeTempUnits=emConfigProbeTempUnits, emConfigProbeHighHumidThreshold=emConfigProbeHighHumidThreshold, emConfigProbeLowHumidThreshold=emConfigProbeLowHumidThreshold, emConfigProbeHighTempEnable=emConfigProbeHighTempEnable, emConfigProbeLowTempEnable=emConfigProbeLowTempEnable, emConfigProbeHighHumidEnable=emConfigProbeHighHumidEnable, emConfigProbeLowHumidEnable=emConfigProbeLowHumidEnable, emConfigProbeMaxTempThreshold=emConfigProbeMaxTempThreshold, emConfigProbeMinTempThreshold=emConfigProbeMinTempThreshold, emConfigProbeMaxHumidThreshold=emConfigProbeMaxHumidThreshold, emConfigProbeMinHumidThreshold=emConfigProbeMinHumidThreshold, emConfigProbeMaxTempEnable=emConfigProbeMaxTempEnable, emConfigProbeMinTempEnable=emConfigProbeMinTempEnable, emConfigProbeMaxHumidEnable=emConfigProbeMaxHumidEnable, emConfigProbeMinHumidEnable=emConfigProbeMinHumidEnable, emConfigProbeTempHysteresis=emConfigProbeTempHysteresis, emConfigProbeHumidHysteresis=emConfigProbeHumidHysteresis, emConfigProbeLocation=emConfigProbeLocation, emConfigContactsNumContacts=emConfigContactsNumContacts, emConfigContactsTable=emConfigContactsTable, emConfigContactsEntry=emConfigContactsEntry, emConfigContactNumber=emConfigContactNumber, emConfigContactName=emConfigContactName, emConfigContactEnable=emConfigContactEnable, emConfigContactSeverity=emConfigContactSeverity, emConfigContactNormalState=emConfigContactNormalState, emConfigContactLocation=emConfigContactLocation, emStatus=emStatus, emStatusCommStatus=emStatusCommStatus, emStatusProbesNumProbes=emStatusProbesNumProbes, emStatusProbesTable=emStatusProbesTable, emStatusProbesEntry=emStatusProbesEntry, emStatusProbeNumber=emStatusProbeNumber, emStatusProbeName=emStatusProbeName, emStatusProbeStatus=emStatusProbeStatus, emStatusProbeCurrentTemp=emStatusProbeCurrentTemp, emStatusProbeTempUnits=emStatusProbeTempUnits, emStatusProbeCurrentHumid=emStatusProbeCurrentHumid, emStatusProbeHighTempViolation=emStatusProbeHighTempViolation, emStatusProbeLowTempViolation=emStatusProbeLowTempViolation, emStatusProbeHighHumidViolation=emStatusProbeHighHumidViolation, emStatusProbeLowHumidViolation=emStatusProbeLowHumidViolation, emStatusProbeMaxTempViolation=emStatusProbeMaxTempViolation, emStatusProbeMinTempViolation=emStatusProbeMinTempViolation, emStatusProbeMaxHumidViolation=emStatusProbeMaxHumidViolation, emStatusProbeMinHumidViolation=emStatusProbeMinHumidViolation, emStatusContactsNumContacts=emStatusContactsNumContacts, emStatusContactsTable=emStatusContactsTable, emStatusContactsEntry=emStatusContactsEntry, emStatusContactNumber=emStatusContactNumber, emStatusContactName=emStatusContactName, emStatusContactStatus=emStatusContactStatus, integrated=integrated, iemIdent=iemIdent, iemIdentHardwareRevision=iemIdentHardwareRevision, iemConfig=iemConfig, iemConfigProbesNumProbes=iemConfigProbesNumProbes, iemConfigProbesTable=iemConfigProbesTable, iemConfigProbesEntry=iemConfigProbesEntry, iemConfigProbeNumber=iemConfigProbeNumber, iemConfigProbeName=iemConfigProbeName, iemConfigProbeHighTempThreshold=iemConfigProbeHighTempThreshold, iemConfigProbeLowTempThreshold=iemConfigProbeLowTempThreshold, iemConfigProbeTempUnits=iemConfigProbeTempUnits, iemConfigProbeHighHumidThreshold=iemConfigProbeHighHumidThreshold, iemConfigProbeLowHumidThreshold=iemConfigProbeLowHumidThreshold, iemConfigProbeHighTempEnable=iemConfigProbeHighTempEnable, iemConfigProbeLowTempEnable=iemConfigProbeLowTempEnable, iemConfigProbeHighHumidEnable=iemConfigProbeHighHumidEnable, iemConfigProbeLowHumidEnable=iemConfigProbeLowHumidEnable, iemConfigProbeMaxTempThreshold=iemConfigProbeMaxTempThreshold, iemConfigProbeMinTempThreshold=iemConfigProbeMinTempThreshold, iemConfigProbeMaxHumidThreshold=iemConfigProbeMaxHumidThreshold, iemConfigProbeMinHumidThreshold=iemConfigProbeMinHumidThreshold, iemConfigProbeMaxTempEnable=iemConfigProbeMaxTempEnable, iemConfigProbeMinTempEnable=iemConfigProbeMinTempEnable, iemConfigProbeMaxHumidEnable=iemConfigProbeMaxHumidEnable, iemConfigProbeMinHumidEnable=iemConfigProbeMinHumidEnable, iemConfigProbeTempHysteresis=iemConfigProbeTempHysteresis, iemConfigProbeHumidHysteresis=iemConfigProbeHumidHysteresis, iemConfigProbeLocation=iemConfigProbeLocation, iemConfigContactsNumContacts=iemConfigContactsNumContacts, iemConfigContactsTable=iemConfigContactsTable, iemConfigContactsEntry=iemConfigContactsEntry, iemConfigContactNumber=iemConfigContactNumber, iemConfigContactName=iemConfigContactName, iemConfigContactEnable=iemConfigContactEnable, iemConfigContactSeverity=iemConfigContactSeverity, iemConfigContactNormalState=iemConfigContactNormalState, iemConfigContactLocation=iemConfigContactLocation, iemStatus=iemStatus, iemStatusProbesNumProbes=iemStatusProbesNumProbes, iemStatusProbesTable=iemStatusProbesTable, iemStatusProbesEntry=iemStatusProbesEntry, iemStatusProbeNumber=iemStatusProbeNumber, iemStatusProbeName=iemStatusProbeName, iemStatusProbeStatus=iemStatusProbeStatus, iemStatusProbeCurrentTemp=iemStatusProbeCurrentTemp, iemStatusProbeTempUnits=iemStatusProbeTempUnits, iemStatusProbeCurrentHumid=iemStatusProbeCurrentHumid, iemStatusProbeHighTempViolation=iemStatusProbeHighTempViolation, iemStatusProbeLowTempViolation=iemStatusProbeLowTempViolation, iemStatusProbeHighHumidViolation=iemStatusProbeHighHumidViolation, iemStatusProbeLowHumidViolation=iemStatusProbeLowHumidViolation, iemStatusProbeMaxTempViolation=iemStatusProbeMaxTempViolation, iemStatusProbeMinTempViolation=iemStatusProbeMinTempViolation)
mibBuilder.exportSymbols('PowerNet-MIB', iemStatusProbeMaxHumidViolation=iemStatusProbeMaxHumidViolation, iemStatusProbeMinHumidViolation=iemStatusProbeMinHumidViolation, iemStatusProbeLocation=iemStatusProbeLocation, iemStatusContactsNumContacts=iemStatusContactsNumContacts, iemStatusContactsTable=iemStatusContactsTable, iemStatusContactsEntry=iemStatusContactsEntry, iemStatusContactNumber=iemStatusContactNumber, iemStatusContactName=iemStatusContactName, iemStatusContactStatus=iemStatusContactStatus, iemStatusRelaysNumRelays=iemStatusRelaysNumRelays, iemStatusRelaysTable=iemStatusRelaysTable, iemStatusRelaysEntry=iemStatusRelaysEntry, iemStatusRelayNumber=iemStatusRelayNumber, iemStatusRelayName=iemStatusRelayName, iemStatusRelayStatus=iemStatusRelayStatus, envMgtSystem=envMgtSystem, emsIdent=emsIdent, emsIdentEMSName=emsIdentEMSName, emsIdentProductNumber=emsIdentProductNumber, emsIdentFirmwareRev=emsIdentFirmwareRev, emsIdentHardwareRev=emsIdentHardwareRev, emsIdentDateOfManufacture=emsIdentDateOfManufacture, emsIdentSerialNumber=emsIdentSerialNumber, emsOutputRelayControl=emsOutputRelayControl, emsOutputRelayControlTable=emsOutputRelayControlTable, emsOutputRelayControlEntry=emsOutputRelayControlEntry, emsOutputRelayControlOutputRelayIndex=emsOutputRelayControlOutputRelayIndex, emsOutputRelayControlOutputRelayName=emsOutputRelayControlOutputRelayName, emsOutputRelayControlOutputRelayCommand=emsOutputRelayControlOutputRelayCommand, emsOutletControl=emsOutletControl, emsOutletControlTable=emsOutletControlTable, emsOutletControlEntry=emsOutletControlEntry, emsOutletControlOutletIndex=emsOutletControlOutletIndex, emsOutletControlOutletName=emsOutletControlOutletName, emsOutletControlOutletCommand=emsOutletControlOutletCommand, emsSensorControl=emsSensorControl, emsSensorControlTable=emsSensorControlTable, emsSensorControlEntry=emsSensorControlEntry, emsSensorControlSensorIndex=emsSensorControlSensorIndex, emsSensorControlSensorSystemName=emsSensorControlSensorSystemName, emsSensorControlSensorUserName=emsSensorControlSensorUserName, emsSensorControlSensorCommand=emsSensorControlSensorCommand, emsAlarmDeviceControl=emsAlarmDeviceControl, emsAlarmDeviceControlTable=emsAlarmDeviceControlTable, emsAlarmDeviceControlEntry=emsAlarmDeviceControlEntry, emsAlarmDeviceControlDeviceIndex=emsAlarmDeviceControlDeviceIndex, emsAlarmDeviceControlDeviceName=emsAlarmDeviceControlDeviceName, emsAlarmDeviceControlDeviceCommand=emsAlarmDeviceControlDeviceCommand, emsConfig=emsConfig, emsConfigName=emsConfigName, emsConfigCheckLogLight=emsConfigCheckLogLight, emsProbeConfig=emsProbeConfig, emsProbeConfigTable=emsProbeConfigTable, emsProbeConfigEntry=emsProbeConfigEntry, emsProbeConfigProbeIndex=emsProbeConfigProbeIndex, emsProbeConfigProbeName=emsProbeConfigProbeName, emsProbeConfigProbeHighTempThresh=emsProbeConfigProbeHighTempThresh, emsProbeConfigProbeLowTempThresh=emsProbeConfigProbeLowTempThresh, emsProbeConfigProbeHighHumidityThresh=emsProbeConfigProbeHighHumidityThresh, emsProbeConfigProbeLowHumidityThresh=emsProbeConfigProbeLowHumidityThresh, emsProbeConfigProbeMaxTempThresh=emsProbeConfigProbeMaxTempThresh, emsProbeConfigProbeMinTempThresh=emsProbeConfigProbeMinTempThresh, emsProbeConfigProbeDeltaTemp=emsProbeConfigProbeDeltaTemp, emsProbeConfigProbeMaxHumidityThresh=emsProbeConfigProbeMaxHumidityThresh, emsProbeConfigProbeMinHumidityThresh=emsProbeConfigProbeMinHumidityThresh, emsProbeConfigProbeDeltaHumidity=emsProbeConfigProbeDeltaHumidity, emsProbeConfigProbeSTIncTempVariance=emsProbeConfigProbeSTIncTempVariance, emsProbeConfigProbeSTIncTempTime=emsProbeConfigProbeSTIncTempTime, emsProbeConfigProbeSTDecTempVariance=emsProbeConfigProbeSTDecTempVariance, emsProbeConfigProbeSTDecTempTime=emsProbeConfigProbeSTDecTempTime, emsProbeConfigProbeLTIncTempVariance=emsProbeConfigProbeLTIncTempVariance, emsProbeConfigProbeLTIncTempTime=emsProbeConfigProbeLTIncTempTime, emsProbeConfigProbeLTDecTempVariance=emsProbeConfigProbeLTDecTempVariance, emsProbeConfigProbeLTDecTempTime=emsProbeConfigProbeLTDecTempTime, emsInputContactConfig=emsInputContactConfig, emsInputContactConfigTable=emsInputContactConfigTable, emsInputContactConfigEntry=emsInputContactConfigEntry, emsInputContactConfigInputContactIndex=emsInputContactConfigInputContactIndex, emsInputContactConfigInputContactName=emsInputContactConfigInputContactName, emsInputContactConfigInputContactNormalState=emsInputContactConfigInputContactNormalState, emsOutputRelayConfig=emsOutputRelayConfig, emsOutputRelayConfigTable=emsOutputRelayConfigTable, emsOutputRelayConfigEntry=emsOutputRelayConfigEntry, emsOutputRelayConfigOutputRelayIndex=emsOutputRelayConfigOutputRelayIndex, emsOutputRelayConfigOutputRelayName=emsOutputRelayConfigOutputRelayName, emsOutputRelayConfigOutputRelayNormalState=emsOutputRelayConfigOutputRelayNormalState, emsOutletConfig=emsOutletConfig, emsOutletConfigTable=emsOutletConfigTable, emsOutletConfigEntry=emsOutletConfigEntry, emsOutletConfigOutletIndex=emsOutletConfigOutletIndex, emsOutletConfigOutletName=emsOutletConfigOutletName, emsOutletConfigOutletNormalState=emsOutletConfigOutletNormalState, emsSensorConfig=emsSensorConfig, emsSensorConfigTable=emsSensorConfigTable, emsSensorConfigEntry=emsSensorConfigEntry, emsSensorConfigSensorIndex=emsSensorConfigSensorIndex, emsSensorConfigSensorSystemName=emsSensorConfigSensorSystemName, emsSensorConfigSensorUserName=emsSensorConfigSensorUserName, emsSensorConfigSensorNormalState=emsSensorConfigSensorNormalState, emsSensorConfigSensorAlarmDelay=emsSensorConfigSensorAlarmDelay, emsStatus=emsStatus, emsStatusEMSName=emsStatusEMSName, emsStatusCommStatus=emsStatusCommStatus, emsStatusProbeCount=emsStatusProbeCount, emsStatusInputContactCount=emsStatusInputContactCount, emsStatusOutputRelayCount=emsStatusOutputRelayCount, emsStatusOutletCount=emsStatusOutletCount, emsStatusSensorCount=emsStatusSensorCount, emsStatusAlinkAruDeviceCount=emsStatusAlinkAruDeviceCount, emsStatusAlinkProbeDeviceCount=emsStatusAlinkProbeDeviceCount, emsStatusAlarmDeviceCount=emsStatusAlarmDeviceCount, emsStatusSysTempUnits=emsStatusSysTempUnits, emsStatusCheckLogLight=emsStatusCheckLogLight, emsStatusHardwareStatus=emsStatusHardwareStatus, emsProbeStatus=emsProbeStatus, emsProbeStatusTable=emsProbeStatusTable, emsProbeStatusEntry=emsProbeStatusEntry, emsProbeStatusProbeIndex=emsProbeStatusProbeIndex, emsProbeStatusProbeName=emsProbeStatusProbeName, emsProbeStatusProbeTemperature=emsProbeStatusProbeTemperature, emsProbeStatusProbeHighTempThresh=emsProbeStatusProbeHighTempThresh, emsProbeStatusProbeLowTempThresh=emsProbeStatusProbeLowTempThresh, emsProbeStatusProbeHumidity=emsProbeStatusProbeHumidity, emsProbeStatusProbeHighHumidityThresh=emsProbeStatusProbeHighHumidityThresh, emsProbeStatusProbeLowHumidityThresh=emsProbeStatusProbeLowHumidityThresh, emsProbeStatusProbeSerialNumber=emsProbeStatusProbeSerialNumber, emsProbeStatusProbeCommStatus=emsProbeStatusProbeCommStatus)
mibBuilder.exportSymbols('PowerNet-MIB', emsProbeStatusProbeAlarmStatus=emsProbeStatusProbeAlarmStatus, emsProbeStatusProbeMaxTempThresh=emsProbeStatusProbeMaxTempThresh, emsProbeStatusProbeMinTempThresh=emsProbeStatusProbeMinTempThresh, emsProbeStatusProbeMaxHumidityThresh=emsProbeStatusProbeMaxHumidityThresh, emsProbeStatusProbeMinHumidityThresh=emsProbeStatusProbeMinHumidityThresh, emsInputContactStatus=emsInputContactStatus, emsInputContactStatusTable=emsInputContactStatusTable, emsInputContactStatusEntry=emsInputContactStatusEntry, emsInputContactStatusInputContactIndex=emsInputContactStatusInputContactIndex, emsInputContactStatusInputContactName=emsInputContactStatusInputContactName, emsInputContactStatusInputContactState=emsInputContactStatusInputContactState, emsInputContactStatusInputContactNormalState=emsInputContactStatusInputContactNormalState, emsOutputRelayStatus=emsOutputRelayStatus, emsOutputRelayStatusTable=emsOutputRelayStatusTable, emsOutputRelayStatusEntry=emsOutputRelayStatusEntry, emsOutputRelayStatusOutputRelayIndex=emsOutputRelayStatusOutputRelayIndex, emsOutputRelayStatusOutputRelayName=emsOutputRelayStatusOutputRelayName, emsOutputRelayStatusOutputRelayState=emsOutputRelayStatusOutputRelayState, emsOutputRelayStatusOutputRelayNormalState=emsOutputRelayStatusOutputRelayNormalState, emsOutletStatus=emsOutletStatus, emsOutletStatusTable=emsOutletStatusTable, emsOutletStatusEntry=emsOutletStatusEntry, emsOutletStatusOutletIndex=emsOutletStatusOutletIndex, emsOutletStatusOutletName=emsOutletStatusOutletName, emsOutletStatusOutletState=emsOutletStatusOutletState, emsOutletStatusOutletNormalState=emsOutletStatusOutletNormalState, emsAlarmDeviceStatus=emsAlarmDeviceStatus, emsAlarmDeviceStatusTable=emsAlarmDeviceStatusTable, emsAlarmDeviceStatusEntry=emsAlarmDeviceStatusEntry, emsAlarmDeviceStatusDeviceIndex=emsAlarmDeviceStatusDeviceIndex, emsAlarmDeviceStatusDeviceName=emsAlarmDeviceStatusDeviceName, emsAlarmDeviceStatusDeviceState=emsAlarmDeviceStatusDeviceState, emsSensorStatus=emsSensorStatus, emsSensorStatusTable=emsSensorStatusTable, emsSensorStatusEntry=emsSensorStatusEntry, emsSensorStatusSensorIndex=emsSensorStatusSensorIndex, emsSensorStatusSensorSystemName=emsSensorStatusSensorSystemName, emsSensorStatusSensorName=emsSensorStatusSensorName, emsSensorStatusSensorState=emsSensorStatusSensorState, emsSensorStatusSensorNormalState=emsSensorStatusSensorNormalState, emsSensorStatusSensorAlarmDelay=emsSensorStatusSensorAlarmDelay, modEnvMgr=modEnvMgr, memModules=memModules, memModulesStatusTableSize=memModulesStatusTableSize, memModulesStatusTable=memModulesStatusTable, memModulesStatusTableEntry=memModulesStatusTableEntry, memModulesStatusModuleNumber=memModulesStatusModuleNumber, memModulesStatusModuleName=memModulesStatusModuleName, memModulesStatusModuleLocation=memModulesStatusModuleLocation, memModulesStatusModelNumber=memModulesStatusModelNumber, memModulesStatusSerialNumber=memModulesStatusSerialNumber, memModulesStatusFirmwareRev=memModulesStatusFirmwareRev, memModulesStatusHardwareRev=memModulesStatusHardwareRev, memModulesConfigTableSize=memModulesConfigTableSize, memModulesConfigTable=memModulesConfigTable, memModulesConfigTableEntry=memModulesConfigTableEntry, memModulesConfigModuleNumber=memModulesConfigModuleNumber, memModulesConfigModuleName=memModulesConfigModuleName, memModulesConfigModuleLocation=memModulesConfigModuleLocation, memSensors=memSensors, memSensorsStatusSysTempUnits=memSensorsStatusSysTempUnits, memSensorsStatusTableSize=memSensorsStatusTableSize, memSensorsStatusTable=memSensorsStatusTable, memSensorsStatusTableEntry=memSensorsStatusTableEntry, memSensorsStatusModuleNumber=memSensorsStatusModuleNumber, memSensorsStatusSensorNumber=memSensorsStatusSensorNumber, memSensorsStatusSensorName=memSensorsStatusSensorName, memSensorsStatusSensorLocation=memSensorsStatusSensorLocation, memSensorsTemperature=memSensorsTemperature, memSensorsHumidity=memSensorsHumidity, memSensorsCommStatus=memSensorsCommStatus, memSensorsAlarmStatus=memSensorsAlarmStatus, memSensorsConfigTableSize=memSensorsConfigTableSize, memSensorsConfigTable=memSensorsConfigTable, memSensorsConfigTableEntry=memSensorsConfigTableEntry, memSensorsConfigModuleNumber=memSensorsConfigModuleNumber, memSensorsConfigSensorNumber=memSensorsConfigSensorNumber, memSensorsName=memSensorsName, memSensorsLocation=memSensorsLocation, memSensorsAlarmGeneration=memSensorsAlarmGeneration, memSensorsTempMaxThresh=memSensorsTempMaxThresh, memSensorsTempHighThresh=memSensorsTempHighThresh, memSensorsTempLowThresh=memSensorsTempLowThresh, memSensorsTempMinThresh=memSensorsTempMinThresh, memSensorsTempThreshHysteresis=memSensorsTempThreshHysteresis, memSensorsTempShortDecRateThreshValue=memSensorsTempShortDecRateThreshValue, memSensorsTempShortDecRateThreshTime=memSensorsTempShortDecRateThreshTime, memSensorsTempShortIncRateThreshValue=memSensorsTempShortIncRateThreshValue, memSensorsTempShortIncRateThreshTime=memSensorsTempShortIncRateThreshTime, memSensorsTempLongDecRateThreshValue=memSensorsTempLongDecRateThreshValue, memSensorsTempLongDecRateThreshTime=memSensorsTempLongDecRateThreshTime, memSensorsTempLongIncRateThreshValue=memSensorsTempLongIncRateThreshValue, memSensorsTempLongIncRateThreshTime=memSensorsTempLongIncRateThreshTime, memSensorsHumidityMaxThresh=memSensorsHumidityMaxThresh, memSensorsHumidityHighThresh=memSensorsHumidityHighThresh, memSensorsHumidityLowThresh=memSensorsHumidityLowThresh, memSensorsHumidityMinThresh=memSensorsHumidityMinThresh, memSensorsHumidityThreshHysteresis=memSensorsHumidityThreshHysteresis, memInputs=memInputs, memInputsStatusTableSize=memInputsStatusTableSize, memInputsStatusTable=memInputsStatusTable, memInputsStatusTableEntry=memInputsStatusTableEntry, memInputsStatusModuleNumber=memInputsStatusModuleNumber, memInputsStatusInputNumber=memInputsStatusInputNumber, memInputsStatusInputName=memInputsStatusInputName, memInputsStatusInputLocation=memInputsStatusInputLocation, memInputsStatusCurrentState=memInputsStatusCurrentState, memInputsStatusCurrentAnalogValue=memInputsStatusCurrentAnalogValue, memInputsStatusAlarmStatus=memInputsStatusAlarmStatus, memInputsConfigTableSize=memInputsConfigTableSize, memInputsConfigTable=memInputsConfigTable, memInputsConfigTableEntry=memInputsConfigTableEntry, memInputsConfigModuleNumber=memInputsConfigModuleNumber, memInputsConfigInputNumber=memInputsConfigInputNumber, memInputName=memInputName, memInputLocation=memInputLocation, memInputType=memInputType, memInputAlarmGeneration=memInputAlarmGeneration, memInputNormalState=memInputNormalState, memInputAbnormalSeverity=memInputAbnormalSeverity, memInputNumberCalibrationPoints=memInputNumberCalibrationPoints, memInputAnalogCalibrationPoint1=memInputAnalogCalibrationPoint1, memInputAnalogCalibrationPoint2=memInputAnalogCalibrationPoint2, memInputAnalogCalibrationPoint3=memInputAnalogCalibrationPoint3, memInputAnalogCalibrationPoint4=memInputAnalogCalibrationPoint4, memInputAnalogCalibrationPoint5=memInputAnalogCalibrationPoint5, memInputAnalogCalibrationPoint1Value=memInputAnalogCalibrationPoint1Value)
mibBuilder.exportSymbols('PowerNet-MIB', memInputAnalogCalibrationPoint2Value=memInputAnalogCalibrationPoint2Value, memInputAnalogCalibrationPoint3Value=memInputAnalogCalibrationPoint3Value, memInputAnalogCalibrationPoint4Value=memInputAnalogCalibrationPoint4Value, memInputAnalogCalibrationPoint5Value=memInputAnalogCalibrationPoint5Value, memInputAnalogMeasurementUnits=memInputAnalogMeasurementUnits, memInputAnalogMaxThresh=memInputAnalogMaxThresh, memInputAnalogHighThresh=memInputAnalogHighThresh, memInputAnalogLowThresh=memInputAnalogLowThresh, memInputAnalogMinThresh=memInputAnalogMinThresh, memInputAnalogThreshHysteresis=memInputAnalogThreshHysteresis, memOutputs=memOutputs, memOutputStatusTableSize=memOutputStatusTableSize, memOutputStatusTable=memOutputStatusTable, memOutputStatusTableEntry=memOutputStatusTableEntry, memOutputStatusModuleNumber=memOutputStatusModuleNumber, memOutputStatusOutputNumber=memOutputStatusOutputNumber, memOutputStatusOutputName=memOutputStatusOutputName, memOutputStatusOutputLocation=memOutputStatusOutputLocation, memOutputStatusCurrentState=memOutputStatusCurrentState, memOutputConfigTableSize=memOutputConfigTableSize, memOutputConfigTable=memOutputConfigTable, memOutputConfigTableEntry=memOutputConfigTableEntry, memOutputConfigModuleNumber=memOutputConfigModuleNumber, memOutputConfigOutputNumber=memOutputConfigOutputNumber, memOutputName=memOutputName, memOutputLocation=memOutputLocation, memOutputNormalState=memOutputNormalState, memOutputAction=memOutputAction, memOutlets=memOutlets, memOutletStatusTableSize=memOutletStatusTableSize, memOutletStatusTable=memOutletStatusTable, memOutletStatusTableEntry=memOutletStatusTableEntry, memOutletStatusModuleNumber=memOutletStatusModuleNumber, memOutletStatusOutletNumber=memOutletStatusOutletNumber, memOutletStatusOutletName=memOutletStatusOutletName, memOutletStatusOutletLocation=memOutletStatusOutletLocation, memOutletStatusCurrentState=memOutletStatusCurrentState, memOutletConfigTableSize=memOutletConfigTableSize, memOutletConfigTable=memOutletConfigTable, memOutletConfigTableEntry=memOutletConfigTableEntry, memOutletConfigModuleNumber=memOutletConfigModuleNumber, memOutletConfigOutletNumber=memOutletConfigOutletNumber, memOutletName=memOutletName, memOutletLocation=memOutletLocation, memOutletNormalState=memOutletNormalState, memOutletAction=memOutletAction, memBeacons=memBeacons, memBeaconStatusTableSize=memBeaconStatusTableSize, memBeaconStatusTable=memBeaconStatusTable, memBeaconStatusTableEntry=memBeaconStatusTableEntry, memBeaconStatusModuleNumber=memBeaconStatusModuleNumber, memBeaconStatusBeaconNumber=memBeaconStatusBeaconNumber, memBeaconStatusBeaconName=memBeaconStatusBeaconName, memBeaconStatusBeaconLocation=memBeaconStatusBeaconLocation, memBeaconStatusCurrentState=memBeaconStatusCurrentState, memBeaconConfigTableSize=memBeaconConfigTableSize, memBeaconConfigTable=memBeaconConfigTable, memBeaconConfigTableEntry=memBeaconConfigTableEntry, memBeaconConfigModuleNumber=memBeaconConfigModuleNumber, memBeaconConfigBeaconNumber=memBeaconConfigBeaconNumber, memBeaconConfigName=memBeaconConfigName, memBeaconConfigLocation=memBeaconConfigLocation, memBeaconAction=memBeaconAction, netlock=netlock, nlIdent=nlIdent, nlStatus=nlStatus, rPDU=rPDU, rPDUIdent=rPDUIdent, rPDUIdentName=rPDUIdentName, rPDUIdentHardwareRev=rPDUIdentHardwareRev, rPDUIdentFirmwareRev=rPDUIdentFirmwareRev, rPDUIdentDateOfManufacture=rPDUIdentDateOfManufacture, rPDUIdentModelNumber=rPDUIdentModelNumber, rPDUIdentSerialNumber=rPDUIdentSerialNumber, rPDUIdentDeviceRating=rPDUIdentDeviceRating, rPDUIdentDeviceNumOutlets=rPDUIdentDeviceNumOutlets, rPDUIdentDeviceNumPhases=rPDUIdentDeviceNumPhases, rPDUIdentDeviceNumBreakers=rPDUIdentDeviceNumBreakers, rPDUIdentDeviceBreakerRating=rPDUIdentDeviceBreakerRating, rPDUIdentDeviceOrientation=rPDUIdentDeviceOrientation, rPDUIdentDeviceOutletLayout=rPDUIdentDeviceOutletLayout, rPDUIdentDeviceDisplayOrientation=rPDUIdentDeviceDisplayOrientation, rPDUIdentDeviceLinetoLineVoltage=rPDUIdentDeviceLinetoLineVoltage, rPDUIdentDevicePowerWatts=rPDUIdentDevicePowerWatts, rPDUIdentDevicePowerFactor=rPDUIdentDevicePowerFactor, rPDUIdentDevicePowerVA=rPDUIdentDevicePowerVA, rPDULoad=rPDULoad, rPDULoadDevice=rPDULoadDevice, rPDULoadDevMaxPhaseLoad=rPDULoadDevMaxPhaseLoad, rPDULoadDevNumPhases=rPDULoadDevNumPhases, rPDULoadDevMaxBankLoad=rPDULoadDevMaxBankLoad, rPDULoadDevNumBanks=rPDULoadDevNumBanks, rPDULoadDevBankTableSize=rPDULoadDevBankTableSize, rPDULoadDevBankTable=rPDULoadDevBankTable, rPDULoadDevBankEntry=rPDULoadDevBankEntry, rPDULoadDevBankIndex=rPDULoadDevBankIndex, rPDULoadDevBankNumber=rPDULoadDevBankNumber, rPDULoadDevBankMaxLoad=rPDULoadDevBankMaxLoad, rPDULoadDevMaxOutletTableSize=rPDULoadDevMaxOutletTableSize, rPDULoadDevMaxOutletTable=rPDULoadDevMaxOutletTable, rPDULoadDevMaxOutletEntry=rPDULoadDevMaxOutletEntry, rPDULoadDevOutletIndex=rPDULoadDevOutletIndex, rPDULoadDevOutletNumber=rPDULoadDevOutletNumber, rPDULoadDevMaxOutletLoad=rPDULoadDevMaxOutletLoad, rPDULoadPhaseConfig=rPDULoadPhaseConfig, rPDULoadPhaseConfigTable=rPDULoadPhaseConfigTable, rPDULoadPhaseConfigEntry=rPDULoadPhaseConfigEntry, rPDULoadPhaseConfigIndex=rPDULoadPhaseConfigIndex, rPDULoadPhaseConfigLowLoadThreshold=rPDULoadPhaseConfigLowLoadThreshold, rPDULoadPhaseConfigNearOverloadThreshold=rPDULoadPhaseConfigNearOverloadThreshold, rPDULoadPhaseConfigOverloadThreshold=rPDULoadPhaseConfigOverloadThreshold, rPDULoadPhaseConfigAlarm=rPDULoadPhaseConfigAlarm, rPDULoadStatus=rPDULoadStatus, rPDULoadStatusTable=rPDULoadStatusTable, rPDULoadStatusEntry=rPDULoadStatusEntry, rPDULoadStatusIndex=rPDULoadStatusIndex, rPDULoadStatusLoad=rPDULoadStatusLoad, rPDULoadStatusLoadState=rPDULoadStatusLoadState, rPDULoadStatusPhaseNumber=rPDULoadStatusPhaseNumber, rPDULoadStatusBankNumber=rPDULoadStatusBankNumber, rPDULoadBankConfig=rPDULoadBankConfig, rPDULoadBankConfigTable=rPDULoadBankConfigTable, rPDULoadBankConfigEntry=rPDULoadBankConfigEntry, rPDULoadBankConfigIndex=rPDULoadBankConfigIndex, rPDULoadBankConfigLowLoadThreshold=rPDULoadBankConfigLowLoadThreshold, rPDULoadBankConfigNearOverloadThreshold=rPDULoadBankConfigNearOverloadThreshold, rPDULoadBankConfigOverloadThreshold=rPDULoadBankConfigOverloadThreshold)
mibBuilder.exportSymbols('PowerNet-MIB', rPDULoadBankConfigAlarm=rPDULoadBankConfigAlarm, rPDUOutlet=rPDUOutlet, rPDUOutletDevice=rPDUOutletDevice, rPDUOutletDevCommand=rPDUOutletDevCommand, rPDUOutletDevColdstartDelay=rPDUOutletDevColdstartDelay, rPDUOutletDevNumCntrlOutlets=rPDUOutletDevNumCntrlOutlets, rPDUOutletDevNumTotalOutlets=rPDUOutletDevNumTotalOutlets, rPDUOutletDevMonitoredOutlets=rPDUOutletDevMonitoredOutlets, rPDUOutletPhase=rPDUOutletPhase, rPDUOutletPhaseTable=rPDUOutletPhaseTable, rPDUOutletPhaseEntry=rPDUOutletPhaseEntry, rPDUOutletPhaseIndex=rPDUOutletPhaseIndex, rPDUOutletPhaseOverloadRestriction=rPDUOutletPhaseOverloadRestriction, rPDUOutletControl=rPDUOutletControl, rPDUOutletControlTable=rPDUOutletControlTable, rPDUOutletControlEntry=rPDUOutletControlEntry, rPDUOutletControlIndex=rPDUOutletControlIndex, rPDUOutletControlOutletName=rPDUOutletControlOutletName, rPDUOutletControlOutletPhase=rPDUOutletControlOutletPhase, rPDUOutletControlOutletCommand=rPDUOutletControlOutletCommand, rPDUOutletControlOutletBank=rPDUOutletControlOutletBank, rPDUOutletConfig=rPDUOutletConfig, rPDUOutletConfigTable=rPDUOutletConfigTable, rPDUOutletConfigEntry=rPDUOutletConfigEntry, rPDUOutletConfigIndex=rPDUOutletConfigIndex, rPDUOutletConfigOutletName=rPDUOutletConfigOutletName, rPDUOutletConfigOutletPhase=rPDUOutletConfigOutletPhase, rPDUOutletConfigPowerOnTime=rPDUOutletConfigPowerOnTime, rPDUOutletConfigPowerOffTime=rPDUOutletConfigPowerOffTime, rPDUOutletConfigRebootDuration=rPDUOutletConfigRebootDuration, rPDUOutletConfigOutletBank=rPDUOutletConfigOutletBank, rPDUOutletConfigMonitoredTableSize=rPDUOutletConfigMonitoredTableSize, rPDUOutletConfigMonitoredTable=rPDUOutletConfigMonitoredTable, rPDUOutletConfigMonitoredEntry=rPDUOutletConfigMonitoredEntry, rPDUOutletConfigMonitoredIndex=rPDUOutletConfigMonitoredIndex, rPDUOutletConfigMonitoredName=rPDUOutletConfigMonitoredName, rPDUOutletConfigMonitoredNumber=rPDUOutletConfigMonitoredNumber, rPDUOutletConfigMonitoredLowLoadThreshold=rPDUOutletConfigMonitoredLowLoadThreshold, rPDUOutletConfigMonitoredNearOverloadThreshold=rPDUOutletConfigMonitoredNearOverloadThreshold, rPDUOutletConfigMonitoredOverloadThreshold=rPDUOutletConfigMonitoredOverloadThreshold, rPDUOutletStatus=rPDUOutletStatus, rPDUOutletStatusTable=rPDUOutletStatusTable, rPDUOutletStatusEntry=rPDUOutletStatusEntry, rPDUOutletStatusIndex=rPDUOutletStatusIndex, rPDUOutletStatusOutletName=rPDUOutletStatusOutletName, rPDUOutletStatusOutletPhase=rPDUOutletStatusOutletPhase, rPDUOutletStatusOutletState=rPDUOutletStatusOutletState, rPDUOutletStatusCommandPending=rPDUOutletStatusCommandPending, rPDUOutletStatusOutletBank=rPDUOutletStatusOutletBank, rPDUOutletStatusLoad=rPDUOutletStatusLoad, rPDUOutletBank=rPDUOutletBank, rPDUOutletBankTable=rPDUOutletBankTable, rPDUOutletBankEntry=rPDUOutletBankEntry, rPDUOutletBankIndex=rPDUOutletBankIndex, rPDUOutletBankOverloadRestriction=rPDUOutletBankOverloadRestriction, rPDUPowerSupply=rPDUPowerSupply, rPDUPowerSupplyDevice=rPDUPowerSupplyDevice, rPDUPowerSupply1Status=rPDUPowerSupply1Status, rPDUPowerSupply2Status=rPDUPowerSupply2Status, rPDUPowerSupplyAlarm=rPDUPowerSupplyAlarm, rPDUStatus=rPDUStatus, rPDUStatusBankTableSize=rPDUStatusBankTableSize, rPDUStatusBankTable=rPDUStatusBankTable, rPDUStatusBankEntry=rPDUStatusBankEntry, rPDUStatusBankIndex=rPDUStatusBankIndex, rPDUStatusBankNumber=rPDUStatusBankNumber, rPDUStatusBankState=rPDUStatusBankState, rPDUStatusPhaseTableSize=rPDUStatusPhaseTableSize, rPDUStatusPhaseTable=rPDUStatusPhaseTable, rPDUStatusPhaseEntry=rPDUStatusPhaseEntry, rPDUStatusPhaseIndex=rPDUStatusPhaseIndex, rPDUStatusPhaseNumber=rPDUStatusPhaseNumber, rPDUStatusPhaseState=rPDUStatusPhaseState, rPDUStatusOutletTableSize=rPDUStatusOutletTableSize, rPDUStatusOutletTable=rPDUStatusOutletTable, rPDUStatusOutletEntry=rPDUStatusOutletEntry, rPDUStatusOutletIndex=rPDUStatusOutletIndex, rPDUStatusOutletNumber=rPDUStatusOutletNumber, rPDUStatusOutletState=rPDUStatusOutletState, airConditioners=airConditioners, airFM=airFM, airFMIdent=airFMIdent, airFMIdentName=airFMIdentName, airFMIdentTableSize=airFMIdentTableSize, airFMIdentTable=airFMIdentTable, airFMIdentTableEntry=airFMIdentTableEntry, airFMIdentModuleIndex=airFMIdentModuleIndex, airFMIdentModuleModelNumber=airFMIdentModuleModelNumber, airFMIdentModuleDateOfMfg=airFMIdentModuleDateOfMfg, airFMIdentModuleSerialNumber=airFMIdentModuleSerialNumber, airFMIdentModuleFirmwareRev=airFMIdentModuleFirmwareRev, airFMIdentModuleHardwareRev=airFMIdentModuleHardwareRev, airFMStatus=airFMStatus, airFMStatusSystemOn=airFMStatusSystemOn, airFMStatusSystemAverageRetTempC=airFMStatusSystemAverageRetTempC, airFMStatusSystemAverageRetTempF=airFMStatusSystemAverageRetTempF, airFMStatusSystemAverageRetHum=airFMStatusSystemAverageRetHum, airFMStatusSystemActionTempC=airFMStatusSystemActionTempC, airFMStatusSystemActionTempF=airFMStatusSystemActionTempF, airFMStatusSystemActionHum=airFMStatusSystemActionHum, airFMStatusSystemRemoteHighTempC=airFMStatusSystemRemoteHighTempC, airFMStatusSystemRemoteHighTempF=airFMStatusSystemRemoteHighTempF, airFMStatusSystemRemoteAvgTempC=airFMStatusSystemRemoteAvgTempC, airFMStatusSystemRemoteAvgTempF=airFMStatusSystemRemoteAvgTempF, airFMStatusSystemRemoteAvgHum=airFMStatusSystemRemoteAvgHum, airFMStatusSystemRemoteLowTempC=airFMStatusSystemRemoteLowTempC, airFMStatusSystemRemoteLowTempF=airFMStatusSystemRemoteLowTempF, airFMStatusSystemCoolingEnabled=airFMStatusSystemCoolingEnabled, airFMStatusSystemReheatingEnabled=airFMStatusSystemReheatingEnabled, airFMStatusSystemHumidifyEnabled=airFMStatusSystemHumidifyEnabled, airFMStatusSystemDehumidifyEnabled=airFMStatusSystemDehumidifyEnabled, airFMStatusModuleTableSize=airFMStatusModuleTableSize, airFMStatusModuleTable=airFMStatusModuleTable, airFMStatusModuleEntry=airFMStatusModuleEntry, airFMStatusModuleIndex=airFMStatusModuleIndex, airFMStatusModuleOutputCapacity=airFMStatusModuleOutputCapacity, airFMStatusModuleSupplyTempC=airFMStatusModuleSupplyTempC, airFMStatusModuleSupplyTempF=airFMStatusModuleSupplyTempF, airFMStatusModuleSupplyHum=airFMStatusModuleSupplyHum, airFMStatusModuleReturnTempC=airFMStatusModuleReturnTempC, airFMStatusModuleReturnTempF=airFMStatusModuleReturnTempF, airFMStatusModuleReturnHum=airFMStatusModuleReturnHum, airFMGroup=airFMGroup, airFMGroupSysStatus=airFMGroupSysStatus, airFMGroupSysRuntime=airFMGroupSysRuntime, airFMGroupSysRole=airFMGroupSysRole, airPA=airPA)
mibBuilder.exportSymbols('PowerNet-MIB', airPAIdent=airPAIdent, airPAIdentName=airPAIdentName, airPAModelNumber=airPAModelNumber, airPADateOfManufacture=airPADateOfManufacture, airPASerialNumber=airPASerialNumber, airPAFirmwareRevision=airPAFirmwareRevision, airPAHardwareRevision=airPAHardwareRevision, airPAStatus=airPAStatus, airPASystemPower=airPASystemPower, airPAOperatingMode=airPAOperatingMode, airPASetpointTempF=airPASetpointTempF, airPASetpointTempC=airPASetpointTempC, airPABlowerSpeed=airPABlowerSpeed, airPACompressor=airPACompressor, airPACondenserFan=airPACondenserFan, airPACondensatePump=airPACondensatePump, airPASupplyTempF=airPASupplyTempF, airPASupplyTempC=airPASupplyTempC, airPAReturnTempF=airPAReturnTempF, airPAReturnTempC=airPAReturnTempC, airPARemoteTempF=airPARemoteTempF, airPARemoteTempC=airPARemoteTempC, airPARemoteHumidity=airPARemoteHumidity, airIR=airIR, airIRAlarms=airIRAlarms, airIRAlarmConditionsTableSize=airIRAlarmConditionsTableSize, airIRAlarmConditionsTable=airIRAlarmConditionsTable, airIRAlarmConditionsEntry=airIRAlarmConditionsEntry, airIRAlarmConditionsIndex=airIRAlarmConditionsIndex, airIREventCode=airIREventCode, airIRAlarmDescription=airIRAlarmDescription, airIRRC=airIRRC, airIRRCGroup=airIRRCGroup, airIRRCGroupStatus=airIRRCGroupStatus, airIRRCGroupStatusCoolOutput=airIRRCGroupStatusCoolOutput, airIRRCGroupStatusCoolDemand=airIRRCGroupStatusCoolDemand, airIRRCGroupStatusAirFlowUS=airIRRCGroupStatusAirFlowUS, airIRRCGroupStatusAirFlowMetric=airIRRCGroupStatusAirFlowMetric, airIRRCGroupStatusMaxRackInletTempUS=airIRRCGroupStatusMaxRackInletTempUS, airIRRCGroupStatusMaxRackInletTempMetric=airIRRCGroupStatusMaxRackInletTempMetric, airIRRCGroupStatusMinRackInletTempUS=airIRRCGroupStatusMinRackInletTempUS, airIRRCGroupStatusMinRackInletTempMetric=airIRRCGroupStatusMinRackInletTempMetric, airIRRCGroupSetpoints=airIRRCGroupSetpoints, airIRRCGroupSetpointsCoolUS=airIRRCGroupSetpointsCoolUS, airIRRCGroupSetpointsCoolMetric=airIRRCGroupSetpointsCoolMetric, airIRRCGroupSetpointsSupplyAirUS=airIRRCGroupSetpointsSupplyAirUS, airIRRCGroupSetpointsSupplyAirMetric=airIRRCGroupSetpointsSupplyAirMetric, airIRRCGroupSetpointsFanSpeedPreference=airIRRCGroupSetpointsFanSpeedPreference, airIRRCGroupConfig=airIRRCGroupConfig, airIRRCGroupConfigNumberofCoolingUnits=airIRRCGroupConfigNumberofCoolingUnits, airIRRCGroupConfigConfigurationType=airIRRCGroupConfigConfigurationType, airIRRCGroupConfigPctGlycol=airIRRCGroupConfigPctGlycol, airIRRCGroupConfigCoolGainP=airIRRCGroupConfigCoolGainP, airIRRCGroupConfigCoolResetRateI=airIRRCGroupConfigCoolResetRateI, airIRRCGroupConfigCoolDerivativeD=airIRRCGroupConfigCoolDerivativeD, airIRRCUnit=airIRRCUnit, airIRRCUnitIdent=airIRRCUnitIdent, airIRRCUnitIdentID=airIRRCUnitIdentID, airIRRCUnitIdentName=airIRRCUnitIdentName, airIRRCUnitIdentLocation=airIRRCUnitIdentLocation, airIRRCUnitIdentModelNumber=airIRRCUnitIdentModelNumber, airIRRCUnitIdentSerialNumber=airIRRCUnitIdentSerialNumber, airIRRCUnitIdentFirmwareRevision=airIRRCUnitIdentFirmwareRevision, airIRRCUnitIdentHardwareRevision=airIRRCUnitIdentHardwareRevision, airIRRCUnitIdentManufactureDate=airIRRCUnitIdentManufactureDate, airIRRCUnitStatus=airIRRCUnitStatus, airIRRCUnitStatusOperateMode=airIRRCUnitStatusOperateMode, airIRRCUnitStatusCoolOutput=airIRRCUnitStatusCoolOutput, airIRRCUnitStatusCoolDemand=airIRRCUnitStatusCoolDemand, airIRRCUnitStatusAirFlowUS=airIRRCUnitStatusAirFlowUS, airIRRCUnitStatusAirFlowMetric=airIRRCUnitStatusAirFlowMetric, airIRRCUnitStatusRackInletTempUS=airIRRCUnitStatusRackInletTempUS, airIRRCUnitStatusRackInletTempMetric=airIRRCUnitStatusRackInletTempMetric, airIRRCUnitStatusSupplyAirTempUS=airIRRCUnitStatusSupplyAirTempUS, airIRRCUnitStatusSupplyAirTempMetric=airIRRCUnitStatusSupplyAirTempMetric, airIRRCUnitStatusReturnAirTempUS=airIRRCUnitStatusReturnAirTempUS, airIRRCUnitStatusReturnAirTempMetric=airIRRCUnitStatusReturnAirTempMetric, airIRRCUnitStatusContainmtDPUS=airIRRCUnitStatusContainmtDPUS, airIRRCUnitStatusContainmtDPMetric=airIRRCUnitStatusContainmtDPMetric, airIRRCUnitStatusFilterDPUS=airIRRCUnitStatusFilterDPUS, airIRRCUnitStatusFilterDPMetric=airIRRCUnitStatusFilterDPMetric, airIRRCUnitStatusFanSpeed=airIRRCUnitStatusFanSpeed, airIRRCUnitStatusInputState=airIRRCUnitStatusInputState, airIRRCUnitStatusOutputState=airIRRCUnitStatusOutputState, airIRRCUnitStatusActivePowerSource=airIRRCUnitStatusActivePowerSource, airIRRCUnitStatusFluidValvePosition=airIRRCUnitStatusFluidValvePosition, airIRRCUnitStatusFluidFlowUS=airIRRCUnitStatusFluidFlowUS, airIRRCUnitStatusFluidFlowMetric=airIRRCUnitStatusFluidFlowMetric, airIRRCUnitStatusEnteringFluidTemperatureUS=airIRRCUnitStatusEnteringFluidTemperatureUS, airIRRCUnitStatusEnteringFluidTemperatureMetric=airIRRCUnitStatusEnteringFluidTemperatureMetric, airIRRCUnitStatusLeavingFluidTemperatureUS=airIRRCUnitStatusLeavingFluidTemperatureUS, airIRRCUnitStatusLeavingFluidTemperatureMetric=airIRRCUnitStatusLeavingFluidTemperatureMetric, airIRRCUnitRunHours=airIRRCUnitRunHours, airIRRCUnitRunHoursAirFilter=airIRRCUnitRunHoursAirFilter, airIRRCUnitRunHoursFan1=airIRRCUnitRunHoursFan1, airIRRCUnitRunHoursFan2=airIRRCUnitRunHoursFan2, airIRRCUnitRunHoursFan3=airIRRCUnitRunHoursFan3, airIRRCUnitRunHoursFan4=airIRRCUnitRunHoursFan4, airIRRCUnitRunHoursFan5=airIRRCUnitRunHoursFan5, airIRRCUnitRunHoursFan6=airIRRCUnitRunHoursFan6, airIRRCUnitRunHoursFan7=airIRRCUnitRunHoursFan7, airIRRCUnitRunHoursFan8=airIRRCUnitRunHoursFan8, airIRRCUnitRunHoursFanPowerSupplyLeft=airIRRCUnitRunHoursFanPowerSupplyLeft, airIRRCUnitRunHoursFanPowerSupplyRight=airIRRCUnitRunHoursFanPowerSupplyRight, airIRRCUnitRunHoursCondensatePump=airIRRCUnitRunHoursCondensatePump, airIRRCUnitServiceIntervals=airIRRCUnitServiceIntervals, airIRRCUnitServiceIntervalsAirFilter=airIRRCUnitServiceIntervalsAirFilter, airIRRCUnitServiceIntervalsAirFilterAlarm=airIRRCUnitServiceIntervalsAirFilterAlarm, airIRRCUnitThresholds=airIRRCUnitThresholds, airIRRCUnitThresholdsRackInletHighTempUS=airIRRCUnitThresholdsRackInletHighTempUS, airIRRCUnitThresholdsRackInletHighTempMetric=airIRRCUnitThresholdsRackInletHighTempMetric, airIRRCUnitThresholdsSupplyAirHighTempUS=airIRRCUnitThresholdsSupplyAirHighTempUS, airIRRCUnitThresholdsSupplyAirHighTempMetric=airIRRCUnitThresholdsSupplyAirHighTempMetric, airIRRCUnitThresholdsReturnAirHighTempUS=airIRRCUnitThresholdsReturnAirHighTempUS, airIRRCUnitThresholdsReturnAirHighTempMetric=airIRRCUnitThresholdsReturnAirHighTempMetric, airIRRCUnitThresholdsEnteringFluidHighTempUS=airIRRCUnitThresholdsEnteringFluidHighTempUS, airIRRCUnitThresholdsEnteringFluidHighTempMetric=airIRRCUnitThresholdsEnteringFluidHighTempMetric, airIRRCUnitConfig=airIRRCUnitConfig, airIRRCUnitConfigCoolCapacity=airIRRCUnitConfigCoolCapacity, airIRRCUnitConfigStartupDelay=airIRRCUnitConfigStartupDelay, airIRRCUnitConfigIdleOnLeakDetect=airIRRCUnitConfigIdleOnLeakDetect, airIRRCUnitConfigPowerSource=airIRRCUnitConfigPowerSource, airIRRCUnitConfigInputNormalState=airIRRCUnitConfigInputNormalState, airIRRCUnitConfigOutputNormalState=airIRRCUnitConfigOutputNormalState, airIRRCUnitConfigOutputSource=airIRRCUnitConfigOutputSource, airIRRP=airIRRP, airIRRP100=airIRRP100)
mibBuilder.exportSymbols('PowerNet-MIB', airIRRP100Group=airIRRP100Group, airIRRP100GroupStatus=airIRRP100GroupStatus, airIRRP100GroupStatusAirFlowUS=airIRRP100GroupStatusAirFlowUS, airIRRP100GroupStatusAirFlowMetric=airIRRP100GroupStatusAirFlowMetric, airIRRP100GroupStatusMaxRackInletTempUS=airIRRP100GroupStatusMaxRackInletTempUS, airIRRP100GroupStatusMaxRackInletTempMetric=airIRRP100GroupStatusMaxRackInletTempMetric, airIRRP100GroupStatusMinRackInletTempUS=airIRRP100GroupStatusMinRackInletTempUS, airIRRP100GroupStatusMinRackInletTempMetric=airIRRP100GroupStatusMinRackInletTempMetric, airIRRP100GroupStatusCoolDemand=airIRRP100GroupStatusCoolDemand, airIRRP100GroupStatusCoolOutput=airIRRP100GroupStatusCoolOutput, airIRRP100GroupStatusHumidifyDemand=airIRRP100GroupStatusHumidifyDemand, airIRRP100GroupStatusHumidifyOutput=airIRRP100GroupStatusHumidifyOutput, airIRRP100GroupStatusDehumidifyDemand=airIRRP100GroupStatusDehumidifyDemand, airIRRP100GroupStatusDehumidifyOutput=airIRRP100GroupStatusDehumidifyOutput, airIRRP100GroupStatusReheatDemand=airIRRP100GroupStatusReheatDemand, airIRRP100GroupStatusReheatOutput=airIRRP100GroupStatusReheatOutput, airIRRP100GroupSetpoints=airIRRP100GroupSetpoints, airIRRP100GroupSetpointsCoolUS=airIRRP100GroupSetpointsCoolUS, airIRRP100GroupSetpointsCoolMetric=airIRRP100GroupSetpointsCoolMetric, airIRRP100GroupSetpointsSupplyAirUS=airIRRP100GroupSetpointsSupplyAirUS, airIRRP100GroupSetpointsSupplyAirMetric=airIRRP100GroupSetpointsSupplyAirMetric, airIRRP100GroupSetpointsHumidify=airIRRP100GroupSetpointsHumidify, airIRRP100GroupSetpointsDehumidify=airIRRP100GroupSetpointsDehumidify, airIRRP100GroupSetpointsDehumidifyDeadband=airIRRP100GroupSetpointsDehumidifyDeadband, airIRRP100GroupSetpointsReheatUS=airIRRP100GroupSetpointsReheatUS, airIRRP100GroupSetpointsReheatMetric=airIRRP100GroupSetpointsReheatMetric, airIRRP100GroupSetpointsFanSpeedPreference=airIRRP100GroupSetpointsFanSpeedPreference, airIRRP100GroupConfig=airIRRP100GroupConfig, airIRRP100GroupConfigNumberofCoolingUnits=airIRRP100GroupConfigNumberofCoolingUnits, airIRRP100GroupConfigConfigurationType=airIRRP100GroupConfigConfigurationType, airIRRP100GroupConfigCoolGainP=airIRRP100GroupConfigCoolGainP, airIRRP100GroupConfigCoolResetRateI=airIRRP100GroupConfigCoolResetRateI, airIRRP100GroupConfigCoolDerivativeD=airIRRP100GroupConfigCoolDerivativeD, airIRRP100GroupConfigHumidifySensitivityBand=airIRRP100GroupConfigHumidifySensitivityBand, airIRRP100GroupConfigReheatGainP=airIRRP100GroupConfigReheatGainP, airIRRP100GroupConfigReheatResetRateI=airIRRP100GroupConfigReheatResetRateI, airIRRP100GroupConfigReheatDerivativeD=airIRRP100GroupConfigReheatDerivativeD, airIRRP100Unit=airIRRP100Unit, airIRRP100UnitIdent=airIRRP100UnitIdent, airIRRP100UnitIdentID=airIRRP100UnitIdentID, airIRRP100UnitIdentName=airIRRP100UnitIdentName, airIRRP100UnitIdentLocation=airIRRP100UnitIdentLocation, airIRRP100UnitIdentModelNumber=airIRRP100UnitIdentModelNumber, airIRRP100UnitIdentSerialNumber=airIRRP100UnitIdentSerialNumber, airIRRP100UnitIdentFirmwareRevision=airIRRP100UnitIdentFirmwareRevision, airIRRP100UnitIdentHardwareRevision=airIRRP100UnitIdentHardwareRevision, airIRRP100UnitIdentManufactureDate=airIRRP100UnitIdentManufactureDate, airIRRP100UnitStatus=airIRRP100UnitStatus, airIRRP100UnitStatusOperateMode=airIRRP100UnitStatusOperateMode, airIRRP100UnitStatusRackInletTempUS=airIRRP100UnitStatusRackInletTempUS, airIRRP100UnitStatusRackInletTempMetric=airIRRP100UnitStatusRackInletTempMetric, airIRRP100UnitStatusSupplyAirTempUS=airIRRP100UnitStatusSupplyAirTempUS, airIRRP100UnitStatusSupplyAirTempMetric=airIRRP100UnitStatusSupplyAirTempMetric, airIRRP100UnitStatusReturnAirTempUS=airIRRP100UnitStatusReturnAirTempUS, airIRRP100UnitStatusReturnAirTempMetric=airIRRP100UnitStatusReturnAirTempMetric, airIRRP100UnitStatusSupplyHumidity=airIRRP100UnitStatusSupplyHumidity, airIRRP100UnitStatusReturnHumidity=airIRRP100UnitStatusReturnHumidity, airIRRP100UnitStatusAirFlowUS=airIRRP100UnitStatusAirFlowUS, airIRRP100UnitStatusAirFlowMetric=airIRRP100UnitStatusAirFlowMetric, airIRRP100UnitStatusFanSpeed=airIRRP100UnitStatusFanSpeed, airIRRP100UnitStatusCoolDemand=airIRRP100UnitStatusCoolDemand, airIRRP100UnitStatusCoolOutput=airIRRP100UnitStatusCoolOutput, airIRRP100UnitStatusHumidifyDemand=airIRRP100UnitStatusHumidifyDemand, airIRRP100UnitStatusHumidifyOutput=airIRRP100UnitStatusHumidifyOutput, airIRRP100UnitStatusDehumidifyDemand=airIRRP100UnitStatusDehumidifyDemand, airIRRP100UnitStatusDehumidifyOutput=airIRRP100UnitStatusDehumidifyOutput, airIRRP100UnitStatusReheatDemand=airIRRP100UnitStatusReheatDemand, airIRRP100UnitStatusReheatOutput=airIRRP100UnitStatusReheatOutput, airIRRP100UnitStatusInputState=airIRRP100UnitStatusInputState, airIRRP100UnitStatusOutputState=airIRRP100UnitStatusOutputState, airIRRP100UnitStatusRackInletTemperature1US=airIRRP100UnitStatusRackInletTemperature1US, airIRRP100UnitStatusRackInletTemperature1Metric=airIRRP100UnitStatusRackInletTemperature1Metric, airIRRP100UnitStatusRackInletTemperature2US=airIRRP100UnitStatusRackInletTemperature2US, airIRRP100UnitStatusRackInletTemperature2Metric=airIRRP100UnitStatusRackInletTemperature2Metric, airIRRP100UnitStatusRackInletTemperature3US=airIRRP100UnitStatusRackInletTemperature3US, airIRRP100UnitStatusRackInletTemperature3Metric=airIRRP100UnitStatusRackInletTemperature3Metric, airIRRP100UnitStatusFilterDPUS=airIRRP100UnitStatusFilterDPUS, airIRRP100UnitStatusFilterDPMetric=airIRRP100UnitStatusFilterDPMetric, airIRRP100UnitStatusContainmtDPUS=airIRRP100UnitStatusContainmtDPUS, airIRRP100UnitStatusContainmtDPMetric=airIRRP100UnitStatusContainmtDPMetric, airIRRP100UnitStatusHumidifierCurrent=airIRRP100UnitStatusHumidifierCurrent, airIRRP100UnitStatusHumidifierWaterConductivity=airIRRP100UnitStatusHumidifierWaterConductivity, airIRRP100UnitStatusCompressorDriveSpeed=airIRRP100UnitStatusCompressorDriveSpeed, airIRRP100UnitStatusCompressorDrivePower=airIRRP100UnitStatusCompressorDrivePower, airIRRP100UnitStatusCompressorDriveVoltage=airIRRP100UnitStatusCompressorDriveVoltage, airIRRP100UnitStatusCompressorDriveCurrent=airIRRP100UnitStatusCompressorDriveCurrent, airIRRP100UnitStatusCompressorDriveDCLinkVoltage=airIRRP100UnitStatusCompressorDriveDCLinkVoltage, airIRRP100UnitStatusCompressorDriveHeatSinkTempUS=airIRRP100UnitStatusCompressorDriveHeatSinkTempUS, airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric=airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric, airIRRP100UnitStatusCompressorDriveControlCardTempUS=airIRRP100UnitStatusCompressorDriveControlCardTempUS, airIRRP100UnitStatusCompressorDriveControlCardTempMetric=airIRRP100UnitStatusCompressorDriveControlCardTempMetric, airIRRP100UnitStatusCompressorDriveWarningStatus=airIRRP100UnitStatusCompressorDriveWarningStatus, airIRRP100UnitStatusCompressorDriveAlarmStatus=airIRRP100UnitStatusCompressorDriveAlarmStatus, airIRRP100UnitStatusSuctionPressureUS=airIRRP100UnitStatusSuctionPressureUS, airIRRP100UnitStatusSuctionPressureMetric=airIRRP100UnitStatusSuctionPressureMetric, airIRRP100UnitStatusDischargePressureUS=airIRRP100UnitStatusDischargePressureUS, airIRRP100UnitStatusDischargePressureMetric=airIRRP100UnitStatusDischargePressureMetric, airIRRP100UnitRunHours=airIRRP100UnitRunHours, airIRRP100UnitRunHoursAirFilter=airIRRP100UnitRunHoursAirFilter, airIRRP100UnitRunHoursCondensatePump=airIRRP100UnitRunHoursCondensatePump, airIRRP100UnitRunHoursHumidifier=airIRRP100UnitRunHoursHumidifier, airIRRP100UnitRunHoursFan1=airIRRP100UnitRunHoursFan1, airIRRP100UnitRunHoursHeater1=airIRRP100UnitRunHoursHeater1, airIRRP100UnitRunHoursFan2=airIRRP100UnitRunHoursFan2, airIRRP100UnitRunHoursHeater2=airIRRP100UnitRunHoursHeater2, airIRRP100UnitRunHoursCompressor=airIRRP100UnitRunHoursCompressor, airIRRP100UnitServiceIntervals=airIRRP100UnitServiceIntervals, airIRRP100UnitServiceIntervalAirFilter=airIRRP100UnitServiceIntervalAirFilter, airIRRP100UnitServiceIntervalAirFilterAlarm=airIRRP100UnitServiceIntervalAirFilterAlarm, airIRRP100UnitServiceIntervalHumidifier=airIRRP100UnitServiceIntervalHumidifier, airIRRP100UnitServiceIntervalHumidifierAlarm=airIRRP100UnitServiceIntervalHumidifierAlarm, airIRRP100UnitServiceIntervalHeater=airIRRP100UnitServiceIntervalHeater, airIRRP100UnitServiceIntervalHeaterAlarm=airIRRP100UnitServiceIntervalHeaterAlarm, airIRRP100UnitServiceIntervalCompressor=airIRRP100UnitServiceIntervalCompressor, airIRRP100UnitServiceIntervalCompressorAlarm=airIRRP100UnitServiceIntervalCompressorAlarm, airIRRP100UnitServiceIntervalCondensatePump=airIRRP100UnitServiceIntervalCondensatePump, airIRRP100UnitServiceIntervalCondensatePumpAlarm=airIRRP100UnitServiceIntervalCondensatePumpAlarm, airIRRP100UnitServiceIntervalFans=airIRRP100UnitServiceIntervalFans, airIRRP100UnitServiceIntervalFansAlarm=airIRRP100UnitServiceIntervalFansAlarm, airIRRP100UnitThresholds=airIRRP100UnitThresholds, airIRRP100UnitThresholdsRackInletHighTempUS=airIRRP100UnitThresholdsRackInletHighTempUS, airIRRP100UnitThresholdsRackInletHighTempMetric=airIRRP100UnitThresholdsRackInletHighTempMetric, airIRRP100UnitThresholdsSupplyAirHighTempUS=airIRRP100UnitThresholdsSupplyAirHighTempUS, airIRRP100UnitThresholdsSupplyAirHighTempMetric=airIRRP100UnitThresholdsSupplyAirHighTempMetric, airIRRP100UnitThresholdsReturnAirHighTempUS=airIRRP100UnitThresholdsReturnAirHighTempUS, airIRRP100UnitThresholdsReturnAirHighTempMetric=airIRRP100UnitThresholdsReturnAirHighTempMetric, airIRRP100UnitThresholdsSupplyHumidityHigh=airIRRP100UnitThresholdsSupplyHumidityHigh)
mibBuilder.exportSymbols('PowerNet-MIB', airIRRP100UnitThresholdsSupplyHumidityLow=airIRRP100UnitThresholdsSupplyHumidityLow, airIRRP100UnitConfig=airIRRP100UnitConfig, airIRRP100UnitConfigStartupDelay=airIRRP100UnitConfigStartupDelay, airIRRP100UnitConfigCoolCapacity=airIRRP100UnitConfigCoolCapacity, airIRRP100UnitConfigIdleOnLeakDetect=airIRRP100UnitConfigIdleOnLeakDetect, airIRRP100UnitConfigInputNormalState=airIRRP100UnitConfigInputNormalState, airIRRP100UnitConfigOutputNormalState=airIRRP100UnitConfigOutputNormalState, airIRRP100UnitConfigOutputSource=airIRRP100UnitConfigOutputSource, airIRRP100UnitConfigHumidifyEnable=airIRRP100UnitConfigHumidifyEnable, airIRRP100UnitConfigHumidifierControl=airIRRP100UnitConfigHumidifierControl, airIRRP100UnitConfigDehumidifyEnable=airIRRP100UnitConfigDehumidifyEnable, airIRRP100UnitConfigReheatEnable=airIRRP100UnitConfigReheatEnable, airIRRP100UnitConfigHeatAssistEnable=airIRRP100UnitConfigHeatAssistEnable, airIRRP500=airIRRP500, airIRRP500Group=airIRRP500Group, airIRRP500GroupStatus=airIRRP500GroupStatus, airIRRP500GroupStatusAirFlowUS=airIRRP500GroupStatusAirFlowUS, airIRRP500GroupStatusAirFlowMetric=airIRRP500GroupStatusAirFlowMetric, airIRRP500GroupStatusMaxRackInletTempUS=airIRRP500GroupStatusMaxRackInletTempUS, airIRRP500GroupStatusMaxRackInletTempMetric=airIRRP500GroupStatusMaxRackInletTempMetric, airIRRP500GroupStatusMinRackInletTempUS=airIRRP500GroupStatusMinRackInletTempUS, airIRRP500GroupStatusMinRackInletTempMetric=airIRRP500GroupStatusMinRackInletTempMetric, airIRRP500GroupStatusCoolDemand=airIRRP500GroupStatusCoolDemand, airIRRP500GroupStatusCoolOutput=airIRRP500GroupStatusCoolOutput, airIRRP500GroupStatusHumidifyDemand=airIRRP500GroupStatusHumidifyDemand, airIRRP500GroupStatusHumidifyOutput=airIRRP500GroupStatusHumidifyOutput, airIRRP500GroupStatusDehumidifyDemand=airIRRP500GroupStatusDehumidifyDemand, airIRRP500GroupStatusDehumidifyOutput=airIRRP500GroupStatusDehumidifyOutput, airIRRP500GroupStatusReheatDemand=airIRRP500GroupStatusReheatDemand, airIRRP500GroupStatusReheatOutput=airIRRP500GroupStatusReheatOutput, airIRRP500GroupSetpoints=airIRRP500GroupSetpoints, airIRRP500GroupSetpointsCoolUS=airIRRP500GroupSetpointsCoolUS, airIRRP500GroupSetpointsCoolMetric=airIRRP500GroupSetpointsCoolMetric, airIRRP500GroupSetpointsSupplyAirUS=airIRRP500GroupSetpointsSupplyAirUS, airIRRP500GroupSetpointsSupplyAirMetric=airIRRP500GroupSetpointsSupplyAirMetric, airIRRP500GroupSetpointsHumidify=airIRRP500GroupSetpointsHumidify, airIRRP500GroupSetpointsDehumidify=airIRRP500GroupSetpointsDehumidify, airIRRP500GroupSetpointsDehumidifyDeadband=airIRRP500GroupSetpointsDehumidifyDeadband, airIRRP500GroupSetpointsReheatUS=airIRRP500GroupSetpointsReheatUS, airIRRP500GroupSetpointsReheatMetric=airIRRP500GroupSetpointsReheatMetric, airIRRP500GroupSetpointsFanSpeedPreference=airIRRP500GroupSetpointsFanSpeedPreference, airIRRP500GroupConfig=airIRRP500GroupConfig, airIRRP500GroupConfigNumberofCoolingUnits=airIRRP500GroupConfigNumberofCoolingUnits, airIRRP500GroupConfigConfigurationType=airIRRP500GroupConfigConfigurationType, airIRRP500GroupConfigPercentGlycol=airIRRP500GroupConfigPercentGlycol, airIRRP500GroupConfigCoolGainP=airIRRP500GroupConfigCoolGainP, airIRRP500GroupConfigCoolResetRateI=airIRRP500GroupConfigCoolResetRateI, airIRRP500GroupConfigCoolDerivativeD=airIRRP500GroupConfigCoolDerivativeD, airIRRP500GroupConfigHumidifySensitivityBand=airIRRP500GroupConfigHumidifySensitivityBand, airIRRP500GroupConfigReheatGainP=airIRRP500GroupConfigReheatGainP, airIRRP500GroupConfigReheatResetRateI=airIRRP500GroupConfigReheatResetRateI, airIRRP500GroupConfigReheatDerivativeD=airIRRP500GroupConfigReheatDerivativeD, airIRRP500Unit=airIRRP500Unit, airIRRP500UnitIdent=airIRRP500UnitIdent, airIRRP500UnitIdentID=airIRRP500UnitIdentID, airIRRP500UnitIdentName=airIRRP500UnitIdentName, airIRRP500UnitIdentLocation=airIRRP500UnitIdentLocation, airIRRP500UnitIdentModelNumber=airIRRP500UnitIdentModelNumber, airIRRP500UnitIdentSerialNumber=airIRRP500UnitIdentSerialNumber, airIRRP500UnitIdentFirmwareRevision=airIRRP500UnitIdentFirmwareRevision, airIRRP500UnitIdentHardwareRevision=airIRRP500UnitIdentHardwareRevision, airIRRP500UnitIdentManufactureDate=airIRRP500UnitIdentManufactureDate, airIRRP500UnitStatus=airIRRP500UnitStatus, airIRRP500UnitStatusOperateMode=airIRRP500UnitStatusOperateMode, airIRRP500UnitStatusMaximumRackInletTempUS=airIRRP500UnitStatusMaximumRackInletTempUS, airIRRP500UnitStatusMaximumRackInletTempMetric=airIRRP500UnitStatusMaximumRackInletTempMetric, airIRRP500UnitStatusSupplyAirTempUS=airIRRP500UnitStatusSupplyAirTempUS, airIRRP500UnitStatusSupplyAirTempMetric=airIRRP500UnitStatusSupplyAirTempMetric, airIRRP500UnitStatusReturnAirTempUS=airIRRP500UnitStatusReturnAirTempUS, airIRRP500UnitStatusReturnAirTempMetric=airIRRP500UnitStatusReturnAirTempMetric, airIRRP500UnitStatusSupplyHumidity=airIRRP500UnitStatusSupplyHumidity, airIRRP500UnitStatusReturnHumidity=airIRRP500UnitStatusReturnHumidity, airIRRP500UnitStatusAirFlowUS=airIRRP500UnitStatusAirFlowUS, airIRRP500UnitStatusAirFlowMetric=airIRRP500UnitStatusAirFlowMetric, airIRRP500UnitStatusFanSpeed=airIRRP500UnitStatusFanSpeed, airIRRP500UnitStatusCoolDemand=airIRRP500UnitStatusCoolDemand, airIRRP500UnitStatusCoolOutput=airIRRP500UnitStatusCoolOutput, airIRRP500UnitStatusHumidifyDemand=airIRRP500UnitStatusHumidifyDemand, airIRRP500UnitStatusHumidifyOutput=airIRRP500UnitStatusHumidifyOutput, airIRRP500UnitStatusDehumidifyDemand=airIRRP500UnitStatusDehumidifyDemand, airIRRP500UnitStatusDehumidifyOutput=airIRRP500UnitStatusDehumidifyOutput, airIRRP500UnitStatusReheatDemand=airIRRP500UnitStatusReheatDemand, airIRRP500UnitStatusReheatOutput=airIRRP500UnitStatusReheatOutput, airIRRP500UnitStatusInputState=airIRRP500UnitStatusInputState, airIRRP500UnitStatusOutputState=airIRRP500UnitStatusOutputState, airIRRP500UnitStatusRackInletTemperature1US=airIRRP500UnitStatusRackInletTemperature1US, airIRRP500UnitStatusRackInletTemperature1Metric=airIRRP500UnitStatusRackInletTemperature1Metric, airIRRP500UnitStatusRackInletTemperature2US=airIRRP500UnitStatusRackInletTemperature2US, airIRRP500UnitStatusRackInletTemperature2Metric=airIRRP500UnitStatusRackInletTemperature2Metric, airIRRP500UnitStatusRackInletTemperature3US=airIRRP500UnitStatusRackInletTemperature3US, airIRRP500UnitStatusRackInletTemperature3Metric=airIRRP500UnitStatusRackInletTemperature3Metric, airIRRP500UnitStatusContainmtDPUS=airIRRP500UnitStatusContainmtDPUS, airIRRP500UnitStatusContainmtDPMetric=airIRRP500UnitStatusContainmtDPMetric, airIRRP500UnitStatusFilterDPUS=airIRRP500UnitStatusFilterDPUS, airIRRP500UnitStatusFilterDPMetric=airIRRP500UnitStatusFilterDPMetric, airIRRP500UnitStatusHumidifierCurrent=airIRRP500UnitStatusHumidifierCurrent, airIRRP500UnitStatusHumidifierWaterConductivity=airIRRP500UnitStatusHumidifierWaterConductivity, airIRRP500UnitStatusActivePowerSource=airIRRP500UnitStatusActivePowerSource, airIRRP500UnitStatusFluidValvePosition=airIRRP500UnitStatusFluidValvePosition, airIRRP500UnitStatusFluidFlowUS=airIRRP500UnitStatusFluidFlowUS, airIRRP500UnitStatusFluidFlowMetric=airIRRP500UnitStatusFluidFlowMetric, airIRRP500UnitStatusEnteringFluidTemperatureUS=airIRRP500UnitStatusEnteringFluidTemperatureUS, airIRRP500UnitStatusEnteringFluidTemperatureMetric=airIRRP500UnitStatusEnteringFluidTemperatureMetric, airIRRP500UnitStatusLeavingFluidTemperatureUS=airIRRP500UnitStatusLeavingFluidTemperatureUS, airIRRP500UnitStatusLeavingFluidTemperatureMetric=airIRRP500UnitStatusLeavingFluidTemperatureMetric, airIRRP500UnitRunHours=airIRRP500UnitRunHours, airIRRP500UnitRunHoursAirFilter=airIRRP500UnitRunHoursAirFilter, airIRRP500UnitRunHoursCondensatePump=airIRRP500UnitRunHoursCondensatePump, airIRRP500UnitRunHoursHumidifier=airIRRP500UnitRunHoursHumidifier, airIRRP500UnitRunHoursFan1=airIRRP500UnitRunHoursFan1, airIRRP500UnitRunHoursHeater1=airIRRP500UnitRunHoursHeater1, airIRRP500UnitRunHoursFan2=airIRRP500UnitRunHoursFan2, airIRRP500UnitRunHoursHeater2=airIRRP500UnitRunHoursHeater2, airIRRP500UnitRunHoursFan3=airIRRP500UnitRunHoursFan3, airIRRP500UnitRunHoursHeater3=airIRRP500UnitRunHoursHeater3, airIRRP500UnitServiceIntervals=airIRRP500UnitServiceIntervals, airIRRP500UnitServiceIntervalAirFilter=airIRRP500UnitServiceIntervalAirFilter, airIRRP500UnitServiceIntervalAirFilterAlarm=airIRRP500UnitServiceIntervalAirFilterAlarm, airIRRP500UnitServiceIntervalHumidifier=airIRRP500UnitServiceIntervalHumidifier, airIRRP500UnitServiceIntervalHumidifierAlarm=airIRRP500UnitServiceIntervalHumidifierAlarm, airIRRP500UnitServiceIntervalHeater=airIRRP500UnitServiceIntervalHeater, airIRRP500UnitServiceIntervalHeaterAlarm=airIRRP500UnitServiceIntervalHeaterAlarm, airIRRP500UnitServiceIntervalCondensatePump=airIRRP500UnitServiceIntervalCondensatePump, airIRRP500UnitServiceIntervalCondensatePumpAlarm=airIRRP500UnitServiceIntervalCondensatePumpAlarm, airIRRP500UnitServiceIntervalFans=airIRRP500UnitServiceIntervalFans, airIRRP500UnitServiceIntervalFansAlarm=airIRRP500UnitServiceIntervalFansAlarm, airIRRP500UnitThresholds=airIRRP500UnitThresholds)
mibBuilder.exportSymbols('PowerNet-MIB', airIRRP500UnitThresholdsRackInletHighTempUS=airIRRP500UnitThresholdsRackInletHighTempUS, airIRRP500UnitThresholdsRackInletHighTempMetric=airIRRP500UnitThresholdsRackInletHighTempMetric, airIRRP500UnitThresholdsSupplyAirHighTempUS=airIRRP500UnitThresholdsSupplyAirHighTempUS, airIRRP500UnitThresholdsSupplyAirHighTempMetric=airIRRP500UnitThresholdsSupplyAirHighTempMetric, airIRRP500UnitThresholdsReturnAirHighTempUS=airIRRP500UnitThresholdsReturnAirHighTempUS, airIRRP500UnitThresholdsReturnAirHighTempMetric=airIRRP500UnitThresholdsReturnAirHighTempMetric, airIRRP500UnitThresholdsSupplyHumidityHigh=airIRRP500UnitThresholdsSupplyHumidityHigh, airIRRP500UnitThresholdsSupplyHumidityLow=airIRRP500UnitThresholdsSupplyHumidityLow, airIRRP500UnitThresholdsEnteringFluidHighTempUS=airIRRP500UnitThresholdsEnteringFluidHighTempUS, airIRRP500UnitThresholdsEnteringFluidHighTempMetric=airIRRP500UnitThresholdsEnteringFluidHighTempMetric, airIRRP500UnitConfig=airIRRP500UnitConfig, airIRRP500UnitConfigStartupDelay=airIRRP500UnitConfigStartupDelay, airIRRP500UnitConfigCoolCapacity=airIRRP500UnitConfigCoolCapacity, airIRRP500UnitConfigIdleOnLeakDetect=airIRRP500UnitConfigIdleOnLeakDetect, airIRRP500UnitConfigInputNormalState=airIRRP500UnitConfigInputNormalState, airIRRP500UnitConfigOutputNormalState=airIRRP500UnitConfigOutputNormalState, airIRRP500UnitConfigOutputSource=airIRRP500UnitConfigOutputSource, airIRRP500UnitConfigHumidifyEnable=airIRRP500UnitConfigHumidifyEnable, airIRRP500UnitConfigHumidifierControl=airIRRP500UnitConfigHumidifierControl, airIRRP500UnitConfigDehumidifyEnable=airIRRP500UnitConfigDehumidifyEnable, airIRRP500UnitConfigReheatEnable=airIRRP500UnitConfigReheatEnable, airIRRP500UnitConfigHeatAssistEnable=airIRRP500UnitConfigHeatAssistEnable, airIRSC=airIRSC, airIRSCUnit=airIRSCUnit, airIRSCUnitIdent=airIRSCUnitIdent, airIRSCUnitIdentName=airIRSCUnitIdentName, airIRSCUnitIdentLocation=airIRSCUnitIdentLocation, airIRSCUnitIdentModelNumber=airIRSCUnitIdentModelNumber, airIRSCUnitIdentSerialNumber=airIRSCUnitIdentSerialNumber, airIRSCUnitIdentFirmwareRevision=airIRSCUnitIdentFirmwareRevision, airIRSCUnitIdentHardwareRevision=airIRSCUnitIdentHardwareRevision, airIRSCUnitIdentManufactureDate=airIRSCUnitIdentManufactureDate, airIRSCUnitStatus=airIRSCUnitStatus, airIRSCUnitStatusOperateMode=airIRSCUnitStatusOperateMode, airIRSCUnitStatusCoolOutput=airIRSCUnitStatusCoolOutput, airIRSCUnitStatusCoolDemand=airIRSCUnitStatusCoolDemand, airIRSCUnitStatusAirFlowUS=airIRSCUnitStatusAirFlowUS, airIRSCUnitStatusAirFlowMetric=airIRSCUnitStatusAirFlowMetric, airIRSCUnitStatusRackInletTempUS=airIRSCUnitStatusRackInletTempUS, airIRSCUnitStatusRackInletTempMetric=airIRSCUnitStatusRackInletTempMetric, airIRSCUnitStatusSupplyAirTempUS=airIRSCUnitStatusSupplyAirTempUS, airIRSCUnitStatusSupplyAirTempMetric=airIRSCUnitStatusSupplyAirTempMetric, airIRSCUnitStatusReturnAirTempUS=airIRSCUnitStatusReturnAirTempUS, airIRSCUnitStatusReturnAirTempMetric=airIRSCUnitStatusReturnAirTempMetric, airIRSCUnitStatusSuctionTempUS=airIRSCUnitStatusSuctionTempUS, airIRSCUnitStatusSuctionTempMetric=airIRSCUnitStatusSuctionTempMetric, airIRSCUnitStatusSuperheatTempUS=airIRSCUnitStatusSuperheatTempUS, airIRSCUnitStatusSuperheatTempMetric=airIRSCUnitStatusSuperheatTempMetric, airIRSCUnitStatusContainmtDPUS=airIRSCUnitStatusContainmtDPUS, airIRSCUnitStatusContainmtDPMetric=airIRSCUnitStatusContainmtDPMetric, airIRSCUnitStatusFilterDPUS=airIRSCUnitStatusFilterDPUS, airIRSCUnitStatusFilterDPMetric=airIRSCUnitStatusFilterDPMetric, airIRSCUnitStatusSuctionPressureUS=airIRSCUnitStatusSuctionPressureUS, airIRSCUnitStatusSuctionPressureMetric=airIRSCUnitStatusSuctionPressureMetric, airIRSCUnitStatusDischargePressureUS=airIRSCUnitStatusDischargePressureUS, airIRSCUnitStatusDischargePressureMetric=airIRSCUnitStatusDischargePressureMetric, airIRSCUnitStatusEvaporatorFanSpeed=airIRSCUnitStatusEvaporatorFanSpeed, airIRSCUnitStatusCondenserFanSpeed=airIRSCUnitStatusCondenserFanSpeed, airIRSCUnitStatusInputState=airIRSCUnitStatusInputState, airIRSCUnitStatusOutputState=airIRSCUnitStatusOutputState, airIRSCUnitStatusCondOutletTempUS=airIRSCUnitStatusCondOutletTempUS, airIRSCUnitStatusCondOutletTempMetric=airIRSCUnitStatusCondOutletTempMetric, airIRSCUnitStatusCondInletTempUS=airIRSCUnitStatusCondInletTempUS, airIRSCUnitStatusCondInletTempMetric=airIRSCUnitStatusCondInletTempMetric, airIRSCUnitStatusCompressor=airIRSCUnitStatusCompressor, airIRSCUnitRunHours=airIRSCUnitRunHours, airIRSCUnitRunHoursAirFilter=airIRSCUnitRunHoursAirFilter, airIRSCUnitRunHoursEvaporatorFan1=airIRSCUnitRunHoursEvaporatorFan1, airIRSCUnitRunHoursEvaporatorFan2=airIRSCUnitRunHoursEvaporatorFan2, airIRSCUnitRunHoursEvaporatorFan3=airIRSCUnitRunHoursEvaporatorFan3, airIRSCUnitRunHoursCondenserFan1=airIRSCUnitRunHoursCondenserFan1, airIRSCUnitRunHoursCondenserFan2=airIRSCUnitRunHoursCondenserFan2, airIRSCUnitRunHoursCondenserFan3=airIRSCUnitRunHoursCondenserFan3, airIRSCUnitRunHoursFanPowerSupplyLeft=airIRSCUnitRunHoursFanPowerSupplyLeft, airIRSCUnitRunHoursFanPowerSupplyRight=airIRSCUnitRunHoursFanPowerSupplyRight, airIRSCUnitRunHoursCondensatePump=airIRSCUnitRunHoursCondensatePump, airIRSCUnitRunHoursCompressor=airIRSCUnitRunHoursCompressor, airIRSCUnitServiceIntervals=airIRSCUnitServiceIntervals, airIRSCUnitServiceIntervalsAirFilter=airIRSCUnitServiceIntervalsAirFilter, airIRSCUnitServiceIntervalsAirFilterAlarm=airIRSCUnitServiceIntervalsAirFilterAlarm, airIRSCUnitThresholds=airIRSCUnitThresholds, airIRSCUnitThresholdsRackInletHighTempUS=airIRSCUnitThresholdsRackInletHighTempUS, airIRSCUnitThresholdsRackInletHighTempMetric=airIRSCUnitThresholdsRackInletHighTempMetric, airIRSCUnitThresholdsSupplyAirHighTempUS=airIRSCUnitThresholdsSupplyAirHighTempUS, airIRSCUnitThresholdsSupplyAirHighTempMetric=airIRSCUnitThresholdsSupplyAirHighTempMetric, airIRSCUnitThresholdsReturnAirHighTempUS=airIRSCUnitThresholdsReturnAirHighTempUS, airIRSCUnitThresholdsReturnAirHighTempMetric=airIRSCUnitThresholdsReturnAirHighTempMetric, airIRSCUnitSetpoints=airIRSCUnitSetpoints, airIRSCUnitSetptsCoolSetpointUS=airIRSCUnitSetptsCoolSetpointUS, airIRSCUnitSetptsCoolSetpointMetric=airIRSCUnitSetptsCoolSetpointMetric, airIRSCUnitSetptsCoolDeadbandUS=airIRSCUnitSetptsCoolDeadbandUS, airIRSCUnitSetptsCoolDeadbandMetric=airIRSCUnitSetptsCoolDeadbandMetric, airIRSCUnitSetptsFanSpeedPreference=airIRSCUnitSetptsFanSpeedPreference, airIRSCUnitSetptsSupplyAirSetpointUS=airIRSCUnitSetptsSupplyAirSetpointUS, airIRSCUnitSetptsSupplyAirSetpointMetric=airIRSCUnitSetptsSupplyAirSetpointMetric, airIRSCUnitConfig=airIRSCUnitConfig, airIRSCUnitConfigConfigurationType=airIRSCUnitConfigConfigurationType, airIRSCUnitConfigCapacityControlType=airIRSCUnitConfigCapacityControlType, airIRSCUnitConfigStartupDelay=airIRSCUnitConfigStartupDelay, airIRSCUnitConfigIdleOnLeakDetect=airIRSCUnitConfigIdleOnLeakDetect, airIRSCUnitConfigInputNormalState=airIRSCUnitConfigInputNormalState, airIRSCUnitConfigOutputNormalState=airIRSCUnitConfigOutputNormalState, airIRSCUnitConfigOutputSource=airIRSCUnitConfigOutputSource, airIRSCUnitConfigAltitudeUS=airIRSCUnitConfigAltitudeUS, airIRSCUnitConfigAltitudeMetric=airIRSCUnitConfigAltitudeMetric, airIRSCUnitConfigOpControl=airIRSCUnitConfigOpControl, rARU=rARU, rARUIdent=rARUIdent, rARUIdentTable=rARUIdentTable, rARUIdentEntry=rARUIdentEntry, rARUIdentAruIndex=rARUIdentAruIndex, rARUIdentName=rARUIdentName, rARUConfig=rARUConfig, rARUConfigTable=rARUConfigTable, rARUConfigEntry=rARUConfigEntry, rARUConfigAruIndex=rARUConfigAruIndex, rARUConfigAruName=rARUConfigAruName, rARUConfigAruRemoteSetpoint=rARUConfigAruRemoteSetpoint, rARUConfigAruTempOvrdEnableDisable=rARUConfigAruTempOvrdEnableDisable, rARUConfigAruTempOvrdSetpoint=rARUConfigAruTempOvrdSetpoint, rARUConfigAruMasterControl=rARUConfigAruMasterControl, rARUStatus=rARUStatus, rARUStatusAruDeviceCount=rARUStatusAruDeviceCount, rARUStatusSysTempUnits=rARUStatusSysTempUnits, rARUStatusTable=rARUStatusTable, rARUStatusEntry=rARUStatusEntry, rARUStatusAruIndex=rARUStatusAruIndex)
mibBuilder.exportSymbols('PowerNet-MIB', rARUStatusAruName=rARUStatusAruName, rARUStatusAruRemoteSetpoint=rARUStatusAruRemoteSetpoint, rARUStatusAruManualSetpoint=rARUStatusAruManualSetpoint, rARUStatusAruTemp1=rARUStatusAruTemp1, rARUStatusAruTemp2=rARUStatusAruTemp2, rARUStatusAruTemp3=rARUStatusAruTemp3, rARUStatusAruTempOvrdEnableDisable=rARUStatusAruTempOvrdEnableDisable, rARUStatusAruTempOvrdSetpoint=rARUStatusAruTempOvrdSetpoint, rARUStatusAruAlarmState=rARUStatusAruAlarmState, rARUStatusAruCommStatus=rARUStatusAruCommStatus, rARUStatusAruTempOvrdStatus=rARUStatusAruTempOvrdStatus, rARUStatusAruMasterControl=rARUStatusAruMasterControl, rARUStatusAruTotalAirflow=rARUStatusAruTotalAirflow, rARUFanStatus=rARUFanStatus, rARUFanStatusTable=rARUFanStatusTable, rARUFanStatusEntry=rARUFanStatusEntry, rARUFanStatusAruIndex=rARUFanStatusAruIndex, rARUFanStatusNominalFanSpeed=rARUFanStatusNominalFanSpeed, rARUFanStatusSelectedFanLevel=rARUFanStatusSelectedFanLevel, rARUFanStatusReplacementThreshold=rARUFanStatusReplacementThreshold, rARUFanStatusFanIndex=rARUFanStatusFanIndex, rARUFanStatusFanOperatingStatus=rARUFanStatusFanOperatingStatus, rARUFanStatusFanRpmSpeed=rARUFanStatusFanRpmSpeed, rARUFanStatusFanFlowRate=rARUFanStatusFanFlowRate, rARUFanStatusFanInServiceDate=rARUFanStatusFanInServiceDate, rARUFanStatusFanRunhourCounter=rARUFanStatusFanRunhourCounter, rARUFanStatusFanRunhourReset=rARUFanStatusFanRunhourReset, rARUPower=rARUPower, rARUPowerTable=rARUPowerTable, rARUPowerStatusEntry=rARUPowerStatusEntry, rARUPowerStatusAruIndex=rARUPowerStatusAruIndex, rARUPowerStatusPrimaryAcPresent=rARUPowerStatusPrimaryAcPresent, rARUPowerStatusAuxiliaryAcPresent=rARUPowerStatusAuxiliaryAcPresent, rARUPowerStatusRedundantAcConfig=rARUPowerStatusRedundantAcConfig, rARUSensors=rARUSensors, rARUSensorsStatusTableSize=rARUSensorsStatusTableSize, rARUSensorsStatusTable=rARUSensorsStatusTable, rARUSensorsStatusTableEntry=rARUSensorsStatusTableEntry, rARUSensorsStatusAruIndex=rARUSensorsStatusAruIndex, rARUSensorsStatusSensorNumber=rARUSensorsStatusSensorNumber, rARUSensorsTemperature=rARUSensorsTemperature, rARUSensorsConfigTableSize=rARUSensorsConfigTableSize, rARUSensorsConfigTable=rARUSensorsConfigTable, rARUSensorsConfigTableEntry=rARUSensorsConfigTableEntry, rARUSensorsConfigAruIndex=rARUSensorsConfigAruIndex, rARUSensorsConfigSensorNumber=rARUSensorsConfigSensorNumber, rARUSensorsName=rARUSensorsName, rARUSensorsLocation=rARUSensorsLocation, rARUSensorsTempMaxThresh=rARUSensorsTempMaxThresh, rARUSensorsTempHighThresh=rARUSensorsTempHighThresh, rARUSensorsTempLowThresh=rARUSensorsTempLowThresh, rARUSensorsTempMinThresh=rARUSensorsTempMinThresh, rARUSensorsTempThreshHysteresis=rARUSensorsTempThreshHysteresis, rARUSensorsTempShortDecRateThreshValue=rARUSensorsTempShortDecRateThreshValue, rARUSensorsTempShortDecRateThreshTime=rARUSensorsTempShortDecRateThreshTime, rARUSensorsTempShortIncRateThreshValue=rARUSensorsTempShortIncRateThreshValue, rARUSensorsTempShortIncRateThreshTime=rARUSensorsTempShortIncRateThreshTime, rARUSensorsTempLongDecRateThreshValue=rARUSensorsTempLongDecRateThreshValue, rARUSensorsTempLongDecRateThreshTime=rARUSensorsTempLongDecRateThreshTime, rARUSensorsTempLongIncRateThreshValue=rARUSensorsTempLongIncRateThreshValue, rARUSensorsTempLongIncRateThreshTime=rARUSensorsTempLongIncRateThreshTime, xPDU=xPDU, xPDUIdent=xPDUIdent, xPDUIdentProductName=xPDUIdentProductName, xPDUIdentHardwareRev=xPDUIdentHardwareRev, xPDUIdentFirmwareAppRev=xPDUIdentFirmwareAppRev, xPDUIdentFirmwareAppOSRev=xPDUIdentFirmwareAppOSRev, xPDUIdentFirmwareControllerRev=xPDUIdentFirmwareControllerRev, xPDUIdentDateOfManufacture=xPDUIdentDateOfManufacture, xPDUIdentModelNumber=xPDUIdentModelNumber, xPDUIdentSerialNumber=xPDUIdentSerialNumber, xPDUDevice=xPDUDevice, xPDUDeviceNominalMainInputVoltage=xPDUDeviceNominalMainInputVoltage, xPDUDeviceServiceType=xPDUDeviceServiceType, xPDUDeviceNominalOutputVoltage=xPDUDeviceNominalOutputVoltage, xPDUDeviceMainInputBreakerRating=xPDUDeviceMainInputBreakerRating, xPDUDevicePanelBreakerRating=xPDUDevicePanelBreakerRating, xPDUDeviceTransformerPresent=xPDUDeviceTransformerPresent, xPDUDeviceLoadTieBreakerPresent=xPDUDeviceLoadTieBreakerPresent, xPDUDeviceLoadTestPortPresent=xPDUDeviceLoadTestPortPresent, xPDUDeviceFusesPresent=xPDUDeviceFusesPresent, xPDUDeviceFansPresent=xPDUDeviceFansPresent, xPDUDeviceBypassInputPresent=xPDUDeviceBypassInputPresent, xPDUDeviceCrossTieOutputPresent=xPDUDeviceCrossTieOutputPresent, xPDUDeviceEarthGroundMonitorPresent=xPDUDeviceEarthGroundMonitorPresent, xPDUDeviceInfraXureType=xPDUDeviceInfraXureType, xPDUACMonitoringPoint=xPDUACMonitoringPoint, xPDUMainInput=xPDUMainInput, xPDUMainInputOverVoltThreshold=xPDUMainInputOverVoltThreshold, xPDUMainInputUnderVoltThreshold=xPDUMainInputUnderVoltThreshold, xPDUMainInputVoltageTableSize=xPDUMainInputVoltageTableSize, xPDUMainInputVoltageTable=xPDUMainInputVoltageTable, xPDUMainInputVoltagePhaseEntry=xPDUMainInputVoltagePhaseEntry, xPDUMainInputVoltagePhaseIndex=xPDUMainInputVoltagePhaseIndex, xPDUMainInputVoltageLtoL=xPDUMainInputVoltageLtoL, xPDUMainInputVoltageLtoN=xPDUMainInputVoltageLtoN, xPDUBypassInput=xPDUBypassInput, xPDUBypassInputOverVoltThreshold=xPDUBypassInputOverVoltThreshold, xPDUBypassInputUnderVoltThreshold=xPDUBypassInputUnderVoltThreshold, xPDUBypassInputVoltageTableSize=xPDUBypassInputVoltageTableSize, xPDUBypassInputVoltageTable=xPDUBypassInputVoltageTable, xPDUBypassInputVoltagePhaseEntry=xPDUBypassInputVoltagePhaseEntry, xPDUBypassInputVoltagePhaseIndex=xPDUBypassInputVoltagePhaseIndex, xPDUBypassInputVoltageLtoL=xPDUBypassInputVoltageLtoL, xPDUBypassInputVoltageLtoN=xPDUBypassInputVoltageLtoN, xPDUUPSInput=xPDUUPSInput, xPDUUPSInputVoltageTableSize=xPDUUPSInputVoltageTableSize, xPDUUPSInputVoltageTable=xPDUUPSInputVoltageTable, xPDUUPSInputVoltagePhaseEntry=xPDUUPSInputVoltagePhaseEntry, xPDUUPSInputVoltagePhaseIndex=xPDUUPSInputVoltagePhaseIndex, xPDUUPSInputVoltageLtoNPresent=xPDUUPSInputVoltageLtoNPresent, xPDUSystemOutput=xPDUSystemOutput, xPDUSystemOutputFrequency=xPDUSystemOutputFrequency, xPDUSystemOutputNeutralCurrent=xPDUSystemOutputNeutralCurrent, xPDUSystemOutputTotalPower=xPDUSystemOutputTotalPower, xPDUSystemOutputTotalApparentPower=xPDUSystemOutputTotalApparentPower, xPDUSystemOutputTotalPowerFactor=xPDUSystemOutputTotalPowerFactor, xPDUSystemOutputFrequencyTolerance=xPDUSystemOutputFrequencyTolerance, xPDUSystemOutputMaxKWPower=xPDUSystemOutputMaxKWPower, xPDUSystemOutputOverVoltThreshold=xPDUSystemOutputOverVoltThreshold, xPDUSystemOutputUnderVoltThreshold=xPDUSystemOutputUnderVoltThreshold, xPDUSystemOutputOverCurrentThreshold=xPDUSystemOutputOverCurrentThreshold, xPDUSystemOutputOverCurrentNeutralThreshold=xPDUSystemOutputOverCurrentNeutralThreshold, xPDUSystemOutputUnderCurrentThreshold=xPDUSystemOutputUnderCurrentThreshold, xPDUSystemOutputTableSize=xPDUSystemOutputTableSize, xPDUSystemOutputTable=xPDUSystemOutputTable, xPDUSystemOutputPhaseEntry=xPDUSystemOutputPhaseEntry)
mibBuilder.exportSymbols('PowerNet-MIB', xPDUSystemOutputPhaseIndex=xPDUSystemOutputPhaseIndex, xPDUSystemOutputVoltageLtoL=xPDUSystemOutputVoltageLtoL, xPDUSystemOutputVoltageLtoN=xPDUSystemOutputVoltageLtoN, xPDUSystemOutputPhaseCurrent=xPDUSystemOutputPhaseCurrent, xPDUSystemOutputPower=xPDUSystemOutputPower, xPDUSystemOutputApparentPower=xPDUSystemOutputApparentPower, xPDUSystemOutputPowerFactor=xPDUSystemOutputPowerFactor, xPDUGroundMonitorPoint=xPDUGroundMonitorPoint, xPDUGroundCurrent=xPDUGroundCurrent, xPDUGroundCurrentThreshold=xPDUGroundCurrentThreshold, xPDUCircuitBreakers=xPDUCircuitBreakers, xPDUSystemBreakers=xPDUSystemBreakers, xPDUSystemBreakerTableSize=xPDUSystemBreakerTableSize, xPDUSystemBreakerTable=xPDUSystemBreakerTable, xPDUSystemBreakerTableEntry=xPDUSystemBreakerTableEntry, xPDUSystemBreakerTableIndex=xPDUSystemBreakerTableIndex, xPDUSystemBreakerDescription=xPDUSystemBreakerDescription, xPDUSystemBreakerPosition=xPDUSystemBreakerPosition, xPDUBranchBreakers=xPDUBranchBreakers, xPDUNumOfBranchBreakers=xPDUNumOfBranchBreakers, xPDUBranchBreakerTableSize=xPDUBranchBreakerTableSize, xPDUBranchBreakerTable=xPDUBranchBreakerTable, xPDUBranchBreakerEntry=xPDUBranchBreakerEntry, xPDUBranchBreakerTableIndex=xPDUBranchBreakerTableIndex, xPDUBranchBreakerRating=xPDUBranchBreakerRating, xPDUBranchBreakerRDPFeed=xPDUBranchBreakerRDPFeed, xPDUBranchBreakerTieIndicator=xPDUBranchBreakerTieIndicator, xPDUBranchBreakerCurrent=xPDUBranchBreakerCurrent, xPDUBranchBreakerOverCurrentThreshold=xPDUBranchBreakerOverCurrentThreshold, xPDUBranchBreakerUnderCurrentThreshold=xPDUBranchBreakerUnderCurrentThreshold, xPDUBranchBreakerMaxCurrentThreshold=xPDUBranchBreakerMaxCurrentThreshold, xPDUBranchBreakerMinCurrentThreshold=xPDUBranchBreakerMinCurrentThreshold, xPDUBranchBreakerName=xPDUBranchBreakerName, xPDUBranchBreakerLocation=xPDUBranchBreakerLocation, xPDUInputContacts=xPDUInputContacts, xPDUInputContactNumContacts=xPDUInputContactNumContacts, xPDUInputContactTableSize=xPDUInputContactTableSize, xPDUInputContactTable=xPDUInputContactTable, xPDUInputContactEntry=xPDUInputContactEntry, xPDUInputContactNumber=xPDUInputContactNumber, xPDUInputContactName=xPDUInputContactName, xPDUInputContactNormalState=xPDUInputContactNormalState, xPDUInputContactCurrentState=xPDUInputContactCurrentState, xPDUOutputRelays=xPDUOutputRelays, xPDUOutputRelaysNumRelays=xPDUOutputRelaysNumRelays, xPDUOutputRelaysTableSize=xPDUOutputRelaysTableSize, xPDUOutputRelayTable=xPDUOutputRelayTable, xPDUOutputRelayEntry=xPDUOutputRelayEntry, xPDUOutputRelayNumber=xPDUOutputRelayNumber, xPDUOutputRelayName=xPDUOutputRelayName, xPDUOutputRelayNormalState=xPDUOutputRelayNormalState, xPDUOutputRelayCurrentState=xPDUOutputRelayCurrentState, xPDUMiscGroup=xPDUMiscGroup, xPDUEPOMode=xPDUEPOMode, xPDUTransformTempStatus=xPDUTransformTempStatus, xPDUCoolingFanStatus=xPDUCoolingFanStatus, battMan=battMan, battManIdent=battManIdent, battManIdentProductName=battManIdentProductName, battManIdentHardwareRev=battManIdentHardwareRev, battManIdentFirmwareRev=battManIdentFirmwareRev, battManIdentDateOfManufacture=battManIdentDateOfManufacture, battManIdentModelNumber=battManIdentModelNumber, battManIdentSerialNumber=battManIdentSerialNumber, battManSystemCalib=battManSystemCalib, battManOhmicValueCorrectionFactor=battManOhmicValueCorrectionFactor, battManUnitCalib=battManUnitCalib, battManUnitCalibTableSize=battManUnitCalibTableSize, battManUnitCalibTable=battManUnitCalibTable, battManUnitCalibTableEntry=battManUnitCalibTableEntry, battManUnitCalibIndex=battManUnitCalibIndex, battManUnitSerialNumber=battManUnitSerialNumber, battManBatteryVoltageZeroCalib=battManBatteryVoltageZeroCalib, battManBatteryVoltageSpanCalib=battManBatteryVoltageSpanCalib, battManStringCalib=battManStringCalib, battManStringCalibTableSize=battManStringCalibTableSize, battManStringCalibTable=battManStringCalibTable, battManStringCalibTableEntry=battManStringCalibTableEntry, battManStringCalibIndex=battManStringCalibIndex, battManDCCurrentZeroCalib=battManDCCurrentZeroCalib, battManACCurrentZeroCalib=battManACCurrentZeroCalib, battManProbeRange=battManProbeRange, battManBatteryCalib=battManBatteryCalib, battManString1BatteryCalibTableSize=battManString1BatteryCalibTableSize, battManString1BatteryCalibTable=battManString1BatteryCalibTable, battManString1BatteryCalibTableEntry=battManString1BatteryCalibTableEntry, battManString1BatteryCalibIndex=battManString1BatteryCalibIndex, battManString1BatteryInterTierOhmicValue=battManString1BatteryInterTierOhmicValue, battManString2BatteryCalibTableSize=battManString2BatteryCalibTableSize, battManString2BatteryCalibTable=battManString2BatteryCalibTable, battManString2BatteryCalibTableEntry=battManString2BatteryCalibTableEntry, battManString2BatteryCalibIndex=battManString2BatteryCalibIndex, battManString2BatteryInterTierOhmicValue=battManString2BatteryInterTierOhmicValue, battManConfig=battManConfig, battManConfigApplication=battManConfigApplication, battManConfigBatteryChemistry=battManConfigBatteryChemistry, battManConfigBatteryAHCapacity=battManConfigBatteryAHCapacity, battManConfigNumberofStrings=battManConfigNumberofStrings, battManConfigBatteriesperString=battManConfigBatteriesperString, battManConfigCellsperBattery=battManConfigCellsperBattery, battManConfigMinCellVoltage=battManConfigMinCellVoltage, battManConfigMaxCellVoltage=battManConfigMaxCellVoltage, battManConfigMaxPilotTempF=battManConfigMaxPilotTempF, battManConfigMaxPilotTempC=battManConfigMaxPilotTempC, battManConfigMaxAmbientTempF=battManConfigMaxAmbientTempF, battManConfigMaxAmbientTempC=battManConfigMaxAmbientTempC, battManConfigMinAmbientTempF=battManConfigMinAmbientTempF, battManConfigMinAmbientTempC=battManConfigMinAmbientTempC, battManConfigMaxRippleCurrent=battManConfigMaxRippleCurrent, battManConfigMaxCurrentAcceptanceDeviation=battManConfigMaxCurrentAcceptanceDeviation, battManConfigMonitorWireLength=battManConfigMonitorWireLength, battManConfigDischargeVoltageAlarmLevel=battManConfigDischargeVoltageAlarmLevel, battManConfigAutoAnnunciatorReset=battManConfigAutoAnnunciatorReset, battManConfigSuspendCellVoltage=battManConfigSuspendCellVoltage, battManConfigOhmicTestWaitTime=battManConfigOhmicTestWaitTime, battManConfigNumberOfBoosts=battManConfigNumberOfBoosts, battManAlarm=battManAlarm, battManAlarmManagementController=battManAlarmManagementController, battManAlarmBatteries=battManAlarmBatteries, battManAlarmCharger=battManAlarmCharger, battManAlarmEnvironment=battManAlarmEnvironment, battManSystemStatus=battManSystemStatus, battManSystemAmbientTempC=battManSystemAmbientTempC, battManSystemAmbientTempF=battManSystemAmbientTempF, battManSystemPilotTempC=battManSystemPilotTempC, battManSystemPilotTempF=battManSystemPilotTempF, battManSystemAmbientHighTempAlarm=battManSystemAmbientHighTempAlarm)
mibBuilder.exportSymbols('PowerNet-MIB', battManSystemAmbientLowTempAlarm=battManSystemAmbientLowTempAlarm, battManSystemPilotBatteryHighTempAlarm=battManSystemPilotBatteryHighTempAlarm, battManSystemPilotProbeDisconnected=battManSystemPilotProbeDisconnected, battManSystemAmbientProbeDisconnected=battManSystemAmbientProbeDisconnected, battManSystemConfigurationInvalid=battManSystemConfigurationInvalid, battManSystemSuspendVoltage=battManSystemSuspendVoltage, battManStringStatus=battManStringStatus, battManStringTableSize=battManStringTableSize, battManStringTable=battManStringTable, battManStringTableEntry=battManStringTableEntry, battManStringIndex=battManStringIndex, battManStringCurrent=battManStringCurrent, battManStringRippleCurrent=battManStringRippleCurrent, battManStringChargerHighVoltageAlarm=battManStringChargerHighVoltageAlarm, battManStringChargerLowVoltageAlarm=battManStringChargerLowVoltageAlarm, battManStringCurrentProbeDisconnected=battManStringCurrentProbeDisconnected, battManStringOnBattery=battManStringOnBattery, battManStringHighRippleCurrent=battManStringHighRippleCurrent, battManStringVoltage=battManStringVoltage, battManStringDischargeLess5Seconds=battManStringDischargeLess5Seconds, battManStringDischarge5to10Seconds=battManStringDischarge5to10Seconds, battManStringDischarge10to60Seconds=battManStringDischarge10to60Seconds, battManStringDischargeMore60Seconds=battManStringDischargeMore60Seconds, battManBatteryStatus=battManBatteryStatus, battManString1BatteryTableSize=battManString1BatteryTableSize, battManString1BatteryTable=battManString1BatteryTable, battManString1BatteryTableEntry=battManString1BatteryTableEntry, battManString1BatteryIndex=battManString1BatteryIndex, battManString1BatteryVoltage=battManString1BatteryVoltage, battManString1BatteryLowestVoltage=battManString1BatteryLowestVoltage, battManString1BatteryCellShorted=battManString1BatteryCellShorted, battManString1BatteryOpenFuseOrConnection=battManString1BatteryOpenFuseOrConnection, battManString1BatteryLowCapacity=battManString1BatteryLowCapacity, battManString1BatteryHighOhmicValue=battManString1BatteryHighOhmicValue, battManString1BatteryThermalRunaway=battManString1BatteryThermalRunaway, battManString1BatteryDryout=battManString1BatteryDryout, battManString1BatteryUserHighVoltageAlarm=battManString1BatteryUserHighVoltageAlarm, battManString1BatteryUserLowVoltageAlarm=battManString1BatteryUserLowVoltageAlarm, battManString1BatteryChemHighVoltageAlarm=battManString1BatteryChemHighVoltageAlarm, battManString1BatteryChemLowVoltageAlarm=battManString1BatteryChemLowVoltageAlarm, battManString1BatteryOpenCell=battManString1BatteryOpenCell, battManString2BatteryTableSize=battManString2BatteryTableSize, battManString2BatteryTable=battManString2BatteryTable, battManString2BatteryTableEntry=battManString2BatteryTableEntry, battManString2BatteryIndex=battManString2BatteryIndex, battManString2BatteryVoltage=battManString2BatteryVoltage, battManString2BatteryLowestVoltage=battManString2BatteryLowestVoltage, battManString2BatteryCellShorted=battManString2BatteryCellShorted, battManString2BatteryOpenFuseOrConnection=battManString2BatteryOpenFuseOrConnection, battManString2BatteryLowCapacity=battManString2BatteryLowCapacity, battManString2BatteryHighOhmicValue=battManString2BatteryHighOhmicValue, battManString2BatteryThermalRunaway=battManString2BatteryThermalRunaway, battManString2BatteryDryout=battManString2BatteryDryout, battManString2BatteryUserHighVoltageAlarm=battManString2BatteryUserHighVoltageAlarm, battManString2BatteryUserLowVoltageAlarm=battManString2BatteryUserLowVoltageAlarm, battManString2BatteryChemHighVoltageAlarm=battManString2BatteryChemHighVoltageAlarm, battManString2BatteryChemLowVoltageAlarm=battManString2BatteryChemLowVoltageAlarm, battManString2BatteryOpenCell=battManString2BatteryOpenCell, battManInputContactStatus=battManInputContactStatus, battManInputContactTableSize=battManInputContactTableSize, battManInputContactTable=battManInputContactTable, battManInputContactTableEntry=battManInputContactTableEntry, battManInputContactIndex=battManInputContactIndex, battManInputContactName=battManInputContactName, battManInputContactAlarmState=battManInputContactAlarmState, battManInputContactState=battManInputContactState, battManInputContactNormalState=battManInputContactNormalState, battManInputContactAlarmDelay=battManInputContactAlarmDelay, battManControl=battManControl, battManRemoteAnnunciatorReset=battManRemoteAnnunciatorReset, battManResetChargeCurrentDeviationBenchmark=battManResetChargeCurrentDeviationBenchmark, battManResetLowestDischargeVoltages=battManResetLowestDischargeVoltages, battManResetDischargeCounters=battManResetDischargeCounters, battManTestResults=battManTestResults, battManString1OhmicValueLastDischargeInfo=battManString1OhmicValueLastDischargeInfo, battManString1OhmicValueTableSize=battManString1OhmicValueTableSize, battManString1OhmicValueTable=battManString1OhmicValueTable, battManString1OhmicValueTableEntry=battManString1OhmicValueTableEntry, battManString1OhmicValueIndex=battManString1OhmicValueIndex, battManString1OhmicValueData=battManString1OhmicValueData, battManString1ResponseTestChangeTableSize=battManString1ResponseTestChangeTableSize, battManString1ResponseTestChangeTable=battManString1ResponseTestChangeTable, battManString1ResponseTestChangeTableEntry=battManString1ResponseTestChangeTableEntry, battManString1ResponseTestChangeIndex=battManString1ResponseTestChangeIndex, battManString1ResponseTestChangeData=battManString1ResponseTestChangeData, battManString2OhmicValueLastDischargeInfo=battManString2OhmicValueLastDischargeInfo, battManString2OhmicValueTableSize=battManString2OhmicValueTableSize, battManString2OhmicValueTable=battManString2OhmicValueTable, battManString2OhmicValueTableEntry=battManString2OhmicValueTableEntry, battManString2OhmicValueIndex=battManString2OhmicValueIndex, battManString2OhmicValueData=battManString2OhmicValueData, battManString2ResponseTestChangeTableSize=battManString2ResponseTestChangeTableSize, battManString2ResponseTestChangeTable=battManString2ResponseTestChangeTable, battManString2ResponseTestChangeTableEntry=battManString2ResponseTestChangeTableEntry, battManString2ResponseTestChangeIndex=battManString2ResponseTestChangeIndex, battManString2ResponseTestChangeData=battManString2ResponseTestChangeData, battManUnitStatus=battManUnitStatus, battManUnitStatusTableSize=battManUnitStatusTableSize, battManUnitStatusTable=battManUnitStatusTable, battManUnitStatusTableEntry=battManUnitStatusTableEntry, battManUnitStatusIndex=battManUnitStatusIndex, battManUnitStatusSerialNumber=battManUnitStatusSerialNumber, battManUnitHardwareRev=battManUnitHardwareRev, battManUnitFirmwareRev=battManUnitFirmwareRev, battManUnitCommLoss=battManUnitCommLoss, battManUnitRelayStuck=battManUnitRelayStuck, xATS=xATS, xATSIdent=xATSIdent, xATSIdentProductName=xATSIdentProductName, xATSIdentHardwareRev=xATSIdentHardwareRev, xATSIdentFirmwareAppRev=xATSIdentFirmwareAppRev, xATSIdentFirmwareAppOSRev=xATSIdentFirmwareAppOSRev, xATSIdentFirmwareControllerRev=xATSIdentFirmwareControllerRev, xATSIdentDateOfManufacture=xATSIdentDateOfManufacture, xATSIdentModelNumber=xATSIdentModelNumber, xATSIdentSerialNumber=xATSIdentSerialNumber, xATSDevice=xATSDevice, xATSDeviceServiceType=xATSDeviceServiceType, xATSDeviceNominalVoltage=xATSDeviceNominalVoltage, xATSDeviceNominalFrequency=xATSDeviceNominalFrequency, xATSDeviceTransferSwitchRating=xATSDeviceTransferSwitchRating, xATSDeviceDCBackUpPresent=xATSDeviceDCBackUpPresent, xATSSwitch=xATSSwitch, xATSSwitchStatus=xATSSwitchStatus, xATSSwitchStatusSelectedSource=xATSSwitchStatusSelectedSource, xATSSwitchStatusOperationalMode=xATSSwitchStatusOperationalMode, xATSSwitchStatusAutomaticOperationSwitch=xATSSwitchStatusAutomaticOperationSwitch)
mibBuilder.exportSymbols('PowerNet-MIB', xATSSwitchStatusEngineStartSignal=xATSSwitchStatusEngineStartSignal, xATSSwitchSettings=xATSSwitchSettings, xATSSwitchSettingsLowVoltageTransferPoint=xATSSwitchSettingsLowVoltageTransferPoint, xATSSwitchSettingsHighVoltageTransferPoint=xATSSwitchSettingsHighVoltageTransferPoint, xATSSwitchSettingsMaxFrequencyDeviation=xATSSwitchSettingsMaxFrequencyDeviation, xATSSwitchSettingsMinPhaseBalance=xATSSwitchSettingsMinPhaseBalance, xATSSwitchSettingsNominalRotation=xATSSwitchSettingsNominalRotation, xATSSwitchSettingsAllowClosedTransfer=xATSSwitchSettingsAllowClosedTransfer, xATSSwitchSettingsMaxSyncTime=xATSSwitchSettingsMaxSyncTime, xATSSwitchSettingsNeutralTransferTime=xATSSwitchSettingsNeutralTransferTime, xATSSwitchSettingsClearLatchedAlarms=xATSSwitchSettingsClearLatchedAlarms, xATSSwitchSettingsSetToFactoryDefaults=xATSSwitchSettingsSetToFactoryDefaults, xATSSwitchTimers=xATSSwitchTimers, xATSSwitchTimersTableSize=xATSSwitchTimersTableSize, xATSSwitchTimersTable=xATSSwitchTimersTable, xATSSwitchTimersEntry=xATSSwitchTimersEntry, xATSSwitchTimersIndex=xATSSwitchTimersIndex, xATSSwitchTimersName=xATSSwitchTimersName, xATSSwitchTimersAbort=xATSSwitchTimersAbort, xATSSwitchTimersStatus=xATSSwitchTimersStatus, xATSSwitchTimersRemainingTime=xATSSwitchTimersRemainingTime, xATSSwitchTimersDelaySetting=xATSSwitchTimersDelaySetting, xATSSwitchBlockMap=xATSSwitchBlockMap, xATSSwitchBlockMapTableSize=xATSSwitchBlockMapTableSize, xATSSwitchBlockMapTable=xATSSwitchBlockMapTable, xATSSwitchBlockMapEntry=xATSSwitchBlockMapEntry, xATSSwitchBlockMapIndex=xATSSwitchBlockMapIndex, xATSSwitchBlockMapName=xATSSwitchBlockMapName, xATSSwitchBlockMapStatus=xATSSwitchBlockMapStatus, xATSSwitchBlockMapSetting=xATSSwitchBlockMapSetting, xATSSwitchStatistics=xATSSwitchStatistics, xATSSwitchStatisticsTableSize=xATSSwitchStatisticsTableSize, xATSSwitchStatisticsTable=xATSSwitchStatisticsTable, xATSSwitchStatisticsEntry=xATSSwitchStatisticsEntry, xATSSwitchStatisticsIndex=xATSSwitchStatisticsIndex, xATSSwitchStatisticsName=xATSSwitchStatisticsName, xATSSwitchStatisticsValue=xATSSwitchStatisticsValue, xATSSwitchStatisticsReset=xATSSwitchStatisticsReset, xATSACMonitoringPoint=xATSACMonitoringPoint, xATSSource1=xATSSource1, xATSSource1Name=xATSSource1Name, xATSSource1Position=xATSSource1Position, xATSSource1Frequency=xATSSource1Frequency, xATSSource1Quality=xATSSource1Quality, xATSSource1Rotation=xATSSource1Rotation, xATSSource1TableSize=xATSSource1TableSize, xATSSource1Table=xATSSource1Table, xATSSource1PhaseEntry=xATSSource1PhaseEntry, xATSSource1Index=xATSSource1Index, xATSSource1VoltageLtoL=xATSSource1VoltageLtoL, xATSSource1VoltageLtoN=xATSSource1VoltageLtoN, xATSSource2=xATSSource2, xATSSource2Name=xATSSource2Name, xATSSource2Position=xATSSource2Position, xATSSource2Frequency=xATSSource2Frequency, xATSSource2Quality=xATSSource2Quality, xATSSource2Rotation=xATSSource2Rotation, xATSSource2TableSize=xATSSource2TableSize, xATSSource2Table=xATSSource2Table, xATSSource2PhaseEntry=xATSSource2PhaseEntry, xATSSource2Index=xATSSource2Index, xATSSource2VoltageLtoL=xATSSource2VoltageLtoL, xATSSource2VoltageLtoN=xATSSource2VoltageLtoN, xATSSystemOutput=xATSSystemOutput, xATSSystemOutputFrequency=xATSSystemOutputFrequency, xATSSystemOutputTotalPower=xATSSystemOutputTotalPower, xATSSystemOutputTotalApparentPower=xATSSystemOutputTotalApparentPower, xATSSystemOutputTotalPowerFactor=xATSSystemOutputTotalPowerFactor, xATSSystemOutputFrequencyTolerance=xATSSystemOutputFrequencyTolerance, xATSSystemOutputOverVoltThreshold=xATSSystemOutputOverVoltThreshold, xATSSystemOutputUnderVoltThreshold=xATSSystemOutputUnderVoltThreshold, xATSSystemOutputOverCurrentThreshold=xATSSystemOutputOverCurrentThreshold, xATSSystemOutputUnderCurrentThreshold=xATSSystemOutputUnderCurrentThreshold, xATSSystemOutputAlarmDelayThreshold=xATSSystemOutputAlarmDelayThreshold, xATSSystemOutputTableSize=xATSSystemOutputTableSize, xATSSystemOutputTable=xATSSystemOutputTable, xATSSystemOutputPhaseEntry=xATSSystemOutputPhaseEntry, xATSSystemOutputPhaseIndex=xATSSystemOutputPhaseIndex, xATSSystemOutputVoltageLtoL=xATSSystemOutputVoltageLtoL, xATSSystemOutputVoltageLtoN=xATSSystemOutputVoltageLtoN, xATSSystemOutputPhaseCurrent=xATSSystemOutputPhaseCurrent, xATSSystemOutputPower=xATSSystemOutputPower, xATSSystemOutputApparentPower=xATSSystemOutputApparentPower, xATSSystemOutputPowerFactor=xATSSystemOutputPowerFactor, xATSTesting=xATSTesting, xATSTestingStatus=xATSTestingStatus, xATSTestingStatusSelectTestProcess=xATSTestingStatusSelectTestProcess, xATSTestingStatusTestStatus=xATSTestingStatusTestStatus, xATSTestingStatusProfileWarmupTime=xATSTestingStatusProfileWarmupTime, xATSTestingStatusProfileLoadedTime=xATSTestingStatusProfileLoadedTime, xATSTestingStatusProfileUnloadedTime=xATSTestingStatusProfileUnloadedTime, xATSTestingResults=xATSTestingResults, xATSTestingResultsLastDateOfTest=xATSTestingResultsLastDateOfTest, xATSTestingResultsLastResult=xATSTestingResultsLastResult, xATSTestingResultsTestLastTestTime=xATSTestingResultsTestLastTestTime, xATSTestingResultsLastCrankDuration=xATSTestingResultsLastCrankDuration, xATSTestingResultsLastWarmupDuration=xATSTestingResultsLastWarmupDuration, xATSTestingResultsLastLoadedDuration=xATSTestingResultsLastLoadedDuration, xATSTestingResultsLastUnloadedDuration=xATSTestingResultsLastUnloadedDuration, xATSTestingSchedule=xATSTestingSchedule, xATSTestingScheduleFrequency=xATSTestingScheduleFrequency, xATSTestingScheduleTestDay=xATSTestingScheduleTestDay, xATSTestingScheduleTestTime=xATSTestingScheduleTestTime, xATSTestingScheduleTestWithLoadInterval=xATSTestingScheduleTestWithLoadInterval, xATSTestingScheduleTestWithLoadSelectMonth=xATSTestingScheduleTestWithLoadSelectMonth, xATSTestingScheduleNextTestDate=xATSTestingScheduleNextTestDate, xATSTestingSimulatePowerFail=xATSTestingSimulatePowerFail, xATSTestingSimulatePowerFailTest=xATSTestingSimulatePowerFailTest, xATSTestingSimulatePowerFailTimeRemaining=xATSTestingSimulatePowerFailTimeRemaining, xATSInputContacts=xATSInputContacts, xATSInputContactNumContacts=xATSInputContactNumContacts, xATSInputContactTableSize=xATSInputContactTableSize, xATSInputContactTable=xATSInputContactTable, xATSInputContactEntry=xATSInputContactEntry, xATSInputContactNumber=xATSInputContactNumber, xATSInputContactName=xATSInputContactName, xATSInputContactNormalState=xATSInputContactNormalState, xATSInputContactCurrentState=xATSInputContactCurrentState, xATSOutputRelays=xATSOutputRelays, xATSOutputRelayNumRelays=xATSOutputRelayNumRelays, xATSOutputRelayTableSize=xATSOutputRelayTableSize, xATSOutputRelayTable=xATSOutputRelayTable, xATSOutputRelayEntry=xATSOutputRelayEntry, xATSOutputRelayNumber=xATSOutputRelayNumber, xATSOutputRelayName=xATSOutputRelayName, xATSOutputRelayNormalState=xATSOutputRelayNormalState, xATSOutputRelayCurrentState=xATSOutputRelayCurrentState)
mibBuilder.exportSymbols('PowerNet-MIB', xATSMisc=xATSMisc, generator=generator, xATSGenerator=xATSGenerator, xATSGeneratorIdent=xATSGeneratorIdent, xATSGeneratorIdentModelNumber=xATSGeneratorIdentModelNumber, xATSGeneratorIdentSerialNumber=xATSGeneratorIdentSerialNumber, xATSGeneratorIdentDateofManufacture=xATSGeneratorIdentDateofManufacture, xATSGeneratorIdentVoltageConfiguration=xATSGeneratorIdentVoltageConfiguration, xATSGeneratorIdentMaxPowerRating=xATSGeneratorIdentMaxPowerRating, xATSGeneratorIdentAlternatorFrequency=xATSGeneratorIdentAlternatorFrequency, xATSGeneratorStatus=xATSGeneratorStatus, xATSGeneratorStatusGeneratorName=xATSGeneratorStatusGeneratorName, xATSGeneratorStatusOperational=xATSGeneratorStatusOperational, xATSGeneratorStatusModeSwitchPosition=xATSGeneratorStatusModeSwitchPosition, xATSGeneratorStatusRemoteStart=xATSGeneratorStatusRemoteStart, xATSGeneratorAdvStatus=xATSGeneratorAdvStatus, xATSGeneratorAdvStatusBatteryVoltage=xATSGeneratorAdvStatusBatteryVoltage, xATSGeneratorAdvStatusOilPressure=xATSGeneratorAdvStatusOilPressure, xATSGeneratorAdvStatusCoolantTemperature=xATSGeneratorAdvStatusCoolantTemperature, xATSGeneratorAdvStatusEngineRPM=xATSGeneratorAdvStatusEngineRPM, xATSGeneratorAdvStatusOilLevel=xATSGeneratorAdvStatusOilLevel, xATSGeneratorAdvStatusCoolantLevel=xATSGeneratorAdvStatusCoolantLevel, xATSGeneratorOutput=xATSGeneratorOutput, xATSGeneratorOutputFrequency=xATSGeneratorOutputFrequency, xATSGeneratorOutputTotalPower=xATSGeneratorOutputTotalPower, xATSGeneratorOutputTotalApparentPower=xATSGeneratorOutputTotalApparentPower, xATSGeneratorOutputTotalPowerFactor=xATSGeneratorOutputTotalPowerFactor, xATSGeneratorOutputTableSize=xATSGeneratorOutputTableSize, xATSGeneratorOutputTable=xATSGeneratorOutputTable, xATSGeneratorOutputPhaseEntry=xATSGeneratorOutputPhaseEntry, xATSGeneratorOutputPhaseIndex=xATSGeneratorOutputPhaseIndex, xATSGeneratorOutputVoltageLtoL=xATSGeneratorOutputVoltageLtoL, xATSGeneratorOutputVoltageLtoN=xATSGeneratorOutputVoltageLtoN, xATSGeneratorOutputPhaseCurrent=xATSGeneratorOutputPhaseCurrent, xATSGeneratorOutputPower=xATSGeneratorOutputPower, xATSGeneratorOutputApparentPower=xATSGeneratorOutputApparentPower, xATSGeneratorOutputPowerFactor=xATSGeneratorOutputPowerFactor, xATSGeneratorSettings=xATSGeneratorSettings, xATSGeneratorSettingsVoltageAdjust=xATSGeneratorSettingsVoltageAdjust, xATSGeneratorSettingsFrequencyAdjust=xATSGeneratorSettingsFrequencyAdjust, xATSGeneratorSettingsStartDelay=xATSGeneratorSettingsStartDelay, xATSGeneratorSettingsStopDelay=xATSGeneratorSettingsStopDelay, xATSGeneratorSettingsCrankCycleEnable=xATSGeneratorSettingsCrankCycleEnable, xATSGeneratorSettingsCrankTime=xATSGeneratorSettingsCrankTime, xATSGeneratorSettingsCrankRestTime=xATSGeneratorSettingsCrankRestTime, xATSGeneratorSettingsNumberCrank=xATSGeneratorSettingsNumberCrank, xATSGeneratorSettingsMetricUnit=xATSGeneratorSettingsMetricUnit, xATSGeneratorService=xATSGeneratorService, xATSGeneratorServiceTotalRunHoursLifetime=xATSGeneratorServiceTotalRunHoursLifetime, xATSGeneratorServiceEngineStartsLifetime=xATSGeneratorServiceEngineStartsLifetime, xATSGeneratorServiceTotalkWhLifetime=xATSGeneratorServiceTotalkWhLifetime, xATSGeneratorServiceTotalRunHoursSinceMaintenance=xATSGeneratorServiceTotalRunHoursSinceMaintenance, xATSGeneratorServiceEngineStartsSinceMaintenance=xATSGeneratorServiceEngineStartsSinceMaintenance, xATSGeneratorServiceTotalkWhMaintenance=xATSGeneratorServiceTotalkWhMaintenance, xATSGeneratorServiceResetRecord=xATSGeneratorServiceResetRecord, xATSGeneratorServiceRecordResetDate=xATSGeneratorServiceRecordResetDate, xATSGeneratorServiceNextServiceDate=xATSGeneratorServiceNextServiceDate, xATSGeneratorServiceRunHoursUntilServiceDate=xATSGeneratorServiceRunHoursUntilServiceDate, xATSGeneratorServiceRunHoursThreshold=xATSGeneratorServiceRunHoursThreshold, xATSGeneratorServiceCalendarIntervalThreshold=xATSGeneratorServiceCalendarIntervalThreshold, xATSGeneratorFuelSystem=xATSGeneratorFuelSystem, xATSGeneratorFuelSystemType=xATSGeneratorFuelSystemType, xATSGeneratorFuelSystemTankSize=xATSGeneratorFuelSystemTankSize, xATSGeneratorFuelSystemFuelLevel=xATSGeneratorFuelSystemFuelLevel, xATSGeneratorFuelSystemRuntimePower=xATSGeneratorFuelSystemRuntimePower, xATSGeneratorFuelSystemEstimatedRunTime=xATSGeneratorFuelSystemEstimatedRunTime, xATSGeneratorFuelSystemLowRunTimeThreshold=xATSGeneratorFuelSystemLowRunTimeThreshold, xATSGeneratorFuelSystemVeryLowRunTimeThreshold=xATSGeneratorFuelSystemVeryLowRunTimeThreshold, xATSGeneratorFuelSystemLowFuelLevelThreshold=xATSGeneratorFuelSystemLowFuelLevelThreshold, xATSGeneratorFuelSystemVeryLowFuelLevelThreshold=xATSGeneratorFuelSystemVeryLowFuelLevelThreshold, consolePortServer=consolePortServer, cpsAP930x=cpsAP930x, cpsAP930xSys=cpsAP930xSys, apCPSpname=apCPSpname, apCPSversion=apCPSversion, apCPSPower=apCPSPower, apCPSPwNum=apCPSPwNum, apCPSPw1=apCPSPw1, apCPSPw2=apCPSPw2, apCPSPcmcia=apCPSPcmcia, apCPSNPcmcia=apCPSNPcmcia, cpsCardIdentTable=cpsCardIdentTable, cpsCardIdentEntry=cpsCardIdentEntry, cpsCardIdentIndex=cpsCardIdentIndex, cpsCardIdentProd=cpsCardIdentProd, cpsCardIdentMan=cpsCardIdentMan, cpsCardIdentFunc=cpsCardIdentFunc, cpsCardIdentPCI=cpsCardIdentPCI, cpsCardConfTable=cpsCardConfTable, cpsCardConfEntry=cpsCardConfEntry, cpsCardConfIndex=cpsCardConfIndex, cpsCardConfPower=cpsCardConfPower, cpsCardConfType=cpsCardConfType, cpsCardConfInter=cpsCardConfInter, cpsCardConfFunc=cpsCardConfFunc, cpsCardConfCardv=cpsCardConfCardv, cpsCardConfPort1=cpsCardConfPort1, cpsCardConfPort2=cpsCardConfPort2, cpsCardStatusTable=cpsCardStatusTable, cpsCardStatusEntry=cpsCardStatusEntry, cpsCardStatusIndex=cpsCardStatusIndex, cpsCardStatusCard=cpsCardStatusCard, cpsCardStatusFunc=cpsCardStatusFunc, apCPSFlashSize=apCPSFlashSize, apCPSRAMSize=apCPSRAMSize, apCPSCPUfreq=apCPSCPUfreq, apCPSDevId=apCPSDevId, cpsAP930xConf=cpsAP930xConf, cpsHostName=cpsHostName, cpsConsoleBanner=cpsConsoleBanner, cpsMotd=cpsMotd, cpsEthItf=cpsEthItf, cpsEthDhcpc=cpsEthDhcpc, cpsEthIPaddr=cpsEthIPaddr, cpsEthIPmask=cpsEthIPmask, cpsEthMTU=cpsEthMTU, cpsEthIPaddr2=cpsEthIPaddr2, cpsEthIPmask2=cpsEthIPmask2, cpsNameService=cpsNameService, cpsResolverOrder=cpsResolverOrder, cpsMultipleIP=cpsMultipleIP, cpsDNSserv=cpsDNSserv, cpsDNSpriserv=cpsDNSpriserv, cpsDNSsecserv=cpsDNSsecserv, cpsDNSdomain=cpsDNSdomain, cpsSerialPortConf=cpsSerialPortConf, cpsSerialGlobal=cpsSerialGlobal)
mibBuilder.exportSymbols('PowerNet-MIB', cpsSerialInclude=cpsSerialInclude, cpsSerialNFS=cpsSerialNFS, cpsSerialLockDir=cpsSerialLockDir, cpsSerialRlogin=cpsSerialRlogin, cpsSerialPppd=cpsSerialPppd, cpsSerialTelnet=cpsSerialTelnet, cpsSerialSsh=cpsSerialSsh, cpsSerialLocalLogins=cpsSerialLocalLogins, cpsSerialFacility=cpsSerialFacility, cpsSerialDBFacility=cpsSerialDBFacility, cpsSerialGroupTable=cpsSerialGroupTable, cpsgroupEntry=cpsgroupEntry, cpsGroupIndex=cpsGroupIndex, cpsGroupName=cpsGroupName, cpsGroupUsers=cpsGroupUsers, cpsSerialSpec=cpsSerialSpec, cpsSerialPortTable=cpsSerialPortTable, cpssportEntry=cpssportEntry, cpsSPortNumber=cpsSPortNumber, cpsSPortTty=cpsSPortTty, cpsSPortName=cpsSPortName, cpsSPortSpeed=cpsSPortSpeed, cpsSPortDataSize=cpsSPortDataSize, cpsSPortStopBits=cpsSPortStopBits, cpsSPortParity=cpsSPortParity, cpsSPortFlowCtrl=cpsSPortFlowCtrl, cpsSPortDTRdelay=cpsSPortDTRdelay, cpsSPortDCDCtrl=cpsSPortDCDCtrl, cpsSPortLogUtmp=cpsSPortLogUtmp, cpsSPortLogWtmp=cpsSPortLogWtmp, cpsSPortLogform=cpsSPortLogform, cpsSPortAuthtype=cpsSPortAuthtype, cpsSPortAuthSrv1=cpsSPortAuthSrv1, cpsSPortAccSrv1=cpsSPortAccSrv1, cpsSPortAuthTmo=cpsSPortAuthTmo, cpsSPortAuthRetr=cpsSPortAuthRetr, cpsSPortAuthSrv2=cpsSPortAuthSrv2, cpsSPortAccSrv2=cpsSPortAccSrv2, cpsSPortAuthSecret=cpsSPortAuthSecret, cpsSPortAuthRadP=cpsSPortAuthRadP, cpsSPortAuthAcc=cpsSPortAuthAcc, cpsSPortProtocol=cpsSPortProtocol, cpsSPortRemoteIP=cpsSPortRemoteIP, cpsSPortSocketPort=cpsSPortSocketPort, cpsSPortRemHost=cpsSPortRemHost, cpsSPortBanner=cpsSPortBanner, cpsSPortPrompt=cpsSPortPrompt, cpsSPortTermType=cpsSPortTermType, cpsSPortAutomUsr=cpsSPortAutomUsr, cpsSPortNetMask=cpsSPortNetMask, cpsSPortPppMtu=cpsSPortPppMtu, cpsSPortPppMru=cpsSPortPppMru, cpsSPortPppOptions=cpsSPortPppOptions, cpsSPortPppFoption=cpsSPortPppFoption, cpsSPortModemChat=cpsSPortModemChat, cpsSPortSttyCmd=cpsSPortSttyCmd, cpsSPortSockTx=cpsSPortSockTx, cpsSPortSockPoll=cpsSPortSockPoll, cpsSPortSockIdle=cpsSPortSockIdle, cpsSPortDBsize=cpsSPortDBsize, cpsSPortDBtime=cpsSPortDBtime, cpsSPortDBmode=cpsSPortDBmode, cpsSPortDBsyslog=cpsSPortDBsyslog, cpsSPortDBmenu=cpsSPortDBmenu, cpsSPortDBalarm=cpsSPortDBalarm, cpsSPortSSHbreak=cpsSPortSSHbreak, cpsSPortSniffSess=cpsSPortSniffSess, cpsSPortSniffAdm=cpsSPortSniffAdm, cpsSPortSniffEsc=cpsSPortSniffEsc, cpsSPortSniffMsess=cpsSPortSniffMsess, cpsSPortTelnetMode=cpsSPortTelnetMode, cpsSPortSysBufSess=cpsSPortSysBufSess, cpsSPortLFSuppress=cpsSPortLFSuppress, cpsSPortAutoInput=cpsSPortAutoInput, cpsSPortAutoOutput=cpsSPortAutoOutput, cpsSPortBreakInterval=cpsSPortBreakInterval, cpsAP930xInfo=cpsAP930xInfo, cpsInfoSerialTable=cpsInfoSerialTable, cpsisPortEntry=cpsisPortEntry, cpsISPortNumber=cpsISPortNumber, cpsISPortTty=cpsISPortTty, cpsISPortName=cpsISPortName, cpsISPortSpeed=cpsISPortSpeed, cpsISPortTxBytes=cpsISPortTxBytes, cpsISPortRXBytes=cpsISPortRXBytes, cpsISPortErrFrame=cpsISPortErrFrame, cpsISPortErrParity=cpsISPortErrParity, cpsISPortErrBreaks=cpsISPortErrBreaks, cpsISPortErrOverrun=cpsISPortErrOverrun, cpsISPortSigDTR=cpsISPortSigDTR, cpsISPortSigCD=cpsISPortSigCD, cpsISPortSigDSR=cpsISPortSigDSR, cpsISPortSigRTS=cpsISPortSigRTS, cpsISPortSigCTS=cpsISPortSigCTS, cpsISPortSigRI=cpsISPortSigRI, cpsAP930xAdm=cpsAP930xAdm, apCPSSave=apCPSSave, apCPSSerialHUP=apCPSSerialHUP, accessControl=accessControl, accessPX=accessPX, accessPXIdent=accessPXIdent, accessPXIdentAlarmStatus=accessPXIdentAlarmStatus, accessPXIdentProductNumber=accessPXIdentProductNumber, accessPXIdentHardwareRev=accessPXIdentHardwareRev, accessPXIdentDateOfManufacture=accessPXIdentDateOfManufacture, accessPXIdentSerialNumber=accessPXIdentSerialNumber, accessPXConfig=accessPXConfig, accessPXConfigCardReaderEnableDisableAction=accessPXConfigCardReaderEnableDisableAction, accessPXConfigAutoRelockTime=accessPXConfigAutoRelockTime, accessPXConfigCardFormat=accessPXConfigCardFormat, accessPXConfigFront=accessPXConfigFront, accessPXConfigFrontDoorLockControl=accessPXConfigFrontDoorLockControl, accessPXConfigFrontDoorMaxOpenTime=accessPXConfigFrontDoorMaxOpenTime, accessPXStatusFront=accessPXStatusFront, accessPXStatusFrontDoorLock=accessPXStatusFrontDoorLock, accessPXStatusFrontDoor=accessPXStatusFrontDoor, accessPXStatusFrontDoorHandle=accessPXStatusFrontDoorHandle, accessPXStatusFrontDoorMaxOpenTime=accessPXStatusFrontDoorMaxOpenTime, accessPXStatusFrontDoorAlarmStatus=accessPXStatusFrontDoorAlarmStatus, accessPXConfigRear=accessPXConfigRear, accessPXConfigRearDoorLockControl=accessPXConfigRearDoorLockControl, accessPXConfigRearDoorMaxOpenTime=accessPXConfigRearDoorMaxOpenTime, accessPXStatusRear=accessPXStatusRear, accessPXStatusRearDoorLock=accessPXStatusRearDoorLock, accessPXStatusRearDoor=accessPXStatusRearDoor, accessPXStatusRearDoorHandle=accessPXStatusRearDoorHandle, accessPXStatusRearDoorMaxOpenTime=accessPXStatusRearDoorMaxOpenTime)
mibBuilder.exportSymbols('PowerNet-MIB', accessPXStatusRearDoorAlarmStatus=accessPXStatusRearDoorAlarmStatus, accessPXConfigBeacon=accessPXConfigBeacon, accessPXConfigBeaconName=accessPXConfigBeaconName, accessPXConfigBeaconLocation=accessPXConfigBeaconLocation, accessPXConfigBeaconAction=accessPXConfigBeaconAction, accessPXStatusBeacon=accessPXStatusBeacon, accessPXStatusBeaconName=accessPXStatusBeaconName, accessPXStatusBeaconLocation=accessPXStatusBeaconLocation, accessPXStatusBeaconCurrentState=accessPXStatusBeaconCurrentState, apcLocalDisplay=apcLocalDisplay, apcLocalDisplayIdent=apcLocalDisplayIdent, apcLocalDisplayIdentDisplayType=apcLocalDisplayIdentDisplayType, apcLocalDisplayIdentModelNumber=apcLocalDisplayIdentModelNumber, apcLocalDisplayIdentFirmwareRev=apcLocalDisplayIdentFirmwareRev, apcLocalDisplayIdentOptions=apcLocalDisplayIdentOptions, apcLocalDisplayIdentDateOfManufacture=apcLocalDisplayIdentDateOfManufacture, apcLocalDisplayIdentSerialNumber=apcLocalDisplayIdentSerialNumber, apcLocalDisplayConfig=apcLocalDisplayConfig, apcLocalDisplayConfigAlarmBeeper=apcLocalDisplayConfigAlarmBeeper, apcLocalDisplayConfigBeeperVolume=apcLocalDisplayConfigBeeperVolume, apcLocalDisplayConfigCheckLogIndicator=apcLocalDisplayConfigCheckLogIndicator, apcLocalDisplayConfigKeyClick=apcLocalDisplayConfigKeyClick, apcLocalDisplayConfigContrast=apcLocalDisplayConfigContrast, software=software, powerNetSubAgent=powerNetSubAgent, powerNetSoftwareSystem=powerNetSoftwareSystem, powerNetSoftwareSystemDescription=powerNetSoftwareSystemDescription, powerNetSoftwareOid=powerNetSoftwareOid, powerNetSoftwareSystemUpTime=powerNetSoftwareSystemUpTime, powerNetSoftwareConfig=powerNetSoftwareConfig, powerNetSoftwareTableSize=powerNetSoftwareTableSize, powerNetSoftwareTable=powerNetSoftwareTable, powerNetSoftwareEntry=powerNetSoftwareEntry, moduleNumber=moduleNumber, moduleName=moduleName, moduleVersion=moduleVersion, moduleDate=moduleDate, system=system, backUPS=backUPS, smartUPS=smartUPS, smartUPS250=smartUPS250, smartUPS400=smartUPS400, smartUPS600=smartUPS600, smartUPS900=smartUPS900, smartUPS1250=smartUPS1250, smartUPS2000=smartUPS2000, smartUPS450=smartUPS450, smartUPS700=smartUPS700, smartUPS1000=smartUPS1000, smartUPS1400=smartUPS1400, smartUPS2200=smartUPS2200, smartUPS3000=smartUPS3000, smartUPS5000=smartUPS5000, smartUPS7500=smartUPS7500, smartUPS10000=smartUPS10000, smartUPS1500=smartUPS1500, smartUPS3000DSP=smartUPS3000DSP, smartUPS5000DSP=smartUPS5000DSP, smartUPS8000=smartUPS8000, matrixUPS=matrixUPS, matrixUPS3000=matrixUPS3000, matrixUPS5000=matrixUPS5000, masterSwitch=masterSwitch, masterSwitchV1=masterSwitchV1, masterSwitchV2=masterSwitchV2, masterSwitchVM=masterSwitchVM, masterSwitchMSP=masterSwitchMSP, masterSwitchrPDU=masterSwitchrPDU, symmetraUPS=symmetraUPS, symmetraUPS4kVA=symmetraUPS4kVA, symmetraUPS8kVA=symmetraUPS8kVA, symmetraUPS12kVA=symmetraUPS12kVA, symmetraUPS16kVA=symmetraUPS16kVA, dp100E=dp100E, dp300E=dp300E, monitors=monitors, environmental=environmental, environmentalMgtSystem=environmentalMgtSystem, emu2=emu2, mem=mem, redundantSwitch=redundantSwitch, dcPower=dcPower, dm3=dm3, dcmim2=dcmim2, automaticXferSwitch=automaticXferSwitch, netLock=netLock, symmetra3PhaseUPS=symmetra3PhaseUPS, symmetra3PhaseUPS40kVA=symmetra3PhaseUPS40kVA, symmetra3PhaseUPS60kVA=symmetra3PhaseUPS60kVA, symmetra3PhaseUPS80kVA=symmetra3PhaseUPS80kVA, symmetra3PhaseUPS20kVA=symmetra3PhaseUPS20kVA, networkAir=networkAir, airFMSeries=airFMSeries, rackAirRemovalUnit=rackAirRemovalUnit, airPASeries=airPASeries, airIRSC100Series=airIRSC100Series, airIRRC100Series=airIRRC100Series, airIRRP100Series=airIRRP100Series, airIRRP500Series=airIRRP500Series, infraXurePDU=infraXurePDU, ais5000UPS=ais5000UPS, ais5000UPS10kVA=ais5000UPS10kVA, ais5000UPS20kVA=ais5000UPS20kVA, ais5000UPS30kVA=ais5000UPS30kVA, ais5000UPS40kVA=ais5000UPS40kVA, ais5000UPS60kVA=ais5000UPS60kVA, ais5000UPS80kVA=ais5000UPS80kVA, ais5000UPS100kVA=ais5000UPS100kVA, smartUPS3Phase=smartUPS3Phase, smartUPS3Phase10kVA=smartUPS3Phase10kVA, smartUPS3Phase15kVA=smartUPS3Phase15kVA, smartUPS3Phase20kVA=smartUPS3Phase20kVA, smartUPS3Phase30kVA=smartUPS3Phase30kVA, smartUPS3Phase40kVA=smartUPS3Phase40kVA, battManager=battManager, infraXureATS=infraXureATS, conPortServ=conPortServ, conPortServAP930x=conPortServAP930x, gutor=gutor, gutorPEW=gutorPEW, gutorPDW=gutorPDW, gutorWEW=gutorWEW, gutorWDW=gutorWDW, gutorSDC=gutorSDC, accControl=accControl, accPX=accPX, experimental=experimental)
mibBuilder.exportSymbols('PowerNet-MIB', apcmgmt=apcmgmt, mconfig=mconfig, mconfigNumTrapReceivers=mconfigNumTrapReceivers, mconfigTrapReceiverTable=mconfigTrapReceiverTable, mconfigTrapReceiverEntry=mconfigTrapReceiverEntry, trapIndex=trapIndex, receiverAddr=receiverAddr, communityString=communityString, severity=severity, acceptThisReceiver=acceptThisReceiver, receiveTrapType=receiveTrapType, mconfigBOOTPEnabled=mconfigBOOTPEnabled, mconfigTFTPServerIP=mconfigTFTPServerIP, newCodeAuthentViaTFTP=newCodeAuthentViaTFTP, mconfigClock=mconfigClock, mconfigClockDate=mconfigClockDate, mconfigClockTime=mconfigClockTime, mcontrol=mcontrol, mcontrolRestartAgent=mcontrolRestartAgent, mtrapargs=mtrapargs, mtrapargsInteger=mtrapargsInteger, mtrapargsIpAddress=mtrapargsIpAddress, mtrapargsString=mtrapargsString, mtrapargsGauge=mtrapargsGauge, mtrapargsTimeTicks=mtrapargsTimeTicks, mtrapargsInteger02=mtrapargsInteger02, mtrapargsInteger03=mtrapargsInteger03, mtrapargsIpAddress02=mtrapargsIpAddress02, mtrapargsIpAddress03=mtrapargsIpAddress03, mtrapargsString02=mtrapargsString02, mtrapargsString03=mtrapargsString03, mtrapargsGauge02=mtrapargsGauge02, mtrapargsGauge03=mtrapargsGauge03, mtrapargsTimeTicks02=mtrapargsTimeTicks02, mtrapargsTimeTicks03=mtrapargsTimeTicks03, mtrapargsString04=mtrapargsString04, mtrapargsString05=mtrapargsString05, mtrapargsInteger04=mtrapargsInteger04, mtrapargsInteger05=mtrapargsInteger05, mfiletransfer=mfiletransfer, mfiletransferStatus=mfiletransferStatus, mfiletransferStatusLastTransferResult=mfiletransferStatusLastTransferResult, mfiletransferConfig=mfiletransferConfig, mfiletransferConfigSettings=mfiletransferConfigSettings, mfiletransferConfigSettingsFilename=mfiletransferConfigSettingsFilename, mfiletransferConfigTFTP=mfiletransferConfigTFTP, mfiletransferConfigTFTPServerAddress=mfiletransferConfigTFTPServerAddress, mfiletransferConfigFTP=mfiletransferConfigFTP, mfiletransferConfigFTPServerAddress=mfiletransferConfigFTPServerAddress, mfiletransferConfigFTPServerUser=mfiletransferConfigFTPServerUser, mfiletransferConfigFTPServerPassword=mfiletransferConfigFTPServerPassword, mfiletransferControl=mfiletransferControl, mfiletransferControlInitiateFileTransfer=mfiletransferControlInitiateFileTransfer)

# Notifications
mibBuilder.exportSymbols('PowerNet-MIB', apcEnvSensorConnected=apcEnvSensorConnected, emsCommunicationLost=emsCommunicationLost, aruFanPoorPerformanceAlarm=aruFanPoorPerformanceAlarm, apcOutputShortCircuitCleared=apcOutputShortCircuitCleared, upsDischarged=upsDischarged, xATSOutputVoltageLowAlarm=xATSOutputVoltageLowAlarm, apcEnvSTDecTempRateViolation=apcEnvSTDecTempRateViolation, xATSGeneratorHighACVEventCleared=xATSGeneratorHighACVEventCleared, xPDUSystemInUPSOperationalMode=xPDUSystemInUPSOperationalMode, apcEnvLTDecTempRateViolation=apcEnvLTDecTempRateViolation, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, envLowHumidityThresholdViolationCleared=envLowHumidityThresholdViolationCleared, apcRegisteredUserAccessDenied=apcRegisteredUserAccessDenied, pduCircuitPanelInputUndervoltageCleared=pduCircuitPanelInputUndervoltageCleared, emsProbeDisconnected=emsProbeDisconnected, xPDUBypassVoltageHighAlarm=xPDUBypassVoltageHighAlarm, msvmCommunicationLost=msvmCommunicationLost, rPDUBankPhaseNearOverload=rPDUBankPhaseNearOverload, dcInputRelayOn=dcInputRelayOn, smartBoostOn=smartBoostOn, envHighHumidityThresholdViolationCleared=envHighHumidityThresholdViolationCleared, ceSevereConditionCleared=ceSevereConditionCleared, emsAlinkPowerOverload=emsAlinkPowerOverload, xPDUOutputVoltageLowAlarmCleared=xPDUOutputVoltageLowAlarmCleared, userModified=userModified, xATSEpoArmed=xATSEpoArmed, apcDeviceConnected=apcDeviceConnected, apcInformationalDiscreteInputContactStateNormal=apcInformationalDiscreteInputContactStateNormal, smartRelayFaultCleared=smartRelayFaultCleared, pduUtilityLineOvervoltage=pduUtilityLineOvervoltage, bmsInformationalCondition=bmsInformationalCondition, pduContactFaultCleared=pduContactFaultCleared, dcPINChanged=dcPINChanged, envSTDecTempRateViolationCleared=envSTDecTempRateViolationCleared, apcDeviceConfigChange=apcDeviceConfigChange, mspOutletConfigChange=mspOutletConfigChange, emsBeaconDisconnected=emsBeaconDisconnected, emsMajorAlarmCleared=emsMajorAlarmCleared, xPDUBreakerPositionAlarm=xPDUBreakerPositionAlarm, xPDUBranchCurrentMinAlarmCleared=xPDUBranchCurrentMinAlarmCleared, apcEnvSTIncTempRateViolationCleared=apcEnvSTIncTempRateViolationCleared, rPDUBankPhaseNearOverloadCleared=rPDUBankPhaseNearOverloadCleared, upsOutputSwitchOpened=upsOutputSwitchOpened, xATSDataCommMismatchErrorCleared=xATSDataCommMismatchErrorCleared, apcEnvHighTempThresholdViolationCleared=apcEnvHighTempThresholdViolationCleared, msvmNearOverload=msvmNearOverload, emsMinorAlarm=emsMinorAlarm, dcFanFailAlarm=dcFanFailAlarm, xATSDoorOpenAlarm=xATSDoorOpenAlarm, rsCommunicationEstablished=rsCommunicationEstablished, bmsInformationalConditionCleared=bmsInformationalConditionCleared, apcUnregisteredUserAccessDenied=apcUnregisteredUserAccessDenied, rPDUCancelPendingCommand=rPDUCancelPendingCommand, apcRegisteredUserAccessChange=apcRegisteredUserAccessChange, outletOff=outletOff, xATSOutputLoadPoweredByGeneratorAlarmCleared=xATSOutputLoadPoweredByGeneratorAlarmCleared, xATSGeneratorLowCoolantLevelAlarm=xATSGeneratorLowCoolantLevelAlarm, xATSGeneratorShutdown=xATSGeneratorShutdown, apcEnvLTDecTempRateViolationCleared=apcEnvLTDecTempRateViolationCleared, xPDUFuseBlownAlarm=xPDUFuseBlownAlarm, upsOutputSwitchClosed=upsOutputSwitchClosed, temperatureThresholdViolation2=temperatureThresholdViolation2, xATSGeneratorLowACVEventCleared=xATSGeneratorLowACVEventCleared, temperatureThresholdViolation1=temperatureThresholdViolation1, bmsCriticalCondition=bmsCriticalCondition, xATSGenCommEstablished=xATSGenCommEstablished, smwCriticalCondition=smwCriticalCondition, envMinTempThresholdViolationCleared=envMinTempThresholdViolationCleared, returnFromLowBattery=returnFromLowBattery, mupsCommunicationLost=mupsCommunicationLost, rPDUCommunicationEstablished=rPDUCommunicationEstablished, emsMajorAlarm=emsMajorAlarm, hardwareFailureBypass=hardwareFailureBypass, apcWarningDiscreteInputContactStateAbnormal=apcWarningDiscreteInputContactStateAbnormal, upsBypassRelayFaultCleared=upsBypassRelayFaultCleared, xATSNeutralPosition=xATSNeutralPosition, xPDUBranchCurrentHighAlarmCleared=xPDUBranchCurrentHighAlarmCleared, pduOnBatteryMode=pduOnBatteryMode, apcOutputRelayStateAbnormal=apcOutputRelayStateAbnormal, emsBeaconOff=emsBeaconOff, emsAlinkPowerOverloadCleared=emsAlinkPowerOverloadCleared, dcBBCommunicationLost=dcBBCommunicationLost, msvmLowLoadCleared=msvmLowLoadCleared, generalDeviceEvent=generalDeviceEvent, msvmDeviceConfigChange=msvmDeviceConfigChange, xPDUSystemStateAlarmCleared=xPDUSystemStateAlarmCleared, xATSGeneratorGenericEventCleared=xATSGeneratorGenericEventCleared, apcBeaconDisconnected=apcBeaconDisconnected, apcEnvLowHumidityThresholdViolation=apcEnvLowHumidityThresholdViolation, humidityThresholdViolation1=humidityThresholdViolation1, humidityThresholdViolation2=humidityThresholdViolation2, xATSInternalATSFault=xATSInternalATSFault, atsOverCurrentCleared=atsOverCurrentCleared, xPDUBranchCurrentLowAlarmCleared=xPDUBranchCurrentLowAlarmCleared, apcAnalogInputHighThresholdViolation=apcAnalogInputHighThresholdViolation, apcEnvMaxHumidityThresholdViolationCleared=apcEnvMaxHumidityThresholdViolationCleared, xATSGeneratorHighACVEvent=xATSGeneratorHighACVEvent, passwordChange=passwordChange, xATSEngineStopAsserted=xATSEngineStopAsserted, envMaxTempThresholdViolationCleared=envMaxTempThresholdViolationCleared, userAdded=userAdded, xATSGenCommLost=xATSGenCommLost, emsSensorDisconnected=emsSensorDisconnected, pduCommunicationEstablished=pduCommunicationEstablished, apcKeyOverrideUnlocked=apcKeyOverrideUnlocked, emsInputContactStateNormal=emsInputContactStateNormal, pduNoPanelFeedMode=pduNoPanelFeedMode, pduContactFault=pduContactFault, rPDUPowerSupply2Fail=rPDUPowerSupply2Fail, envSTDecTempRateViolation=envSTDecTempRateViolation, bmBatManEnvironmentAlarmCleared=bmBatManEnvironmentAlarmCleared, dcHumidityAlarm=dcHumidityAlarm, mspCommunicationEstablished=mspCommunicationEstablished, xATSEpoTestMode=xATSEpoTestMode, xPDUInternalCommErrorCleared=xPDUInternalCommErrorCleared, rmPDUCommunicationLost=rmPDUCommunicationLost, pduGroundOvercurrentCleared=pduGroundOvercurrentCleared, xATSGeneratorLowRunTimeAlarmCleared=xATSGeneratorLowRunTimeAlarmCleared, xPDUInputVoltageHighAlarmCleared=xPDUInputVoltageHighAlarmCleared, xATSInputContactStateNormal=xATSInputContactStateNormal, rPDUCommunicationLost=rPDUCommunicationLost, dcOutputRelayOff=dcOutputRelayOff, xATSGeneratorVeryLowFuelLevelAlarmCleared=xATSGeneratorVeryLowFuelLevelAlarmCleared, bmBatManChargerAlarmCleared=bmBatManChargerAlarmCleared, xPDUOutputNeutralCurrentHighAlarmCleared=xPDUOutputNeutralCurrentHighAlarmCleared, apcEnvSensorDisconnected=apcEnvSensorDisconnected)
mibBuilder.exportSymbols('PowerNet-MIB', communicationLost=communicationLost, apcEnvMinHumidityThresholdViolationCleared=apcEnvMinHumidityThresholdViolationCleared, externalSwitchGearOpened=externalSwitchGearOpened, msvmOverloadCleared=msvmOverloadCleared, airInformationalCondition=airInformationalCondition, envMaxTempThresholdViolation=envMaxTempThresholdViolation, apcInformationalDiscreteInputContactStateAbnormal=apcInformationalDiscreteInputContactStateAbnormal, apcKeyOverrideLocked=apcKeyOverrideLocked, abnormalConditionCleared=abnormalConditionCleared, xPDUOutputVoltageHighAlarmCleared=xPDUOutputVoltageHighAlarmCleared, apcBeaconOff=apcBeaconOff, bmBatManEnvironmentAlarm=bmBatManEnvironmentAlarm, apcEnvLTIncTempRateViolation=apcEnvLTIncTempRateViolation, batteryOverTemperature=batteryOverTemperature, apcEnvLTIncTempRateViolationCleared=apcEnvLTIncTempRateViolationCleared, apcEnvHighHumidityThresholdViolationCleared=apcEnvHighHumidityThresholdViolationCleared, dcCommunicationEstablished=dcCommunicationEstablished, apcAnalogInputMaxThresholdViolation=apcAnalogInputMaxThresholdViolation, smwInformationalConditionCleared=smwInformationalConditionCleared, xATSGeneratorOverload=xATSGeneratorOverload, xATSGeneratorShutdownCleared=xATSGeneratorShutdownCleared, apcDoorLocked=apcDoorLocked, rPDUNearOverloadCleared=rPDUNearOverloadCleared, emsProbeConnected=emsProbeConnected, dcBatteryBreakerAlarm=dcBatteryBreakerAlarm, mspDeviceConfigChange=mspDeviceConfigChange, configChangeSNMP=configChangeSNMP, pduInputTransformerOverTemperatureCleared=pduInputTransformerOverTemperatureCleared, xATSGeneratorLowBatteryVoltDuringCrankAlarm=xATSGeneratorLowBatteryVoltDuringCrankAlarm, dcMainsFailAlarm=dcMainsFailAlarm, apcEnvMaxHumidityThresholdViolation=apcEnvMaxHumidityThresholdViolation, upsEepromFaultCleared=upsEepromFaultCleared, xATSGeneratorOverspeed=xATSGeneratorOverspeed, dcCommunicationLost=dcCommunicationLost, mspOutletOn=mspOutletOn, emsOutputRelayStateNormal=emsOutputRelayStateNormal, powerModuleIncrease=powerModuleIncrease, smartAvrReducingOff=smartAvrReducingOff, apcEnvLowTempThresholdViolationCleared=apcEnvLowTempThresholdViolationCleared, xATSDoorOpenAlarmCleared=xATSDoorOpenAlarmCleared, apcTestTrap=apcTestTrap, iemRelayFaultCleared=iemRelayFaultCleared, pduCircuitPanelNeutralOvercurrent=pduCircuitPanelNeutralOvercurrent, chargerFailureCleared=chargerFailureCleared, xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared, xPDUOutputCurrentHighAlarmCleared=xPDUOutputCurrentHighAlarmCleared, pduInputTransformerOverTemperature=pduInputTransformerOverTemperature, aruHighTemperatureAlarm=aruHighTemperatureAlarm, emsSensorFaultCleared=emsSensorFaultCleared, xATSInternalCommErrorCleared=xATSInternalCommErrorCleared, rPDUPowerSupply1Fail=rPDUPowerSupply1Fail, xATSNotInAutomaticModeCleared=xATSNotInAutomaticModeCleared, xATSGeneratorOverloadCleared=xATSGeneratorOverloadCleared, rsLostRedundancy=rsLostRedundancy, contactFault=contactFault, xATSSwitchTransferEvent=xATSSwitchTransferEvent, aruFanFail=aruFanFail, xATSInputContactStateAbnormal=xATSInputContactStateAbnormal, accessViolationConsole=accessViolationConsole, pduUtilityLineUndervoltageCleared=pduUtilityLineUndervoltageCleared, noBatteries=noBatteries, iemHighHumidThresholdViolationCleared=iemHighHumidThresholdViolationCleared, envMinHumidityThresholdViolation=envMinHumidityThresholdViolation, upsBatterySoftBusStartFaultCleared=upsBatterySoftBusStartFaultCleared, rPDUBankPhaseOverloadCleared=rPDUBankPhaseOverloadCleared, bmBatManBatteryAlarmCleared=bmBatManBatteryAlarmCleared, dcMajorAlarm=dcMajorAlarm, rPDUOutletOff=rPDUOutletOff, atsPowerSupplyFailure=atsPowerSupplyFailure, dcRectifierOVPAlarm=dcRectifierOVPAlarm, rPDUNearOverload=rPDUNearOverload, ceSevereCondition=ceSevereCondition, xATSGeneratorBatteryCharger=xATSGeneratorBatteryCharger, smwWarningCondition=smwWarningCondition, dischargeCleared=dischargeCleared, baseFanFailure=baseFanFailure, aruAlinkCommunicationEstablished=aruAlinkCommunicationEstablished, upsDiagnosticsPassed=upsDiagnosticsPassed, msvmPowerSupplyStatusChange=msvmPowerSupplyStatusChange, emsCommunicationEstablished=emsCommunicationEstablished, aruDeviceConfigChange=aruDeviceConfigChange, iemLowTempThresholdViolationCleared=iemLowTempThresholdViolationCleared, atsConfigChange=atsConfigChange, apcDeviceClearUserConfigs=apcDeviceClearUserConfigs, bmsWarningConditionCleared=bmsWarningConditionCleared, bmBatManBatteryAlarm=bmBatManBatteryAlarm, apcOutputRelayFault=apcOutputRelayFault, apcCriticalDiscreteInputContactStateAbnormal=apcCriticalDiscreteInputContactStateAbnormal, dcFuseCBAlarmCleared=dcFuseCBAlarmCleared, xATSGeneratorOverspeedCleared=xATSGeneratorOverspeedCleared, temperatureThresholdViolationCleared1=temperatureThresholdViolationCleared1, rsConfigChange=rsConfigChange, smwWarningConditionCleared=smwWarningConditionCleared, temperatureThresholdViolationCleared2=temperatureThresholdViolationCleared2, iemHighTempThresholdViolation=iemHighTempThresholdViolation, pduUtilityLineUndervoltage=pduUtilityLineUndervoltage, dcMultRectFailAlarmCleared=dcMultRectFailAlarmCleared, envLowTempThresholdViolation=envLowTempThresholdViolation, aruFanFailCleared=aruFanFailCleared, envMaxHumidityThresholdViolationCleared=envMaxHumidityThresholdViolationCleared, emsDeviceConfigChange=emsDeviceConfigChange, apcEnvHighTempThresholdViolation=apcEnvHighTempThresholdViolation, airWarningCondition=airWarningCondition, atsPowerSupplyFailureCleared=atsPowerSupplyFailureCleared, xATSTestFailed=xATSTestFailed, atsCommunicationLost=atsCommunicationLost, xATSOutputCurrentLowAlarm=xATSOutputCurrentLowAlarm, pduUPSInputVoltageLost=pduUPSInputVoltageLost, dcMajorAlarmCleared=dcMajorAlarmCleared, badVoltage=badVoltage, apcHardwareStateNormal=apcHardwareStateNormal, iemRelayFault=iemRelayFault, xPDUInternalCommError=xPDUInternalCommError, apcDoorUnlocked=apcDoorUnlocked, ceInformationalConditionCleared=ceInformationalConditionCleared, powerModuleDecrease=powerModuleDecrease, dcFuseCBAlarm=dcFuseCBAlarm, extBatteryFrameIncease=extBatteryFrameIncease, smartAvrReducing=smartAvrReducing, apcDoorSenseDisconnected=apcDoorSenseDisconnected, xATSGeneratorLowFuelLevelAlarm=xATSGeneratorLowFuelLevelAlarm, upsTurnedOn=upsTurnedOn, upsCalibrationStackChanged=upsCalibrationStackChanged, upsTurnedOff=upsTurnedOff, xATSOutputVoltageLowAlarmCleared=xATSOutputVoltageLowAlarmCleared, dcMainsFailAlarmCleared=dcMainsFailAlarmCleared, bypassPowerSupplyFailure=bypassPowerSupplyFailure)
mibBuilder.exportSymbols('PowerNet-MIB', logicPowerSuppliesDecreased=logicPowerSuppliesDecreased, envHighTempThresholdViolation=envHighTempThresholdViolation, xATSOutputCurrentHighAlarm=xATSOutputCurrentHighAlarm, pduCircuitPanelInputUndercurrentCleared=pduCircuitPanelInputUndercurrentCleared, xATSGeneratorVeryLowOilPressureCleared=xATSGeneratorVeryLowOilPressureCleared, xPDUTransformerTempAlarmCleared=xPDUTransformerTempAlarmCleared, airCriticalCondition=airCriticalCondition, rPDUOutletOverloadCleared=rPDUOutletOverloadCleared, bmBatManKneeAlarm=bmBatManKneeAlarm, communicationEstablished=communicationEstablished, xATSOutputFrequencyAlarm=xATSOutputFrequencyAlarm, xPDUInputVoltageLowAlarmCleared=xPDUInputVoltageLowAlarmCleared, apcHandleClosed=apcHandleClosed, mspOutletOff=mspOutletOff, upsPfcInputRelayFailure=upsPfcInputRelayFailure, userDeleted=userDeleted, rPDUOverload=rPDUOverload, xATSGeneratorControlSwitchNotAuto=xATSGeneratorControlSwitchNotAuto, aruFanPoorPerformanceAlarmCleared=aruFanPoorPerformanceAlarmCleared, xATSGeneratorVeryLowOilPressure=xATSGeneratorVeryLowOilPressure, intelligenceModuleRemoved=intelligenceModuleRemoved, pduCircuitPanelInputOvervoltage=pduCircuitPanelInputOvervoltage, xATSGeneratorLowBatteryVoltCleared=xATSGeneratorLowBatteryVoltCleared, xPDUSystemInMaintenanceBypassMode=xPDUSystemInMaintenanceBypassMode, xATSOutputVoltageHighAlarmCleared=xATSOutputVoltageHighAlarmCleared, gracefullShutdown=gracefullShutdown, iemLowTempThresholdViolation=iemLowTempThresholdViolation, apcAdConverterFaultCleared=apcAdConverterFaultCleared, dcFanFailAlarmCleared=dcFanFailAlarmCleared, msvmLowLoad=msvmLowLoad, switchedBypass=switchedBypass, bmsCriticalConditionCleared=bmsCriticalConditionCleared, apcDcBusOverVoltage=apcDcBusOverVoltage, calibrationEnd=calibrationEnd, pduAtypicalBypassMode=pduAtypicalBypassMode, rPDUOutletOverload=rPDUOutletOverload, rintelligenceModuleInserted=rintelligenceModuleInserted, upsInternalOverTemperatureCleared=upsInternalOverTemperatureCleared, xPDUOutputCurrentHighAlarm=xPDUOutputCurrentHighAlarm, airWarningConditionCleared=airWarningConditionCleared, aruRedundantPowerLostAlarmCleared=aruRedundantPowerLostAlarmCleared, rsCommunicationLost=rsCommunicationLost, aruFanRuntimeAlarmCleared=aruFanRuntimeAlarmCleared, apcRegisteredUserConfigChange=apcRegisteredUserConfigChange, xATSEpoTripped=xATSEpoTripped, apcAnalogInputHighThresholdViolationCleared=apcAnalogInputHighThresholdViolationCleared, xPDUBranchCurrentMinAlarm=xPDUBranchCurrentMinAlarm, emsMinorAlarmCleared=emsMinorAlarmCleared, msvmNearOverloadCleared=msvmNearOverloadCleared, xPDUBranchCurrentLowAlarm=xPDUBranchCurrentLowAlarm, smwInformationalCondition=smwInformationalCondition, apcTransformerDCImbalanceFaultCleared=apcTransformerDCImbalanceFaultCleared, airInformationalConditionCleared=airInformationalConditionCleared, upsDiagnosticsFailed=upsDiagnosticsFailed, envLTIncTempRateViolation=envLTIncTempRateViolation, apcDoorSenseConnected=apcDoorSenseConnected, dcCurrentLimitAlarm=dcCurrentLimitAlarm, xPDUCoolingFanAlarm=xPDUCoolingFanAlarm, upsBatterySoftBusStartFault=upsBatterySoftBusStartFault, envLowTempThresholdViolationCleared=envLowTempThresholdViolationCleared, apcAnalogInputLowThresholdViolationCleared=apcAnalogInputLowThresholdViolationCleared, xAPCControllerFirmwareUpdateTransferComplete=xAPCControllerFirmwareUpdateTransferComplete, emsInputContactStateAbnormal=emsInputContactStateAbnormal, xPDUDataCommMismatchError=xPDUDataCommMismatchError, apcHardwareStateAbnormal=apcHardwareStateAbnormal, upsDipSwitchChanged=upsDipSwitchChanged, outletOn=outletOn, dcRectifierOvertempAlarmCleared=dcRectifierOvertempAlarmCleared, xATSGeneratorOutputBreakerOpenCleared=xATSGeneratorOutputBreakerOpenCleared, apcAnalogInputMaxThresholdViolationCleared=apcAnalogInputMaxThresholdViolationCleared, pduCircuitPanelInputOvercurrentCleared=pduCircuitPanelInputOvercurrentCleared, mspCommunicationLost=mspCommunicationLost, msvmOverload=msvmOverload, aruRedundantPowerLostAlarm=aruRedundantPowerLostAlarm, xPDUDataCommMismatchErrorCleared=xPDUDataCommMismatchErrorCleared, xATSOutputVoltageHighAlarm=xATSOutputVoltageHighAlarm, upsOutletGroupTurnedOn=upsOutletGroupTurnedOn, emsBeaconOn=emsBeaconOn, mupsCommunicationEstablished=mupsCommunicationEstablished, envHighHumidityThresholdViolation=envHighHumidityThresholdViolation, pduForcedBypassMode=pduForcedBypassMode, upsBackfeedRelayFaultCleared=upsBackfeedRelayFaultCleared, xATSDCBackupAlarm=xATSDCBackupAlarm, iemHighHumidThresholdViolation=iemHighHumidThresholdViolation, aruSmokeAlarm=aruSmokeAlarm, dcLVDImminentAlarmCleared=dcLVDImminentAlarmCleared, dcTemperatureAlarmCleared=dcTemperatureAlarmCleared, upsPfcFaultCleared=upsPfcFaultCleared, apcAnalogInputMinThresholdViolation=apcAnalogInputMinThresholdViolation, xPDUOutputVoltageHighAlarm=xPDUOutputVoltageHighAlarm, rPDUPowerSupply2Ok=rPDUPowerSupply2Ok, rPDUOverloadCleared=rPDUOverloadCleared, dcBatteryBreakerAlarmCleared=dcBatteryBreakerAlarmCleared, xATSGeneratorLowOilPressureCleared=xATSGeneratorLowOilPressureCleared, aruExhaustTemperatureAlarmCleared=aruExhaustTemperatureAlarmCleared, upsInverterOverTemperatureCleared=upsInverterOverTemperatureCleared, apcEnvMinHumidityThresholdViolation=apcEnvMinHumidityThresholdViolation, batteryPackCommEstablished=batteryPackCommEstablished, rPDUOutletLowLoad=rPDUOutletLowLoad, rPDUOutletNearOverload=rPDUOutletNearOverload, pduCircuitPanelInputOvervoltageCleared=pduCircuitPanelInputOvervoltageCleared, xATSTestPassed=xATSTestPassed, apcOutletStateNormal=apcOutletStateNormal, xATSGeneratorEStopCleared=xATSGeneratorEStopCleared, chargerFailure=chargerFailure, upsBatteryOverVoltageCleared=upsBatteryOverVoltageCleared, xATSGeneratorEStop=xATSGeneratorEStop, xPDUBypassVoltageHighAlarmCleared=xPDUBypassVoltageHighAlarmCleared, apcOutletStateAbnormal=apcOutletStateAbnormal, xPDUBypassVoltageLowAlarmCleared=xPDUBypassVoltageLowAlarmCleared, apcAdConverterFault=apcAdConverterFault, apcOutputRelayStateNormal=apcOutputRelayStateNormal, bmsWarningCondition=bmsWarningCondition, xPDUOutputCurrentLowAlarmCleared=xPDUOutputCurrentLowAlarmCleared, dcBatteryTestFail=dcBatteryTestFail, xPDUBranchCurrentMaxAlarmCleared=xPDUBranchCurrentMaxAlarmCleared, pduCircuitPanelInputUndercurrent=pduCircuitPanelInputUndercurrent, atsCommunicationEstablished=atsCommunicationEstablished, upsOnBattery=upsOnBattery, xATSGeneratorVeryLowRunTimeAlarm=xATSGeneratorVeryLowRunTimeAlarm, xATSGeneratorHighBatteryVolt=xATSGeneratorHighBatteryVolt, atsLostRedundancy=atsLostRedundancy, apcDoorOpened=apcDoorOpened, upsPfcFault=upsPfcFault, dcRectifierOvertempAlarm=dcRectifierOvertempAlarm, xATSGeneratorVeryLowCoolantLevelAlarmCleared=xATSGeneratorVeryLowCoolantLevelAlarmCleared, apcForcedEntry=apcForcedEntry)
mibBuilder.exportSymbols('PowerNet-MIB', logicPowerSuppliesIncreased=logicPowerSuppliesIncreased, bmBatManCommEstab=bmBatManCommEstab, xPDUInputContactStateAbnormal=xPDUInputContactStateAbnormal, xPDUInputContactStateNormal=xPDUInputContactStateNormal, iemLowHumidThresholdViolation=iemLowHumidThresholdViolation, rPDULowLoad=rPDULowLoad, upsInverterFault=upsInverterFault, upsBatteryTempSensorFault=upsBatteryTempSensorFault, codeAuthenticationDone=codeAuthenticationDone, xATSGeneratorHighCoolantTempAlarmCleared=xATSGeneratorHighCoolantTempAlarmCleared, rPDULowLoadCleared=rPDULowLoadCleared, xATSGeneratorLowCoolantLevelAlarmCleared=xATSGeneratorLowCoolantLevelAlarmCleared, xATSGeneratorServiceDueAlarm=xATSGeneratorServiceDueAlarm, dcCurrentLimitAlarmCleared=dcCurrentLimitAlarmCleared, xPDUSystemGroundCurrentAlarm=xPDUSystemGroundCurrentAlarm, abnormalCondition=abnormalCondition, apcDoorLostComms=apcDoorLostComms, xAPCControllerFirmwareUpdateTransferStart=xAPCControllerFirmwareUpdateTransferStart, apcEnvMinTempThresholdViolationCleared=apcEnvMinTempThresholdViolationCleared, batteryPackCommLost=batteryPackCommLost, upsSleeping=upsSleeping, apcTransformerDCImbalanceFault=apcTransformerDCImbalanceFault, xATSStopFailure=xATSStopFailure, envMaxHumidityThresholdViolation=envMaxHumidityThresholdViolation, upsOverloadCleared=upsOverloadCleared, dcHumidityAlarmCleared=dcHumidityAlarmCleared, xATSDataCommMismatchError=xATSDataCommMismatchError, apcEnvMaxTempThresholdViolationCleared=apcEnvMaxTempThresholdViolationCleared, bmBatManMaintenanceAlarmCleared=bmBatManMaintenanceAlarmCleared, apcEnvMinTempThresholdViolation=apcEnvMinTempThresholdViolation, ceWarningConditionCleared=ceWarningConditionCleared, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared, envHighTempThresholdViolationCleared=envHighTempThresholdViolationCleared, powerRestored=powerRestored, apcLogicPowerSupplyFault=apcLogicPowerSupplyFault, apcEnvHighHumidityThresholdViolation=apcEnvHighHumidityThresholdViolation, xATSOutputCurrentLowAlarmCleared=xATSOutputCurrentLowAlarmCleared, envSTIncTempRateViolation=envSTIncTempRateViolation, apcDoorEstablishedComms=apcDoorEstablishedComms, upsWokeUp=upsWokeUp, xPDUInputVoltageHighAlarm=xPDUInputVoltageHighAlarm, upsOutletGroupTurnedOff=upsOutletGroupTurnedOff, xATSGeneratorVeryHighCoolantTempAlarm=xATSGeneratorVeryHighCoolantTempAlarm, xATSGeneratorLowRunTimeAlarm=xATSGeneratorLowRunTimeAlarm, emsSensorFault=emsSensorFault, xPDUSystemGroundCurrentAlarmCleared=xPDUSystemGroundCurrentAlarmCleared, rsSourceSwitched=rsSourceSwitched, xATSGeneratorOutputBreakerOpen=xATSGeneratorOutputBreakerOpen, xATSGeneratorGroundFaultAlarm=xATSGeneratorGroundFaultAlarm, apcLogicPowerSupplyFaultCleared=apcLogicPowerSupplyFaultCleared, rPDUBankPhaseLowLoad=rPDUBankPhaseLowLoad, atsOverCurrent=atsOverCurrent, apcBeaconOn=apcBeaconOn, apcDoorClosed=apcDoorClosed, apcEnvSTDecTempRateViolationCleared=apcEnvSTDecTempRateViolationCleared, pduUpsOperationMode=pduUpsOperationMode, rPDUOutletOn=rPDUOutletOn, msvmCommunicationEstablished=msvmCommunicationEstablished, envLTIncTempRateViolationCleared=envLTIncTempRateViolationCleared, apcCriticalDiscreteInputContactStateNormal=apcCriticalDiscreteInputContactStateNormal, apcAnalogInputLowThresholdViolation=apcAnalogInputLowThresholdViolation, xPDUBranchCurrentHighAlarm=xPDUBranchCurrentHighAlarm, upsInternalOverTemperature=upsInternalOverTemperature, xPDUFuseBlownAlarmCleared=xPDUFuseBlownAlarmCleared, rPDUBankPhaseOverload=rPDUBankPhaseOverload, upsBackfeedRelayFault=upsBackfeedRelayFault, dcTemperatureAlarm=dcTemperatureAlarm, upsEepromFault=upsEepromFault, dcOutputRelayOn=dcOutputRelayOn, emsOutletStateNormal=emsOutletStateNormal, pduSystemOff=pduSystemOff, atsSourceSwitched=atsSourceSwitched, bmBatManMaintenanceAlarm=bmBatManMaintenanceAlarm, apcRelockTimeout=apcRelockTimeout, xATSGeneratorEngineCold=xATSGeneratorEngineCold, xATSEpoReset=xATSEpoReset, xATSTestInitiated=xATSTestInitiated, rPDUOutletLowLoadCleared=rPDUOutletLowLoadCleared, xPDUOutputFrequencyAlarm=xPDUOutputFrequencyAlarm, xATSGeneratorGenericEvent=xATSGeneratorGenericEvent, pduCircuitPanelFrequencyOutOfRange=pduCircuitPanelFrequencyOutOfRange, xPDUOutputCurrentLowAlarm=xPDUOutputCurrentLowAlarm, pduGroundOvercurrent=pduGroundOvercurrent, xATSGeneratorLowBatteryVolt=xATSGeneratorLowBatteryVolt, xATSTestCanceled=xATSTestCanceled, xATSGeneratorVeryLowCoolantLevelAlarm=xATSGeneratorVeryLowCoolantLevelAlarm, xATSGeneratorFuelTankRuptureAlarmCleared=xATSGeneratorFuelTankRuptureAlarmCleared, apcWarningDiscreteInputContactStateNormal=apcWarningDiscreteInputContactStateNormal, xPDUEpoTestMode=xPDUEpoTestMode, ceWarningCondition=ceWarningCondition, envSTIncTempRateViolationCleared=envSTIncTempRateViolationCleared, xPDUBreakerPositionAlarmCleared=xPDUBreakerPositionAlarmCleared, apcUnregisteredUserStatusChange=apcUnregisteredUserStatusChange, xATSGeneratorVeryLowFuelLevelAlarm=xATSGeneratorVeryLowFuelLevelAlarm, badVoltageCleared=badVoltageCleared, baseFanFailureCleared=baseFanFailureCleared, rPDUOutletConfigChange=rPDUOutletConfigChange, xPDUBranchCurrentMaxAlarm=xPDUBranchCurrentMaxAlarm, pduCircuitPanelNeutralOvercurrentCleared=pduCircuitPanelNeutralOvercurrentCleared, pduCircuitPanelInputUndervoltage=pduCircuitPanelInputUndervoltage, iemHighTempThresholdViolationCleared=iemHighTempThresholdViolationCleared, xATSGeneratorVeryHighCoolantTempAlarmCleared=xATSGeneratorVeryHighCoolantTempAlarmCleared, upsInverterOverTemperature=upsInverterOverTemperature, dcMinorAlarmCleared=dcMinorAlarmCleared, xPDUInputVoltageLowAlarm=xPDUInputVoltageLowAlarm, xPDUOutputFrequencyAlarmCleared=xPDUOutputFrequencyAlarmCleared, upsOverload=upsOverload, atsRedundancyRestored=atsRedundancyRestored, envLTDecTempRateViolation=envLTDecTempRateViolation, xATSGeneratorControlSwitchNotAutoCleared=xATSGeneratorControlSwitchNotAutoCleared, xPDUEpoArmed=xPDUEpoArmed, msvmOutletOff=msvmOutletOff, rintelligenceModuleRemoved=rintelligenceModuleRemoved, xATSGeneratorBatteryChargerCleared=xATSGeneratorBatteryChargerCleared, xATSGeneratorLowFuelLevelAlarmCleared=xATSGeneratorLowFuelLevelAlarmCleared, envAlinkCommunicationEstablished=envAlinkCommunicationEstablished, bmBatManChargerAlarm=bmBatManChargerAlarm, dcRectifierFailAlarmCleared=dcRectifierFailAlarmCleared, xATSInternalCommError=xATSInternalCommError, extBatteryFrameDecrease=extBatteryFrameDecrease, pduCommunicationLost=pduCommunicationLost, xATSGeneratorFuelTankRuptureAlarm=xATSGeneratorFuelTankRuptureAlarm, pduMaintenanceBypassMode=pduMaintenanceBypassMode, dcInputRelayOff=dcInputRelayOff, bmBatManKneeAlarmCleared=bmBatManKneeAlarmCleared, smartBoostOff=smartBoostOff, rPDUPhaseConfigChange=rPDUPhaseConfigChange)
mibBuilder.exportSymbols('PowerNet-MIB', apcRelockTimeoutCleared=apcRelockTimeoutCleared, humidityThresholdViolationCleared2=humidityThresholdViolationCleared2, humidityThresholdViolationCleared1=humidityThresholdViolationCleared1, calibrationStart=calibrationStart, xATSGeneratorLowOilLevelAlarm=xATSGeneratorLowOilLevelAlarm, xATSRemoteStartContactMismatch=xATSRemoteStartContactMismatch, apcDcBusOverVoltageCleared=apcDcBusOverVoltageCleared, pduUtilityLineOvervoltageCleared=pduUtilityLineOvervoltageCleared, apcEnvLowTempThresholdViolation=apcEnvLowTempThresholdViolation, externalSwitchGearClosed=externalSwitchGearClosed, softwareBypass=softwareBypass, intelligenceModuleInserted=intelligenceModuleInserted, upsPfcInputRelayFailureCleared=upsPfcInputRelayFailureCleared, emsSensorConnected=emsSensorConnected, xATSGeneratorEngineColdCleared=xATSGeneratorEngineColdCleared, apcHandleOpened=apcHandleOpened, pduCircuitPanelInputOvercurrent=pduCircuitPanelInputOvercurrent, upsBatteryTempSensorFaultCleared=upsBatteryTempSensorFaultCleared, dcRectifierOVPAlarmCleared=dcRectifierOVPAlarmCleared, smartRelayFault=smartRelayFault, dcRectifierFailAlarm=dcRectifierFailAlarm, envAlinkCommunicationLost=envAlinkCommunicationLost, xATSDCBackupAlarmCleared=xATSDCBackupAlarmCleared, emsOutputRelayStateAbnormal=emsOutputRelayStateAbnormal, configChangeOutlet=configChangeOutlet, ceInformationalCondition=ceInformationalCondition, batteryOverTemperatureCleared=batteryOverTemperatureCleared, apcDeviceClearLostComms=apcDeviceClearLostComms, restartAgent=restartAgent, xATSGeneratorVeryLowRunTimeAlarmCleared=xATSGeneratorVeryLowRunTimeAlarmCleared, envLowHumidityThresholdViolation=envLowHumidityThresholdViolation, apcEnvLowHumidityThresholdViolationCleared=apcEnvLowHumidityThresholdViolationCleared, xATSInternalATSFaultCleared=xATSInternalATSFaultCleared, apcOutputShortCircuit=apcOutputShortCircuit, xATSGeneratorGroundFaultAlarmCleared=xATSGeneratorGroundFaultAlarmCleared, dcBBCommunicationEstablished=dcBBCommunicationEstablished, iemProbeConnected=iemProbeConnected, airCriticalConditionCleared=airCriticalConditionCleared, xATSGeneratorLowOilLevelAlarmCleared=xATSGeneratorLowOilLevelAlarmCleared, apcEnvSTIncTempRateViolation=apcEnvSTIncTempRateViolation, upsMpuReset=upsMpuReset, rPDUDeviceConfigChange=rPDUDeviceConfigChange, pduUPSInputVoltageRestored=pduUPSInputVoltageRestored, upsRebootStarted=upsRebootStarted, rPDUPowerSupply1Ok=rPDUPowerSupply1Ok, xATSEngineStartAsserted=xATSEngineStartAsserted, apcEnvMaxTempThresholdViolation=apcEnvMaxTempThresholdViolation, deviceStatusChange=deviceStatusChange, xATSStartFailure=xATSStartFailure, aruHighTemperatureAlarmCleared=aruHighTemperatureAlarmCleared, outletReboot=outletReboot, upsBypassRelayFault=upsBypassRelayFault, returnFromBypass=returnFromBypass, xAPCControllerFirmwareUpdateTransferFailed=xAPCControllerFirmwareUpdateTransferFailed, dcMinorAlarm=dcMinorAlarm, xATSOutputCurrentHighAlarmCleared=xATSOutputCurrentHighAlarmCleared, lowBattery=lowBattery, aruFanRuntimeAlarm=aruFanRuntimeAlarm, xPDUBypassVoltageLowAlarm=xPDUBypassVoltageLowAlarm, apcBeaconConnected=apcBeaconConnected, batteryIncrease=batteryIncrease, rPDUOutletNearOverloadCleared=rPDUOutletNearOverloadCleared, upsBatteryReplaced=upsBatteryReplaced, xATSRemoteStartContactMismatchCleared=xATSRemoteStartContactMismatchCleared, upsInverterFaultCleared=upsInverterFaultCleared, accessViolationHTTP=accessViolationHTTP, xATSGeneratorServiceDueAlarmCleared=xATSGeneratorServiceDueAlarmCleared, dcLVDImminentAlarm=dcLVDImminentAlarm, contactFaultResolved=contactFaultResolved, xATSGeneratorLowOilPressure=xATSGeneratorLowOilPressure, smwCriticalConditionCleared=smwCriticalConditionCleared, emsHardwareStateNormal=emsHardwareStateNormal, dcMultRectFailAlarm=dcMultRectFailAlarm, xATSOutputFrequencyAlarmCleared=xATSOutputFrequencyAlarmCleared, rPDUBankPhaseLowLoadCleared=rPDUBankPhaseLowLoadCleared, batteryDecrease=batteryDecrease, xATSGeneratorHighCoolantTempAlarm=xATSGeneratorHighCoolantTempAlarm, aruSmokeAlarmCleared=aruSmokeAlarmCleared, xATSGeneratorHighBatteryVoltCleared=xATSGeneratorHighBatteryVoltCleared, emsOutletStateAbnormal=emsOutletStateAbnormal, iemProbeDisconnected=iemProbeDisconnected, xATSGeneratorLowACVEvent=xATSGeneratorLowACVEvent, emsBeaconConnected=emsBeaconConnected, rsRedundancyRestored=rsRedundancyRestored, apcForcedEntryCleared=apcForcedEntryCleared, msvmOutletOn=msvmOutletOn, xPDUTransformerTempAlarm=xPDUTransformerTempAlarm, upsBatteryOverVoltage=upsBatteryOverVoltage, iemContactFaultCleared=iemContactFaultCleared, iemContactFault=iemContactFault, xATSGeneratorLowCoolantTempAlarmCleared=xATSGeneratorLowCoolantTempAlarmCleared, xATSNotInAutomaticMode=xATSNotInAutomaticMode, envLTDecTempRateViolationCleared=envLTDecTempRateViolationCleared, apcAnalogInputMinThresholdViolationCleared=apcAnalogInputMinThresholdViolationCleared, xPDUOutputVoltageLowAlarm=xPDUOutputVoltageLowAlarm, bmBatManCommLost=bmBatManCommLost, msvmOutletConfigChange=msvmOutletConfigChange, xATSGeneratorLowCoolantTempAlarm=xATSGeneratorLowCoolantTempAlarm, xPDUSystemStateAlarm=xPDUSystemStateAlarm, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm, xPDUOutputNeutralCurrentHighAlarm=xPDUOutputNeutralCurrentHighAlarm, envMinTempThresholdViolation=envMinTempThresholdViolation, xPDUCoolingFanAlarmCleared=xPDUCoolingFanAlarmCleared, apcDeviceDisconnected=apcDeviceDisconnected, iemLowHumidThresholdViolationCleared=iemLowHumidThresholdViolationCleared, aruExhaustTemperatureAlarm=aruExhaustTemperatureAlarm, apcOutputRelayFaultCleared=apcOutputRelayFaultCleared, envMinHumidityThresholdViolationCleared=envMinHumidityThresholdViolationCleared, aruAlinkCommunicationLost=aruAlinkCommunicationLost, xATSOutputLoadPoweredByGeneratorAlarm=xATSOutputLoadPoweredByGeneratorAlarm, emsHardwareStateAbnormal=emsHardwareStateAbnormal, pduCircuitPanelFrequencyOutofRangeCleared=pduCircuitPanelFrequencyOutofRangeCleared, noBatteriesCleared=noBatteriesCleared, xPDUBreakerChangeEvent=xPDUBreakerChangeEvent)

