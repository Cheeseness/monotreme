#=---------------------------------------------------------------------------
# Makefile for Envenergy Broadway builds.
#
# @configure_input@
#=---------------------------------------------------------------------------


#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING BELOW THIS LINE                  -=#
#=--------------------------------------------------------------------------=#
# NOTE: This section of the makefile is generated by update_makefile.py in   #
#       the root directory of the broadway source tree.  By doing this,      #
#       it is reasonable to keep the almost 200 makefiles in sync with any   #
#       required changes.  To change this section, modify update_makefile.py #
#       and rerun the update_makefiles script.                               #
#=--------------------------------------------------------------------------=#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
include @BUILD_DIR@/Constants.make

#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING ABOVE THIS LINE                  -=#
#=--------------------------------------------------------------------------=#


#=---------------------------------------------------------------------------
# Rule: do_makeall
#
#   Required.  Called by the top level makefile via 'Rules.make', or by a
#   call to 'make' in a subdirectory.  Feel free to add other targets here,
#   but you should leave the 'target', 'tools', 'tests' and 'doc' rules.

do_makeall: target tools tests doc


#=---------------------------------------------------------------------------
# Define your 'prelease(-d)' structure.  See 'config/Rules.make' for a
# discussion of these variables.

PRELEASE:=	broadway.core


#=---------------------------------------------------------------------------
# Include the main 'Rules' file where most of the work is done.  This must
# follow the 'do_makeall' rule and PRELEASE_XXX symbols.

include $(RULES_FILE)

PY_CODE:=	$(srcdir)/__init__.py
PY_TEST:=	$(srcdir)/_test_case_mibs.py

PYMIB_IGNORE:=	$(PY_CODE) $(PY_TEST)
PYMIB_SRCS:=	$(filter-out $(PYMIB_IGNORE),$(wildcard $(srcdir)/*.py))
PYMIB_TARGETS:=	$(subst $(srcdir)/,,$(PYMIB_SRCS))

%.py : $(srcdir)/%.py
	cp $(srcdir)/$@ $@

LIBSMI_PREFIX:=@LIBSMI_PREFIX@
SMIDUMP:=SMIPATH=$(LIBSMI_PREFIX)/share/mibs/ietf \
	 LD_LIBRARY_PATH=$(LIBSMI_PREFIX)/lib:$${LD_LIBRARY_PATH} \
	 $(LIBSMI_PREFIX)/bin/smidump

#=---------------------------------------------------------------------------
# Use 'TARGETS' to define what you want built.

# @note To support compiling Python modules whilst auto-generating the
#       list of Python MIBs to copy, the TARGETS list is generated from
#       the above PY_CODE and auto-generated PYMIB_TARGETS lists:
#
#	Add TARGETS by adding .py source files to the PY_CODE variable
#	above.
TARGETS:=$(subst .py,.$(PYEXT),$(subst $(srcdir)/,,$(PY_CODE))) \
	 $(PYMIB_TARGETS) \
	 BLADE-MIB.py \
	 BLADESPPALT-MIB.py \
	 CISCO-ENERGYWISE-MIB.py \
	 CISCO-SMI.py

#
# FIXME: Need a tool that can reliably compile MIBs into PySNMP python files.
#        Obviously this tool could then be the bases for dynamically uploading
#        MIBs to the Mediator.  Here is the pain in doing this:
#
#        * libsmi2pysnmp requires SNMPv2 MIBs. (or just SMIv2, not sure).
#        * Many MIBs inappropriatley mix SMIv1 and SMIv2 constructs.
#        * Therefore, determining if a MIB is SMIv1 or SMIv2 is problem.
#        * smidump -f smiv2 converts MIBs from SMIv1 to SMIv2, but in a
#          way that frequently results in errors.
#        * To work around these errors, smidump -k is used but this does
#          not guarantee valid output.

BLADE-MIB.py: $(srcdir)/mmblade.mib
	($(SMIDUMP) -f python $< | $(srcdir)/libsmi2pysnmp >$@) \
	    || (rm -f $@ ; exit 1)

BLADESPPALT-MIB.py: $(srcdir)/mmalert.mib
	(export TMPFILE=/tmp/$$$$.smidump.smiv2 && \
	$(SMIDUMP) -f smiv2 $< >$$TMPFILE && \
	$(SMIDUMP) -f python -k $$TMPFILE | $(srcdir)/libsmi2pysnmp >$@ && \
	rm -f $$TMPFILE || (rm -f $$TMPFILE $@ ; exit 1))

CISCO-SMI.py: $(srcdir)/CISCO-SMI.my
	($(SMIDUMP) -f python $< | $(srcdir)/libsmi2pysnmp >$@) \
	    || (rm -f $@ ; exit 1)

CISCO-ENERGYWISE-MIB.py: $(srcdir)/CISCO-ENERGYWISE-MIB.my
	($(SMIDUMP) -p $(srcdir)/CISCO-SMI.my -f python $< | \
	    $(srcdir)/libsmi2pysnmp >$@) \
	        || (rm -f $@ ; exit 1)

target: $(TARGETS)

#=---------------------------------------------------------------------------
# Use 'DOCUMENTATION' to define documentation that needs to be generated.

DOC:=

doc: $(DOC)


#=---------------------------------------------------------------------------
# Use 'TOOLS' to define utility programs.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TOOLS:=

tools: $(TOOLS)


#=---------------------------------------------------------------------------
# Use 'TESTS' to define test programs.  Any programs here will also be
# invoked when 'make unittest' is run.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

# @note To support compiling Python modules whilst auto-generating the
#       list of Python MIBs to copy, the TESTS list is generated from
#       the above PY_TEST list:
#
#	Add variables by adding .py source files to the PY_TEST variable
#	above.
TESTS:=$(subst .py,.$(PYEXT),$(subst $(srcdir)/,,$(PY_TEST)))

tests: $(TESTS)


#=- EOF --------------------------------------------------------------------=#
