"""
Copyright (C) 2007 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# ============================================================================
# Created via /home/mevans/source/pysnmp-experiments/Panduit-MIBs-1/PANDUIT.sh:
# 
# Use smidump and RZ's custom version of libsmi2pysnmp
# which was part of /home/mevans/source/pysnmp-experiments/ at the time of
# execution.
# 
# Essentially:
# 
# exec 5>PANDUIT-DPoE-MIB.header 2>&5
# smidump --preload=./PANDUIT-REG.txt --preload=./PANDUIT-TC.txt --preload=./PANDUIT-COMMON-MIB.txt --preload=./PANDUIT-PRODUCTS-PANEL-COMMON-MIB.txt --preload=./PANDUIT-COMMON-MIB.txt --preload=./PANDUIT-PRODUCTS-PANEL-COMMON-MIB.txt --preload=./PANDUIT-COMMON-MIB.txt --preload=./PANDUIT-PRODUCTS-PANEL-COMMON-MIB.txt --preload=./PANDUIT-APPS-LED-MIB.txt --preload=./PANDUIT-APPS-PoE-MIB.txt --preload=./PANDUIT-APPS-PORTLOC-MIB.txt --preload=./PANDUIT-APPS-POWER-MIB.txt --preload=./PANDUIT-APPS-FWUPDATE-MIB.txt -f python PANDUIT-DPoE-MIB.txt | ../libsmi2pysnmp >PANDUIT-DPoE-MIB.pysnmp
# cat PANDUIT-DPoE-MIB.header | sed 's/^/# /g' >PANDUIT-DPoE-MIB.py
# cat PANDUIT-DPoE-MIB.pysnmp >>PANDUIT-DPoE-MIB.py
# rm PANDUIT-DPoE-MIB.pysnmp
# rm PANDUIT-DPoE-MIB.header
# ----------------------------------------------------------------------------
# PANDUIT-DPoE-MIB.txt:81: revision not in reverse chronological order
# PANDUIT-DPoE-MIB.txt:634: invalid status `deprecated' in AGENT-CAPABILITIES macro
# smidump: module `PANDUIT-DPoE-MIB.txt' contains errors, expect flawed output
# ==========================================================================
# PySNMP SMI module. Autogenerated from smidump -f python PANDUIT-DPoE-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Tue Oct 16 16:30:54 2007,
# Python version (2, 2, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( panduitAppsFWUpdateGeneral2Group, panduitAppsFWUpdateNotificationGroup, ) = mibBuilder.importSymbols('PANDUIT-APPS-FWUPDATE-MIB', 'panduitAppsFWUpdateGeneral2Group', 'panduitAppsFWUpdateNotificationGroup')
( panduitAppsLEDPortLEDGroup, panduitAppsLEDSystemLEDGroup, ) = mibBuilder.importSymbols('PANDUIT-APPS-LED-MIB', 'panduitAppsLEDPortLEDGroup', 'panduitAppsLEDSystemLEDGroup')
( panduitAppsPortLocationGeneralGroup, panduitAppsPortLocationNotificationGroup, ) = mibBuilder.importSymbols('PANDUIT-APPS-PORTLOC-MIB', 'panduitAppsPortLocationGeneralGroup', 'panduitAppsPortLocationNotificationGroup')
( panduitAppsPowerGroup, panduitAppsPowerNotificationGroup, ) = mibBuilder.importSymbols('PANDUIT-APPS-POWER-MIB', 'panduitAppsPowerGroup', 'panduitAppsPowerNotificationGroup')
( panduitAppsPoEGeneralGroup, panduitAppsPoENotificationGroup, ) = mibBuilder.importSymbols('PANDUIT-APPS-PoE-MIB', 'panduitAppsPoEGeneralGroup', 'panduitAppsPoENotificationGroup')
( panduitCommonIdentification2Group, panduitCommonIdentificationGroup, panduitCommonNetworkGroup, panduitCommonNotification2Group, panduitCommonNotificationGroup, panduitCommonNotifyPortNumber, panduitIdentificationMAC, panduitNetSNMPTrapRecvIP, ) = mibBuilder.importSymbols('PANDUIT-COMMON-MIB', 'panduitCommonIdentification2Group', 'panduitCommonIdentificationGroup', 'panduitCommonNetworkGroup', 'panduitCommonNotification2Group', 'panduitCommonNotificationGroup', 'panduitCommonNotifyPortNumber', 'panduitIdentificationMAC', 'panduitNetSNMPTrapRecvIP')
( panduitProdPanelCommonInfo2Group, panduitProdPanelCommonInfoGroup, panduitProdPanelCommonPortLocLocation, panduitProdPanelCommonRackId, panduitProdPanelCommonRackPositionId, ) = mibBuilder.importSymbols('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonInfo2Group', 'panduitProdPanelCommonInfoGroup', 'panduitProdPanelCommonPortLocLocation', 'panduitProdPanelCommonRackId', 'panduitProdPanelCommonRackPositionId')
( panduitCapabilities, panduitProdPanel, ) = mibBuilder.importSymbols('PANDUIT-REG', 'panduitCapabilities', 'panduitProdPanel')
( PanduitBlinkState, PanduitDuration, PanduitLedColor, PanduitOverride, PanduitPoEDetectType, PanduitPoEForcePowerType, PanduitPoELegacyDelay, PanduitPoEMPSType, PanduitPoEVoltageType, ) = mibBuilder.importSymbols('PANDUIT-TC', 'PanduitBlinkState', 'PanduitDuration', 'PanduitLedColor', 'PanduitOverride', 'PanduitPoEDetectType', 'PanduitPoEForcePowerType', 'PanduitPoELegacyDelay', 'PanduitPoEMPSType', 'PanduitPoEVoltageType')
( pethMainPowerNotificationGroup, pethMainPseConsumptionPower, pethMainPseGroup, pethMainPsePower, pethMainPseUsageThreshold, pethNotificationControlGroup, pethPsePortGroup, pethPsePortNotificationGroup, pethPsePortPowerClassifications, pethPsePortType, ) = mibBuilder.importSymbols('POWER-ETHERNET-MIB', 'pethMainPowerNotificationGroup', 'pethMainPseConsumptionPower', 'pethMainPseGroup', 'pethMainPsePower', 'pethMainPseUsageThreshold', 'pethNotificationControlGroup', 'pethPsePortGroup', 'pethPsePortNotificationGroup', 'pethPsePortPowerClassifications', 'pethPsePortType')
( AgentCapabilities, ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols('SNMPv2-CONF', 'AgentCapabilities', 'ModuleCompliance', 'NotificationGroup', 'ObjectGroup')
( snmpBasicNotificationsGroup, snmpGroup, sysName, sysORTable, systemGroup, ) = mibBuilder.importSymbols('SNMPv2-MIB', 'snmpBasicNotificationsGroup', 'snmpGroup', 'sysName', 'sysORTable', 'systemGroup')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'ModuleIdentity', 'MibIdentifier', 'NotificationType', 'ObjectIdentity', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32')

# Objects

panduitProdPanelDPoE = ModuleIdentity((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2)).setRevisions(('2006-09-12 00:00','2005-01-05 00:00',))
panduitProdPanelDPoENotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0))
panduitDPoEPortPowerStatusChange = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 3))
panduitProdDPoEPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1)).setDescription('Led information by Port.')
panduitProdDPoEPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1, 1)).setIndexNames((0, 'PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedIndex')).setDescription('Port LED Table Row definition')
panduitProdDPoEPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('readonly').setDescription('Table index.  This object is only accessible for\nnotification, but SNMPv2-SMI only allows not-accessible.')
panduitProdDPoEPortLedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1, 1, 2), PanduitLedColor()).setMaxAccess('readwrite').setDescription('LED Color.')
panduitProdDPoEPortLedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1, 1, 3), PanduitBlinkState()).setMaxAccess('readwrite').setDescription('LED Blink status.  Can be set to blink or steady.')
panduitProdDPoEPortLedOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 1, 1, 4), PanduitOverride()).setMaxAccess('readwrite').setDescription('Override normal functionality.  Normal functionality is \nto flash green.  To override, set this value to override(2)\nand set panduitProdDPoEPortLedColor, panduitProdDPoEPortLedRate,\nand panduitProdDPoEPortLEDPeriod to achieve the desired result.')
panduitProdDPoEPortLedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 2), PanduitDuration()).setMaxAccess('readwrite').setDescription('Override normal functionality.  Normal functionality is \nto flash green.  To override, set this value to override(2)\nand set panduitProdDPoEPortLedColor, panduitProdDPoEPortLedRate,\nand panduitProdDPoEPortLEDPeriod to achieve the desired result.')
panduitProdDPoESystemLedTable = MibTable((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3)).setDescription('Led information by Port.')
panduitProdDPoESystemLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3, 1)).setIndexNames((0, 'PANDUIT-DPoE-MIB', 'panduitProdDPoESystemLedIndex')).setDescription('A row in the Trap Receiver Table.')
panduitProdDPoESystemLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('noaccess').setDescription('Table Index.')
panduitProdDPoESystemLedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3, 1, 2), PanduitLedColor()).setMaxAccess('readwrite').setDescription('LED Color.')
panduitProdDPoESystemLedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3, 1, 3), PanduitBlinkState()).setMaxAccess('readwrite').setDescription('LED Blink status.  Can be set to blink or steady.')
panduitProdDPoESystemLedOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 3, 1, 4), PanduitOverride()).setMaxAccess('readwrite').setDescription('Override normal functionality.  Normal functionality is \nto flash green.  To override, set this value to override(2)\nand set panduitProdDPoESystemLedColor, panduitProdDPoESystemLedRate,\nand panduitProdDPoESystemLedPeriod to achieve the desired result.')
panduitProdDPoESystemLedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 4), PanduitDuration()).setMaxAccess('readwrite').setDescription('Override normal functionality.  Normal functionality is \nto flash green.  To override, set this value to override(2)\nand set panduitProdDPoESystemLedColor, panduitProdDPoESystemLedRate,\nand panduitProdDPoESystemLedPeriod to achieve the desired result.')
panduitProdDPoEPoETable = MibTable((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5)).setDescription('Led information by Port.')
panduitProdDPoEPoEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5, 1)).setIndexNames((0, 'PANDUIT-DPoE-MIB', 'panduitProdDPoEPoEIndex')).setDescription('A row in the Trap Receiver Table.')
panduitProdDPoEPoEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('noaccess').setDescription('Table Index.')
panduitProdDPoEPoEForcePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5, 1, 2), PanduitPoEForcePowerType()).setMaxAccess('readwrite').setDescription('Allows power to be forced for PDs that can not be \ndetected by PSE.  Not all PDs may be supported.')
panduitProdDPoEPoEDetectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5, 1, 3), PanduitPoEDetectType()).setMaxAccess('readwrite').setDescription('Determines what PD types will be detected.')
panduitProdDPoEPoEMPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 5, 1, 4), PanduitPoEMPSType()).setMaxAccess('readwrite').setDescription('The Maintain Power Signature component(s) monitored by the PSE.')
panduitProdDPoELegacyDelay = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 6), PanduitPoELegacyDelay()).setMaxAccess('readwrite').setDescription('Length of time to detect a legacy PD.')
panduitProdDPoEVoltage = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 7), PanduitPoEVoltageType()).setMaxAccess('readonly').setDescription('Input voltage to the PSE.  802.3af states that the voltage\nshould be between 44-57 volts.')
panduitProdDPoEVoltageA = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 8), PanduitPoEVoltageType()).setMaxAccess('readonly').setDescription('Input voltage at Power connector A.  802.3af states that the voltage\nshould be between 44-57 volts.')
panduitProdDPoEVoltageB = MibScalar((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 9), PanduitPoEVoltageType()).setMaxAccess('readonly').setDescription('Input voltage at Power Connector B.  802.3af states that the voltage\nshould be between 44-57 volts.')
panduitDPoEConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10))
panduitDPoEGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1))
panduitDPoECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 2))
# mevans - Manually commented out malformed generated code:
# panduitDPoECapabilites = .setDescription('Agent capabilities for Panduit Powered Patch\nPanels.')
# panduitDPoECapabilites2 = .setDescription('Agent capabilities for Panduit Powered Patch\nPanels.')

# Augmentions

# Notifications

panduitDPoEPanelPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 11)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoEVoltage'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoEPortPowerStatusOff = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 3, 2)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonPortLocLocation'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('POWER-ETHERNET-MIB', 'pethPsePortPowerClassifications'), )
panduitDPoEPanelBelowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 5)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('POWER-ETHERNET-MIB', 'pethMainPseConsumptionPower'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('POWER-ETHERNET-MIB', 'pethMainPseUsageThreshold'), )
panduitDPoEPortLocationChange = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 7)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('POWER-ETHERNET-MIB', 'pethPsePortType'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonPortLocLocation'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), )
panduitDPoETrapRecipientAdded = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 9)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvIP'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoEPortPDDetectionFault = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 10)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('POWER-ETHERNET-MIB', 'pethPsePortType'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonPortLocLocation'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), )
panduitDPoEPanelFailure = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 6)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoESelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 8)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoEPanelPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 12)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoEVoltage'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoEPanelSelfTestPass = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 1)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitDPoEPortPowerStatusOn = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 3, 1)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonPortLocLocation'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('POWER-ETHERNET-MIB', 'pethPsePortPowerClassifications'), )
panduitDPoEPortPowerStatusFault = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 3, 3)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), ('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonPortLocLocation'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('POWER-ETHERNET-MIB', 'pethPsePortPowerClassifications'), )
panduitDPoEPanelAboveThreshold = NotificationType((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 0, 4)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('POWER-ETHERNET-MIB', 'pethMainPseConsumptionPower'), ('PANDUIT-PRODUCTS-PANEL-COMMON-MIB', 'panduitProdPanelCommonRackPositionId'), ('POWER-ETHERNET-MIB', 'pethMainPseUsageThreshold'), )

# Groups

panduitDPoEPortLEDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1, 1)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedRate'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedOverride'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedColor'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedPeriod'), )
panduitDPoENotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1, 4)).setObjects(('PANDUIT-DPoE-MIB', 'panduitDPoEPanelPowerLow'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPortPowerStatusOff'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPanelBelowThreshold'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPortLocationChange'), ('PANDUIT-DPoE-MIB', 'panduitDPoETrapRecipientAdded'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPortPDDetectionFault'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPanelFailure'), ('PANDUIT-DPoE-MIB', 'panduitDPoESelfTestFail'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPanelPowerHigh'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPanelSelfTestPass'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPortPowerStatusOn'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPortPowerStatusFault'), ('PANDUIT-DPoE-MIB', 'panduitDPoEPanelAboveThreshold'), )
panduitDPoEDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1, 6)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoELegacyDelay'), )
panduitDPoESystemLEDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1, 2)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoESystemLedColor'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoESystemLedRate'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoESystemLedOverride'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoESystemLedPeriod'), )
panduitDPoEPoEGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 3, 1, 2, 10, 1, 3)).setObjects(('PANDUIT-DPoE-MIB', 'panduitProdDPoEVoltage'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPoEDetectControl'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEVoltageA'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEVoltageB'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPoEMPSType'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPoEForcePwr'), ('PANDUIT-DPoE-MIB', 'panduitProdDPoEPortLedIndex'), )

# Exports

# Module identity
mibBuilder.exportSymbols('PANDUIT-DPoE-MIB', PYSNMP_MODULE_ID=panduitProdPanelDPoE)

# Objects
mibBuilder.exportSymbols('PANDUIT-DPoE-MIB', panduitProdPanelDPoE=panduitProdPanelDPoE, panduitProdPanelDPoENotifications=panduitProdPanelDPoENotifications, panduitDPoEPortPowerStatusChange=panduitDPoEPortPowerStatusChange, panduitProdDPoEPortLedTable=panduitProdDPoEPortLedTable, panduitProdDPoEPortLedEntry=panduitProdDPoEPortLedEntry, panduitProdDPoEPortLedIndex=panduitProdDPoEPortLedIndex, panduitProdDPoEPortLedColor=panduitProdDPoEPortLedColor, panduitProdDPoEPortLedRate=panduitProdDPoEPortLedRate, panduitProdDPoEPortLedOverride=panduitProdDPoEPortLedOverride, panduitProdDPoEPortLedPeriod=panduitProdDPoEPortLedPeriod, panduitProdDPoESystemLedTable=panduitProdDPoESystemLedTable, panduitProdDPoESystemLedEntry=panduitProdDPoESystemLedEntry, panduitProdDPoESystemLedIndex=panduitProdDPoESystemLedIndex, panduitProdDPoESystemLedColor=panduitProdDPoESystemLedColor, panduitProdDPoESystemLedRate=panduitProdDPoESystemLedRate, panduitProdDPoESystemLedOverride=panduitProdDPoESystemLedOverride, panduitProdDPoESystemLedPeriod=panduitProdDPoESystemLedPeriod, panduitProdDPoEPoETable=panduitProdDPoEPoETable, panduitProdDPoEPoEEntry=panduitProdDPoEPoEEntry, panduitProdDPoEPoEIndex=panduitProdDPoEPoEIndex, panduitProdDPoEPoEForcePwr=panduitProdDPoEPoEForcePwr, panduitProdDPoEPoEDetectControl=panduitProdDPoEPoEDetectControl, panduitProdDPoEPoEMPSType=panduitProdDPoEPoEMPSType, panduitProdDPoELegacyDelay=panduitProdDPoELegacyDelay, panduitProdDPoEVoltage=panduitProdDPoEVoltage, panduitProdDPoEVoltageA=panduitProdDPoEVoltageA, panduitProdDPoEVoltageB=panduitProdDPoEVoltageB, panduitDPoEConformance=panduitDPoEConformance, panduitDPoEGroups=panduitDPoEGroups, panduitDPoECompliances=panduitDPoECompliances)
# mevans -Removed OIDs that were not generated due to being malformed:
# ,panduitDPoECapabilites=panduitDPoECapabilites, panduitDPoECapabilites2=panduitDPoECapabilites2)

# Notifications
mibBuilder.exportSymbols('PANDUIT-DPoE-MIB', panduitDPoEPanelPowerLow=panduitDPoEPanelPowerLow, panduitDPoEPortPowerStatusOff=panduitDPoEPortPowerStatusOff, panduitDPoEPanelBelowThreshold=panduitDPoEPanelBelowThreshold, panduitDPoEPortLocationChange=panduitDPoEPortLocationChange, panduitDPoETrapRecipientAdded=panduitDPoETrapRecipientAdded, panduitDPoEPortPDDetectionFault=panduitDPoEPortPDDetectionFault, panduitDPoEPanelFailure=panduitDPoEPanelFailure, panduitDPoESelfTestFail=panduitDPoESelfTestFail, panduitDPoEPanelPowerHigh=panduitDPoEPanelPowerHigh, panduitDPoEPanelSelfTestPass=panduitDPoEPanelSelfTestPass, panduitDPoEPortPowerStatusOn=panduitDPoEPortPowerStatusOn, panduitDPoEPortPowerStatusFault=panduitDPoEPortPowerStatusFault, panduitDPoEPanelAboveThreshold=panduitDPoEPanelAboveThreshold)

# Groups
mibBuilder.exportSymbols('PANDUIT-DPoE-MIB', panduitDPoEPortLEDGroup=panduitDPoEPortLEDGroup, panduitDPoENotificationGroup=panduitDPoENotificationGroup, panduitDPoEDeprecatedGroup=panduitDPoEDeprecatedGroup, panduitDPoESystemLEDGroup=panduitDPoESystemLEDGroup, panduitDPoEPoEGroup=panduitDPoEPoEGroup)
