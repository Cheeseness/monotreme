"""
Copyright (C) 2007 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# PySNMP SMI module. Autogenerated from smidump -f python Mitsubishi-UPS-MIB
# by libsmi2pysnmp-0.0.7-alpha at Sat Sep  8 12:42:00 2007,
# Python version (2, 2, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, mgmt, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'MibIdentifier', 'NotificationType', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises', 'mgmt')
( DisplayString, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString')

# Types

class AutonomousType(DisplayString):
    pass

class NonNegativeInteger(Integer32):
    pass

class PositiveInteger(Integer32):
    pass

class TestAndIncr(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(0,2147483647L)
    pass

class TimeInterval(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(0,2147483647L)
    pass

class TimeStamp(TimeTicks):
    pass


# Objects

tag = MibIdentifier((1, 3, 6, 1, 4, 1, 13891))
mitsubishiUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 1))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 1), DisplayString()).setMaxAccess('readonly').setDescription('The name of the UPS manufacturer.')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('The UPS Model designation.')
upsIdentUPSSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 3), DisplayString()).setMaxAccess('readonly').setDescription('The UPS firmware/software version(s).  This variable\nmay or may not have the same value as\nupsIdentAgentSoftwareVersion in some implementations.')
upsIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('The UPS agent software version.  This variable may or may\nnot have the same value as upsIdentUPSSoftwareVersion in \nsome implementations.')
upsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 5), DisplayString()).setMaxAccess('readwrite').setDescription('A string identifying the UPS.  This object should be\nset by the administrator.')
upsIdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 1, 6), DisplayString()).setMaxAccess('readwrite').setDescription('A string identifying the devices attached to the output\nof the UPS.  This object should be set by the administrator.')
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 2))
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,4,)).subtype(namedValues=namedval.NamedValues(('unknown', 1), ('batteryNormal', 2), ('batteryLow', 3), ('batteryDepleted', 4), ))).setMaxAccess('readonly').setDescription('The indication of the capacity remaining in the UPS batteries.   \nA value of batteryNormal indicates a normal battery condition.  \nA value of batteryLow indicates the remaining battery run-time \nwill not maintain the output load for an extended period of time.\nA value of batteryDepleted indicates that the UPS will be unable\nto sustain the present load when and if the utility power is lost.')
upsSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('If the unit is on battery power, the elapsed time in seconds\nsince the UPS last switched to battery power, or the time since \nthe network management system was last restarted, whichever is less.  \nZero shall be returned if the unit is not on battery power.')
upsEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 3), PositiveInteger()).setMaxAccess('readonly').setDescription('An estimate of the time in minutes until the battery is depleted\nunder the present load conditions if the utility power is off and \nremains off, or if it were to be lost and remain off.')
upsEstimatedChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 4), Integer32()).setMaxAccess('readonly').setDescription('An estimate of the battery charge remaining expressed as a \npercent of full charge.')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 5), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the present battery voltage (0.1 Volt DC).')
upsBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2147483648L, 2147483647L))).setMaxAccess('readonly').setDescription('The present battery current (0.1 Amp DC).')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 2, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2147483648L, 2147483647L))).setMaxAccess('readonly').setDescription('The ambient temperature at or near the UPS Battery casing (degrees Centigrade).')
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 3))
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 3, 1), Counter32()).setMaxAccess('readonly').setDescription('A count of the number of times the input entered an\nout-of-tolerance condition as defined by the manufacturer.  \nThis count is incremented by one each time the input \ntransitions from zero out-of-tolerance lines to one or more \ninput lines out-of-tolerance.')
upsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 3, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of input lines utilized in this device.  This\nvariable indicates the number of rows in the input table.')
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3)).setDescription('A list of input table entries.  The number of entries\nis given by the value of upsInputNumLines.')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1)).setIndexNames((0, 'Mitsubishi-UPS-MIB', 'upsInputLineIndex')).setDescription('An entry containing information applicable to a\nparticular input line.')
upsInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The input line identifier.')
upsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present input frequency (0.1 Hertz).')
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1, 3), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the present input voltage (0.1 RMS Volt).')
upsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1, 4), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the present input current (0.1 RMS Amp).')
upsInputTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 3, 3, 1, 5), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the present input true power (watts).')
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 4))
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 4, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,7,4,3,5,6,)).subtype(namedValues=namedval.NamedValues(('other', 1), ('none', 2), ('normal', 3), ('bypass', 4), ('battery', 5), ('booster', 6), ('reducer', 7), ))).setMaxAccess('readonly').setDescription('The present source of output power.  A value of none (2) indicates\nthere is no source of output power (and therefore no output power), \nfor example, the system has opened the output breaker.')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 4, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present output frequency (0.1 Hertz).')
upsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 4, 3), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of output lines utilized in this device.  This\nvariable indicates the number of rows in the output table.')
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4)).setDescription('A list of output table entries.  The number of\nentries is given by the value of upsOutputNumLines.')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1)).setIndexNames((0, 'Mitsubishi-UPS-MIB', 'upsOutputLineIndex')).setDescription('An entry containing information applicable to a\nparticular output line.')
upsOutputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The output line identifier.')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present output voltage (0.1 RMS Volt).')
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1, 3), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present output current (0.1 RMS Amp).')
upsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1, 4), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present output true power (watts).')
upsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 4, 4, 1, 5), Integer32()).setMaxAccess('readonly').setDescription('The percentage of the UPS power capacity presently being \nused on this output line (the greater of the percent load \nof true power capacity and the percent load of VA.')
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 5))
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 5, 1), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present bypass frequency.')
upsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 5, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of bypass lines utilized in this device.  This\nentry indicates the number of rows in the bypass table.')
upsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3)).setDescription('A list of bypass table entries.  The number of entries\nis given by the value of upsBypassNumLines.')
upsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3, 1)).setIndexNames((0, 'Mitsubishi-UPS-MIB', 'upsBypassLineIndex')).setDescription('An entry containing information applicable to a\nparticular bypass input.')
upsBypassLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The bypass line identifier.')
upsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3, 1, 2), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present bypass voltage (0.1 RMS Volt).')
upsBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3, 1, 3), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present bypass current (0.1 RMS Amp).')
upsBypassPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 5, 3, 1, 4), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The present true power conveyed by the bypass (watts).')
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 6))
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 1), Gauge32()).setMaxAccess('readonly').setDescription('The present number of active alarm conditions.')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13891, 101, 6, 2)).setDescription('A list of alarm table entries.  Alarms are named by \nan OBJECT IDENTIFIER, upsAlarmDescr, to allow a single \ntable to reflect well known alarms plus alarms defined \nby a particular implementation, i.e., as documented in\nthe private enterprise MIB definition for the device.  \nNo two rows will have the same value of upsAlarmDescr,\nsince alarms define conditions.  In order to meet this\nrequirement, care should be taken in the definition of\nalarm conditions to insure that a system cannot enter\nthe same condition multiple times simultaneously.\n\nThe number of rows in the table at any given time is\nreflected by the value of upsAlarmsPresent.')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13891, 101, 6, 2, 1)).setIndexNames((0, 'Mitsubishi-UPS-MIB', 'upsAlarmId')).setDescription('An entry containing information applicable to a\nparticular alarm.')
upsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 6, 2, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('A unique identifier for an alarm condition.  This\nvalue must remain constant.')
upsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 6, 2, 1, 2), AutonomousType()).setMaxAccess('readonly').setDescription('A reference to an alarm description object.  The object\nreferenced should not be accessible, but rather be used\nto provide a unique description of the alarm condition.')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13891, 101, 6, 2, 1, 3), TimeStamp()).setMaxAccess('readonly').setDescription('The value of sysUpTime when the alarm condition was\ndetected.  If the alarm condition was detected at the\ntime of agent startup and presumably existed before\nagent startup, the value of upsAlarmTime shall equal 0.')
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3))
upsAlarmBatteryBad = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('One or more batteries have been determined to require\nreplacement.')
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 2), Integer32()).setMaxAccess('readonly').setDescription('The UPS is drawing power from the batteries.')
upsAlarmLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 3), Integer32()).setMaxAccess('readonly').setDescription('The remaining battery run-time is less than or equal\nto upsConfigLowBattTime.')
upsAlarmDepletedBattery = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 4), Integer32()).setMaxAccess('readonly').setDescription('The UPS will be unable to sustain the present load\nwhen and if the utility power is lost.')
upsAlarmTempBad = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 5), Integer32()).setMaxAccess('readonly').setDescription('A temperature is out of tolerance.')
upsAlarmInputBad = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 6), Integer32()).setMaxAccess('readonly').setDescription('An input condition is out of tolerance.')
upsAlarmOutputBad = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 7), Integer32()).setMaxAccess('readonly').setDescription('An output condition (other than OutputOverload) is\nout of tolerance.')
upsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 8), Integer32()).setMaxAccess('readonly').setDescription('The output load exceeds the UPS output capacity.')
upsAlarmOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 9), Integer32()).setMaxAccess('readonly').setDescription('The Bypass is presently engaged on the UPS.')
upsAlarmBypassBad = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 10), Integer32()).setMaxAccess('readonly').setDescription('The Bypass is out of tolerance.')
upsAlarmOutputOffAsRequested = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 11), Integer32()).setMaxAccess('readonly').setDescription('The UPS has shut down as requested, i.e., the output\nis off.')
upsAlarmUpsOffAsRequested = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 12), Integer32()).setMaxAccess('readonly').setDescription('The entire UPS has shutdown as commanded.')
upsAlarmChargerFailed = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 13), Integer32()).setMaxAccess('readonly').setDescription('An uncorrected problem has been detected within the\nUPS charger subsystem.')
upsAlarmUpsOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 14), Integer32()).setMaxAccess('readonly').setDescription('The output of the UPS is in the off state.')
upsAlarmUpsSystemOff = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 15), Integer32()).setMaxAccess('readonly').setDescription('The UPS system is in the off state.')
upsAlarmFanFailure = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 16), Integer32()).setMaxAccess('readonly').setDescription('The failure of one or more fans in the UPS has been\ndetected.')
upsAlarmFuseFailure = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 17), Integer32()).setMaxAccess('readonly').setDescription('The failure of one or more fuses has been detected.')
upsAlarmGeneralFault = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 18), Integer32()).setMaxAccess('readonly').setDescription('A general fault in the UPS has been detected.')
upsAlarmDiagnosticTestFailed = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 19), Integer32()).setMaxAccess('readonly').setDescription('The result of the last diagnostic test indicates a\nfailure.')
upsAlarmCommunicationsLost = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 20), Integer32()).setMaxAccess('readonly').setDescription('A problem has been encountered in the\ncommunications between the agent and the UPS.')
upsAlarmAwaitingPower = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 21), Integer32()).setMaxAccess('readonly').setDescription('The UPS output is off and the UPS is awaiting the\nreturn of input power.')
upsAlarmShutdownPending = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 22), Integer32()).setMaxAccess('readonly').setDescription('A upsShutdownAfterDelay countdown is underway.')
upsAlarmShutdownImminent = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 23), Integer32()).setMaxAccess('readonly').setDescription('The UPS will turn off power to the load in less than\n5 seconds; this may be either a timed shutdown or a\nlow battery shutdown.')
upsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 3, 24), Integer32()).setMaxAccess('readonly').setDescription('A test is in progress, as initiated and indicated by\nthe Test Group.  Tests initiated via other\nimplementation-specific mechanisms can indicate the\npresence of the testing in the alarm table, if\ndesired, via a OBJECT-TYPE macro in the MIB\ndocument specific to that implementation and are\noutside the scope of this OBJECT-TYPE.')
upsAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 4), Integer32()).setMaxAccess('readonly').setDescription('A unique identifier for an alarm condition.  This\nvalue must remain constant.')
upsAlarmDESCR = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 6, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readonly').setDescription('A reference to an alarm description object.  The object\nreferences should not be accessible, but rather be used\nto provide a unique description of the alarm condition.')
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 7))
upsTestId = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 1), ObjectIdentifier()).setMaxAccess('readwrite').setDescription('The test named by an OBJECT IDENTIFIER which\nallows a standard mechanism for the initiation of\na test, including the well known tests identified in\nthis document.')
upsTestSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 2), TestAndIncr()).setMaxAccess('readwrite').setDescription('A spin lock on the test subsystem.')
upsTestResultsSummary = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,5,1,6,2,)).subtype(namedValues=namedval.NamedValues(('donePass', 1), ('doneWarning', 2), ('doneError', 3), ('aborted', 4), ('inProgress', 5), ('noTestsInitiated', 6), ))).setMaxAccess('readonly').setDescription('The results of the current or last UPS diagnostics\ntest performed.  The values for donePass(1),\ndoneWarning(2), and doneError(3) indicate that the\ntest completed either successfully, with a warning, or\nwith an error, respectively.  The value aborted(4) is\nreturned for tests which are aborted by setting the\nvalue of upsTestId to upsTestAbortTestInProgress.\nTests which have not yet concluded are indicated by\ninProgress(5).  The value noTestsInitiated(6)\nindicates that no previous test results are available,\nsuch as is the case when no tests have been run since\nthe last reinitialization of the network management\nsubsystem and the system has no provision for non-\nvolatile storage of test results.')
upsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 4), DisplayString()).setMaxAccess('readonly').setDescription('Additional information about upsTestResultsSummary.\nIf no additional information available, a zero length\nstring is returned.')
upsTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 5), TimeStamp()).setMaxAccess('readonly').setDescription('The value of sysUpTime at the time the test in\nprogress was initiated, or, if no test is in progress,\nthe time the previous test was initiated.  If the\nvalue of upsTestResultsSummary is noTestsInitiated(6),\nupsTestStartTime has the value 0.')
upsTestElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 6), TimeInterval()).setMaxAccess('readonly').setDescription('The amount of time, in TimeTicks, since the test in\nprogress was initiated, or, if no test is in progress,\nthe previous test took to complete.  If the value of\nupsTestResultsSummary is noTestsInitiated(6),\nupsTestElapsedTime has the value 0.')
upsWellKnownTests = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7))
upsTestNoTestsInitiated = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7, 1), Integer32()).setMaxAccess('readonly').setDescription('No tests have been initiated and no test is in progress.')
upsTestAbortTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7, 2), Integer32()).setMaxAccess('readonly').setDescription('The test in progress is to be aborted / the test in\nprogress was aborted.')
upsTestGeneralSystemsTest = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7, 3), Integer32()).setMaxAccess('readonly').setDescription("The manufacturer's standard test of UPS device systems.")
upsTestQuickBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7, 4), Integer32()).setMaxAccess('readonly').setDescription('A test that is sufficient to determine if the battery\nneeds replacement.')
upsTestDeepBatteryCalibration = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 7, 7, 5), Integer32()).setMaxAccess('readonly').setDescription('The system is placed on battery to a discharge level,\nset by the manufacturer, sufficient to determine\nbattery replacement and battery run-time with a high\ndegree of confidence.  WARNING:  this test will leave\nthe battery in a low charge state and will require\ntime for recharging to a level sufficient to provide\nnormal battery duration for the protected load.')
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 8))
upsShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 8, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('output', 1), ('system', 2), ))).setMaxAccess('readwrite').setDescription('This object determines the nature of the action to be\ntaken at the time when the countdown of the\nupsShutdownAfterDelay and upsRebootWithDuration\nobjects reaches zero.\n\nSetting this object to output(1) indicates that\nshutdown requests should cause only the output of the\nUPS to turn off.  Setting this object to system(2)\nindicates that shutdown requests will cause the entire\nUPS system to turn off.')
upsShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 8, 2), Integer32()).setMaxAccess('readwrite').setDescription('Setting this object will shutdown (i.e., turn off)\neither the UPS output or the UPS system (as determined\nby the value of upsShutdownType at the time of\nshutdown) after the indicated number of seconds, or\nless if the UPS batteries become depleted. Setting\nthis object to 0 will cause the shutdown to occur\nimmediately.  Setting this object to -1 will abort the\ncountdown.  If the system is already in the desired\nstate at the time the countdown reaches 0, then\nnothing will happen.  That is, there is no additional\naction at that time if upsShutdownType = system and\nthe system is already off.  Similarly, there is no\nadditional action at that time if upsShutdownType =\noutput and the output is already off.  When read,\nupsShutdownAfterDelay will return the number of\nseconds remaining until shutdown, or -1 if no shutdown\ncountdown is in effect.  On some systems, if the agent\nis restarted while a shutdown countdown is in effect,\nthe countdown may be aborted.  Sets to this object\noverride any upsShutdownAfterDelay already in effect.')
upsStartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 8, 3), Integer32()).setMaxAccess('readwrite').setDescription('Setting this object will start the output after the\nindicated number of seconds, including starting the\nUPS, if necessary.  Setting this object to 0 will\ncause the startup to occur immediately.  Setting this\nobject to -1 will abort the countdown.  If the output\nis already on at the time the countdown reaches 0,\nthen nothing will happen.  Sets to this object\noverride the effect of any upsStartupAfterDelay\ncountdown or upsRebootWithDuration countdown in\nprogress.  When read, upsStartupAfterDelay will return\nthe number of seconds until startup, or -1 if no\nstartup countdown is in effect.  If the countdown\nexpires during a utility failure, the startup shall\nnot occur until the utility power is restored.  On\nsome systems, if the agent is restarted while a\nstartup countdown is in effect, the countdown is\naborted.')
upsRebootWithDuration = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 8, 4), Integer32()).setMaxAccess('readwrite').setDescription('Setting this object will immediately shutdown (i.e.,\nturn off) either the UPS output or the UPS system (as\ndetermined by the value of upsShutdownType at the time\nof shutdown) for a period equal to the indicated\nnumber of seconds, after which time the output will be\nstarted, including starting the UPS, if necessary.  If\nthe number of seconds required to perform the request\nis greater than the requested duration, then the\nrequested shutdown and startup cycle shall be\nperformed in the minimum time possible, but in no case\nshall this require more than the requested duration\nplus 60 seconds.  When read, upsRebootWithDuration\nshall return the number of seconds remaining in the\ncountdown, or -1 if no countdown is in progress.  If\nthe startup should occur during a utility failure, the\nstartup shall not occur until the utility power is\nrestored.')
upsAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 8, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('on', 1), ('off', 2), ))).setMaxAccess('readwrite').setDescription("Setting this object to 'on' will cause the UPS system\nto restart after a shutdown if the shutdown occurred\nduring a power loss as a result of either a\nupsShutdownAfterDelay or an internal battery depleted\ncondition.  Setting this object to 'off' will prevent\nthe UPS system from restarting after a shutdown until\nan operator manually or remotely explicitly restarts\nit.  If the UPS is in a startup or reboot countdown,\nthen the UPS will not restart until that delay has\nbeen satisfied.")
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 9))
upsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 1), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The magnitude of the nominal input voltage (RMS Volts).  \nOn those systems which support read-write access to this\nobject, if there is an attempt to set this variable to\na value that is not supported, the request must be\nrejected and the agent shall respond with an\nappropriate error message, i.e., badValue for SNMPv1,\nor inconsistentValue for SNMPv2.')
upsConfigInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 2), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The nominal input frequency (0.1 Hertz).  On those systems\nwhich support read-write access to this object, if there is\nan attempt to set this variable to a value that is not\nsupported, the request must be rejected and the agent\nshall respond with an appropriate error message, i.e.,\nbadValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 3), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The magnitude of the nominal output voltage (RMS Volts).  \nOn those systems which support read-write access to this\nobject, if there is an attempt to set this variable to\na value that is not supported, the request must be\nrejected and the agent shall respond with an\nappropriate error message, i.e., badValue for SNMPv1,\nor inconsistentValue for SNMPv2.')
upsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 4), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The nominal output frequency (0.1 Hertz).  On those systems \nwhich support read-write access to this object, if there is\nan attempt to set this variable to a value that is not\nsupported, the request must be rejected and the agent\nshall respond with an appropriate error message, i.e.,\nbadValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 5), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the nominal Volt-Amp rating (Volt-Amps).')
upsConfigOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 6), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The magnitude of the nominal true power rating (watts).')
upsConfigLowBattTime = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 7), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The value of upsEstimatedMinutesRemaining at which a\nlowBattery condition is declared.  For agents which\nsupport only discrete (discontinuous) values, then the\nagent shall round up to the next supported value.  If\nthe requested value is larger than the largest\nsupported value, then the largest supported value\nshall be selected.')
upsConfigAudibleStatus = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('disabled', 1), ('enabled', 2), ('muted', 3), ))).setMaxAccess('readwrite').setDescription('The requested state of the audible alarm.  When in\nthe disabled state, the audible alarm should never\nsound.  The enabled state is self-describing.  Setting\nthis object to muted(3) when the audible alarm is\nsounding shall temporarily silence the alarm.  It will\nremain muted until it would normally stop sounding and\nthe value returned for read operations during this\nperiod shall equal muted(3).  At the end of this\nperiod, the value shall revert to enabled(2).  Writes\nof the value muted(3) when the audible alarm is not\nsounding shall be accepted but otherwise shall have no\neffect.')
upsConfigLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 9), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The minimum input line voltage (RMS Volts) allowed before \nthe UPS system transfers to battery backup.')
upsConfigHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 9, 10), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The maximum line voltage (RMS Volts) allowed before the UPS\nsystem transfers to battery backup.')
upsTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 13891, 101, 10))
trapCode = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 10, 1), Unsigned32()).setMaxAccess('readonly').setDescription('A number identifying the event for that last trap that was sent.')
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 13891, 101, 10, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readonly').setDescription('A string identifying the event for that last trap that was sent.')

# Augmentions

# Notifications

alarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 13891, 101, 0, 2)).setObjects(('Mitsubishi-UPS-MIB', 'trapDescription'), ('Mitsubishi-UPS-MIB', 'trapCode'), )
upsTrapInitialization = NotificationType((1, 3, 6, 1, 4, 1, 13891, 101, 0, 5)).setObjects(('Mitsubishi-UPS-MIB', 'upsIdentName'), )
upsAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13891, 101, 0, 4)).setObjects(('Mitsubishi-UPS-MIB', 'trapDescription'), ('Mitsubishi-UPS-MIB', 'trapCode'), )
alarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 13891, 101, 0, 1)).setObjects(('Mitsubishi-UPS-MIB', 'trapDescription'), ('Mitsubishi-UPS-MIB', 'trapCode'), )
alarmInformation = NotificationType((1, 3, 6, 1, 4, 1, 13891, 101, 0, 3)).setObjects(('Mitsubishi-UPS-MIB', 'trapDescription'), ('Mitsubishi-UPS-MIB', 'trapCode'), )

# Exports

# Types
mibBuilder.exportSymbols('Mitsubishi-UPS-MIB', AutonomousType=AutonomousType, NonNegativeInteger=NonNegativeInteger, PositiveInteger=PositiveInteger, TestAndIncr=TestAndIncr, TimeInterval=TimeInterval, TimeStamp=TimeStamp)

# Objects
mibBuilder.exportSymbols('Mitsubishi-UPS-MIB', tag=tag, mitsubishiUPS=mitsubishiUPS, upsIdent=upsIdent, upsIdentManufacturer=upsIdentManufacturer, upsIdentModel=upsIdentModel, upsIdentUPSSoftwareVersion=upsIdentUPSSoftwareVersion, upsIdentAgentSoftwareVersion=upsIdentAgentSoftwareVersion, upsIdentName=upsIdentName, upsIdentAttachedDevices=upsIdentAttachedDevices, upsBattery=upsBattery, upsBatteryStatus=upsBatteryStatus, upsSecondsOnBattery=upsSecondsOnBattery, upsEstimatedMinutesRemaining=upsEstimatedMinutesRemaining, upsEstimatedChargeRemaining=upsEstimatedChargeRemaining, upsBatteryVoltage=upsBatteryVoltage, upsBatteryCurrent=upsBatteryCurrent, upsBatteryTemperature=upsBatteryTemperature, upsInput=upsInput, upsInputLineBads=upsInputLineBads, upsInputNumLines=upsInputNumLines, upsInputTable=upsInputTable, upsInputEntry=upsInputEntry, upsInputLineIndex=upsInputLineIndex, upsInputFrequency=upsInputFrequency, upsInputVoltage=upsInputVoltage, upsInputCurrent=upsInputCurrent, upsInputTruePower=upsInputTruePower, upsOutput=upsOutput, upsOutputSource=upsOutputSource, upsOutputFrequency=upsOutputFrequency, upsOutputNumLines=upsOutputNumLines, upsOutputTable=upsOutputTable, upsOutputEntry=upsOutputEntry, upsOutputLineIndex=upsOutputLineIndex, upsOutputVoltage=upsOutputVoltage, upsOutputCurrent=upsOutputCurrent, upsOutputPower=upsOutputPower, upsOutputPercentLoad=upsOutputPercentLoad, upsBypass=upsBypass, upsBypassFrequency=upsBypassFrequency, upsBypassNumLines=upsBypassNumLines, upsBypassTable=upsBypassTable, upsBypassEntry=upsBypassEntry, upsBypassLineIndex=upsBypassLineIndex, upsBypassVoltage=upsBypassVoltage, upsBypassCurrent=upsBypassCurrent, upsBypassPower=upsBypassPower, upsAlarm=upsAlarm, upsAlarmsPresent=upsAlarmsPresent, upsAlarmTable=upsAlarmTable, upsAlarmEntry=upsAlarmEntry, upsAlarmId=upsAlarmId, upsAlarmDescr=upsAlarmDescr, upsAlarmTime=upsAlarmTime, upsWellKnownAlarms=upsWellKnownAlarms, upsAlarmBatteryBad=upsAlarmBatteryBad, upsAlarmOnBattery=upsAlarmOnBattery, upsAlarmLowBattery=upsAlarmLowBattery, upsAlarmDepletedBattery=upsAlarmDepletedBattery, upsAlarmTempBad=upsAlarmTempBad, upsAlarmInputBad=upsAlarmInputBad, upsAlarmOutputBad=upsAlarmOutputBad, upsAlarmOutputOverload=upsAlarmOutputOverload, upsAlarmOnBypass=upsAlarmOnBypass, upsAlarmBypassBad=upsAlarmBypassBad, upsAlarmOutputOffAsRequested=upsAlarmOutputOffAsRequested, upsAlarmUpsOffAsRequested=upsAlarmUpsOffAsRequested, upsAlarmChargerFailed=upsAlarmChargerFailed, upsAlarmUpsOutputOff=upsAlarmUpsOutputOff, upsAlarmUpsSystemOff=upsAlarmUpsSystemOff, upsAlarmFanFailure=upsAlarmFanFailure, upsAlarmFuseFailure=upsAlarmFuseFailure, upsAlarmGeneralFault=upsAlarmGeneralFault, upsAlarmDiagnosticTestFailed=upsAlarmDiagnosticTestFailed, upsAlarmCommunicationsLost=upsAlarmCommunicationsLost, upsAlarmAwaitingPower=upsAlarmAwaitingPower, upsAlarmShutdownPending=upsAlarmShutdownPending, upsAlarmShutdownImminent=upsAlarmShutdownImminent, upsAlarmTestInProgress=upsAlarmTestInProgress, upsAlarmID=upsAlarmID, upsAlarmDESCR=upsAlarmDESCR, upsTest=upsTest, upsTestId=upsTestId, upsTestSpinLock=upsTestSpinLock, upsTestResultsSummary=upsTestResultsSummary, upsTestResultsDetail=upsTestResultsDetail, upsTestStartTime=upsTestStartTime, upsTestElapsedTime=upsTestElapsedTime, upsWellKnownTests=upsWellKnownTests, upsTestNoTestsInitiated=upsTestNoTestsInitiated, upsTestAbortTestInProgress=upsTestAbortTestInProgress, upsTestGeneralSystemsTest=upsTestGeneralSystemsTest, upsTestQuickBatteryTest=upsTestQuickBatteryTest, upsTestDeepBatteryCalibration=upsTestDeepBatteryCalibration, upsControl=upsControl, upsShutdownType=upsShutdownType, upsShutdownAfterDelay=upsShutdownAfterDelay, upsStartupAfterDelay=upsStartupAfterDelay, upsRebootWithDuration=upsRebootWithDuration, upsAutoRestart=upsAutoRestart, upsConfig=upsConfig, upsConfigInputVoltage=upsConfigInputVoltage, upsConfigInputFreq=upsConfigInputFreq, upsConfigOutputVoltage=upsConfigOutputVoltage, upsConfigOutputFreq=upsConfigOutputFreq, upsConfigOutputVA=upsConfigOutputVA, upsConfigOutputPower=upsConfigOutputPower, upsConfigLowBattTime=upsConfigLowBattTime, upsConfigAudibleStatus=upsConfigAudibleStatus, upsConfigLowVoltageTransferPoint=upsConfigLowVoltageTransferPoint, upsConfigHighVoltageTransferPoint=upsConfigHighVoltageTransferPoint, upsTrapInfo=upsTrapInfo, trapCode=trapCode, trapDescription=trapDescription)

# Notifications
mibBuilder.exportSymbols('Mitsubishi-UPS-MIB', alarmWarning=alarmWarning, upsTrapInitialization=upsTrapInitialization, upsAlarmCleared=upsAlarmCleared, alarmCritical=alarmCritical, alarmInformation=alarmInformation)

