"""
Copyright (C) 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# ============================================================================
# Created via /home/mevans/source/pysnmp-experiments/Panduit-MIBs-1/PANDUIT.sh:
# 
# Use smidump and RZ's custom version of libsmi2pysnmp
# which was part of /home/mevans/source/pysnmp-experiments/ at the time of
# execution.
# 
# Essentially:
# 
# exec 5>PANDUIT-COMMON-MIB.header 2>&5
# smidump --preload=./PANDUIT-REG.txt --preload=./PANDUIT-TC.txt -f python PANDUIT-COMMON-MIB.txt | ../libsmi2pysnmp >PANDUIT-COMMON-MIB.pysnmp
# cat PANDUIT-COMMON-MIB.header | sed 's/^/# /g' >PANDUIT-COMMON-MIB.py
# cat PANDUIT-COMMON-MIB.pysnmp >>PANDUIT-COMMON-MIB.py
# rm PANDUIT-COMMON-MIB.pysnmp
# rm PANDUIT-COMMON-MIB.header
# ----------------------------------------------------------------------------
# PANDUIT-COMMON-MIB.txt:70: revision not in reverse chronological order
# PANDUIT-COMMON-MIB.txt:77: revision not in reverse chronological order
# PANDUIT-COMMON-MIB.txt:97: revision not in reverse chronological order
# PANDUIT-COMMON-MIB.txt:105: revision not in reverse chronological order
# PANDUIT-COMMON-MIB.txt:204: identifier `sNMPv1_SNMPv2c' must not contain an underscore
# smidump: module `PANDUIT-COMMON-MIB.txt' contains errors, expect flawed output
# ==========================================================================
# PySNMP SMI module. Autogenerated from smidump -f python PANDUIT-COMMON-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Tue Oct 16 16:30:53 2007,
# Python version (2, 2, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( panduit, ) = mibBuilder.importSymbols('PANDUIT-REG', 'panduit')
( PanduitAccessLevel, PanduitLongDisplayString, ) = mibBuilder.importSymbols('PANDUIT-TC', 'PanduitAccessLevel', 'PanduitLongDisplayString')
( SnmpAdminString, SnmpSecurityLevel, ) = mibBuilder.importSymbols('SNMP-FRAMEWORK-MIB', 'SnmpAdminString', 'SnmpSecurityLevel')
( usmUserEntry, ) = mibBuilder.importSymbols('SNMP-USER-BASED-SM-MIB', 'usmUserEntry')
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols('SNMPv2-CONF', 'ModuleCompliance', 'NotificationGroup', 'ObjectGroup')
( sysName, ) = mibBuilder.importSymbols('SNMPv2-MIB', 'sysName')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'ModuleIdentity', 'MibIdentifier', 'NotificationType', 'ObjectIdentity', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32')
( DisplayString, MacAddress, TextualConvention, TruthValue, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString', 'MacAddress', 'TextualConvention', 'TruthValue')

# Types

class PanduitNetworkIPType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,1,)
    namedValues = namedval.NamedValues(('dynamic', 1), ('static', 2), )
    pass

class PanduitProductFamilyType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(3,2,1,)
    namedValues = namedval.NamedValues(('poweredPatchPanel', 1), ('aJack', 2), ('iPanel', 3), )
    pass

class PanduitSNMPVersionSupportType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,2,3,)
    namedValues = namedval.NamedValues(('all', 1), ('sNMPv1_SNMPv2c', 2), ('sNMPv3', 3), )
    pass

class PanduitSetType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,3,2,)
    namedValues = namedval.NamedValues(('configured', 1), ('request', 2), ('processing', 3), )
    pass


# Objects

panduitCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 19536, 2)).setRevisions(('2006-05-04 00:00','2005-12-23 00:00','2005-11-21 00:00','2005-04-27 00:00','2005-01-07 00:00',))
panduitCommonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 0))
panduitCommonNotifyPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 0, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('notifyonly').setDescription('The Port number of the port involved in the notification \nevent.')
panduitIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 1))
panduitIdentificationFamily = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 1), PanduitProductFamilyType()).setMaxAccess('readonly').setDescription('A category of products for which the managed object is a member.\nFor example, a DPoE24U1x belongs to PoweredPatchPanel(1) Family.')
panduitIdentificationVersion = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Hardware Version of the managed object.')
panduitIdentificationMAC = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 3), MacAddress()).setMaxAccess('readonly').setDescription('MAC Address of the Managed Object.')
panduitIdentificationHwId = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A combination of the Family, Version, and MAC Address.\nThe format is Family:Version:MAC Address.')
panduitIdentificationFwId = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 5), DisplayString()).setMaxAccess('readonly').setDescription('Firmware Version Number, including build info.')
panduitIdentificationLocation = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 1, 6), PanduitLongDisplayString()).setMaxAccess('readwrite').setDescription('Location of the managed object.')
panduitNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 2))
panduitNetIP = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1))
panduitNetIPTypeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 1), PanduitNetworkIPType()).setMaxAccess('readonly').setDescription('Current System IP Type (See definition of PanduitNetworkIPType \nabove).  Determines if IP Address is static or dynamic.')
panduitNetIPAddressCurrent = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 2), IpAddress()).setMaxAccess('readonly').setDescription("The managed object's IP Address.")
panduitNetIPMaskCurrent = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 3), IpAddress()).setMaxAccess('readonly').setDescription("The managed object's Subnet Mask.")
panduitNetIPGatewayCurrent = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 4), IpAddress()).setMaxAccess('readonly').setDescription("The managed object's Default Gateway IP Address.")
panduitNetIPTypeConfig = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 5), PanduitNetworkIPType()).setMaxAccess('readwrite').setDescription("Used to modify the managed object's IP Type(See definition of \nPanduitNetworkIPType above).  This is used to determine if the IP \nAddress values are manually set by the administrator or using a DHCP\nserver.")
panduitNetIPAddressConfig = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 6), IpAddress()).setMaxAccess('readwrite').setDescription("Used to modify the managed object's IP Address.")
panduitNetIPMaskConfig = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 7), IpAddress()).setMaxAccess('readwrite').setDescription("Used to modify the managed object's Subnet Mask.")
panduitNetIPGatewayConfig = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 8), IpAddress()).setMaxAccess('readwrite').setDescription("Used to modify the managed object's Default Gateway IP \nAddress.")
panduitNetIPSetConfig = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 9), PanduitSetType()).setMaxAccess('readwrite').setDescription('Setting to request(2) will change Current IP Address values \nusing the Config IP Address Values.  Additionaly, reports on the \nstatus of the change.')
panduitNetIPSetCommit = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 1, 10), PanduitSetType()).setMaxAccess('readwrite').setDescription('Setting to request(2) will make the Current IP Address values\npermanent.  This is required after changin the IP Address values\nusing panduitSetIpConfig.  If this is not done, a reboot of the\nmanaged object will cause the IP Address Values to revert to\ntheir last committed values.')
panduitNetSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2))
panduitNetSNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readwrite').setDescription("The managed object's Read Community String.")
panduitNetSNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess('readwrite').setDescription("The managed object's Write Community String.  Access to this \nvalue is granted only when the write community string is specified \nin the SNMP operation.")
panduitNetSNMPTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3))
panduitNetSNMPTrapConfigRecvNum = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 1), Integer32()).setMaxAccess('readonly').setDescription("The number of Trap receiver's allowed by the managed object.\nThis table does not support row creation.")
panduitNetSNMPTrapRecvTable = MibTable((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2)).setDescription('A list of destinations for SNMP Traps in the form of IP \nAddresses.  In addition to destinations, the table also contains \ncertain configuration information for each destination.')
panduitNetSNMPTrapRecvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1)).setIndexNames((0, 'PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvIndex')).setDescription('A row in the Trap Receiver Table.')
panduitNetSNMPTrapRecvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess('noaccess').setDescription('Trap Receiver Table Index.')
panduitNetSNMPTrapRecvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 2), IpAddress()).setMaxAccess('readwrite').setDescription('Destination IP Address for traps from the managed object.')
panduitNetSNMPTrapRecvEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 3), TruthValue()).setMaxAccess('readwrite').setDescription('Determines whether or not the managed object will send a trap \nto the destination IP Address for a given row.  true(1) indicates \nthat the managed object will send a trap to the destination IP \nAddress.')
panduitNetSNMPTrapRecvCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 255))).setMaxAccess('readwrite').setDescription('The Community string to be included in the trap sent to the \ndestination IP Address.')
panduitNetSNMPTrapRecvSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 15))).setMaxAccess('readwrite').setDescription('Bit-mask used to filter which events should be sent to the \ndestination IP address.  Each Panduit Trap event has an associated\n\t\tseverity Level.  The levels are:\n\n\t\tCritical(1),\n\t\tMajor(2),\n\t\tMinor(4),\n\t\tAdvisory(8),\n\t\tAll(15)\n\nThe severity value can be a combination of the levels in order to \nallow the destination IP address to receive more than one severity \nlevel.  For example, Critical(1) and Minor(4) can be combined by \nsetting the severity level to 5 (4+1).')
panduitNetsNMPTrapRecvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,2,1,)).subtype(namedValues=namedval.NamedValues(('snmpv1', 1), ('snmpv2c', 2), ('snmpv3', 3), ))).setMaxAccess('readwrite').setDescription('SNMP Version of the TRAP PDU.')
panduitNetSNMPTrapRecvUser = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 32))).setMaxAccess('readwrite').setDescription('A USM User Name that will be used to send \nSNMPv3 Traps.  The user must exist in the \nusmUserTable.')
panduitNetSNMPTrapRecvAuthLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 3, 2, 1, 8), SnmpSecurityLevel()).setMaxAccess('readwrite').setDescription('The security level applied to the trap.')
panduitNetSNMPVersionSupport = MibScalar((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 4), PanduitSNMPVersionSupportType()).setMaxAccess('readwrite').setDescription('The SNMP Packet versions that are supported by the agent.')
panduitNetSNMPACM = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 5))
panduitNetSNMPACMTable = MibTable((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 5, 1)).setDescription('A list of destinations for SNMP Traps in the form of IP \nAddresses.  In addition to destinations, the table also contains \ncertain configuration information for each destination.')
panduitNetSNMPACMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 5, 1, 1)).setDescription('A row in the Trap Receiver Table.')
panduitNetSNMPACMAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 5, 1, 1, 1), PanduitAccessLevel()).setMaxAccess('readonly').setDescription('Read-only and read-write access to the agent.')
panduitNetSNMPACMAuthLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19536, 2, 2, 2, 5, 1, 1, 2), SnmpSecurityLevel()).setMaxAccess('readwrite').setDescription('The minimum security level required for communicating with the agent.')
panduitCommonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 3))
panduitCommonGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1))
panduitCommonCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 19536, 2, 3, 2))

# Augmentions
usmUserEntry, = mibBuilder.importSymbols('SNMP-USER-BASED-SM-MIB', 'usmUserEntry')
usmUserEntry.registerAugmentions(('PANDUIT-COMMON-MIB', 'panduitNetSNMPACMEntry'))
apply(panduitNetSNMPACMEntry.setIndexNames, usmUserEntry.getIndexNames())

# Notifications

panduitSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 19536, 2, 0, 4)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitLocationChange = NotificationType((1, 3, 6, 1, 4, 1, 19536, 2, 0, 6)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationLocation'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitAgentCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 19536, 2, 0, 1)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitTrapRecipientAdded = NotificationType((1, 3, 6, 1, 4, 1, 19536, 2, 0, 5)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvIP'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitSelfTestPass = NotificationType((1, 3, 6, 1, 4, 1, 19536, 2, 0, 3)).setObjects(('SNMPv2-MIB', 'sysName'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )

# Groups

panduitCommonNetworkACMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 9)).setObjects(('PANDUIT-COMMON-MIB', 'panduitNetSNMPACMAuthLevel'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPACMAccessLevel'), )
panduitCommonNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 4)).setObjects(('PANDUIT-COMMON-MIB', 'panduitCommonNotifyPortNumber'), )
panduitCommonNotification3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 7)).setObjects(('PANDUIT-COMMON-MIB', 'panduitSelfTestFail'), ('PANDUIT-COMMON-MIB', 'panduitAgentCommunicationLost'), ('PANDUIT-COMMON-MIB', 'panduitSelfTestPass'), )
panduitCommonNotification2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 6)).setObjects(('PANDUIT-COMMON-MIB', 'panduitTrapRecipientAdded'), ('PANDUIT-COMMON-MIB', 'panduitLocationChange'), )
panduitCommonIdentification2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 5)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationHwId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationLocation'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationFamily'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationVersion'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationFwId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), )
panduitCommonNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 2)).setObjects(('PANDUIT-COMMON-MIB', 'panduitNetIPGatewayCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvEnable'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPReadCommunity'), ('PANDUIT-COMMON-MIB', 'panduitNetIPAddressCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetIPMaskConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPAddressConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvCommunityString'), ('PANDUIT-COMMON-MIB', 'panduitNetsNMPTrapRecvVersion'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapConfigRecvNum'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPWriteCommunity'), ('PANDUIT-COMMON-MIB', 'panduitNetIPSetCommit'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvIP'), ('PANDUIT-COMMON-MIB', 'panduitNetIPSetConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPGatewayConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPTypeCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvSeverity'), ('PANDUIT-COMMON-MIB', 'panduitNetIPTypeConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPMaskCurrent'), )
panduitCommonIdentificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 1)).setObjects(('PANDUIT-COMMON-MIB', 'panduitIdentificationHwId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationFwId'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationMAC'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationFamily'), ('PANDUIT-COMMON-MIB', 'panduitIdentificationVersion'), )
panduitCommonNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 3)).setObjects(('PANDUIT-COMMON-MIB', 'panduitAgentCommunicationLost'), )
panduitCommonNetwork2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 19536, 2, 3, 1, 8)).setObjects(('PANDUIT-COMMON-MIB', 'panduitNetIPGatewayCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvEnable'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPReadCommunity'), ('PANDUIT-COMMON-MIB', 'panduitNetIPAddressCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetIPMaskConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPVersionSupport'), ('PANDUIT-COMMON-MIB', 'panduitNetIPAddressConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvCommunityString'), ('PANDUIT-COMMON-MIB', 'panduitNetsNMPTrapRecvVersion'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapConfigRecvNum'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPWriteCommunity'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvUser'), ('PANDUIT-COMMON-MIB', 'panduitNetIPSetCommit'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvIP'), ('PANDUIT-COMMON-MIB', 'panduitNetIPSetConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPGatewayConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetIPTypeCurrent'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvSeverity'), ('PANDUIT-COMMON-MIB', 'panduitNetIPTypeConfig'), ('PANDUIT-COMMON-MIB', 'panduitNetSNMPTrapRecvAuthLevel'), ('PANDUIT-COMMON-MIB', 'panduitNetIPMaskCurrent'), )

# Exports

# Module identity
mibBuilder.exportSymbols('PANDUIT-COMMON-MIB', PYSNMP_MODULE_ID=panduitCommon)

# Types
mibBuilder.exportSymbols('PANDUIT-COMMON-MIB', PanduitNetworkIPType=PanduitNetworkIPType, PanduitProductFamilyType=PanduitProductFamilyType, PanduitSNMPVersionSupportType=PanduitSNMPVersionSupportType, PanduitSetType=PanduitSetType)

# Objects
mibBuilder.exportSymbols('PANDUIT-COMMON-MIB', panduitCommon=panduitCommon, panduitCommonNotifications=panduitCommonNotifications, panduitCommonNotifyPortNumber=panduitCommonNotifyPortNumber, panduitIdentification=panduitIdentification, panduitIdentificationFamily=panduitIdentificationFamily, panduitIdentificationVersion=panduitIdentificationVersion, panduitIdentificationMAC=panduitIdentificationMAC, panduitIdentificationHwId=panduitIdentificationHwId, panduitIdentificationFwId=panduitIdentificationFwId, panduitIdentificationLocation=panduitIdentificationLocation, panduitNetwork=panduitNetwork, panduitNetIP=panduitNetIP, panduitNetIPTypeCurrent=panduitNetIPTypeCurrent, panduitNetIPAddressCurrent=panduitNetIPAddressCurrent, panduitNetIPMaskCurrent=panduitNetIPMaskCurrent, panduitNetIPGatewayCurrent=panduitNetIPGatewayCurrent, panduitNetIPTypeConfig=panduitNetIPTypeConfig, panduitNetIPAddressConfig=panduitNetIPAddressConfig, panduitNetIPMaskConfig=panduitNetIPMaskConfig, panduitNetIPGatewayConfig=panduitNetIPGatewayConfig, panduitNetIPSetConfig=panduitNetIPSetConfig, panduitNetIPSetCommit=panduitNetIPSetCommit, panduitNetSNMP=panduitNetSNMP, panduitNetSNMPReadCommunity=panduitNetSNMPReadCommunity, panduitNetSNMPWriteCommunity=panduitNetSNMPWriteCommunity, panduitNetSNMPTrap=panduitNetSNMPTrap, panduitNetSNMPTrapConfigRecvNum=panduitNetSNMPTrapConfigRecvNum, panduitNetSNMPTrapRecvTable=panduitNetSNMPTrapRecvTable, panduitNetSNMPTrapRecvEntry=panduitNetSNMPTrapRecvEntry, panduitNetSNMPTrapRecvIndex=panduitNetSNMPTrapRecvIndex, panduitNetSNMPTrapRecvIP=panduitNetSNMPTrapRecvIP, panduitNetSNMPTrapRecvEnable=panduitNetSNMPTrapRecvEnable, panduitNetSNMPTrapRecvCommunityString=panduitNetSNMPTrapRecvCommunityString, panduitNetSNMPTrapRecvSeverity=panduitNetSNMPTrapRecvSeverity, panduitNetsNMPTrapRecvVersion=panduitNetsNMPTrapRecvVersion, panduitNetSNMPTrapRecvUser=panduitNetSNMPTrapRecvUser, panduitNetSNMPTrapRecvAuthLevel=panduitNetSNMPTrapRecvAuthLevel, panduitNetSNMPVersionSupport=panduitNetSNMPVersionSupport, panduitNetSNMPACM=panduitNetSNMPACM, panduitNetSNMPACMTable=panduitNetSNMPACMTable, panduitNetSNMPACMEntry=panduitNetSNMPACMEntry, panduitNetSNMPACMAccessLevel=panduitNetSNMPACMAccessLevel, panduitNetSNMPACMAuthLevel=panduitNetSNMPACMAuthLevel, panduitCommonConformance=panduitCommonConformance, panduitCommonGroups=panduitCommonGroups, panduitCommonCompliances=panduitCommonCompliances)

# Notifications
mibBuilder.exportSymbols('PANDUIT-COMMON-MIB', panduitSelfTestFail=panduitSelfTestFail, panduitLocationChange=panduitLocationChange, panduitAgentCommunicationLost=panduitAgentCommunicationLost, panduitTrapRecipientAdded=panduitTrapRecipientAdded, panduitSelfTestPass=panduitSelfTestPass)

# Groups
mibBuilder.exportSymbols('PANDUIT-COMMON-MIB', panduitCommonNetworkACMGroup=panduitCommonNetworkACMGroup, panduitCommonNotificationObjectGroup=panduitCommonNotificationObjectGroup, panduitCommonNotification3Group=panduitCommonNotification3Group, panduitCommonNotification2Group=panduitCommonNotification2Group, panduitCommonIdentification2Group=panduitCommonIdentification2Group, panduitCommonNetworkGroup=panduitCommonNetworkGroup, panduitCommonIdentificationGroup=panduitCommonIdentificationGroup, panduitCommonNotificationGroup=panduitCommonNotificationGroup, panduitCommonNetwork2Group=panduitCommonNetwork2Group)
