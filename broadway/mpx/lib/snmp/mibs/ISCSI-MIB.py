"""
Copyright (C) 2008 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# ============================================================================
# Created manually using smidump and RZ's custom version of libsmi2pysnmp
# which was part of broadway/mpx/lib/snmp/mibs at the time of
# execution.  Essentially::
#   $ smidump -f smiv2 iscsi.mib >iscsi.smiv2
#   $ smidump -f python iscsi.smiv2 | ./libsmi2pysnmp >ISCSI-MIB.py
# @note The MIB is named ISCSI-MIB because that is the internal name in
#       iscsi.mib.
# --------------------------------------------------------------------------
# smidump: module `iscsi.smiv2' contains errors, expect flawed output
# WARNING: guessing DEFVAL type 'ipv4' for InetAddressType
# WARNING: guessing DEFVAL type '6' for IscsiTransportProtocols
# WARNING: guessing DEFVAL type 'crc32c' for IscsiDigestMethod
# WARNING: guessing DEFVAL type 'crc32c' for IscsiDigestMethod
# WARNING: guessing DEFVAL type 'noDigest' for IscsiDigestMethod
# WARNING: guessing DEFVAL type 'noDigest' for IscsiDigestMethod
# WARNING: guessing DEFVAL type 'false' for TruthValue
# WARNING: guessing DEFVAL type 'true' for TruthValue
# WARNING: guessing DEFVAL type 'true' for TruthValue
# WARNING: guessing DEFVAL type 'true' for TruthValue
# WARNING: guessing DEFVAL type 'true' for TruthValue
# WARNING: guessing DEFVAL type 'ipv4' for InetAddressType
# WARNING: guessing DEFVAL type 'ipv4' for InetAddressType
# WARNING: guessing DEFVAL type 'ipv4' for InetAddressType
# WARNING: guessing DEFVAL type '6' for IscsiTransportProtocols
# WARNING: guessing DEFVAL type 'ipv4' for InetAddressType
# WARNING: guessing DEFVAL type 'false' for TruthValue
# WARNING: guessing DEFVAL type 'false' for TruthValue
# --------------------------------------------------------------------------
# PySNMP SMI module. Autogenerated from smidump -f python ISCSI-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Tue Dec  2 12:14:32 2008,
# Python version (2, 5, 2, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, experimental, mib_2, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'MibIdentifier', 'NotificationType', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'experimental', 'mib-2')

# Types

class InetAddress(OctetString):
    pass

class InetAddressType(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(4,3,1,16,2,)
    namedValues = namedval.NamedValues(('ipv4', 1), ('dns', 16), ('ipv6', 2), ('ipv4z', 3), ('ipv6z', 4), )
    pass

class IscsiDigestMethod(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(1,2,4,3,)
    namedValues = namedval.NamedValues(('none', 1), ('other', 2), ('noDigest', 3), ('crc32c', 4), )
    pass

class IscsiName(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(16,223)
    pass

class IscsiTransportProtocols(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(0,255)
    pass

class RowPointer(ObjectIdentifier):
    pass

class RowStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(5,2,3,4,1,6,)
    namedValues = namedval.NamedValues(('active', 1), ('notInService', 2), ('notReady', 3), ('createAndGo', 4), ('createAndWait', 5), ('destroy', 6), )
    pass

class SnmpAdminString(OctetString):
    subtypeSpec = OctetString.subtypeSpec+constraint.ValueSizeConstraint(0,255)
    pass

class TruthValue(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(2,1,)
    namedValues = namedval.NamedValues(('true', 1), ('false', 2), )
    pass


# Objects

iscsiModule = MibIdentifier((1, 3, 6, 1, 3, 9999))
iscsiObjects = MibIdentifier((1, 3, 6, 1, 3, 9999, 1))
iscsiDescriptors = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 1))
iscsiHeaderIntegrityTypes = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 1, 1))
iscsiHdrIntegrityNone = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 1, 1), OctetString()).setMaxAccess('noaccess').setDescription('The authoritative identifier when no integrity\nscheme (for either the header or data) is being\nused.')
iscsiHdrIntegrityCrc32c = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 1, 2), OctetString()).setMaxAccess('noaccess').setDescription('The authoritative identifier when no integrity\nscheme (for either the header or data) is CRC-32.')
iscsiDataIntegrityTypes = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 1, 2))
iscsiDataIntegrityNone = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 2, 1), OctetString()).setMaxAccess('noaccess').setDescription('The authoritative identifier when no integrity\nscheme (for either the header or data) is being\nused.')
iscsiDataIntegrityCrc32c = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 2, 2), OctetString()).setMaxAccess('noaccess').setDescription('The authoritative identifier when the integrity\nscheme (for either the header or data) is CRC-32c.')
iscsiInstance = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 2))
iscsiInstanceAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 2, 1)).setDescription('A list of iSCSI instances present on the system.')
iscsiInstanceAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex')).setDescription('An entry (row) containing management information applicable\nto a particular iSCSI instance.')
iscsiInstIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a particular\nISCSI instance.')
iscsiInstDescr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess('readonly').setDescription('An octet string, determined by the implementation to describe\nthe iSCSI instance.  When only a single instance is present,\nthis object may be set to the zero-length string; with multiple\niSCSI instances, it may be used in an implementation-dependent\nmanner to describe the purpose of the respective instance.')
iscsiInstVersionMin = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Minimum version number of the iSCSI specification supported\nby this instance.')
iscsiInstVersionMax = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Maximum version number of the iSCSI specification supported\nby this instance.')
iscsiInstVendorID = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess('readonly').setDescription('An octet string describing the manufacturer of the\nimplementation of this instance.')
iscsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess('readonly').setDescription('An octet string set by the manufacturer describing the verison\nof the implementation of this instance.  The format of this string\nis determined solely by the manufacturer, and is for informational\npurposes only.  It is unrelated to the iSCSI specification version\nnumbers.')
iscsiInstPortalNumber = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The number of rows in the iscsiPortalAttributesTable\nwhich are currently associated with this iSCSI instance.')
iscsiInstNodeNumber = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 8), Integer32()).setMaxAccess('readonly').setDescription('The number of rows in the iscsiNodeAttributesTable\nwhich are currently associated with this iSCSI instance.')
iscsiInstSessionNumber = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 9), Integer32()).setMaxAccess('readonly').setDescription('The number of rows in the iscsiSessionAttributesTable\nwhich are currently associated with this iSCSI instance.')
iscsiInstSsnFailures = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 10), Counter32()).setMaxAccess('readonly').setDescription('This object counts the number of times a session belonging\nto this instance has been failed.')
iscsiInstLastSsnFailureType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 11), OctetString()).setMaxAccess('readonly').setDescription('The counter object in the iscsiInstSsnErrorStatsTable\nthat was incremented when the last session failure occurred.\n\nIf the reason for failure is not found in the\niscsiInstSsnErrorStatsTable, the value { 0.0 } is\nused instead.')
iscsiInstLastSsnRmtNodeName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 1, 1, 12), IscsiName()).setMaxAccess('readonly').setDescription('An octet string describing the name of the remote node\nfrom the failed session.')
iscsiInstanceSsnErrorStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 2, 2)).setDescription('A list of error types that will cause a session failure.')
iscsiInstanceSsnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 2, 2, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex')).setDescription('An entry (row) containing management information applicable\nto a particular iSCSI instance.')
iscsiInstSsnDigestErrors = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 2, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of sessions which were failed due to receipt of a PDU\ncontaining header or data digest errors.')
iscsiInstSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 2, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of sessions which were failed due to a sequence\nexceeding a time limit.')
iscsiInstSsnFormatErrors = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 2, 2, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The count of sessions which were failed due to receipt of a PDU\nwhich contained a format error.')
iscsiPortal = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 3))
iscsiPortalAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 3, 1)).setDescription('A list of transport endpoints (using TCP or another transport\nprotocol) used by this iSCSI instance. An iSCSI instance may\nuse a portal to listen for incoming connections to its targets,\nto initiate connections to other targets, or both.')
iscsiPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiPortalIndex')).setDescription('An entry (row) containing management information applicable\nto a particular portal instance.')
iscsiPortalIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a particular\ntransport endpoint within this iSCSI instance.')
iscsiPortalRowStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess('readwrite').setDescription('The status of the row.')
iscsiPortalRoles = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 3), OctetString()).setMaxAccess('readwrite').setDescription('A portal can operate in one or both of two roles:\nas a target portal and/or an initiator portal. If\nthe portal will operate in both roles, both bits\nmust be set.\n\nWhen a new iscsiPortalAttributesEntry is to be created,\nthe agent should use this object as a hint for the\ncreation of a new iscsiTgtPortalAttributesEntry and/or\niscsiIntrPortalAttributesEntry.')
iscsiPortalAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess('readwrite').setDescription('The type of Internet Network Address in the iscsiPortalAddr.')
iscsiPortalAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 5), InetAddress()).setMaxAccess('readwrite').setDescription("The portal's Internet Network Address.")
iscsiPortalProtocol = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 6), IscsiTransportProtocols().clone(6)).setMaxAccess('readwrite').setDescription("The portal's transport protocol.")
iscsiPortalMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(8192)).setMaxAccess('readwrite').setDescription('The maximum PDU length this portal can receive.\nThis may be constrained by hardware characteristics\nand individual implementations may chose not to\nallow this object to be changed.')
iscsiPortalPrimaryHdrDigest = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 8), IscsiDigestMethod().clone('crc32c')).setMaxAccess('readwrite').setDescription('The preferred header digest for this portal.')
iscsiPortalPrimaryDataDigest = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 9), IscsiDigestMethod().clone('crc32c')).setMaxAccess('readwrite').setDescription('The preferred data digest method for this portal.')
iscsiPortalSecondaryHdrDigest = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 10), IscsiDigestMethod().clone('noDigest')).setMaxAccess('readwrite').setDescription('An alternate header digest preference for this portal.')
iscsiPortalSecondaryDataDigest = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 11), IscsiDigestMethod().clone('noDigest')).setMaxAccess('readwrite').setDescription('An alternate data digest preference for this portal.')
iscsiPortalRecvMarker = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess('readwrite').setDescription("This object indicates whether or not this portal will\nrequest markers in it's incoming data stream.")
iscsiTargetPortal = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 4))
iscsiTgtPortalAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 4, 1)).setDescription('A list of transport endpoints (using TCP or another transport\nprotocol) on which this iSCSI instance listens for incoming\nconnections to its targets.')
iscsiTgtPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 4, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiPortalIndex')).setDescription('An entry (row) containing management information applicable\nto a particular portal instance that is used to listen for\nincoming connections to local targets. This row is populated\nfor each iscsiPortalAttributesEntry row that may be used as\na target portal.')
iscsiTgtPortalPort = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readwrite').setDescription("The portal's transport protocol port number on which the\nportal listens for incoming iSCSI connections when the\nportal is used as a target portal.")
iscsiTgtPortalTag = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readwrite').setDescription("The portal's aggregation tag when portal is used as\na target portal.  Multiple-connection sessions may\nbe aggregated over portals sharing an identical\naggregation tag.")
iscsiInitiatorPortal = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 5))
iscsiIntrPortalAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 5, 1)).setDescription('A list of Internet Network Addresses (using TCP or another\ntransport protocol) from which this iSCSI instance may\ninitiate connections to other targets.')
iscsiIntrPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 5, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiPortalIndex')).setDescription('An entry (row) containing managment information applicable\nto a particular portal instance that is used to initiate\nconnections to iSCSI targets.  This row is populated for\neach iscsiPortalAttributesEntry row that may be used as an\ninitiator portal.')
iscsiIntrPortalTag = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readwrite').setDescription("The portal's aggregation tag when the portal is used as\nan initiator portal.  Multiple-connection sessions may\nbe aggregated over portals sharing an identical\naggregation tag.")
iscsiNode = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 6))
iscsiNodeAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 6, 1)).setDescription('A list of iSCSI nodes belonging to each iSCSI instance\npresent on the local system.  An iSCSI node can act as\nan initiator, a target, or both.')
iscsiNodeAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing managment information applicable\nto a particular iSCSI node.')
iscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a particular\nnode within an iSCSI instance present on the local system.')
iscsiNodeName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 2), IscsiName()).setMaxAccess('readonly').setDescription('A character string that is a globally unique identifier for\nthis iSCSI node.  The node name is independent of the location\nof the node, and can be resolved into a set of addresses\nthrough various discovery services.\n\nIf this node is used as a discovery-only node, and supports\nonly discovery sessions, this object contains a zero-length\nstring.')
iscsiNodeAlias = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 3), SnmpAdminString()).setMaxAccess('readonly').setDescription("A character string that is a human-readable name or\ndescription of the iSCSI node.  If configured, this alias\nmay be communicated to the initiator or target node at\nthe remote end of the connection during a Login Request\nor Response message.  This string is not used as an\nidentifier, but can be displayed by the system's user\ninterface in a list of initiators and/or targets to\nwhich it is connected.\n\nIf no alias is configured, this object is a zero-length\nstring.")
iscsiNodeRoles = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 4), OctetString()).setMaxAccess('readonly').setDescription('A node can operate in one or both of two roles:\na target role and/or an initiator role. If the node\nwill operate in both roles, both bits must be set.\n\nWhen a new iscsiNodeAttributesEntry is to be created,\nthe agent should use this object as a hint for the\ncreation of a new iscsiTargetAttributesEntry and/or\niscsiInitiatorAttributesEntry.')
iscsiNodeTransportType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 5), RowPointer()).setMaxAccess('readonly').setDescription('A pointer to the corresponding scsiTrnspt object in\nthe SCSI MIB (which in turn points to this iSCSI node)\nallowing management stations to locate the SCSI-level\nDevice that is represented by this iscsiNode.')
iscsiNodeInitialR2T = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 6), TruthValue().clone('true')).setMaxAccess('readonly').setDescription('This object indicates the InitialR2T preference for this\nnode:\nTrue = YES,\nFalse = will try to negotiate NO, will accept YES ')
iscsiNodeImmediateData = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 7), TruthValue().clone('true')).setMaxAccess('readwrite').setDescription('This object indicates ImmediateData preference for this node\nTrue = YES (but will accept NO),\nFalse = NO ')
iscsiNodeMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess('readwrite').setDescription('Maximum number of outstanding R2Ts allowed per task.')
iscsiNodeFirstBurstLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(65536)).setMaxAccess('readwrite').setDescription('The maximum length (bytes) supported for unsolicited data\nto/from this node.')
iscsiNodeMaxBurstLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(262144)).setMaxAccess('readwrite').setDescription('The maximum number of bytes which can be sent within\na single sequence of Data-In or Data-Out PDUs.')
iscsiNodeMaxConnections = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess('readwrite').setDescription('The maximum number of connections allowed in each\nsession to and/or from this node.')
iscsiNodeDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 12), TruthValue().clone('true')).setMaxAccess('readwrite').setDescription('The DataSequenceInOrder preference of this node.\nFalse (=No) indicates that iSCSI data PDU sequences may\nbe transferred in any order.  True (=Yes) indicates that\ndata PDU sequences must be tranferred using\ncontinuously increasing offsets, except during\nerror recovery.')
iscsiNodeDataPDUInOrder = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 13), TruthValue().clone('true')).setMaxAccess('readwrite').setDescription('The DataPDUInOrder preference of this node.\nFalse (=No) indicates that iSCSI data PDUs within sequences\nmay be in any order.  True (=Yes) indicates that data PDUs\nwithin sequences must be at continuously increasing\naddresses, with no gaps or overlay between PDUs.')
iscsiNodeDefaultTime2Wait = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 3600)).clone(2)).setMaxAccess('readwrite').setDescription('The DefaultTime2Wait preference of this node.\nThis is the minimum time, in seconds, to wait before attempting\nan explicit/implicit logout or active task reassignment after\nan unexpected connection termination or a connection reset.')
iscsiNodeDefaultTime2Retain = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 3600)).clone(20)).setMaxAccess('readwrite').setDescription('The DefaultTime2Retain preference of this node.\nThis is the maximum time, in seconds after an initial wait\n(Time2Wait), before which an active task reassignment is still\npossible after an unexpected connection termination or a\nconnection reset.')
iscsiNodeErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255)).clone(0)).setMaxAccess('readwrite').setDescription('The ErrorRecoveryLevel preference of this node.\nCurrently, only 0-2 are valid.\nThis object is designed to accommodate future error recover\nlevels.\nHigher error recovery levels imply support in addition to\nsupport for the lower error level functions.  In otherwords,\nerror level 2 implies support for levels 0-1, since those\nfunctions are subsets of error level 2.')
iscsiTarget = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 7))
iscsiTargetAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 7, 1)).setDescription('An entry (row) containing managment information applicable\nto a particular node that can take on a target role.')
iscsiTargetAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing management information applicable\nto a particular target.')
iscsiTgtLoginFailures = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('This object counts the number of times a login attempt to this\nlocal target has failed.')
iscsiTgtLastFailureTime = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 2), TimeTicks()).setMaxAccess('readonly').setDescription('The timestamp of the most recent failure of a login attempt\nto this target.  A value of zero indicates that no such\nfailures have occurred.')
iscsiTgtLastFailureType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('The type of the most recent failure of a login attempt\nto this target, represented as the OID of the counter\nobject in iscsiTargetLoginStatsTable for which the\nrelevant instance was incremented.  A value of 0.0\nindicates a type which is not represented by any of\nthe counters in iscsiTargetLoginStatsTable.')
iscsiTgtLastIntrFailureName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 4), IscsiName()).setMaxAccess('readonly').setDescription('An octet string giving the name of the initiator\nthat failed the last login attempt.')
iscsiTgtLastIntrFailureAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess('readonly').setDescription('The type of Internet Network Address in\niscsiTgtLastIntrFailureAddr.')
iscsiTgtLastIntrFailureAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 1, 1, 6), InetAddress()).setMaxAccess('readonly').setDescription('An Internet Network Address giving the host address\nof the initiator that failed the last login attempt.')
iscsiTargetLoginStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 7, 2)).setDescription("A table of counters which keep a record of the results\nof initiators' login attempts to this target.")
iscsiTargetLoginStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing counters for each result of\na login attempt to this target.')
iscsiTgtLoginAccepts = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status\n0x0000, Accept Login, transmitted by this\ntarget.')
iscsiTgtLoginOtherFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The number of Login Response PDUs which were transmitted\nby this target, and which were not counted by any other\nobject in the row.')
iscsiTgtLoginRedirects = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status class 0x01,\nRedirection, transmitted by this target.')
iscsiTgtLoginAuthorizeFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status 0x0202,\nForbidden Target, transmitted by this target.\n\nIf this counter is incremented, an iscsiTgtLoginFailure\nnotification should be generated.')
iscsiTgtLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status 0x0201,\nAuthentication Failed, transmitted by this target\n\nIf this counter is incremented, an iscsiTgtLoginFailure\nnotification should be generated.')
iscsiTgtLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 2, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of times a target has effectively refused a\nlogin because the parameter negotiation failed.\n[Ed. While this situation can occur, the exact mechanism\nis as yet undefined in the iSCSI Protocol Spec.]\n\nIf this counter is incremented, an iscsiTgtLoginFailure\nnotification should be generated.')
iscsiTargetLogoutStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 7, 3)).setDescription('When a target receives a Logout command, it responds\nwith a Logout Response that carries a status code.\nThis table contains counters for both normal and\nabnormal logout requests received by this target.')
iscsiTargetLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 7, 3, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing counters of Logout Response\nPDUs that were received by this target.')
iscsiTgtLogoutNormals = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 3, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of Logout Command PDUs received by this target,\nwith reason code 0 (closes the session).')
iscsiTgtLogoutOthers = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 7, 3, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of Logout Command PDUs received by this target,\nwith any status code other than 0.')
iscsiTgtAuthorization = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 8))
iscsiTgtAuthAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 8, 1)).setDescription('A list of initiator identities that are authorized to\naccess each target node within each iSCSI instance\npresent on the local system.')
iscsiTgtAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 8, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex'), (0, 'ISCSI-MIB', 'iscsiTgtAuthIndex')).setDescription("An entry (row) containing management information\napplicable to a particular target node's authorized\ninitiator identity.")
iscsiTgtAuthIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription("An arbitrary integer used to uniquely identify a particular\ntarget's authorized initiator identity within an iSCSI\ninstance present on the local system.")
iscsiTgtAuthRowStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess('readwrite').setDescription('The status of the row.')
iscsiTgtAuthIdentity = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 8, 1, 1, 3), RowPointer()).setMaxAccess('readwrite').setDescription('A pointer to the corresponding IPS-AUTH MIB user entry\nthat will be allowed to access this iSCSI target.')
iscsiInitiator = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 9))
iscsiInitiatorAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 9, 1)).setDescription('A list of iSCSI nodes that can take on an initiator\nrole, belonging to each iSCSI instance present on\nthe local system.')
iscsiInitiatorAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing managment information\napplicable to a particular iSCSI node that has\ninitiator capabilities.')
iscsiIntrLoginFailures = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('This object counts the number of times a login attempt from this\nlocal initiator has failed.')
iscsiIntrLastFailureTime = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 2), TimeTicks()).setMaxAccess('readonly').setDescription('The timestamp of the most recent failure of a login attempt\nfrom this initiator.  A value of zero indicates that no such\nfailures have occurred.')
iscsiIntrLastFailureType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 3), OctetString()).setMaxAccess('readonly').setDescription('The type of the most recent failure of a login attempt\nfrom this initiator, represented as the OID of the counter\nobject in iscsiInitiatorLoginStatsTable for which the\nrelevant instance was incremented.  A value of 0.0\nindicates a type which is not represented by any of\nthe counters in iscsiInitiatorLoginStatsTable.')
iscsiIntrLastTgtFailureName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 4), IscsiName()).setMaxAccess('readonly').setDescription('An octet string giving the name of the target that failed\nthe last login attempt.')
iscsiIntrLastTgtFailureAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess('readonly').setDescription('The type of Internet Network Address in iscsiIntrLastTgtFailureAddr.')
iscsiIntrLastTgtFailureAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 1, 1, 6), InetAddress()).setMaxAccess('readonly').setDescription('An Internet Network Address giving the host address of the target\nthat failed the last login attempt.')
iscsiInitiatorLoginStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 9, 2)).setDescription("A table of counters which keep track of the results of\nthis initiator's login attempts.")
iscsiInitiatorLoginStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription("An entry (row) containing counters of each result\nof this initiator's login attempts.")
iscsiIntrLoginAcceptRsps = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status\n0x0000, Accept Login, received by this initiator.')
iscsiIntrLoginOtherFailRsps = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs received by this\ninitiator with any status code not counted in the\nobjects below.')
iscsiIntrLoginRedirectRsps = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 3), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status class 0x01,\nRedirection, received by this initiator.')
iscsiIntrLoginAuthFailRsps = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 4), Counter32()).setMaxAccess('readonly').setDescription('The count of Login Response PDUs with status class 0x201,\nAuthentication Failed, received by this initiator.')
iscsiIntrLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 5), Counter32()).setMaxAccess('readonly').setDescription('The number of times the initiator has aborted a\nlogin because the target could not be authenticated.\n\nNo response is generated.\n\nIf this counter is incremented, an iscsiIntrLoginFailure\nnotification should be generated.')
iscsiIntrLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 2, 1, 6), Counter32()).setMaxAccess('readonly').setDescription('The number of times the initiator has aborted a\nlogin because parameter negotiation with the target\nfailed.\n\nNo response is generated.\n\nIf this counter is incremented, an iscsiIntrLoginFailure\nnotification should be generated.')
iscsiInitiatorLogoutStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 9, 3)).setDescription('When an initiator attempts send a Logout command, the target\nresponds with a Logout Response that carries a status code.\nThis table contains a list of counters of Logout Response\nPDUs of each status code, that were received by each\ninitiator belonging to this iSCSI instance present on this\nsystem.')
iscsiInitiatorLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 9, 3, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex')).setDescription('An entry (row) containing counters of Logout Response\nPDUs of each status code, that were generated by this\ninitiator.')
iscsiIntrLogoutNormals = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 3, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of Logout Command PDUs generated by this initiator\nwith reason code 0 (closes the session).')
iscsiIntrLogoutOthers = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 9, 3, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of Logout Command PDUs generated by this initiator\nwith any status code other than 0.')
iscsiIntrAuthorization = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 10))
iscsiIntrAuthAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 10, 1)).setDescription('A list of target identities which each initiator\non the local system may access.')
iscsiIntrAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 10, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex'), (0, 'ISCSI-MIB', 'iscsiIntrAuthIndex')).setDescription("An entry (row) containing managment information applicable\nto a particular initiator node's authorized target identity.")
iscsiIntrAuthIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription("An arbitrary integer used to uniquely identify a\nparticular initiator node's authorized target\nidentity within an iSCSI instance present on the\nlocal system.")
iscsiIntrAuthRowStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess('readonly').setDescription('The status of the row.')
iscsiIntrAuthIdentity = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 10, 1, 1, 3), RowPointer()).setMaxAccess('readonly').setDescription('A pointer to the corresponding IPS-AUTH MIB user entry\nto which this initiator node should attempt to establish\nan iSCSI session.')
iscsiSession = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 11))
iscsiSessionAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 11, 1)).setDescription('A list of sessions belonging to each iSCSI instance\npresent on the system.')
iscsiSessionAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiSsnNodeIndex'), (0, 'ISCSI-MIB', 'iscsiSsnIndex')).setDescription('An entry (row) containing management information applicable\nto a particular session.')
iscsiSsnNodeIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a\nparticular node within an iSCSI instance present\non the local system. For normal, non-discovery\n sessions, this value will map to the iscsiNodeIndex.\n For discovery sessions which do not have a node\n associated, the value 0 (zero) is used.')
iscsiSsnIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a\nparticular session within an iSCSI instance present\non the local system.')
iscsiSsnDirection = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('inboundSession', 1), ('outboundSession', 2), ))).setMaxAccess('readonly').setDescription('Direction of iSCSI session:\nInboundSession  - session is established from an external\n                  initiator to a target within this iSCSI\n                  instance.\nOutboundSession - session is established from an initiator\n                  within this iSCSI instance to an external\n                  target.')
iscsiSsnInitiatorName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 4), IscsiName()).setMaxAccess('readonly').setDescription('If iscsiSsnDirection is Inbound, this object is an\noctet string that will contain the name of the remote\ninitiator.  If this session is a discovery session that\ndoes not specify a particular initiator, this object\nwill contain a zero-length string.\n\nIf iscsiSsnDirection is Outbound, this object will\ncontain a zero-length string.')
iscsiSsnTargetName = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 5), IscsiName()).setMaxAccess('readonly').setDescription('If iscsiSsnDirection is Outbound, this object is an\noctet string that will contain the name of the remote\ntarget.  If this session is a discovery session that\ndoes not specify a particular target, this object will\ncontain a zero-length string.\n\nIf iscsiSsnDirection is Inbound, this object will\ncontain a zero-length string.')
iscsiSsnTSIH = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readonly').setDescription('The target-defined identification handle for this session.')
iscsiSsnISID = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 7), OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess('readonly').setDescription('The initiator-defined portion of the iSCSI Session ID.')
iscsiSsnInitiatorAlias = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 8), SnmpAdminString()).setMaxAccess('readonly').setDescription('An octet string that gives the alias communicated by the\ninitiator end of the session during the login phase.\n\nIf no alias exists, the value is a zero-length string.')
iscsiSsnTargetAlias = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 9), SnmpAdminString()).setMaxAccess('readonly').setDescription('An octet string that gives the alias communicated by the\ntarget end of the session during the login phase.\n\nIf no alias exists, the value is a zero-length string.')
iscsiSsnInitialR2T = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 10), TruthValue()).setMaxAccess('readonly').setDescription('If set to true, indicates that the initiator must wait\nfor an R2T before sending to the target.  If set to false,\nthe initiator may send data immediately, within limits set\nby iscsiSsnFirstBurstLength and the expected data transfer\nlength of the request.\n\nDefault is true.')
iscsiSsnImmediateData = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 11), TruthValue()).setMaxAccess('readonly').setDescription('Indicates whether the initiator and target have agreed to support\nimmediate data on this session.')
iscsiSsnType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 12), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(('normalSession', 1), ('discoverySession', 2), )).clone(1)).setMaxAccess('readonly').setDescription('Type of iSCSI session:\nnormalSession    - session is a normal iSCSI session\ndiscoverySession - session is being used only for discovery.')
iscsiSsnMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readonly').setDescription('The maximum number of outstanding request-to-transmit\n(R2T)s per task within this session.')
iscsiSsnFirstBurstLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(65536)).setMaxAccess('readonly').setDescription('The maximum length supported for unsolicited data sent\nwithin this session.')
iscsiSsnMaxBurstLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(262144)).setMaxAccess('readonly').setDescription('The maximum number of bytes which can be sent within\na single sequence of Data-In or Data-Out PDUs.')
iscsiSsnConnectionNumber = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 16), Gauge32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readonly').setDescription('The number of transport protocol connections that currently\nbelong to this session.')
iscsiSsnAuthIdentity = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 17), RowPointer()).setMaxAccess('readonly').setDescription('This object contains a row in the IPS-AUTH MIB\nwhich identifies the authentication method\nbeing used on this session, as communicated\nduring the login phase.')
iscsiSsnDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 18), TruthValue()).setMaxAccess('readonly').setDescription('False indicates that iSCSI data PDU sequences may\nbe transferred in any order.  True indicates that\ndata PDU sequences must be tranferred using\ncontinuously increasing offsets, except during\nerror recovery.')
iscsiSsnDataPDUInOrder = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 19), TruthValue()).setMaxAccess('readonly').setDescription('False indicates that iSCSI data PDUs within sequences\nmay be in any order.  True indicates that data PDUs\nwithin sequences must be at continuously increasing\naddresses, with no gaps or overlay between PDUs.\n\nDefault is true.')
iscsiSsnErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('The level of error recovery negotiated between\nthe initiator and the target.  Higher numbers\nrepresent more detailed recovery schemes.')
iscsiSessionStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 11, 2)).setDescription('A list of general iSCSI traffic counters for each of the\nsessions present on the system.')
iscsiSessionStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 11, 2, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex'), (0, 'ISCSI-MIB', 'iscsiSsnIndex')).setDescription('An entry (row) containing general iSCSI traffic counters\nfor a particular session.')
iscsiSsnCmdPDUs = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 2, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of Command PDUs transferred on this session.')
iscsiSsnRspPDUs = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 2, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of Response PDUs transferred on this session.')
iscsiSsnLCTxDataOctets = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 2, 1, 5), Counter32()).setMaxAccess('readonly').setDescription("A Low Capacity shadow object of iscsiSsnTxDataOctets\nfor those systems that don't support Counter64.")
iscsiSsnLCRxDataOctets = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 2, 1, 6), Counter32()).setMaxAccess('readonly').setDescription("A Low Capacity shadow object of iscsiSsnRxDataOctets\nfor those systems that don't support Counter64.")
iscsiSessionCxnErrorStatsTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 11, 3)).setDescription('A list of error counters for each of the sessions\npresent on this system.')
iscsiSessionCxnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 11, 3, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex'), (0, 'ISCSI-MIB', 'iscsiSsnIndex')).setDescription('An entry (row) containing error counters for\na particular session.')
iscsiSsnDigestErrors = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 3, 1, 1), Counter32()).setMaxAccess('readonly').setDescription('The count of PDUs which were received on the session and\ncontained header or data digest errors.')
iscsiSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 11, 3, 1, 2), Counter32()).setMaxAccess('readonly').setDescription('The count of connections within this session\nwhich have been terminated due to timeout.')
iscsiConnection = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 12))
iscsiConnectionAttributesTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 12, 1)).setDescription('A list of connections belonging to each iSCSI instance\npresent on the system.')
iscsiConnectionAttributesEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1)).setIndexNames((0, 'ISCSI-MIB', 'iscsiInstIndex'), (0, 'ISCSI-MIB', 'iscsiNodeIndex'), (0, 'ISCSI-MIB', 'iscsiSsnIndex'), (0, 'ISCSI-MIB', 'iscsiCxnIndex')).setDescription('An entry (row) containing management information applicable\nto a particular connection.')
iscsiCxnIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('noaccess').setDescription('An arbitrary integer used to uniquely identify a\nparticular connection of a particular session within\nan iSCSI instance present on the local system.')
iscsiCxnCid = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 65535))).setMaxAccess('readonly').setDescription('The iSCSI Connection ID for this connection.')
iscsiCxnState = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('login', 1), ('full', 2), ('logout', 3), ))).setMaxAccess('readonly').setDescription('The current state of this connection, from an iSCSI negotiation\npoint of view.  Here are the states:\n\nlogin  - The transport protocol connection has been established,\n         but a valid iSCSI login response with the final bit set\n         has not been sent or received.\nfull   - A valid iSCSI login response with the final bit set\n         has been sent or received.\nlogout - A valid iSCSI logout command has been sent or\n         received, but the transport protocol connection has\n         not yet been closed.')
iscsiCxnLocalAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess('readonly').setDescription('The type of Internet Network Address in iscsiCxnLocalAddr.')
iscsiCxnLocalAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 5), InetAddress()).setMaxAccess('readonly').setDescription('The local Internet Network Address used by this connection.')
iscsiCxnProtocol = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 6), IscsiTransportProtocols().clone(6)).setMaxAccess('readonly').setDescription('The transport protocol over which this connection is\nrunning.')
iscsiCxnLocalPort = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 7), Integer32()).setMaxAccess('readonly').setDescription('The local transport protocol port used by this connection.')
iscsiCxnRemoteAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 8), InetAddressType().clone('ipv4')).setMaxAccess('readonly').setDescription('The type of Internet Network Address in iscsiCxnRemoteAddr.')
iscsiCxnRemoteAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 9), InetAddress()).setMaxAccess('readonly').setDescription('The remote Internet Network Address used by this connection.')
iscsiCxnRemotePort = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 10), Integer32()).setMaxAccess('readonly').setDescription('The remote transport protocol port used by this connection.')
iscsiCxnMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(8192)).setMaxAccess('readonly').setDescription('The maximum data payload size supported for command\nor data PDUs in use within this connection.\nNote that the size of reported in bytes even though\nthe negotiation is in 512k blocks.')
iscsiCxnMaxXmitDataSegLength = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(512, 16777215)).clone(8192)).setMaxAccess('readonly').setDescription('The maximum data payload size supported for command\nor data PDUs to be sent on this connection.')
iscsiCxnHeaderIntegrity = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 13), IscsiDigestMethod()).setMaxAccess('readonly').setDescription('This object identifies the iSCSI header\ndigest scheme in use within this connection.')
iscsiCxnDataIntegrity = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 14), IscsiDigestMethod()).setMaxAccess('readonly').setDescription('This object identifies the iSCSI data\ndigest scheme in use within this connection.')
iscsiCxnRecvMarker = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 15), TruthValue().clone('false')).setMaxAccess('readonly').setDescription('This object indicates whether or not this connection\nis receiving markers in in its incoming data stream.')
iscsiCxnSendMarker = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 16), TruthValue().clone('false')).setMaxAccess('readonly').setDescription('This object indicates whether or not this connection\nis inserting markers in in its outgoing data stream.')
iscsiCxnVersionActive = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readonly').setDescription('Active version number of the iSCSI specification negotiated\non this connection.')
iscsiNotifications = MibIdentifier((1, 3, 6, 1, 3, 9999, 2))

# Augmentions

# Notifications

iscsiIntrLoginFailure = NotificationType((1, 3, 6, 1, 3, 9999, 2, 0, 2)).setObjects(('ISCSI-MIB', 'iscsiIntrLoginFailures'), ('ISCSI-MIB', 'iscsiIntrLastFailureType'), ('ISCSI-MIB', 'iscsiIntrLastTgtFailureName'), ('ISCSI-MIB', 'iscsiIntrLastTgtFailureAddrType'), ('ISCSI-MIB', 'iscsiIntrLastTgtFailureAddr'), )
iscsiInstSessionFailure = NotificationType((1, 3, 6, 1, 3, 9999, 2, 0, 3)).setObjects(('ISCSI-MIB', 'iscsiInstLastSsnRmtNodeName'), ('ISCSI-MIB', 'iscsiInstSsnFailures'), ('ISCSI-MIB', 'iscsiInstLastSsnFailureType'), )
iscsiTgtLoginFailure = NotificationType((1, 3, 6, 1, 3, 9999, 2, 0, 1)).setObjects(('ISCSI-MIB', 'iscsiTgtLastIntrFailureName'), ('ISCSI-MIB', 'iscsiTgtLastFailureType'), ('ISCSI-MIB', 'iscsiTgtLastIntrFailureAddr'), ('ISCSI-MIB', 'iscsiTgtLastIntrFailureAddrType'), ('ISCSI-MIB', 'iscsiTgtLoginFailures'), )

# Exports

# Types
mibBuilder.exportSymbols('ISCSI-MIB', InetAddress=InetAddress, InetAddressType=InetAddressType, IscsiDigestMethod=IscsiDigestMethod, IscsiName=IscsiName, IscsiTransportProtocols=IscsiTransportProtocols, RowPointer=RowPointer, RowStatus=RowStatus, SnmpAdminString=SnmpAdminString, TruthValue=TruthValue)

# Objects
mibBuilder.exportSymbols('ISCSI-MIB', iscsiModule=iscsiModule, iscsiObjects=iscsiObjects, iscsiDescriptors=iscsiDescriptors, iscsiHeaderIntegrityTypes=iscsiHeaderIntegrityTypes, iscsiHdrIntegrityNone=iscsiHdrIntegrityNone, iscsiHdrIntegrityCrc32c=iscsiHdrIntegrityCrc32c, iscsiDataIntegrityTypes=iscsiDataIntegrityTypes, iscsiDataIntegrityNone=iscsiDataIntegrityNone, iscsiDataIntegrityCrc32c=iscsiDataIntegrityCrc32c, iscsiInstance=iscsiInstance, iscsiInstanceAttributesTable=iscsiInstanceAttributesTable, iscsiInstanceAttributesEntry=iscsiInstanceAttributesEntry, iscsiInstIndex=iscsiInstIndex, iscsiInstDescr=iscsiInstDescr, iscsiInstVersionMin=iscsiInstVersionMin, iscsiInstVersionMax=iscsiInstVersionMax, iscsiInstVendorID=iscsiInstVendorID, iscsiInstVendorVersion=iscsiInstVendorVersion, iscsiInstPortalNumber=iscsiInstPortalNumber, iscsiInstNodeNumber=iscsiInstNodeNumber, iscsiInstSessionNumber=iscsiInstSessionNumber, iscsiInstSsnFailures=iscsiInstSsnFailures, iscsiInstLastSsnFailureType=iscsiInstLastSsnFailureType, iscsiInstLastSsnRmtNodeName=iscsiInstLastSsnRmtNodeName, iscsiInstanceSsnErrorStatsTable=iscsiInstanceSsnErrorStatsTable, iscsiInstanceSsnErrorStatsEntry=iscsiInstanceSsnErrorStatsEntry, iscsiInstSsnDigestErrors=iscsiInstSsnDigestErrors, iscsiInstSsnCxnTimeoutErrors=iscsiInstSsnCxnTimeoutErrors, iscsiInstSsnFormatErrors=iscsiInstSsnFormatErrors, iscsiPortal=iscsiPortal, iscsiPortalAttributesTable=iscsiPortalAttributesTable, iscsiPortalAttributesEntry=iscsiPortalAttributesEntry, iscsiPortalIndex=iscsiPortalIndex, iscsiPortalRowStatus=iscsiPortalRowStatus, iscsiPortalRoles=iscsiPortalRoles, iscsiPortalAddrType=iscsiPortalAddrType, iscsiPortalAddr=iscsiPortalAddr, iscsiPortalProtocol=iscsiPortalProtocol, iscsiPortalMaxRecvDataSegLength=iscsiPortalMaxRecvDataSegLength, iscsiPortalPrimaryHdrDigest=iscsiPortalPrimaryHdrDigest, iscsiPortalPrimaryDataDigest=iscsiPortalPrimaryDataDigest, iscsiPortalSecondaryHdrDigest=iscsiPortalSecondaryHdrDigest, iscsiPortalSecondaryDataDigest=iscsiPortalSecondaryDataDigest, iscsiPortalRecvMarker=iscsiPortalRecvMarker, iscsiTargetPortal=iscsiTargetPortal, iscsiTgtPortalAttributesTable=iscsiTgtPortalAttributesTable, iscsiTgtPortalAttributesEntry=iscsiTgtPortalAttributesEntry, iscsiTgtPortalPort=iscsiTgtPortalPort, iscsiTgtPortalTag=iscsiTgtPortalTag, iscsiInitiatorPortal=iscsiInitiatorPortal, iscsiIntrPortalAttributesTable=iscsiIntrPortalAttributesTable, iscsiIntrPortalAttributesEntry=iscsiIntrPortalAttributesEntry, iscsiIntrPortalTag=iscsiIntrPortalTag, iscsiNode=iscsiNode, iscsiNodeAttributesTable=iscsiNodeAttributesTable, iscsiNodeAttributesEntry=iscsiNodeAttributesEntry, iscsiNodeIndex=iscsiNodeIndex, iscsiNodeName=iscsiNodeName, iscsiNodeAlias=iscsiNodeAlias, iscsiNodeRoles=iscsiNodeRoles, iscsiNodeTransportType=iscsiNodeTransportType, iscsiNodeInitialR2T=iscsiNodeInitialR2T, iscsiNodeImmediateData=iscsiNodeImmediateData, iscsiNodeMaxOutstandingR2T=iscsiNodeMaxOutstandingR2T, iscsiNodeFirstBurstLength=iscsiNodeFirstBurstLength, iscsiNodeMaxBurstLength=iscsiNodeMaxBurstLength, iscsiNodeMaxConnections=iscsiNodeMaxConnections, iscsiNodeDataSequenceInOrder=iscsiNodeDataSequenceInOrder, iscsiNodeDataPDUInOrder=iscsiNodeDataPDUInOrder, iscsiNodeDefaultTime2Wait=iscsiNodeDefaultTime2Wait, iscsiNodeDefaultTime2Retain=iscsiNodeDefaultTime2Retain, iscsiNodeErrorRecoveryLevel=iscsiNodeErrorRecoveryLevel, iscsiTarget=iscsiTarget, iscsiTargetAttributesTable=iscsiTargetAttributesTable, iscsiTargetAttributesEntry=iscsiTargetAttributesEntry, iscsiTgtLoginFailures=iscsiTgtLoginFailures, iscsiTgtLastFailureTime=iscsiTgtLastFailureTime, iscsiTgtLastFailureType=iscsiTgtLastFailureType, iscsiTgtLastIntrFailureName=iscsiTgtLastIntrFailureName, iscsiTgtLastIntrFailureAddrType=iscsiTgtLastIntrFailureAddrType, iscsiTgtLastIntrFailureAddr=iscsiTgtLastIntrFailureAddr, iscsiTargetLoginStatsTable=iscsiTargetLoginStatsTable, iscsiTargetLoginStatsEntry=iscsiTargetLoginStatsEntry, iscsiTgtLoginAccepts=iscsiTgtLoginAccepts, iscsiTgtLoginOtherFails=iscsiTgtLoginOtherFails, iscsiTgtLoginRedirects=iscsiTgtLoginRedirects, iscsiTgtLoginAuthorizeFails=iscsiTgtLoginAuthorizeFails, iscsiTgtLoginAuthenticateFails=iscsiTgtLoginAuthenticateFails, iscsiTgtLoginNegotiateFails=iscsiTgtLoginNegotiateFails, iscsiTargetLogoutStatsTable=iscsiTargetLogoutStatsTable, iscsiTargetLogoutStatsEntry=iscsiTargetLogoutStatsEntry, iscsiTgtLogoutNormals=iscsiTgtLogoutNormals, iscsiTgtLogoutOthers=iscsiTgtLogoutOthers, iscsiTgtAuthorization=iscsiTgtAuthorization, iscsiTgtAuthAttributesTable=iscsiTgtAuthAttributesTable, iscsiTgtAuthAttributesEntry=iscsiTgtAuthAttributesEntry, iscsiTgtAuthIndex=iscsiTgtAuthIndex, iscsiTgtAuthRowStatus=iscsiTgtAuthRowStatus, iscsiTgtAuthIdentity=iscsiTgtAuthIdentity, iscsiInitiator=iscsiInitiator, iscsiInitiatorAttributesTable=iscsiInitiatorAttributesTable, iscsiInitiatorAttributesEntry=iscsiInitiatorAttributesEntry, iscsiIntrLoginFailures=iscsiIntrLoginFailures, iscsiIntrLastFailureTime=iscsiIntrLastFailureTime, iscsiIntrLastFailureType=iscsiIntrLastFailureType, iscsiIntrLastTgtFailureName=iscsiIntrLastTgtFailureName, iscsiIntrLastTgtFailureAddrType=iscsiIntrLastTgtFailureAddrType, iscsiIntrLastTgtFailureAddr=iscsiIntrLastTgtFailureAddr, iscsiInitiatorLoginStatsTable=iscsiInitiatorLoginStatsTable, iscsiInitiatorLoginStatsEntry=iscsiInitiatorLoginStatsEntry, iscsiIntrLoginAcceptRsps=iscsiIntrLoginAcceptRsps, iscsiIntrLoginOtherFailRsps=iscsiIntrLoginOtherFailRsps, iscsiIntrLoginRedirectRsps=iscsiIntrLoginRedirectRsps, iscsiIntrLoginAuthFailRsps=iscsiIntrLoginAuthFailRsps, iscsiIntrLoginAuthenticateFails=iscsiIntrLoginAuthenticateFails, iscsiIntrLoginNegotiateFails=iscsiIntrLoginNegotiateFails, iscsiInitiatorLogoutStatsTable=iscsiInitiatorLogoutStatsTable, iscsiInitiatorLogoutStatsEntry=iscsiInitiatorLogoutStatsEntry, iscsiIntrLogoutNormals=iscsiIntrLogoutNormals, iscsiIntrLogoutOthers=iscsiIntrLogoutOthers, iscsiIntrAuthorization=iscsiIntrAuthorization, iscsiIntrAuthAttributesTable=iscsiIntrAuthAttributesTable, iscsiIntrAuthAttributesEntry=iscsiIntrAuthAttributesEntry, iscsiIntrAuthIndex=iscsiIntrAuthIndex, iscsiIntrAuthRowStatus=iscsiIntrAuthRowStatus, iscsiIntrAuthIdentity=iscsiIntrAuthIdentity)
mibBuilder.exportSymbols('ISCSI-MIB', iscsiSession=iscsiSession, iscsiSessionAttributesTable=iscsiSessionAttributesTable, iscsiSessionAttributesEntry=iscsiSessionAttributesEntry, iscsiSsnNodeIndex=iscsiSsnNodeIndex, iscsiSsnIndex=iscsiSsnIndex, iscsiSsnDirection=iscsiSsnDirection, iscsiSsnInitiatorName=iscsiSsnInitiatorName, iscsiSsnTargetName=iscsiSsnTargetName, iscsiSsnTSIH=iscsiSsnTSIH, iscsiSsnISID=iscsiSsnISID, iscsiSsnInitiatorAlias=iscsiSsnInitiatorAlias, iscsiSsnTargetAlias=iscsiSsnTargetAlias, iscsiSsnInitialR2T=iscsiSsnInitialR2T, iscsiSsnImmediateData=iscsiSsnImmediateData, iscsiSsnType=iscsiSsnType, iscsiSsnMaxOutstandingR2T=iscsiSsnMaxOutstandingR2T, iscsiSsnFirstBurstLength=iscsiSsnFirstBurstLength, iscsiSsnMaxBurstLength=iscsiSsnMaxBurstLength, iscsiSsnConnectionNumber=iscsiSsnConnectionNumber, iscsiSsnAuthIdentity=iscsiSsnAuthIdentity, iscsiSsnDataSequenceInOrder=iscsiSsnDataSequenceInOrder, iscsiSsnDataPDUInOrder=iscsiSsnDataPDUInOrder, iscsiSsnErrorRecoveryLevel=iscsiSsnErrorRecoveryLevel, iscsiSessionStatsTable=iscsiSessionStatsTable, iscsiSessionStatsEntry=iscsiSessionStatsEntry, iscsiSsnCmdPDUs=iscsiSsnCmdPDUs, iscsiSsnRspPDUs=iscsiSsnRspPDUs, iscsiSsnLCTxDataOctets=iscsiSsnLCTxDataOctets, iscsiSsnLCRxDataOctets=iscsiSsnLCRxDataOctets, iscsiSessionCxnErrorStatsTable=iscsiSessionCxnErrorStatsTable, iscsiSessionCxnErrorStatsEntry=iscsiSessionCxnErrorStatsEntry, iscsiSsnDigestErrors=iscsiSsnDigestErrors, iscsiSsnCxnTimeoutErrors=iscsiSsnCxnTimeoutErrors, iscsiConnection=iscsiConnection, iscsiConnectionAttributesTable=iscsiConnectionAttributesTable, iscsiConnectionAttributesEntry=iscsiConnectionAttributesEntry, iscsiCxnIndex=iscsiCxnIndex, iscsiCxnCid=iscsiCxnCid, iscsiCxnState=iscsiCxnState, iscsiCxnLocalAddrType=iscsiCxnLocalAddrType, iscsiCxnLocalAddr=iscsiCxnLocalAddr, iscsiCxnProtocol=iscsiCxnProtocol, iscsiCxnLocalPort=iscsiCxnLocalPort, iscsiCxnRemoteAddrType=iscsiCxnRemoteAddrType, iscsiCxnRemoteAddr=iscsiCxnRemoteAddr, iscsiCxnRemotePort=iscsiCxnRemotePort, iscsiCxnMaxRecvDataSegLength=iscsiCxnMaxRecvDataSegLength, iscsiCxnMaxXmitDataSegLength=iscsiCxnMaxXmitDataSegLength, iscsiCxnHeaderIntegrity=iscsiCxnHeaderIntegrity, iscsiCxnDataIntegrity=iscsiCxnDataIntegrity, iscsiCxnRecvMarker=iscsiCxnRecvMarker, iscsiCxnSendMarker=iscsiCxnSendMarker, iscsiCxnVersionActive=iscsiCxnVersionActive, iscsiNotifications=iscsiNotifications)

# Notifications
mibBuilder.exportSymbols('ISCSI-MIB', iscsiIntrLoginFailure=iscsiIntrLoginFailure, iscsiInstSessionFailure=iscsiInstSessionFailure, iscsiTgtLoginFailure=iscsiTgtLoginFailure)

