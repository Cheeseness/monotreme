"""
Copyright (C) 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# ============================================================================
# Created manually using smidump and RZ's custom version of libsmi2pysnmp
# which was part of /home/mevans/source/pysnmp-experiments/ at the time of
# execution.  Essentially::
#   $ cd /home/mevans/source/pysnmp-experiments/NetApp
#   $ smidump Sentry3.mib -f python >Sentry3.smidump.py
#   $ cat Sentry3.smidump.py | ../libsmi2pysnmp >Sentry3-MIB.py
#
# @note This may be the first non-rfc MIB I've seen that didn't generate any
#       errors or warnings!
# ==========================================================================
# PySNMP SMI module. Autogenerated from smidump -f python Sentry3-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Mon Jan  7 23:23:00 2008,
# Python version (2, 2, 3, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'ModuleIdentity', 'MibIdentifier', 'NotificationType', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises')
( DisplayString, ) = mibBuilder.importSymbols('SNMPv2-TC', 'DisplayString')

# Objects

serverTech = MibIdentifier((1, 3, 6, 1, 4, 1, 1718))
sentry3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1718, 3)).setRevisions(('2007-07-09 14:45','2007-01-09 14:10','2006-07-20 12:00','2006-06-12 09:30','2005-07-27 11:05','2005-02-18 11:45','2005-01-07 12:20','2004-12-09 13:20','2004-11-11 12:00','2003-11-20 13:00','2003-10-23 19:00','2003-10-02 11:00','2003-08-27 16:00','2003-03-28 17:00','2003-03-27 17:00',))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 1))
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 32))).setMaxAccess('readonly').setDescription('The firmware version of the system.')
systemNICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 8))).setMaxAccess('readonly').setDescription('The serial number of the network interface card in the\nsystem.')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 32))).setMaxAccess('readwrite').setDescription('The location of the system.')
systemTowerCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('readonly').setDescription('The number of towers in the system.')
systemEnvMonCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('readonly').setDescription('The number of environmental monitors in the system.')
systemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 150000))).setMaxAccess('readonly').setUnits('Watts').setDescription('The total power comsumption of all of the input feeds in the\nsystem.  A non-negative value indicates the total power\ncompsumption in Watts.  A negative value indicates that the\ntotal power comsumption was not available.')
systemArea = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 1000))).setMaxAccess('readonly').setUnits('tenth square feet').setDescription('The area that the footprint of the system occupies.  A\nnon-zero non-negative value indicates the area in tenths of\nsquare feet.  A zero or negative value indicates that the\narea was not available.')
systemWattsPerUnitArea = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 1500000))).setMaxAccess('readonly').setUnits('Watts per square foot').setDescription('The system Watts per square foot of area.  A non-negative\nvalue indicates the power consumption per unit area in Watts\nper square foot.  A negative value indicates that the power\nconsumption per unit area was not available.')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 2))
towerTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1)).setDescription('A table of towers.')
towerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1)).setIndexNames((0, 'Sentry3-MIB', 'towerIndex')).setDescription('Row definition for the tower table.')
towerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('noaccess').setDescription('Index for the tower table.')
towerID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess('readonly').setDescription('The ID of the tower.')
towerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the tower.')
towerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,3,0,1,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('noComm', 1), ('fanFail', 2), ('overTemp', 3), ))).setMaxAccess('readonly').setDescription('The operational status of the tower.')
towerInfeedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('readonly').setDescription('The number of input feeds on the tower.')
towerProductSN = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 16))).setMaxAccess('readonly').setDescription('The product serial number of the tower.')
towerModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readonly').setDescription('The model number of the tower.')
towerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 8), Bits().subtype(namedValues=namedval.NamedValues(('failSafe', 0), ('fuseSense', 1), ('directCurrent', 2), ('threePhase', 3), ('fanSense', 4), ('tempSense', 5), ))).setMaxAccess('readonly').setDescription('The capabilities of the tower.')
infeedTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2)).setDescription('A table of input feeds.')
infeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1)).setIndexNames((0, 'Sentry3-MIB', 'towerIndex'), (0, 'Sentry3-MIB', 'infeedIndex')).setDescription('Row definition for the input feed table.')
infeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('noaccess').setDescription('Index for the input feed table.')
infeedID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess('readonly').setDescription('The ID of the input feed.')
infeedName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the input feed.')
infeedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 4), Bits().subtype(namedValues=namedval.NamedValues(('onSense', 0), ('loadSense', 1), ('powerControl', 2), ('failSafe', 3), ('defaultOff', 4), ))).setMaxAccess('readonly').setDescription('The capabilities of the input feed.')
infeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,0,2,5,3,6,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('offWait', 2), ('onWait', 3), ('offError', 4), ('onError', 5), ('noComm', 6), ))).setMaxAccess('readonly').setDescription("The status of the input feed.  If the infeedCapabilities\n'onSense' bit is TRUE, then all of the states are supported\nand indicate the sensed state of the input feed.  If the\ninfeedCapabilities 'onSense' bit is FALSE, then only the\n'on' and 'noComm' states are supported, and 'on' indicates\na derived state, not a sensed state.")
infeedLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,4,7,2,3,5,6,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('notOn', 1), ('reading', 2), ('loadLow', 3), ('loadHigh', 4), ('overLoad', 5), ('readError', 6), ('noComm', 7), ))).setMaxAccess('readonly').setDescription("The status of the load measured on the input feed.  If the\ninfeedCapabilities 'loadSense' bit is TRUE, then all of the\nstates are supported.  If the infeedCapabilities 'loadSense'\nbit is FALSE, then only the 'normal' and 'noComm' states are\nsupported.")
infeedLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 25500))).setMaxAccess('readonly').setDescription('The load measured on the input feed.  A non-negative value\nindicates the measured load in hundredths of Amps.  A\nnegative value indicates that a load value was not able to\nbe measured.')
infeedLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The load high threshold value of the input feed in Amps.')
infeedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 16))).setMaxAccess('readonly').setDescription('The number of outlets on the input feed.')
infeedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 255))).setMaxAccess('readonly').setDescription('The load capacity of the input feed.  A non-negative\nvalue indicates the maximum load in Amps.  A negative\nvalue indicates that the capacity was not available.')
infeedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 2600))).setMaxAccess('readonly').setDescription('The voltage of the input feed.  A non-negative value\nindicates the voltage in tenths of Volts.  A negative\nvalue indicates that the voltage was not available.')
infeedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 15000))).setMaxAccess('readonly').setDescription('The power consumption of the input feed.  A non-negative\nvalue indicates the power consumption in Watts.  A negative\nvalue indicates that the power consumption was not\navailable.')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3)).setDescription('A table of outlets.')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1)).setIndexNames((0, 'Sentry3-MIB', 'towerIndex'), (0, 'Sentry3-MIB', 'infeedIndex'), (0, 'Sentry3-MIB', 'outletIndex')).setDescription('Row definition for the outlet table.')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 16))).setMaxAccess('noaccess').setDescription('Index for the outlet table.')
outletID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(2, 4))).setMaxAccess('readonly').setDescription('The ID of the outlet.')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the outlet.')
outletCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 4), Bits().subtype(namedValues=namedval.NamedValues(('onSense', 0), ('loadSense', 1), ('powerControl', 2), ('shutdown', 3), ('defaultOn', 4), ('ownInfeed', 5), ('fusedBranch', 6), ))).setMaxAccess('readonly').setDescription('The capabilities of the outlet.')
outletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,4,0,8,5,2,6,9,3,7,)).subtype(namedValues=namedval.NamedValues(('off', 0), ('on', 1), ('offWait', 2), ('onWait', 3), ('offError', 4), ('onError', 5), ('noComm', 6), ('reading', 7), ('offFuse', 8), ('onFuse', 9), ))).setMaxAccess('readonly').setDescription("The status of the outlet.  If the outletCapabilities\n'onSense' bit is TRUE, then the state indicates the sensed\nstate of the outlet, not a derived state, and 'offError'\nand 'onError' are supported to indicate a mismatch between\nthe control and sensed state.  If the outletCapabilities\n'fusedBranch' bit is TRUE, then the outlet is on a fused\nbranch circuit that can detect the fuse state, and 'offFuse'\nand 'onFuse' are supported to indicate a fuse error.")
outletLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,4,7,2,3,5,6,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('notOn', 1), ('reading', 2), ('loadLow', 3), ('loadHigh', 4), ('overLoad', 5), ('readError', 6), ('noComm', 7), ))).setMaxAccess('readonly').setDescription("The status of the load measured on the outlet.  If the \noutletCapabilities 'loadSense' bit is TRUE, then all of the\nstates are supported.  If the outletCapabilities 'loadSense'\nbit is FALSE, then only the 'normal' and 'noComm' states are\nsupported.")
outletLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 25500))).setMaxAccess('readonly').setDescription('The load measured on the outlet.  A non-negative value\nindicates the measured load in hundredths of Amps.  A\nnegative value indicates that a load value was not able to\nbe measured.')
outletLoadLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The load low threshold value of the outlet in Amps.')
outletLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The load high threshold value of the outlet in Amps.')
outletControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,0,4,10,16,11,17,8,1,2,12,3,9,14,6,15,7,13,)).subtype(namedValues=namedval.NamedValues(('idleOff', 0), ('idleOn', 1), ('pendOn', 10), ('pendOff', 11), ('minimumOff', 12), ('minimumOn', 13), ('eventOff', 14), ('eventOn', 15), ('eventReboot', 16), ('eventShutdown', 17), ('wakeOff', 2), ('wakeOn', 3), ('off', 4), ('on', 5), ('lockedOff', 6), ('lockedOn', 7), ('reboot', 8), ('shutdown', 9), ))).setMaxAccess('readonly').setDescription("The control state of the outlet.  The supported states are\ndependent upon the outletCapabilities 'powerControl' and\n'shutdown' bits, as well as the supported features of the\nfirmware version.")
outletControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 11), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,3,)).subtype(namedValues=namedval.NamedValues(('none', 0), ('on', 1), ('off', 2), ('reboot', 3), ))).setMaxAccess('readwrite').setDescription("An action to change the control state of the outlet.  If\nthe outletCapabilities 'powerControl' bit is TRUE, then the\n'on', 'off', and 'reboot' actions can be used to change the\ncontrol state of the outlet.  If the outletCapabilities\n'powerControl' bit is FALSE, then the actions have no\neffect.")
envMonTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4)).setDescription('A table of environmental monitors.')
envMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1)).setIndexNames((0, 'Sentry3-MIB', 'envMonIndex')).setDescription('Row definition for the environmental monitor table.')
envMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('noaccess').setDescription('Index for the environmental monitor table.')
envMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess('readonly').setDescription('The ID of the environmental monitor.')
envMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the environmental monitor.')
envMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('noComm', 1), ))).setMaxAccess('readonly').setDescription('The operational status of the environmental monitor.')
envMonWaterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the water sensor.')
envMonWaterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('alarm', 1), ('noComm', 2), ))).setMaxAccess('readonly').setDescription('The status of the water sensor.')
envMonADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the analog-to-digital converter.')
envMonADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,1,2,5,4,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('reading', 1), ('countLow', 2), ('countHigh', 3), ('readError', 4), ('noComm', 5), ))).setMaxAccess('readonly').setDescription('The status of the analog-to-digital converter.')
envMonADCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 255))).setMaxAccess('readonly').setDescription('The 8-bit count value from the analog-to-digital converter.\nA non-negative value indicates the digital value retrieved\nfrom the ADC.  A negative value indicates that a digital\nvalue was not able to be retrieved.')
envMonADCLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The 8-bit count low threshold value of the analog-to-digital\nconverter.')
envMonADCHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess('readwrite').setDescription('The 8-bit count high threshold value of the analog-to-digital\nconverter.')
envMonTempHumidSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2))).setMaxAccess('readonly').setDescription('The number of temperature/humidity sensors on the\nenvironmental monitor.')
envMonContactClosureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('readonly').setDescription('The number of contact closures on the environmental\nmonitor.')
tempHumidSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5)).setDescription('A table of temperature/humidity sensors.')
tempHumidSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1)).setIndexNames((0, 'Sentry3-MIB', 'envMonIndex'), (0, 'Sentry3-MIB', 'tempHumidSensorIndex')).setDescription('Row definition for the temperature/humidity sensor table.')
tempHumidSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2))).setMaxAccess('noaccess').setDescription('Index for the temperature/humidity sensor table.')
tempHumidSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess('readonly').setDescription('The ID of the temperature/humidity sensor.')
tempHumidSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the temperature/humidity sensor.')
tempHumidSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,3,2,1,)).subtype(namedValues=namedval.NamedValues(('found', 0), ('notFound', 1), ('lost', 2), ('noComm', 3), ))).setMaxAccess('readonly').setDescription('The operational status of the temperature/humidity sensor.')
tempHumidSensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,6,0,4,2,7,5,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('notFound', 1), ('reading', 2), ('tempLow', 3), ('tempHigh', 4), ('readError', 5), ('lost', 6), ('noComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the temperature sensor.')
tempHumidSensorTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 2540))).setMaxAccess('readonly').setDescription('The temperature measured by the sensor.  A non-negative value\nindicates the measured temperature in tenths of degrees, using\nthe scale selected by tempHumidSensorTempScale.  If the agent\ndoes not support the tempHumidSensorTempScale object, then the\ntemperature scale used is Celsius.  A negative value indicates\nthat a temperature value was not able to be measured.')
tempHumidSensorTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 254))).setMaxAccess('readwrite').setDescription('The temperature low threshold value of the sensor in degrees,\nusing the scale selected by tempHumidSensorTempScale.  If the\nagent does not support the tempHumidSensorTempScale object,\nthen the temperature scale used is Celsius.')
tempHumidSensorTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 254))).setMaxAccess('readwrite').setDescription('The temperature high threshold value of the sensor in degrees,\nusing the scale selected by tempHumidSensorTempScale.  If the\nagent does not support the tempHumidSensorTempScale object,\nthen the temperature scale used is Celsius.')
tempHumidSensorHumidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,6,0,3,2,4,7,5,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('notFound', 1), ('reading', 2), ('humidLow', 3), ('humidHigh', 4), ('readError', 5), ('lost', 6), ('noComm', 7), ))).setMaxAccess('readonly').setDescription('The status of the humidity sensor.')
tempHumidSensorHumidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 100))).setMaxAccess('readonly').setDescription('The humidity measured by the sensor.  A non-negative value\nindicates the measured humidity in percentage relative\nhumidity.  A negative value indicates that a humidity value\nwas not able to be measured.')
tempHumidSensorHumidLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('The humidity low threshold value of the sensor in percentage\nrelative humidity.')
tempHumidSensorHumidHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readwrite').setDescription('The humidity low threshold value of the sensor in percentage\nrelative humidity.')
tempHumidSensorTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 13), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('celsius', 0), ('fahrenheit', 1), ))).setMaxAccess('readwrite').setDescription('The scale used for temperature values.  This is a global\nsetting for all temperature values in the system.  If the\nagent does not support this object, then the temperature\nscale used is Celsius.')
contactClosureTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6)).setDescription('A table of contact closures.')
contactClosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1)).setIndexNames((0, 'Sentry3-MIB', 'envMonIndex'), (0, 'Sentry3-MIB', 'contactClosureIndex')).setDescription('Row definition for the contact closure table.')
contactClosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 4))).setMaxAccess('noaccess').setDescription('Index for the contact closure table.')
contactClosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess('readonly').setDescription('The ID of the contact closure.')
contactClosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 24))).setMaxAccess('readwrite').setDescription('The name of the contact closure.')
contactClosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,2,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('alarm', 1), ('noComm', 2), ))).setMaxAccess('readonly').setDescription('The status of the contact closure.')
sentry3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0))

# Augmentions

# Notifications

outletChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 6)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'outletName'), ('Sentry3-MIB', 'outletID'), ('Sentry3-MIB', 'outletStatus'), ('Sentry3-MIB', 'outletControlState'), )
envMonStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 7)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'envMonName'), ('Sentry3-MIB', 'envMonID'), ('Sentry3-MIB', 'envMonStatus'), )
envMonWaterSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 8)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'envMonWaterSensorStatus'), ('Sentry3-MIB', 'envMonWaterSensorName'), ('Sentry3-MIB', 'envMonID'), )
towerStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 1)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'towerName'), ('Sentry3-MIB', 'towerStatus'), ('Sentry3-MIB', 'towerID'), )
outletLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 5)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'outletLoadValue'), ('Sentry3-MIB', 'outletLoadLowThresh'), ('Sentry3-MIB', 'outletLoadStatus'), ('Sentry3-MIB', 'outletLoadHighThresh'), ('Sentry3-MIB', 'outletID'), ('Sentry3-MIB', 'outletName'), )
infeedLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 3)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'infeedLoadValue'), ('Sentry3-MIB', 'infeedID'), ('Sentry3-MIB', 'infeedLoadStatus'), ('Sentry3-MIB', 'infeedName'), ('Sentry3-MIB', 'infeedLoadHighThresh'), )
contactClosureEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 13)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'contactClosureName'), ('Sentry3-MIB', 'contactClosureID'), ('Sentry3-MIB', 'contactClosureStatus'), )
envMonADCEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 9)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'envMonADCStatus'), ('Sentry3-MIB', 'envMonADCLowThresh'), ('Sentry3-MIB', 'envMonADCCount'), ('Sentry3-MIB', 'envMonADCHighThresh'), ('Sentry3-MIB', 'envMonADCName'), ('Sentry3-MIB', 'envMonID'), )
outletStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 4)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'outletName'), ('Sentry3-MIB', 'outletID'), ('Sentry3-MIB', 'outletStatus'), )
tempHumidSensorHumidEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 12)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'tempHumidSensorHumidHighThresh'), ('Sentry3-MIB', 'tempHumidSensorName'), ('Sentry3-MIB', 'tempHumidSensorHumidLowThresh'), ('Sentry3-MIB', 'tempHumidSensorHumidStatus'), ('Sentry3-MIB', 'tempHumidSensorID'), ('Sentry3-MIB', 'tempHumidSensorHumidValue'), )
infeedStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 2)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'infeedID'), ('Sentry3-MIB', 'infeedStatus'), ('Sentry3-MIB', 'infeedName'), )
tempHumidSensorTempEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 11)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'tempHumidSensorName'), ('Sentry3-MIB', 'tempHumidSensorTempValue'), ('Sentry3-MIB', 'tempHumidSensorTempHighThresh'), ('Sentry3-MIB', 'tempHumidSensorTempScale'), ('Sentry3-MIB', 'tempHumidSensorID'), ('Sentry3-MIB', 'tempHumidSensorTempStatus'), ('Sentry3-MIB', 'tempHumidSensorTempLowThresh'), )
tempHumidSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 10)).setObjects(('Sentry3-MIB', 'systemLocation'), ('Sentry3-MIB', 'tempHumidSensorStatus'), ('Sentry3-MIB', 'tempHumidSensorID'), ('Sentry3-MIB', 'tempHumidSensorName'), )

# Exports

# Module identity
mibBuilder.exportSymbols('Sentry3-MIB', PYSNMP_MODULE_ID=sentry3)

# Objects
mibBuilder.exportSymbols('Sentry3-MIB', serverTech=serverTech, sentry3=sentry3, systemGroup=systemGroup, systemVersion=systemVersion, systemNICSerialNumber=systemNICSerialNumber, systemLocation=systemLocation, systemTowerCount=systemTowerCount, systemEnvMonCount=systemEnvMonCount, systemTotalPower=systemTotalPower, systemArea=systemArea, systemWattsPerUnitArea=systemWattsPerUnitArea, systemTables=systemTables, towerTable=towerTable, towerEntry=towerEntry, towerIndex=towerIndex, towerID=towerID, towerName=towerName, towerStatus=towerStatus, towerInfeedCount=towerInfeedCount, towerProductSN=towerProductSN, towerModelNumber=towerModelNumber, towerCapabilities=towerCapabilities, infeedTable=infeedTable, infeedEntry=infeedEntry, infeedIndex=infeedIndex, infeedID=infeedID, infeedName=infeedName, infeedCapabilities=infeedCapabilities, infeedStatus=infeedStatus, infeedLoadStatus=infeedLoadStatus, infeedLoadValue=infeedLoadValue, infeedLoadHighThresh=infeedLoadHighThresh, infeedOutletCount=infeedOutletCount, infeedCapacity=infeedCapacity, infeedVoltage=infeedVoltage, infeedPower=infeedPower, outletTable=outletTable, outletEntry=outletEntry, outletIndex=outletIndex, outletID=outletID, outletName=outletName, outletCapabilities=outletCapabilities, outletStatus=outletStatus, outletLoadStatus=outletLoadStatus, outletLoadValue=outletLoadValue, outletLoadLowThresh=outletLoadLowThresh, outletLoadHighThresh=outletLoadHighThresh, outletControlState=outletControlState, outletControlAction=outletControlAction, envMonTable=envMonTable, envMonEntry=envMonEntry, envMonIndex=envMonIndex, envMonID=envMonID, envMonName=envMonName, envMonStatus=envMonStatus, envMonWaterSensorName=envMonWaterSensorName, envMonWaterSensorStatus=envMonWaterSensorStatus, envMonADCName=envMonADCName, envMonADCStatus=envMonADCStatus, envMonADCCount=envMonADCCount, envMonADCLowThresh=envMonADCLowThresh, envMonADCHighThresh=envMonADCHighThresh, envMonTempHumidSensorCount=envMonTempHumidSensorCount, envMonContactClosureCount=envMonContactClosureCount, tempHumidSensorTable=tempHumidSensorTable, tempHumidSensorEntry=tempHumidSensorEntry, tempHumidSensorIndex=tempHumidSensorIndex, tempHumidSensorID=tempHumidSensorID, tempHumidSensorName=tempHumidSensorName, tempHumidSensorStatus=tempHumidSensorStatus, tempHumidSensorTempStatus=tempHumidSensorTempStatus, tempHumidSensorTempValue=tempHumidSensorTempValue, tempHumidSensorTempLowThresh=tempHumidSensorTempLowThresh, tempHumidSensorTempHighThresh=tempHumidSensorTempHighThresh, tempHumidSensorHumidStatus=tempHumidSensorHumidStatus, tempHumidSensorHumidValue=tempHumidSensorHumidValue, tempHumidSensorHumidLowThresh=tempHumidSensorHumidLowThresh, tempHumidSensorHumidHighThresh=tempHumidSensorHumidHighThresh, tempHumidSensorTempScale=tempHumidSensorTempScale, contactClosureTable=contactClosureTable, contactClosureEntry=contactClosureEntry, contactClosureIndex=contactClosureIndex, contactClosureID=contactClosureID, contactClosureName=contactClosureName, contactClosureStatus=contactClosureStatus, sentry3Traps=sentry3Traps, events=events)

# Notifications
mibBuilder.exportSymbols('Sentry3-MIB', outletChangeEvent=outletChangeEvent, envMonStatusEvent=envMonStatusEvent, envMonWaterSensorEvent=envMonWaterSensorEvent, towerStatusEvent=towerStatusEvent, outletLoadEvent=outletLoadEvent, infeedLoadEvent=infeedLoadEvent, contactClosureEvent=contactClosureEvent, envMonADCEvent=envMonADCEvent, outletStatusEvent=outletStatusEvent, tempHumidSensorHumidEvent=tempHumidSensorHumidEvent, infeedStatusEvent=infeedStatusEvent, tempHumidSensorTempEvent=tempHumidSensorTempEvent, tempHumidSensorStatusEvent=tempHumidSensorStatusEvent)

