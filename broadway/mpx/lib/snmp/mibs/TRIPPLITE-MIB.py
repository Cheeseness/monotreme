"""
Copyright (C) 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# PySNMP SMI module. Autogenerated from smidump -f python TRIPPLITE-MIB
# by libsmi2pysnmp-0.0.7-alpha-rz2 at Wed Apr 27 13:08:28 2011,
# Python version (2, 6, 4, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols('ASN1', 'Integer', 'ObjectIdentifier', 'OctetString')
( NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols('SNMPv2-CONF', 'NotificationGroup', 'ObjectGroup')
( Bits, Counter32, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols('SNMPv2-SMI', 'Bits', 'Counter32', 'Counter64', 'Gauge32', 'Integer32', 'IpAddress', 'ModuleIdentity', 'MibIdentifier', 'NotificationType', 'ObjectIdentity', 'MibScalar', 'MibTable', 'MibTableRow', 'MibTableColumn', 'Opaque', 'TimeTicks', 'Unsigned32', 'enterprises')
( AutonomousType, DateAndTime, DisplayString, RowStatus, TimeInterval, TimeStamp, TruthValue, VariablePointer, ) = mibBuilder.importSymbols('SNMPv2-TC', 'AutonomousType', 'DateAndTime', 'DisplayString', 'RowStatus', 'TimeInterval', 'TimeStamp', 'TruthValue', 'VariablePointer')
( NonNegativeInteger, PositiveInteger, ) = mibBuilder.importSymbols('UPS-MIB', 'NonNegativeInteger', 'PositiveInteger')

# Objects

tripplite = ModuleIdentity((1, 3, 6, 1, 4, 1, 850)).setRevisions(('2009-04-27 00:00','2008-10-14 00:00','2008-09-25 00:00','2008-02-01 00:00','2007-11-30 00:00','2007-11-29 00:00','2007-08-26 00:00','2007-02-28 00:00','2006-12-12 00:00','2006-12-06 00:00','2006-06-20 00:00','2005-07-13 00:00','2003-05-16 00:00',))
trippUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1))
tlV11TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 0))
trippUpsReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
upsReceptaclesNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of available receptacles in this device.\nThis variable indicates the number of rows in the\nreceptacle table.')
upsReceptacleTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 2)).setDescription('A list of receptacle table entries.  The number of entries\nis given by the value of upsReceptaclesNumReceptacles.')
upsReceptacleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'upsReceptacleIndex')).setDescription('An entry containing information applicable to a\nparticular receptacle.')
upsReceptacleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The receptacle identifier.')
upsReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('surgeOnly', 1), ('batteryProtected', 2), ('controllableBatteryProtected', 3), ))).setMaxAccess('readonly').setDescription('The type of receptacle.')
upsReceptacleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,)).subtype(namedValues=namedval.NamedValues(('on', 1), ('off', 2), ('unknown', 3), ))).setMaxAccess('readonly').setDescription('The status of receptacle.')
upsReceptacleControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,3,2,)).subtype(namedValues=namedval.NamedValues(('on', 1), ('off', 2), ('cycle', 3), ))).setMaxAccess('readwrite').setDescription("Setting this object to 'on' will turn on the receptacle.\nSetting this object to 'off' will turn off the receptacle.\nSetting this object to 'cycle' will turn off and then turn\non the receptacle.  This action will only take place if the\nreceptacle is controllable\n(upsReceptacleType = controllableBatteryProtected(3)).")
trippUpsTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2))
upsTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess('readonly').setDescription('A numeric code identifiying the condition that caused the trap to be sent.\nIf the trap number is 104 (upsAgentStarted) or 105 (upsAgentStopped), this\ncode will indicate whether the SNMP agent is software (1) or hardware (2).')
upsTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess('readonly').setDescription('The description of the trap.')
trippUpsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3))
upsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 1), Integer32()).setMaxAccess('readonly').setDescription('The ambient temperature of the EnviroSense unit (1/10 Deg C).')
upsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess('readonly').setDescription('The ambient humidity of the EnviroSense unit (% Humidity).')
trippUpsContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4))
upsContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 4, 1)).setDescription('A table of contacts attached to the EnviroSense unit.')
upsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'upsContactIndex')).setDescription('An entry containing information applicable to a\nparticular contact.')
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The contact identifier.')
upsContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 15))).setMaxAccess('readwrite').setDescription('The contact name.')
upsContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('normal', 1), ('alarm', 2), ))).setMaxAccess('readonly').setDescription('The current status of the contact.')
upsContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('normallyClosed', 0), ('normallyOpen', 1), ))).setMaxAccess('readwrite').setDescription('The default configuration of the contact.')
tlEnumerations = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2))
tlOperatingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 14))
win9x = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 50))
winnt = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 51))
solspark = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 52))
solintel = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 53))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 54))
sco = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 55))
osx = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 56))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 255))
tlConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20))
tlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 1))
tlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2))
tlSubsetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 1))
tlBasicGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 2))
tlFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3))
tlUpsFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100))
tlUpsFullAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6))
tlV11Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 4))
tlUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100))
tlUpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1))
tlUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 1))
tlUpsIdentUpsSoftwareChecksum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('A checksum for the UPS fostware.')
tlUpsIdentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 2), DisplayString()).setMaxAccess('readonly').setDescription('Serial number for the UPS.')
tlUpsIdentID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess('readwrite').setDescription('A user-supplied ID for the UPS.')
tlUpsSnmpCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('Serial number for the UPS.')
tlUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 2))
tlUpsBatteryAge = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 1), DisplayString()).setMaxAccess('readonly').setDescription('The age of the battery, in the format YYYYMMDD.  This is equal to\nthe current date minus tlConfigBattReplDate.')
tlUpsTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 2), Integer32()).setMaxAccess('readonly').setDescription('The temperature of the battery, in Farenheight degrees.  This is\ncalculated from upsBatteryTemperature, which is in Celsius degrees.')
tlUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 3))
tlUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 4))
tlUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 5))
tlUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6))
tlUpsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 1), Gauge32()).setMaxAccess('readonly').setDescription('The present number of active alarm conditions.')
tlUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2)).setDescription('A list of alarm table entries.')
tlUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlUpsAlarmId')).setDescription('An entry containing information applicable to a particular alarm.')
tlUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('A unique identifier for an alarm condition.')
tlUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess('readonly').setDescription('A description of the alarm condition.')
tlUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess('readonly').setDescription('The value of sysUpTime when the alarm condition was detected.')
tlUpsAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess('readonly').setDescription('A textual description of the alarm condition.')
tlUpsAlarmDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 5), PositiveInteger()).setMaxAccess('readonly').setDescription('A numeric identifier for the device on which the alarm is active.')
tlUpsAlarmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess('readonly').setDescription('A string identifier for the device on which the alarm is active.')
tlUpsAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 7), DisplayString()).setMaxAccess('readonly').setDescription('The location of the device on which the alarm is active.')
tlUpsAlarmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,4,6,1,5,2,)).subtype(namedValues=namedval.NamedValues(('critical', 1), ('warning', 2), ('info', 3), ('status', 4), ('offline', 5), ('custom', 6), ))).setMaxAccess('readonly').setDescription('The category/group of this alarm.')
tlUpsAlarmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 9), IpAddress()).setMaxAccess('readonly').setDescription('The originating IP address associated with this alarm.')
tlUpsAlarmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 10), DisplayString()).setMaxAccess('readonly').setDescription('The originating mac address associated with this alarm.')
tlUpsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3))
tlUpsAlarmPrimaryPowerOutage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 1))
tlUpsAlarmSecondaryPowerOutage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 2))
tlUpsAlarmLoadLevelAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 3))
tlUpsAlarmOutputCurrentChanged = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 4))
tlUpsAlarmDevName = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 7), DisplayString()).setMaxAccess('readonly').setDescription('The name of the device, tlDevName, corresponding to the device that is\nassociated with this alarm.')
tlUpsAlarmDevLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 8), DisplayString()).setMaxAccess('readonly').setDescription('The location of the device, tlDevLocation, corresponding to the device\nthat is associated with this alarm.')
tlUpsAlarmCategory = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 9), Integer32()).setMaxAccess('readonly').setDescription('The category, tlDevEvtCategory, of this alarm.')
tlUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 7))
tlUpsTestDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 1), DisplayString()).setMaxAccess('readonly').setDescription('The date of the last self-test run on the ups, in the\nformat YYYYMMDD.')
tlUpsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 2), DisplayString()).setMaxAccess('readonly').setDescription('Result of the last self-test run on the ups.')
tlUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8))
tlUpsWatchdogSupported = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 1), TruthValue()).setMaxAccess('readonly').setDescription('Indicates whether or not this UPS supports a watchdog reboot.')
tlUpsWatchdogSecsBeforeReboot = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 2), NonNegativeInteger()).setMaxAccess('readwrite').setDescription('The maximum number of seconds that can expire between polls that\nthe engine makes to the UPS for data.  If this time runs out, then\nthe UPS will cycle its outputs.  Set this to zero to turns disable\nthis feature.')
tlUpsWellKnownControls = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3))
tlUpsControlSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 1), TruthValue()).setMaxAccess('readwrite').setDescription('Set to TRUE to initiate Self Test')
tlUpsControlRamp = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 2), TruthValue()).setMaxAccess('readwrite').setDescription('Set to TRUE to initiate Ramp')
tlUpsControlShed = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 3), TruthValue()).setMaxAccess('readwrite').setDescription('Set to TRUE to initiate Shed')
tlUpsControlUpsOn = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 4), TruthValue()).setMaxAccess('readwrite').setDescription('Set to TRUE to turn UPS on')
tlUpsControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 5), TruthValue()).setMaxAccess('readwrite').setDescription('Set to TRUE to turn UPS off')
tlUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 9))
tlUpsConfigBattReplDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 1), DisplayString()).setMaxAccess('readwrite').setDescription('The date on which the battery was last replaced, in the format\nYYYYMMDD.')
tlUpsConfigTftpGetAddr = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 2), IpAddress()).setMaxAccess('readwrite').setDescription('The IP address of the TFTP server you wish to acquire a config ini file from, non persistent, 0.0.0.0 when empty')
tlUpsConfigTftpGetAcction = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,2,)).subtype(namedValues=namedval.NamedValues(('get', 1), ('getting', 2), ('idle', 3), ))).setMaxAccess('readwrite').setDescription('setting this entry to get(1) will start a down load from the specified address, during the download this entry\nwill read getting(2), when finished, the card will reboot to the new ini supplied parms. At all other times this \nentry will read idle(3)')
tlUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 10))
tlUpsOutletNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 1), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of available Outlets in this device.')
tlUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2)).setDescription('A list of all device Outlets for all devices.')
tlUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlUpsOutletIndex')).setDescription('An entry containing Outlet information applicable to a particular\ndevice managed by this agent.')
tlUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('This is the index number of this Outlet for the device\nindicated by tlDeviceIndex.')
tlUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,2,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('off', 1), ('on', 2), ))).setMaxAccess('readonly').setDescription('The current state of the Outlet.')
tlUpsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 3), Integer32()).setMaxAccess('readonly').setDescription('This is a bit field that indicates the type of this Outlet.\n\nBit   Display\n 0    Battery Protected\n 1    Controllable\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15')
tlUpsOutletControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('turnOff', 1), ('turnOn', 2), ('cycle', 3), ))).setMaxAccess('readwrite').setDescription('Controls the state of the Outlet.')
tlUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 5), DisplayString()).setMaxAccess('readwrite').setDescription('A string identifying the devices attached to the\noutput(s) of the device.')
tlUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('remainOff', 0), ('turnOnAfterDelay', 1), ))).setMaxAccess('readwrite').setDescription('The ramp action to take on the Outlet.')
tlUpsOutletRampDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,)).subtype(namedValues=namedval.NamedValues(('delayInSeconds', 0), ))).setMaxAccess('readwrite').setDescription('The type of data associated with ramp action.')
tlUpsOutletRampData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess('readwrite').setDescription('The data value associated with type of ramp data.')
tlUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('remainOn', 0), ('turnOffAfterDelay', 1), ))).setMaxAccess('readwrite').setDescription('The shed action to take on the Outlet.')
tlUpsOutletShedDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 10), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,)).subtype(namedValues=namedval.NamedValues(('delayInSeconds', 0), ))).setMaxAccess('readwrite').setDescription('The type of data associated with shed action.')
tlUpsOutletShedData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 11), Integer32()).setMaxAccess('readwrite').setDescription('The data value associated with type of shed data.')
tlUpsOutletGroupNdx = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 12), Integer32()).setMaxAccess('readwrite').setDescription('tlUpsOutletGroupIndex of corresponding outlet group, or 0 if ungrouped.')
tlUpsOutletCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 3)).setDescription('A list of load currents.')
tlUpsOutletCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 3, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlUpsOutletCurrentIndex')).setDescription('An entry containing Outlet current information applicable to a particular\ndevice managed by this agent.')
tlUpsOutletCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 3, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('This is the index number of this Outlet.')
tlUpsOutletCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 3, 1, 2), PositiveInteger()).setMaxAccess('readonly').setDescription("The value of this outlet's current, represented as 0.1A")
tlUpsOutletPowerTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 4)).setDescription('A list of load power.')
tlUpsOutletPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 4, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlUpsOutletPowerIndex')).setDescription('An entry containing Outlet power information applicable to a particular\ndevice managed by this agent.')
tlUpsOutletPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 4, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('This is the index number of this Outlet.')
tlUpsOutletPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 4, 1, 2), PositiveInteger()).setMaxAccess('readonly').setDescription("The value of this outlet's power in watts.")
tlUpsOutletGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 11))
tlUpsOutletNumOutletGroups = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 1), NonNegativeInteger()).setMaxAccess('readonly').setDescription('The number of available Outlet Groups in this device.')
tlUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2)).setDescription('A list of device outlet group entries. The number of entries is\ngiven by the value of tlUpsOutletNumOutletGroups.')
tlUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlUpsOutletGroupIndex')).setDescription('An entry containing outlet group information applicable\nto a particular device managed by this agent')
tlUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('This is the index number of this load group for the device.')
tlUpsOutletGroupUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('Unused placeholder')
tlUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess('readwrite').setDescription('The name of this outlet group.')
tlUpsOutletGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess('readwrite').setDescription('A description for this outlet group.')
tlUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,0,2,1,)).subtype(namedValues=namedval.NamedValues(('unknown', 0), ('off', 1), ('on', 2), ('mixed', 3), ))).setMaxAccess('readonly').setDescription('The current state of the outlet group.')
tlUpsOutletGroupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(2,1,3,)).subtype(namedValues=namedval.NamedValues(('turnOff', 1), ('turnOn', 2), ('cycle', 3), ))).setMaxAccess('readwrite').setDescription('Controls the state of every outlet associated with the group.')
tlUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 2))
tlEnviroSense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101))
tlEnvEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1))
tlEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 1))
tlEnvTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 1), Integer32()).setMaxAccess('readonly').setDescription('The ambient temperature (C).')
tlEnvTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 2), Integer32()).setMaxAccess('readonly').setDescription('The ambient temperature (F).')
tlEnvTemperatureLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 3), Integer32()).setMaxAccess('readwrite').setDescription('The lower alarm limit for ambient temperature (F).')
tlEnvTemperatureHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 4), Integer32()).setMaxAccess('readwrite').setDescription('The upper alarm limit for ambient temperature (F).')
tlEnvTemperatureInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 5), TruthValue()).setMaxAccess('readonly').setDescription('Indicates whether or not temperature is in alarm.')
tlEnvHumidityData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 2))
tlEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 1), Integer32()).setMaxAccess('readonly').setDescription('The ambient humidity (%).')
tlEnvHumidityLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 2), Integer32()).setMaxAccess('readwrite').setDescription('The lower alarm limit for ambient humidity (%).')
tlEnvHumidityHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 3), Integer32()).setMaxAccess('readwrite').setDescription('The upper alarm limit for ambient humidity (%).')
tlEnvHumidityInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 4), TruthValue()).setMaxAccess('readonly').setDescription('Indicates whether or not humidity is in alarm.')
tlEnvContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 2))
tlEnvContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 101, 2, 1)).setDescription('A table of contacts.')
tlEnvContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1)).setIndexNames((0, 'TRIPPLITE-MIB', 'tlEnvContactIndex')).setDescription('An entry containing information applicable to a particular contact.')
tlEnvContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 1), PositiveInteger()).setMaxAccess('readonly').setDescription('The table row index for the contact.')
tlEnvContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 2), DisplayString()).setMaxAccess('readwrite').setDescription('The name or description of the contact.')
tlEnvContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,0,)).subtype(namedValues=namedval.NamedValues(('normal', 0), ('alarm', 1), ))).setMaxAccess('readonly').setDescription('The current status of the contact.')
tlEnvContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(0,1,)).subtype(namedValues=namedval.NamedValues(('normallyOpen', 0), ('normallyClosed', 1), ))).setMaxAccess('readwrite').setDescription('The configuration of the contact.')

# Augmentions

# Notifications

tlV11upsAgentStopped = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 105)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlUpsTrapAlarmEntryRemovedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 0, 4)).setObjects(('TRIPPLITE-MIB', 'tlUpsAlarmId'), ('TRIPPLITE-MIB', 'tlUpsAlarmGroup'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceId'), ('TRIPPLITE-MIB', 'tlUpsAlarmDetail'), ('TRIPPLITE-MIB', 'tlUpsAlarmDescr'), ('TRIPPLITE-MIB', 'tlUpsAlarmLocation'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceName'), )
tlV11upsCritical = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 100)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlV11upsAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 103)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlV11upsAgentStarted = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 104)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlUpsTrapAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 4)).setObjects(('TRIPPLITE-MIB', 'tlUpsAlarmId'), ('TRIPPLITE-MIB', 'tlUpsAlarmGroup'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceId'), ('TRIPPLITE-MIB', 'tlUpsAlarmDetail'), ('TRIPPLITE-MIB', 'tlUpsAlarmDescr'), ('TRIPPLITE-MIB', 'tlUpsAlarmLocation'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceName'), )
tlV11upsInformation = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 102)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlUpsTrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 3)).setObjects(('TRIPPLITE-MIB', 'tlUpsAlarmId'), ('TRIPPLITE-MIB', 'tlUpsAlarmGroup'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceId'), ('TRIPPLITE-MIB', 'tlUpsAlarmDetail'), ('TRIPPLITE-MIB', 'tlUpsAlarmDescr'), ('TRIPPLITE-MIB', 'tlUpsAlarmLocation'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceName'), )
tlUpsTrapAlarmEntryAddedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 0, 3)).setObjects(('TRIPPLITE-MIB', 'tlUpsAlarmId'), ('TRIPPLITE-MIB', 'tlUpsAlarmGroup'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceId'), ('TRIPPLITE-MIB', 'tlUpsAlarmDetail'), ('TRIPPLITE-MIB', 'tlUpsAlarmDescr'), ('TRIPPLITE-MIB', 'tlUpsAlarmLocation'), ('TRIPPLITE-MIB', 'tlUpsAlarmDeviceName'), )
tlV11upsWarning = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 101)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )

# Groups

tlUpsFullAlarmObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6, 1)).setObjects(('TRIPPLITE-MIB', 'tlUpsAlarmDevLocation'), ('TRIPPLITE-MIB', 'tlUpsAlarmCategory'), ('TRIPPLITE-MIB', 'tlUpsAlarmDevName'), )
tlUpsFullControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 8)).setObjects(('TRIPPLITE-MIB', 'tlUpsWatchdogSecsBeforeReboot'), ('TRIPPLITE-MIB', 'tlUpsWatchdogSupported'), )
tlUpsFullIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 1)).setObjects(('TRIPPLITE-MIB', 'tlUpsIdentUpsSoftwareChecksum'), ('TRIPPLITE-MIB', 'tlUpsIdentSerialNum'), ('TRIPPLITE-MIB', 'tlUpsIdentID'), )
tlDeprecatedV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 1)).setObjects(('TRIPPLITE-MIB', 'upsTrapCode'), ('TRIPPLITE-MIB', 'upsTrapDescription'), )
tlDeprecatedV11NotificationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 2)).setObjects(('TRIPPLITE-MIB', 'tlV11upsCritical'), ('TRIPPLITE-MIB', 'tlV11upsAgentStopped'), ('TRIPPLITE-MIB', 'tlV11upsInformation'), ('TRIPPLITE-MIB', 'tlV11upsWarning'), ('TRIPPLITE-MIB', 'tlV11upsAgentStarted'), ('TRIPPLITE-MIB', 'tlV11upsAlarmCleared'), )
tlUpsFullTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 7)).setObjects(('TRIPPLITE-MIB', 'tlUpsTestResultsDetail'), ('TRIPPLITE-MIB', 'tlUpsTestDate'), )
tlUpsFullConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 9)).setObjects(('TRIPPLITE-MIB', 'tlUpsConfigBattReplDate'), )
tlUpsFullOutletGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 10)).setObjects(('TRIPPLITE-MIB', 'tlUpsOutletNumOutlets'), )
tlUpsFullBatteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 2)).setObjects(('TRIPPLITE-MIB', 'tlUpsBatteryAge'), ('TRIPPLITE-MIB', 'tlUpsTemperatureF'), )
tlObsoleteV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 3)).setObjects(('TRIPPLITE-MIB', 'upsEnvHumidity'), ('TRIPPLITE-MIB', 'upsReceptacleType'), ('TRIPPLITE-MIB', 'upsReceptacleIndex'), ('TRIPPLITE-MIB', 'upsContactConfig'), ('TRIPPLITE-MIB', 'upsReceptaclesNumReceptacles'), ('TRIPPLITE-MIB', 'upsEnvTemperature'), ('TRIPPLITE-MIB', 'upsContactIndex'), ('TRIPPLITE-MIB', 'upsReceptacleControl'), ('TRIPPLITE-MIB', 'upsContactStatus'), ('TRIPPLITE-MIB', 'upsReceptacleStatus'), ('TRIPPLITE-MIB', 'upsContactName'), )

# Exports

# Module identity
mibBuilder.exportSymbols('TRIPPLITE-MIB', PYSNMP_MODULE_ID=tripplite)

# Objects
mibBuilder.exportSymbols('TRIPPLITE-MIB', tripplite=tripplite, trippUPS=trippUPS, tlV11TrapsPrefix=tlV11TrapsPrefix, trippUpsReceptacles=trippUpsReceptacles, upsReceptaclesNumReceptacles=upsReceptaclesNumReceptacles, upsReceptacleTable=upsReceptacleTable, upsReceptacleEntry=upsReceptacleEntry, upsReceptacleIndex=upsReceptacleIndex, upsReceptacleType=upsReceptacleType, upsReceptacleStatus=upsReceptacleStatus, upsReceptacleControl=upsReceptacleControl, trippUpsTrapInfo=trippUpsTrapInfo, upsTrapCode=upsTrapCode, upsTrapDescription=upsTrapDescription, trippUpsEnvironment=trippUpsEnvironment, upsEnvTemperature=upsEnvTemperature, upsEnvHumidity=upsEnvHumidity, trippUpsContacts=trippUpsContacts, upsContactTable=upsContactTable, upsContactEntry=upsContactEntry, upsContactIndex=upsContactIndex, upsContactName=upsContactName, upsContactStatus=upsContactStatus, upsContactConfig=upsContactConfig, tlEnumerations=tlEnumerations, tlOperatingSystems=tlOperatingSystems, hpux9=hpux9, sunos4=sunos4, solaris=solaris, osf=osf, ultrix=ultrix, hpux10=hpux10, netbsd1=netbsd1, freebsd=freebsd, irix=irix, linux=linux, bsdi=bsdi, openbsd=openbsd, win32=win32, hpux11=hpux11, win9x=win9x, winnt=winnt, solspark=solspark, solintel=solintel, aix=aix, sco=sco, osx=osx, unknown=unknown, tlConformance=tlConformance, tlCompliances=tlCompliances, tlGroups=tlGroups, tlSubsetGroups=tlSubsetGroups, tlBasicGroups=tlBasicGroups, tlFullGroups=tlFullGroups, tlUpsFullGroups=tlUpsFullGroups, tlUpsFullAlarmGroup=tlUpsFullAlarmGroup, tlV11Groups=tlV11Groups, tlUPS=tlUPS, tlUpsObjects=tlUpsObjects, tlUpsIdent=tlUpsIdent, tlUpsIdentUpsSoftwareChecksum=tlUpsIdentUpsSoftwareChecksum, tlUpsIdentSerialNum=tlUpsIdentSerialNum, tlUpsIdentID=tlUpsIdentID, tlUpsSnmpCardSerialNum=tlUpsSnmpCardSerialNum, tlUpsBattery=tlUpsBattery, tlUpsBatteryAge=tlUpsBatteryAge, tlUpsTemperatureF=tlUpsTemperatureF, tlUpsInput=tlUpsInput, tlUpsOutput=tlUpsOutput, tlUpsBypass=tlUpsBypass, tlUpsAlarm=tlUpsAlarm, tlUpsAlarmsPresent=tlUpsAlarmsPresent, tlUpsAlarmTable=tlUpsAlarmTable, tlUpsAlarmEntry=tlUpsAlarmEntry, tlUpsAlarmId=tlUpsAlarmId, tlUpsAlarmDescr=tlUpsAlarmDescr, tlUpsAlarmTime=tlUpsAlarmTime, tlUpsAlarmDetail=tlUpsAlarmDetail, tlUpsAlarmDeviceId=tlUpsAlarmDeviceId, tlUpsAlarmDeviceName=tlUpsAlarmDeviceName, tlUpsAlarmLocation=tlUpsAlarmLocation, tlUpsAlarmGroup=tlUpsAlarmGroup, tlUpsAlarmIp=tlUpsAlarmIp, tlUpsAlarmMac=tlUpsAlarmMac, tlUpsWellKnownAlarms=tlUpsWellKnownAlarms, tlUpsAlarmPrimaryPowerOutage=tlUpsAlarmPrimaryPowerOutage, tlUpsAlarmSecondaryPowerOutage=tlUpsAlarmSecondaryPowerOutage, tlUpsAlarmLoadLevelAboveThreshold=tlUpsAlarmLoadLevelAboveThreshold, tlUpsAlarmOutputCurrentChanged=tlUpsAlarmOutputCurrentChanged, tlUpsAlarmDevName=tlUpsAlarmDevName, tlUpsAlarmDevLocation=tlUpsAlarmDevLocation, tlUpsAlarmCategory=tlUpsAlarmCategory, tlUpsTest=tlUpsTest, tlUpsTestDate=tlUpsTestDate, tlUpsTestResultsDetail=tlUpsTestResultsDetail, tlUpsControl=tlUpsControl, tlUpsWatchdogSupported=tlUpsWatchdogSupported, tlUpsWatchdogSecsBeforeReboot=tlUpsWatchdogSecsBeforeReboot, tlUpsWellKnownControls=tlUpsWellKnownControls, tlUpsControlSelfTest=tlUpsControlSelfTest, tlUpsControlRamp=tlUpsControlRamp, tlUpsControlShed=tlUpsControlShed, tlUpsControlUpsOn=tlUpsControlUpsOn, tlUpsControlUpsOff=tlUpsControlUpsOff, tlUpsConfig=tlUpsConfig, tlUpsConfigBattReplDate=tlUpsConfigBattReplDate, tlUpsConfigTftpGetAddr=tlUpsConfigTftpGetAddr, tlUpsConfigTftpGetAcction=tlUpsConfigTftpGetAcction, tlUpsOutlet=tlUpsOutlet, tlUpsOutletNumOutlets=tlUpsOutletNumOutlets, tlUpsOutletTable=tlUpsOutletTable, tlUpsOutletEntry=tlUpsOutletEntry, tlUpsOutletIndex=tlUpsOutletIndex, tlUpsOutletState=tlUpsOutletState, tlUpsOutletType=tlUpsOutletType, tlUpsOutletControl=tlUpsOutletControl, tlUpsOutletName=tlUpsOutletName, tlUpsOutletRampAction=tlUpsOutletRampAction, tlUpsOutletRampDataType=tlUpsOutletRampDataType, tlUpsOutletRampData=tlUpsOutletRampData, tlUpsOutletShedAction=tlUpsOutletShedAction, tlUpsOutletShedDataType=tlUpsOutletShedDataType, tlUpsOutletShedData=tlUpsOutletShedData, tlUpsOutletGroupNdx=tlUpsOutletGroupNdx, tlUpsOutletCurrentTable=tlUpsOutletCurrentTable, tlUpsOutletCurrentEntry=tlUpsOutletCurrentEntry)
mibBuilder.exportSymbols('TRIPPLITE-MIB', tlUpsOutletCurrentIndex=tlUpsOutletCurrentIndex, tlUpsOutletCurrentValue=tlUpsOutletCurrentValue, tlUpsOutletPowerTable=tlUpsOutletPowerTable, tlUpsOutletPowerEntry=tlUpsOutletPowerEntry, tlUpsOutletPowerIndex=tlUpsOutletPowerIndex, tlUpsOutletPowerValue=tlUpsOutletPowerValue, tlUpsOutletGroup=tlUpsOutletGroup, tlUpsOutletNumOutletGroups=tlUpsOutletNumOutletGroups, tlUpsOutletGroupTable=tlUpsOutletGroupTable, tlUpsOutletGroupEntry=tlUpsOutletGroupEntry, tlUpsOutletGroupIndex=tlUpsOutletGroupIndex, tlUpsOutletGroupUnused=tlUpsOutletGroupUnused, tlUpsOutletGroupName=tlUpsOutletGroupName, tlUpsOutletGroupDesc=tlUpsOutletGroupDesc, tlUpsOutletGroupState=tlUpsOutletGroupState, tlUpsOutletGroupControl=tlUpsOutletGroupControl, tlUpsTraps=tlUpsTraps, tlEnviroSense=tlEnviroSense, tlEnvEnvironment=tlEnvEnvironment, tlEnvTemperatureData=tlEnvTemperatureData, tlEnvTemperatureC=tlEnvTemperatureC, tlEnvTemperatureF=tlEnvTemperatureF, tlEnvTemperatureLowLimit=tlEnvTemperatureLowLimit, tlEnvTemperatureHighLimit=tlEnvTemperatureHighLimit, tlEnvTemperatureInAlarm=tlEnvTemperatureInAlarm, tlEnvHumidityData=tlEnvHumidityData, tlEnvHumidity=tlEnvHumidity, tlEnvHumidityLowLimit=tlEnvHumidityLowLimit, tlEnvHumidityHighLimit=tlEnvHumidityHighLimit, tlEnvHumidityInAlarm=tlEnvHumidityInAlarm, tlEnvContacts=tlEnvContacts, tlEnvContactTable=tlEnvContactTable, tlEnvContactEntry=tlEnvContactEntry, tlEnvContactIndex=tlEnvContactIndex, tlEnvContactName=tlEnvContactName, tlEnvContactStatus=tlEnvContactStatus, tlEnvContactConfig=tlEnvContactConfig)

# Notifications
mibBuilder.exportSymbols('TRIPPLITE-MIB', tlV11upsAgentStopped=tlV11upsAgentStopped, tlUpsTrapAlarmEntryRemovedV1=tlUpsTrapAlarmEntryRemovedV1, tlV11upsCritical=tlV11upsCritical, tlV11upsAlarmCleared=tlV11upsAlarmCleared, tlV11upsAgentStarted=tlV11upsAgentStarted, tlUpsTrapAlarmEntryRemoved=tlUpsTrapAlarmEntryRemoved, tlV11upsInformation=tlV11upsInformation, tlUpsTrapAlarmEntryAdded=tlUpsTrapAlarmEntryAdded, tlUpsTrapAlarmEntryAddedV1=tlUpsTrapAlarmEntryAddedV1, tlV11upsWarning=tlV11upsWarning)

# Groups
mibBuilder.exportSymbols('TRIPPLITE-MIB', tlUpsFullAlarmObjsGroup=tlUpsFullAlarmObjsGroup, tlUpsFullControlGroup=tlUpsFullControlGroup, tlUpsFullIdentGroup=tlUpsFullIdentGroup, tlDeprecatedV11Group=tlDeprecatedV11Group, tlDeprecatedV11NotificationsGroup=tlDeprecatedV11NotificationsGroup, tlUpsFullTestGroup=tlUpsFullTestGroup, tlUpsFullConfigGroup=tlUpsFullConfigGroup, tlUpsFullOutletGroup=tlUpsFullOutletGroup, tlUpsFullBatteryGroup=tlUpsFullBatteryGroup, tlObsoleteV11Group=tlObsoleteV11Group)
