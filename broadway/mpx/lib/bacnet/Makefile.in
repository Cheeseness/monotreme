#=---------------------------------------------------------------------------
# Makefile for Envenergy Broadway builds.
#
# @configure_input@
#=---------------------------------------------------------------------------


#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING BELOW THIS LINE                  -=#
#=--------------------------------------------------------------------------=#
# NOTE: This section of the makefile is generated by update_makefile.py in   #
#       the root directory of the broadway source tree.  By doing this,      #
#       it is reasonable to keep the almost 200 makefiles in sync with any   #
#       required changes.  To change this section, modify update_makefile.py #
#       and rerun the update_makefiles script.                               #
#=--------------------------------------------------------------------------=#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
include @BUILD_DIR@/Constants.make

#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING ABOVE THIS LINE                  -=#
#=--------------------------------------------------------------------------=#


#=---------------------------------------------------------------------------
# Rule: do_makeall
#
#   Required.  Called by the top level makefile via 'Rules.make', or by a
#   call to 'make' in a subdirectory.  Feel free to add other targets here,
#   but you should leave the 'target', 'tools', 'tests' and 'doc' rules.

do_makeall: target tools tests doc


#=---------------------------------------------------------------------------
# Define your 'prelease(-d)' structure.  See 'config/Rules.make' for a
# discussion of these variables.

PRELEASE:=	broadway.core


#=---------------------------------------------------------------------------
# Include the main 'Rules' file where most of the work is done.  This must
# follow the 'do_makeall' rule and PRELEASE_XXX symbols.

include $(RULES_FILE)


#=---------------------------------------------------------------------------
# Use 'TARGETS' to define what you want built.

TARGETS:=	__init__.$(PYEXT) \
		apdu.$(PYEXT) \
		_bacnet.$(PYEXT) \
		bvlc.$(PYEXT) \
		constants.$(PYEXT) \
		_data.$(PYEXT) \
		_dev_test.$(PYEXT) \
		_exceptions.$(PYEXT) \
		_kmc.$(PYEXT) \
		object.$(PYEXT) \
		datatype.$(PYEXT) \
		network.$(PYEXT) \
		device.$(PYEXT) \
		property.$(PYEXT) \
		sequence.$(PYEXT) \
		server.$(PYEXT) \
		strings.$(PYEXT) \
		tsstrings.$(PYEXT) \
		TEST.$(PYEXT) \
		lib.so \
		npdu.so \
		tag.so \
		data.so \
		_bvlc.so

#
# TBD: Why do we generate static libraries instead of just linking in
#      the .o file(s)?  WTF?  This sucks ass.
#
_lib.a: _lib.o
	$(AR) cr $@ $<
	$(RANLIB) $@

_bvlc_stub.a: _bvlc_stub.o
	$(AR) cr $@ $<
	$(RANLIB) $@

_data.a: _data.o
	$(AR) cr $@ $<
	$(RANLIB) $@

lib.so: lib.o
	$(CC) -shared $< -o $@

NPDU_OBJS:= npdu.o npdu_object.o addr_object.o eth.o ip.o mstp.o virtual.o
npdu.so: $(NPDU_OBJS) _lib.a _bvlc_stub.a
	$(CC) -shared $(NPDU_OBJS) -ldl _lib.a _bvlc_stub.a -o $@

tag.so: tag.o _lib.a _data.a
	$(CC) -shared tag.o -ldl _lib.a _data.a -o $@

data.so: data.o _lib.a
	$(CC) -shared data.o -ldl _lib.a -o $@

_bvlc.so: _bvlc.o _lib.a
	$(CC) -shared _bvlc.o -ldl _lib.a -o $@


target: $(TARGETS)

#=---------------------------------------------------------------------------
# Use 'DOCUMENTATION' to define documentation that needs to be generated.

DOC:=

doc: $(DOC)


#=---------------------------------------------------------------------------
# Use 'TOOLS' to define utility programs.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TOOLS:=

tools: $(TOOLS)


#=---------------------------------------------------------------------------
# Use 'TESTS' to define test programs.  Any programs here will also be
# invoked when 'make unittest' is run.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TESTS:= _test_case_bvlc.$(PYEXT) \
	_test_case_data.$(PYEXT) \
	_test_case_exception.$(PYEXT) \
	_test_case_lib.$(PYEXT) \
	_test_case_npdu_addr.$(PYEXT) \
	_test_case_npdu_apdu.$(PYEXT) \
	_test_case_npdu_npdu.$(PYEXT) \
	_test_case_property.$(PYEXT) \
	_test_case_router.$(PYEXT) \
	_test_case_sequence.$(PYEXT) \
	_test_case_tag.$(PYEXT)

tests: $(TESTS)


#=- EOF --------------------------------------------------------------------=#
