"""
Copyright (C) 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
# Refactor 2/11/2007
from mpx.componentry import Interface
from mpx.componentry import Attribute

class IDispatcher(Interface):
    def initialize(name, debug = True):
        """
            This function should only be called by the __new__
            factory function; not for external use.
        """
    def register_for_type(callback, event_type, source = None, fast = True):
        """
            Register callback 'callback' to be invoked when events of
            type 'event_type', or any subclass of
            'event_type', are generated. Source 'source' may also
            be specified, in which case 'callback' will be invoked only if
            event.source matches source.

            returns GUID which should be saved and used to unregister.
        """
    def register_for_types(callback, event_types, source = None, fast = True):
        """
            Exactly like register_for_type but caller may specify a list of
            event_types rather than a single event_type.

            returns GUID which should be saved and used to unregister.
        """
    def register_for_topic(callback, topic, source = None, fast = True):
        """
            Register callback 'callback' to be invoked when any event
            is generated using topic 'topic'.  'topic' should be a string
            specifying an agreed upon 'topic' which will be used by
            event generating objects.  Source 'source' may be used to
            filter callback invocations to only those events generated
            by source 'source'.

            returns GUID which should be saved and used to unregister.
        """
    def register_for_topics(callack, topics, source = None, fast = True):
        """
            Exactly like register_for_topic but caller may specify a list of
            topics rather than a single topic.

            returns GUID which should be saved and used to unregister.
        """
    def register_for_source(callback, source, event_type = None, topic = None, fast = True):
        """
            Register callback 'callback' to be invoked when any event
            is generated by source 'source'.  Additional filtering may
            be specified by specifying 'event_type' and 'topic' as well.

            returns GUID which should be saved and used to unregister.
        """
    def register_for_sources(callback, sources, event_type = None, topic = None, fast = True):
        """
            Exactly like register_for_source but caller may specify a list of
            sources rather than a single source.

            returns GUID which should be saved and used to unregister.
        """
    def register_for(callback, types, topics, sources, fast = True):
        """
            General registration function that may be used instead
            of all shortcut 'register_for_*' functions.  Caller must
            specify list of types, topics, and sources.  If caller
            provides value None for any parameter, that parameter will
            be replaced internally by [ALL], which means any value
            for that parameter in event generation will qualify.

            returns GUID which should be saved and used to unregister.
        """
    def unregister(guid):
        """
            Function will clear any previous registration with guid 'guid'.
        """
    def dispatch(event, topics = None, *args, **kw):
        """
            Dispatch event 'event' with topics 'topics' to all listeners
            who's registration qualifies based on type(event), event.source,
            and any topic in topics.

            NOTE: a single topic may be passed instead of a list and
            the conversion will be done automatically.

            Pass *args and **kw to callback if specified.
        """

class IEvent(Interface):
    LOCALORIGIN = Attribute("""
        Required reference to event producer.  Class attr.""")

    EVENTS = Attribute("""
        WeakValueDictionary of all existing events by GUID.  Class attr.""")

    GUID = Attribute("""
        Every event instance has a unique GUID.  Instance attr.""")

    origin = Attribute("""
        String indicating IP addr of this event's origin.  Instance attr.""")

    source = Attribute("""
        Reference to object which instanciated
        this event.  Instance attr.""")

    def get_event(guid):
        """
            Find Event, regardless of its type, with GUID
            'guid' and return its reference.

            NOTE: This is a static method and may be invoked
            on any Event class, subclass, or instance thereof
            with the same result.
        """

    def __init__(source, origin = None, guid = None):
        """
            Initialize event with source 'source'.

            - If 'origin' is provided it is expected to be a string
            and will be used as this event's 'origin' attribute.
            - If it is not provided, and the event's source itself
            does have an 'origin' attribute, the event's 'origin'
            will default to its source's origin.
            - If it is not provided and the source does not have an
            'origin' attribute, then the origin will default to
            the class's LOCALORIGIN.

            If 'guid' is provided it will be used as the event's
            GUID; if no 'guid' is specified one will be automatically
            generated.  Either way the GUID used must be unique
            and a ValueError will be thrown if it is not.
        """

    def get_guid():
        """
            Return value of this event's GUID attribute.
        """
    def is_local():
        """
            Return boolean indicator whether this event was
            produced locally--by this host--or produced because
            of a remote Event instance.

            NOTE: if self.origin == Event.LOCALORIGIN then this
            is a local event.
        """

