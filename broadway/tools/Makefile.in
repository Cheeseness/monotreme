#=---------------------------------------------------------------------------
# Makefile for Envenergy Broadway builds.
#
# @configure_input@
#=---------------------------------------------------------------------------


#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING BELOW THIS LINE                  -=#
#=--------------------------------------------------------------------------=#
# NOTE: This section of the makefile is generated by update_makefile.py in   #
#       the root directory of the broadway source tree.  By doing this,      #
#       it is reasonable to keep the almost 200 makefiles in sync with any   #
#       required changes.  To change this section, modify update_makefile.py #
#       and rerun the update_makefiles script.                               #
#=--------------------------------------------------------------------------=#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
include @BUILD_DIR@/Constants.make

#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING ABOVE THIS LINE                  -=#
#=--------------------------------------------------------------------------=#


#=---------------------------------------------------------------------------
# Rule: do_makeall
#
#   Required.  Called by the top level makefile via 'Rules.make', or by a
#   call to 'make' in a subdirectory.  Feel free to add other targets here,
#   but you should leave the 'target', 'tools', 'tests' and 'doc' rules.

do_makeall: target tools tests doc


#=---------------------------------------------------------------------------
# Define your 'prelease(-d)' flist(s)."  See 'config/Rules.make' for a
# discussion of this variable.

PRELEASE:= broadway.core


#=---------------------------------------------------------------------------
# Include the main 'Rules' file where most of the work is done.  This must
# follow the 'do_makeall' rule and PRELEASE symbols.

include $(RULES_FILE)


#=---------------------------------------------------------------------------
# Use 'TARGETS' to define what you want built.

TARGETS:=	__init__.$(PYEXT) \
		build_broadway.$(PYEXT) \
		clu.$(PYEXT) \
		compile_dir.$(PYEXT) \
		config_tester.$(PYEXT) \
		console \
		console.$(PYEXT) \
		kill-fw \
		lib.$(PYEXT) \
		makecert \
		makecert.$(PYEXT) \
		pfileinfo.$(PYEXT) \
		mpxadmin \
		mpxadmin.$(PYEXT) \
        mpxinit \
        mpxinit.$(PYEXT) \
		msglog_viewer \
		msglog_viewer.$(PYEXT) \
        health_monitor \
        health_monitor.$(PYEXT) \
		messages \
		messages.$(PYEXT) \
		ppp.$(PYEXT) \
		pyc_loader \
		python-mpx \
		python-mpx-executable \
		python-mpx-version \
		superexec

python-mpx: $(srcdir)/python-mpx.in
	echo "python-mpx is out of sync." >&2
	echo "  Re-run configure or make reconfig." >&2
	false

python-mpx-executable: $(srcdir)/python-mpx-executable
	cp $(srcdir)/$@ . 1>/dev/null 2>&1
	chmod a+x $@

python-mpx-version: $(srcdir)/python-mpx-version
	cp $(srcdir)/$@ . 1>/dev/null 2>&1
	chmod a+x $@

kill-fw: $(srcdir)/kill-fw
	cp -pf $(srcdir)/$@ . 1>/dev/null
	chmod a+x $@

makecert: pyc_loader
	ln -sf $< $@

mpxadmin: pyc_loader
	ln -sf $< $@

mpxinit: pyc_loader
	ln -sf $< $@

msglog_viewer: pyc_loader
	ln -sf $< $@

health_monitor: pyc_loader
	ln -sf $< $@

console: pyc_loader
	ln -sf $< $@

messages: pyc_loader
	ln -sf $< $@

superexec: superexec.o
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $<

target: $(TARGETS)

#=---------------------------------------------------------------------------
# Use 'DOCUMENTATION' to define documentation that needs to be generated.

DOC:=	

doc: $(DOC)

#=---------------------------------------------------------------------------
# Use 'TOOLS' to define utility programs.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TOOLS:=	ac256plus_terminal.$(PYEXT) \
	blt.$(PYEXT) \
	configure.$(PYEXT) \
	cvstool.$(PYEXT) \
	fsize.$(PYEXT) \
	monitor.$(PYEXT) \
	mpx_diag.$(PYEXT) \
	package.$(PYEXT) \
	pdeploy.$(PYEXT) \
	pi.$(PYEXT) \
	run_test_modules.$(PYEXT) \
	test_from_cvs \
	unittester.$(PYEXT) \
	version.$(PYEXT) \
	ac256plus_terminal \
	configure \
	dev_stub \
	exercise \
	fsize \
	monitor \
	penvironment.rc \
	pi \
	ppp \
	proot \
	psource \
	generate_escrow \
	version \
	framework_ctl.sh

ac256plus_terminal: pyc_loader
	ln -sf $< $@

configure: pyc_loader
	ln -sf $< $@

cvstool: pyc_loader
	ln -sf $< $@

dev_stub: $(srcdir)/dev_stub
	cp -p $(srcdir)/$@ . 1>/dev/null

proot: dev_stub
	ln -sf $< $@

psource: $(srcdir)/psource
	cp -pf $(srcdir)/$@ . 1>/dev/null
	chmod a+x $@

exercise: pyc_loader
	ln -sf $< $@

fsize: pyc_loader
	ln -sf $< $@

generate_escrow: pyc_loader
	ln -sf $< $@

monitor: pyc_loader
	ln -sf $< $@

pi: pyc_loader
	ln -sf $< $@

ppp: pyc_loader
	ln -sf $< $@

test_from_cvs: $(srcdir)/test_from_cvs
	cp -p $(srcdir)/$@ . 1>/dev/null

version: pyc_loader
	ln -sf $< $@

framework_ctl.sh:
	cp -p $(srcdir)/$@ . 1>/dev/null

#
# Run INSTALL_STUBS at every time a tool has changed (or there is a new
# tool).
#
BIN_DEV_STUB:=~/bin/dev_stub
$(BIN_DEV_STUB): $(TOOLS) $(TARGETS)
	$(srcdir)/INSTALL_STUBS >/dev/null

tools: $(TOOLS) $(BIN_DEV_STUB)


#=---------------------------------------------------------------------------
# Use 'TESTS' to define test programs.  Any programs here will also be
# invoked when 'make unittest' is run.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TESTS:=

tests: $(TESTS)


#=- EOF --------------------------------------------------------------------=#
