#!/bin/bash
#-*-Shell-Script-*- Hint to [X]Emacs on colorization, etc...

COMMAND="$(basename $0)"
DIRECTORY="."
HELP_MESSAGE="$COMMAND [options]

  Read standard in and write the NCDATA encoded equivalent to standard out.

  NCDATA is nestable CDATA.  CDATA is terminated by the first occurance
  of the character sequence ']]>'.

  1st transformation:  '&#5D&#5D&#3E' -> '&&#5D&#5D&#3E'
  2nd transformation:  ']]>' -> '&#5D&#5D&#3E'

  OPTIONS:
    -h or --help                Display this message.
    -D or --debug               Outputs all script commands being parsed and
                                executed.
"

OPTION_SETS_ARG () {
    local variable="$1"
    shift
    local option
    for option in "$@"
    do
	if [ "${argv[$argn]}" == "$option" ]
	then
	    argn=$((argn+1))
	    arg="${argv[$argn]}"
	    if [ $argn -ge $argc ] ||
               [ "${arg:0:1}" == "-" ]
	    then
		echo -n "Option \"$option\" requires an argument," >&2
		echo " use $COMMAND --help for valid options." >&2
		exit 1 # Failure
	    fi
	    eval ${variable}="'$arg'"
	    argn=$((argn+1))
	    return 0 # Found and set it.
	fi
    done
    return 1 # Not found.
}

OPTION_IS () {
    for option in "$@"
    do
	if [ "${argv[$argn]}" == "$option" ]
	then
	    argn=$((argn+1))
	    return 0
	fi
    done
    return 1
}

HELP () {
    echo "$HELP_MESSAGE" | more
    exit 0
}

PARSE_ARGS () {
    local argc=$#
    local -a argv
    local argn=0 # The current argument.
    local arg=""
    while [ $argn -lt $argc ]
    do
        argv[$argn]="$1"
        argn="$((argn+1))"
        shift
    done
    argn=0
    while [ $argn -lt $argc ]
    do
	OPTION_IS "-h" "--help" && HELP
	OPTION_IS "-D" "--debug" && set -v -x && continue
        break
    done
    if [ $argn -lt $argc ]
    then
	arg="${argv[$argn]}"
	if [ "${arg:0:1}" == "-" ]
	then
	    echo \
	      "Unknown option '$arg', use $COMMAND --help for valid options."\
              >&2
	    exit 1
	fi
	echo "Invalid argument '$arg', use $COMMAND --help." >&2
	exit 1	
    fi
}

ENCODE_STDIN () {
    local primary
    local secondary
    primary='s/\(&#5D&#5D&#3E\)/\&\1/g'
    secondary='s/\(]]>\)/\&#5D\&#5D\&#3E/g'
    sed "${primary}" | sed "${secondary}"
}

PARSE_ARGS "$@"
ENCODE_STDIN
