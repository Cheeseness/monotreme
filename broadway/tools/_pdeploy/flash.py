"""
Copyright (C) 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
"""
import os
import popen2
import sys
import select
import errno

def default_progress(flash, step, of):
    pass

def default_messages(flash, message):
    pass

def default_errors(flash, error):
    sys.stderr.write(error)
    sys.stderr.write('\n')
    sys.stderr.flush()

class FlashError(Exception):
    pass

class FlashDeviceInUse(FlashError):
    def __init__(self, device, status):
        self.device = device
        self.status = status
    def __str__(self):
        return "FlashDeviceInUse -\nDevice: %s\nStatus: %s" % \
               (self.device, self.status)

class FlashCommandFailure(FlashError):
    def __init__(self, command):
        self.command = command

class FlashCommandError(FlashCommandFailure):
    def __init__(self, command, error):
        FlashCommandFailure.__init__(self, command)
        self.error = error
    def __str__(self):
        error = self.error
        if error in errno.errorcode.keys():
            error = os.strerror(error)
        return "FlashCommandError -\nCommand: %s\nError: %s" % \
               (self.command, error)

class FlashCommandStopped(FlashCommandFailure):
    def __init__(self, command, signal):
        FlashCommandFailure.__init__(self, command)
        self.signal = signal
    def __str__(self):
        return "FlashCommandStopped -\nCommand: %s\nSignal: %s" % \
               (self.command, self.signal)

class FlashCommandKilled(FlashCommandFailure):
    def __init__(self, command, signal):
        FlashCommandFailure.__init__(self, command)
        self.signal = signal
    def __str__(self):
        return "FlashCommandKilled -\nCommand: %s\nSignal: %s" % \
               (self.command, self.signal)

class Flash:
    _sfdisk = "/sbin/sfdisk -q %s << EOF\n0,,L,*\n;\n;\n;\nEOF"
    _mke2fs = "/sbin/mke2fs -j %s1"
    _mount  = "/bin/mount -t ext3 %s1 %s"
    # Ugh!
    _lilo   = """\
# Insure that the flash has a /dev/sda, just in case.
mknod %s/dev/sda b 8 0
mknod %s/dev/hde b 33 0
# Build a installation specific lilo.conf.
cat >%s/etc/lilo.conf <<EOF
# Generated by flash.py

disk=%s # The disk as accessed by the production system.
    bios=0x80 # This disk maps to the 'first' BIOS disk at boot time.

boot=%s # Link boot to the disk specified above.

map=/boot/map
install=/boot/boot.b
prompt
timeout=50
serial=0,9600n8
message=/boot/message

image=/boot/vmlinuz
	label=linux
	root=/dev/hda1
	append="console=ttyS0,9600"
	password=yzfr1
	restricted
EOF
# Use the custom lilo.conf to construct the flash's MBR.
/sbin/lilo -r %s"""
    _umount = "/bin/umount %s"
    _tar_file_list = "/bin/tar tzvf %s"
    _untar_in_directory = "(cd %s ; /bin/tar xzvpf %s)"
    _extract_package = "(cd %s ; %s/pextract %s %s)"
    
    def __init__(self, device_path='/dev/hda', mount_point='/mnt',
                 progress=default_progress,
                 messages=default_messages,
                 errors=default_errors):
        self.device = device_path
        self.directory = mount_point
        self.progress = progress
        self.messages = messages
        self.errors = errors
        status = os.system("grep -q %s /proc/mounts" % self.device)
        if os.WIFEXITED(status):
            if os.WEXITSTATUS(status) == 0:
                raise FlashDeviceInUse(self.device, status)
            if os.WEXITSTATUS(status) == 1:
                # Grep failed to find matches, all is well.
                return
        raise FlashError("Could not validate %s." % self.device)
    
    def _raise_on_error(self, command, status):
        if os.WIFEXITED(status) and os.WEXITSTATUS(status):
            raise FlashCommandError(command, os.WEXITSTATUS(status))
        if os.WIFSTOPPED(status):
            raise FlashCommandStopped(command, os.WSTOPSIG(status))
        if os.WIFSIGNALED(status):
            raise FlashCommandKilled(command, os.WTERMSIG(status))
        return
    
    def _simple_command(self, progress, messages, errors, command):
        if progress == None: progress = self.progress
        if messages == None: messages = self.messages
        if errors == None: errors = self.errors
        progress(self, 0, 1)
        messages(self, "Executing:  " + command)
        child = popen2.Popen3(command, 1)
        p = select.poll()
        p.register(child.childerr, select.POLLIN)
        p.register(child.fromchild, select.POLLIN)
        nfiles = 2
        while nfiles:
            for fileno, flags in p.poll():
                if fileno == child.childerr.fileno():
                    line = child.childerr.readline()
                    if not line:
                        p.unregister(child.childerr)
                        nfiles -= 1
                    errors(self, line[:-1])
                if fileno == child.fromchild.fileno():
                    line = child.fromchild.readline()
                    if not line:
                        p.unregister(child.fromchild)
                        nfiles -= 1
                    messages(self, line[:-1])
        self._raise_on_error(command, child.wait())
        progress(self, 1, 1)
        return
    
    def make_partition(self, progress=None, messages=None, errors=None):
        self._simple_command(progress, messages, errors,
                             self._sfdisk % self.device)
        return
    
    def make_filesystem(self, progress=None, messages=None, errors=None):
        self._simple_command(progress, messages, errors,
                             self._mke2fs % self.device)
        return
    
    def mount(self, progress=None, messages=None, errors=None):
        self._simple_command(progress, messages, errors,
                             self._mount % (self.device, self.directory))
        return
    
    def make_bootrecord(self, progress=None, messages=None, errors=None):
        self._simple_command(progress, messages, errors,
                             self._lilo % (self.directory, self.directory,
                                           self.directory,
                                           self.device, self.device,
                                           self.directory)
                             )
        return
    
    def extract_moe(self, moe_tar, progress=None, messages=None, errors=None):
        if progress == None: progress = self.progress
        if messages == None: messages = self.messages # Not right...
        if errors == None: errors = self.errors
        class MessageCounter:
            def __init__(self):
                self.lines = 0
            def __call__(self, flash, message):
                self.lines += 1
        # Use the counter instance to count the number of files in the tarball.
        total = MessageCounter()
        self._simple_command(default_progress, total, errors,
                             self._tar_file_list % moe_tar)
        progress(self, 0, total.lines)
        # Wacky...
        class Progress(MessageCounter):
            def __init__(self, total, progress):
                MessageCounter.__init__(self)
                self.function = progress
                self.total = total
            def __call__(self, flash, message):
                MessageCounter.__call__(self, flash, message)
                self.function(flash, self.lines, self.total)
        progress_wrapper = Progress(total.lines, progress)
        self._simple_command(default_progress, progress_wrapper, errors,
                             self._untar_in_directory % (
            os.path.realpath(os.path.join(self.directory, '.')),
            moe_tar))
        progress(self, total.lines, total.lines)
        
    def extract_packages(self, package_tar, package_name, pextract_dir,
                         progress=None, messages=None, errors=None):
        if progress == None: progress = self.progress
        if messages == None: messages = self.messages # Not right...
        if errors == None: errors = self.errors
        self._simple_command(progress, messages, errors,
                             self._extract_package % (
            os.path.realpath(os.path.join(self.directory, 'usr/lib')),
            os.path.realpath(pextract_dir),
            package_tar,
            package_name))
        return
    
    def umount(self, progress=None, messages=None, errors=None):
        self._simple_command(progress, messages, errors,
                             self._umount % self.directory)
        return
