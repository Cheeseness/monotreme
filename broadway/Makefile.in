# vim: ts=8 noexpandtab syntax=make
#=---------------------------------------------------------------------------
# Makefile for Envenergy Broadway builds.
#
# @configure_input@
#=---------------------------------------------------------------------------


#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING BELOW THIS LINE                  -=#
#=--------------------------------------------------------------------------=#
# NOTE: This section of the makefile is generated by update_makefile.py in   #
#       the root directory of the broadway source tree.  By doing this,      #
#       it is reasonable to keep the almost 200 makefiles in sync with any   #
#       required changes.  To change this section, modify update_makefile.py #
#       and rerun the update_makefiles script.                               #
#=--------------------------------------------------------------------------=#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
include @BUILD_DIR@/Constants.make

#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING ABOVE THIS LINE                  -=#
#=--------------------------------------------------------------------------=#

#=--------------------------------------------------------------------------=#
#=-   DO NOT INCLUDE RULES.MAKE HERE OR THE BUILD WILL BE ALL JACKED UP    -=#
#=--------------------------------------------------------------------------=#

#=---------------------------------------------------------------------------
# The spiffy help system.

include $(top_srcdir)/buildsup/Help.make


#=---------------------------------------------------------------------------
# Define rules (those target that aren't files), speeds up the build a bit.
#
# NOTE: BROADWAY is .PHONY to force execution of it's target.  This is
#       required because the build process may update the BROADWAY file
#       but we always want it restored to the "correct" version.
#
# NOTE: The 'montydoc' rule is phony so make doesn't incorrectly detect
#       that the same-named directory is up-to-date.
#
# NOTE: HELP_TARGETS is defined in buildsup/Help.make.  Might not be the
#       best place to store this, but I'm trying to keep as much of the
#       "help system" out of this file as possible...

.PHONY: all BROADWAY clean distclean doc dummy makecheck
	montydoc publish reconfig tarball unittest $(SUBDIRS)
	flash flash-echo-settings $(HELP_TARGETS)


#=---------------------------------------------------------------------------
# This is just the top-level build directory.  Some targets need to know
# about this (in conjunction with 'BUILD_TLD'), see the unittest rule for
# an example of how this is used.

BUILD_TOP = @BUILD_DIR@


#=---------------------------------------------------------------------------
# Our "local" copy of the build helper script.

# BH = @BUILD_HELPER@


#=---------------------------------------------------------------------------
# How to get the changelog out of CVS and where to store it.

# CHANGELOG_CVSTAG:= changelog_1_5 - Use the latest, stay reverse compatible.
CHANGELOG_CVSMOD:= changelog
CHANGELOG	:= $(top_srcdir)/buildsup/changelog


#=---------------------------------------------------------------------------
# Used for build, release, tarball, and publish targets.
#
# Do not set this here, use any of the aforementioned targets will set this.

BUILD_TLD =


#=---------------------------------------------------------------------------
# The output of a 'make build' or 'make release', in tarball form.

#
# We have to cat out the BROADWAY file in srcdir in case this is a
# clean tree (the BROADWAY file wouldn't be present yet).
#
TARBALL = release-$(shell cat $(top_srcdir)/BROADWAY)-$(BUILDTYPE).tar


#=---------------------------------------------------------------------------
# "Local" makefiles needed in this top-level directory.

BROADWAY_MAKEFILES:=	Makefile.broadway \
			Makefile.broadway-core


#=---------------------------------------------------------------------------
# Files that are generated as part of the (auto)configuration phase.

CONFIG_FILES:=	.proot \
		.psource \
		.subdirs \
		build_helper.py \
		config.log \
		config.status \
		Constants.make \
		Makefile \
		Makefile.broadway \
		Makefile.broadway-core \
		stamp-h1 \
		buildsup/pygcc \
		buildsup/pygcc_backend.py

#=---------------------------------------------------------------------------
# List of subdirectories to traverse.  The sed R.E. strips comments from
# the subdirs file.

SUBDIRS:=$(shell sed -e 's~\#.*~~' $(BUILD_TOP)/.subdirs)


#=---------------------------------------------------------------------------
# Ok, time for some targets.  Here's the 'E' ticket ride...
#
# Other than making sure that the 'all' rule is always the FIRST target in
# this file, please keep these in alphabetical order, it really does make
# things easier to maintain.  Thank you.
#=---------------------------------------------------------------------------


#=---------------------------------------------------------------------------
# Target: all
#
#   Iterate over the entire source tree.
#
#   This is the default rule executed if one just types in 'make' at
#   the command line.

all:	makecheck BROADWAY .proot .psource

	@echo "Building source tree..."

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) -s -f $${make_file} all || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			echo "  Building $$subdir ..."; \
			$(MAKE) -s -C $$subdir all || exit 1; \
		fi \
	done

	@echo "Build complete."

all-help:
	@$(SHOWHELP) $(ALL_HELP)


#=---------------------------------------------------------------------------
# Target: BROADWAY
#
#   Make sure we have a fresh copy in the build tree so released tarballs
#   always have the correct version, &c.

BROADWAY:
	@cp -p $(top_srcdir)/BROADWAY . 1>/dev/null


#=---------------------------------------------------------------------------
# Target: autoconf
#
#   Re-run the necessary utilities to regenerate the configure script.
#
#   NOTE:  Uses setup_configure_script.sh because $(ACLOCAL) and
#          $(AUTOCONF) referred to versions that did not regenerate
#          $(top_srcdir)/configure script.  Anyway, we should be
#          consistent how we create the configure script.

autoconf: _silentclean
	@(	echo -n "Regenerating configure script and support files..."; \
		cd $(top_srcdir); \
		./setup_configure_script.sh \
		echo " done."; \
	)
	@$(top_srcdir)/configure $(CONFIG_ARGS)

autoconf-help:
	@$(SHOWHELP) $(AUTOCONF_HELP)


#=---------------------------------------------------------------------------
# Target: build
#
#   Intended as a quick-and-dirty "cut a developer's prelease tarball."  The
#   same as executing 'make; make tarball' on the command line.

#
# Support for the 'build' rule.  Tacks on the developer's name to the 
# broadway file for released development builds.
#
_devname:
	@(	version=$$(cat $(top_srcdir)/BROADWAY); \
		person=$$(whoami); \
		echo "$${version}-$${person}" >BROADWAY; \
	)

build: all _devname tarball

build-help:
	@$(SHOWHELP) $(BUILD_HELP)


#=---------------------------------------------------------------------------
# rule: checksvn
#
#   Make sure that your source tree is up to date.

checksvn:
	@$(top_srcdir)/buildsup/checksvn.sh

checksvn-help:
	@$(SHOWHELP) $(CHECKCVS_HELP)


#=---------------------------------------------------------------------------
# Target: clean
#
#   Clean up all generated output.
#
#   This could be a problem if one is expecting only to clean the
#   top-level directory???  Make have to make a different set of rules
#   like 'tidy' or somesuch.

clean:
	@echo "Cleaning the build tree..."

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) -s -f $${make_file} clean || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			echo "  Cleaning $$subdir ..."; \
			$(MAKE) -s -C $$subdir clean || exit 1; \
		fi \
	done

	@echo "Clean complete."

clean-help:
	@$(SHOWHELP) $(CLEAN_HELP)


#=---------------------------------------------------------------------------
# Target: distclean
#
#   Clean up all generated output, including output from 'configure.'

distclean:
	@(	echo "Dist-cleaning the build tree..."; \
		for make_file in $(BROADWAY_MAKEFILES); do \
			if test -f $${make_file}; then \
				$(MAKE) -s -f $${make_file} distclean || exit 1; \
			fi \
		done; \
		for subdir in $(SUBDIRS); do \
			if test -f $$subdir/Makefile; then \
				echo "  Dist-cleaning $$subdir ..."; \
				$(MAKE) -s -C $$subdir distclean || exit 1; \
			fi \
		done; \
		rm -rf $(CONFIG_FILES); \
		for dir in montydoc prelease.d buildsup; do \
			rm -rf $$dir 1>/dev/null 2>&1; \
		done; \
		echo "Distclean complete."; \
	)

distclean-help:
	@$(SHOWHELP) $(DISTCLEAN_HELP)


#=---------------------------------------------------------------------------
# Target: doc
#
#   Generate documentation.

doc:
	@echo "Build documentation..."

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) -s -f $${make_file} doc || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			echo "  Generating $${subdir}'s documentation ..."; \
			$(MAKE) BUILD_TLD='$(BUILD_TOP)' -s -C $$subdir doc || exit 1; \
		fi \
	done

doc-help:
	@$(SHOWHELP) $(DOC_HELP)


#=---------------------------------------------------------------------------
# Target: flash
#
#   Burn a flash without any GUI requirements.

FLASH_MOE=
FLASH_PKG=envenergy.mpx
FLASH_MNT=$(BUILD_TOP)/flash.d
FLASH_DEV=/dev/sda
FLASH_TARBALL=prelease.d/$(TARBALL)

flash: flash-echo-settings
	@$(top_srcdir)/buildsup/make_flash.sh	-MOE="$(FLASH_MOE)" \
						-PKG="$(FLASH_PKG)" \
						-MNT="$(FLASH_MNT)" \
						-DEV="$(FLASH_DEV)" \
						-TARBALL="$(FLASH_TARBALL)"

flash-echo-settings:
	@echo "**************************************************************"
	@echo "Flash settings, use 'make flash-help' for information on the"
	@echo "meaning of these settings and how to override them."
	@echo "--------------------------------------------------------------"
	@echo "FLASH_MOE=$(FLASH_MOE)"
	@echo "FLASH_PKG=$(FLASH_PKG)"
	@echo "FLASH_MNT=$(FLASH_MNT)"
	@echo "FLASH_DEV=$(FLASH_DEV)"
	@echo "FLASH_TARBALL=$(FLASH_TARBALL)"
	@echo "**************************************************************"

flash-help:
	@$(SHOWHELP) $(FLASH_HELP)


#=---------------------------------------------------------------------------
# Target: help
#
#   Top-level help system.

help:
	@$(SHOWHELP) $(HELP)

help-help:
	@$(SHOWHELP) $(HELP_HELP)


#=---------------------------------------------------------------------------
# Target: howto
#
#   Build and launch the Build-HOWTO.  (Placeholder for now.)

howto: dummy


#=---------------------------------------------------------------------------
# Target: makecheck
#
#   Compare Makefiles against their source and whine if a reconfig is
#   necessary.
#
#   Some general comments:
#   - I'm surprised how fast this is, I expected it to be a lot slower.
#   - It's not bullet-proof.
#   - It's not a substitute for good ol' developer know-how.

BROADWAY_TARGET_ROOT:
	@if [ -z "$$BROADWAY_TARGET_ROOT" ]; then \
        echo -e "\n  You MUST source in tools/penvironment.rc !"; \
        echo -e "  with the command '. ./tools/penvironment.rc'"; \
		exit 1; \
	fi

makecheck: $(top_srcdir)/configure build_helper.py config.status .subdirs \
	   buildsup/pygcc buildsup/pygcc_backend.py BROADWAY_TARGET_ROOT
	@echo -n "Making sure that the build infrastructure files are up to date... "

	@if [ "$(top_srcdir)/Constants.make.in" -nt "$(BUILD_TOP)/Constants.make" ]; then \
		echo -e "\n  $(BUILD_TOP)/Constant.make's source is newer, time to reconfig."; \
		echo -n "  This is NOT an error: "; \
		exit 1; \
	fi

	@if [ "$(top_srcdir)/Makefile.in" -nt "$(BUILD_TOP)/Makefile" ]; then \
		echo -e "\n  $(BUILD_TOP)/Makefile's source is newer, time to reconfig."; \
		echo -n "  This is NOT an error: "; \
		exit 1; \
	fi

	@for file in @GENERATED_FILES@ \
			Constants.make \
			Makefile \
			$(BROADWAY_MAKEFILES) \
			$$(	for subdir in $(SUBDIRS); \
				do echo "$$subdir/Makefile"; \
				done; \
			); \
	do \
		test "$(top_srcdir)/$${file}.in" -nt "$(BUILD_TOP)/$$file" && \
			echo -e "\n\n  $(top_srcdir)/$${file}.in is newer" \
				"than $(BUILD_TOP)/$$file.\n" \
				"\n" \
				"Run \"make reconfig\" or configure to" \
				"update your build tree.\n" && \
			exit 1; \
		true; \
	done

	@[ -n "$$PENVIRONMENT_RC_MD5" ] && \
		echo "$$PENVIRONMENT_RC_MD5" | md5sum --check --status ; \
	if [ "$$?" != "0" ]; then \
		echo -e "\n\n  Build Requires that you (re)source" \
			"./tools/penvironment.rc.\n" ; \
        echo -e "  with the command '. ./tools/penvironment.rc' \!"; \
		exit 1; \
	fi

	@echo "done."

makecheck-help:
	@$(SHOWHELP) $(MAKECHECK_HELP)


#=---------------------------------------------------------------------------
# Target: montydoc
#
#   Invoke 'montydoc' to generate documentation.

montydoc:
	@$(top_srcdir)/buildsup/montydoc.sh $(BUILD_TOP)

montydoc-help:
	@$(SHOWHELP) $(MONTYDOC_HELP)


#=---------------------------------------------------------------------------
# Target: publish
#
#   Publish the release given the options specified at configure time

#
# Placeholder for now.  My intent is to allow one to over-ride the
# default user/host, currently labman.  Once the help system is in place and
# we've had the 'make' brain dump meeting I'll implement this.
#     *=- STM 11/13/2003 -=*
#
PUB_USER=
PUB_HOST=

#
# Placeholder for now.  My intent is to do a little shell mojo and figger
# if this is a developer or release build and scp the tarball to the proper
# directory (rather than just dropping it in the 'dev' repository.  Once the
# help system is in place and we've had the brain dump meeting I'll implement
# this
#     *=- STM 11/13/2003 -=*
#
PUB_DIR=

#
# Placeholder.  See above comments.
#     *=- STM 11/13/2003 -=*
#
#publish:
#	scp -i $(HOME)/.ssh/id_rsa.pub \
#		prelease.d/$(TARBALL) \
#		$(PUB_USER)@$(PUB_HOST):$(PUB_DIR)/.
#

publish:
	chmod 600 $(srcdir)/mediator.id_dsa
	scp -i $(srcdir)/mediator.id_dsa prelease.d/$(TARBALL) \
		mediator@labman.envenergy.com:dev/.

publish-help:
	@$(SHOWHELP) $(PUBLISH_HELP)


#=---------------------------------------------------------------------------
# Target: reconfig
#
#   Re-run the configure script using the same arguments as before.
#
#   NOTE: Don't be tempted to introduce 'makecheck' as a dependency here or
#         you'll spiral down circular logic hell.  Reason being is that
#         'makecheck' may instruct your user to run 'make reconfig' ...

reconfig: _silentclean
	$(top_srcdir)/configure $(CONFIG_ARGS)

reconfig-help:
	@$(SHOWHELP) $(RECONFIG_HELP)


#=---------------------------------------------------------------------------
# Target: release
#
#   Use this rule when cutting a prelease tarball for deployment to QA
#   a/o the field.
#
#   Obnoxious double-build is required because tagandchangelog requires
#   some components are already built, but then it changes the version.
#   NOTE:  If pre-build requirement is removed, then test BROADWAY_TARGET_ROOT
#          before tagandchangelog!  (In place of all)

release:
	$(MAKE) -s autoconf
	$(MAKE) -s checksvn
	$(MAKE) -s all
	$(MAKE) -s tagandchangelog
	$(MAKE) -s all
	$(MAKE) -s tarball

release-help:
	@$(SHOWHELP) $(RELEASE_HELP)


#=---------------------------------------------------------------------------
# Target: tagandchangelog
#
#   If necessary, tag the source in CVS, bump the version number, and
#   generate a changelog

tagandchangelog: $(CHANGELOG)
	@(	$(BUILD_HELPER) $(BUILD_DEBUG) --tagandchangelog -s $(top_srcdir) -b $(BUILD_TOP); \
		if [ -d ./prelease.d ]; then \
			if [ -f $(srcdir)/changelog.html ]; then \
				mv -f $(srcdir)/changelog.html ./prelease.d/. || exit 1; \
			else \
				echo "Changelog file not present."; \
			fi; \
		else \
			echo "Missing './prelease.d' work directory, nothing done"; \
			exit; \
		fi; \
		cp -p $(top_srcdir)/BROADWAY . 1>/dev/null; \
	)

tagandchangelog-help:
	@$(SHOWHELP) $(TAGANDCHANGELOG_HELP)


#=---------------------------------------------------------------------------
# Target: tarball
#
#   Produce a tarball of compiled framework code.

tarball: BROADWAY_TARGET_ROOT BROADWAY
	@echo "Building the framework's tarball..."

	@(	rm -rf prelease.d 1>/dev/null 2>&1; \
		mkdir -p prelease.d 1>/dev/null; \
	)

	@$(BUILD_HELPER) $(BUILD_DEBUG) --generatebuildset -s $(top_srcdir) -b $(BUILD_TOP)

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) BUILD_TLD='$(BUILD_TOP)' -s -f $${make_file} tarball || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			echo "  Handling $${subdir}'s 'tarball' tasks ..."; \
			$(MAKE) BUILD_TLD='$(BUILD_TOP)' -s -C $$subdir tarball || exit 1; \
		fi \
	done

	@(	pushd prelease.d 1>/dev/null; \
		rm -rf *.tgz 1>/dev/null; \
		for pkg_dir in *; do \
			if [ -d $$pkg_dir ]; then \
				echo -ne "  Creating the $${pkg_dir}-pkg.tgz package ..."; \
				pushd $$pkg_dir 1>/dev/null; \
				tar zcf ../$$pkg_dir-pkg.tgz broadway; \
				popd 1>/dev/null; \
				echo " done."; \
			fi; \
		done; \
		echo -ne "  Creating the meta-package..."; \
		tar cf "$(TARBALL)" *.tgz buildset.xml; \
		echo -ne " cleaning up..."; \
		rm -f *.tgz buildset.xml 1>/dev/null; \
		echo " done."; \
		popd 1>/dev/null; \
	)

	@echo "'tarball' packaging tasks complete, ${TARBALL} generated."

tarball-help:
	@$(SHOWHELP) $(TARBALL_HELP)


#=---------------------------------------------------------------------------
# Target: unittest
#
#   Execute any unit tests.

unittest:
	@echo "Executing unit tests..."

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) -s -f $${make_file} all || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			echo "  Handling $${subdir}'s unit tests ..."; \
			$(MAKE) BUILD_TLD='$(BUILD_TOP)' -s -C $$subdir unittest || exit 1; \
		fi \
	done

	@echo "Unit test run complete complete."

unittest-help:
	@$(SHOWHELP) $(UNITTEST_HELP)


#=---------------------------------------------------------------------------
# Ok, no more alphabetical ordering requirements...
#
# For some stupid reason these targets need to be at the bottom of this
# file or make gets whacked.  Probably because GNU make is pretty linear,
# but I'm not sure.  I'll look into this when I have some more time.
#     *=- STM  11/13/2003 -=*
#
# Oh, yeah, almost forgot.  Stuff from here to EOF really doesn't need
# an accompanying 'help' target.
#=---------------------------------------------------------------------------


#=---------------------------------------------------------------------------
# Target: $(CHANGELOG)
#
#   Make sure we have a local copy of the changelog script from CVS.

_cltest: $(CHANGELOG)

#
# We need this wart because CVS won't "export" to existing directories.
#
_cl_tmpdir:=./tEmPdIr

$(CHANGELOG):
	@(	if test ! -f $@; then \
			rm -rf $(_cl_tmpdir) >/dev/null; \
			cvs export -d $(_cl_tmpdir) -DNOW $(CHANGELOG_CVSMOD) >/dev/null; \
			mv $(_cl_tmpdir)/changelog $@; \
			rm -rf $(_cl_tmpdir) >/dev/null; \
		fi \
	)
	@chmod 0777 $@ >/dev/null


#=---------------------------------------------------------------------------
# Make sure that the breadcrumbs are present.  Some of the tools require
# these file(s).  This is a transitional hack.

.proot:
	@echo $(top_srcdir) > $@

.psource:
	@touch $@


#=---------------------------------------------------------------------------
# Target: _silentclean
#
#   Clean up all generated output including the prelease.d directory with
#   less noise to the screen.  Used by the 'autoconf' and 'reconfig' rules.

_silentclean:
	@echo -n "Cleaning the build tree..."

	@for make_file in $(BROADWAY_MAKEFILES); do \
		if test -f $${make_file}; then \
			$(MAKE) -s -f $${make_file} clean || exit 1; \
		fi \
	done

	@for subdir in $(SUBDIRS); do \
		if test -f $$subdir/Makefile; then \
			$(MAKE) -s -C $$subdir clean || exit 1; \
		fi \
	done

	-@rm -rf ./prelease.d

	@echo " done."

#=---------------------------------------------------------------------------
# Check these important files against their source files.

$(top_srcdir)/configure: $(top_srcdir)/configure.in
	@(	echo "'$@' needs updating, time to re-confiscate this build tree"; \
		echo "You can run 'make autoconf' to reconfigure this build tree."; \
		echo -n "This is NOT an error: "; \
		false; \
	)

config.status: $(top_srcdir)/configure
	@(	echo "'$@' needs updating, time to re-configure this build tree"; \
		echo "You can run 'make reconfig' to reconfigure this build tree."; \
		echo -n "This is NOT an error: "; \
		false; \
	)

.subdirs: $(top_srcdir)/configure
	@(	echo "'$@' is either missing or out of date.  Time to re-configure this"; \
		echo "build tree.  You can run 'make reconfig' to re-generate this file."; \
		echo -n "This is NOT an error: "; \
		false; \
	)

build_helper.py: $(top_srcdir)/build_helper.py
	@(	echo "'$@' needs updating, time to re-confiscate this build tree"; \
		echo "You can run 'make autoconf' to reconfigure this build tree."; \
		echo -n "This is NOT an error: "; \
		false; \
	)

buildsup/pygcc: $(top_srcdir)/buildsup/pygcc
	@(	echo "'$@' needs updating, time to re-confiscate this build tree"; \
		echo "You can run 'make autoconf' to reconfigure this build tree."; \
		echo -n "This is NOT an error: "; \
		false; \
	)

buildsup/pygcc_backend.py: $(top_srcdir)/buildsup/pygcc_backend.py
	@(	echo "'$@' needs updating, time to re-confiscate this build tree"; \
		echo "You can run 'make autoconf' to reconfigure this build tree."; \
		echo -n "This is NOT an error: "; \
		false; \
	)


#=---------------------------------------------------------------------------
# Hooks into the RPM build stuff...

include $(top_srcdir)/buildsup/Rpmbuild.mk

#=- EOF --------------------------------------------------------------------=#
