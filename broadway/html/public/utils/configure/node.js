/*
Copyright (C) 2009 2010 2011 Cisco Systems

This program is free software; you can redistribute it and/or         
modify it under the terms of the GNU General Public License         
as published by the Free Software Foundation; either version 2         
of the License, or (at your option) any later version.         
    
This program is distributed in the hope that it will be useful,         
but WITHOUT ANY WARRANTY; without even the implied warranty of         
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         
GNU General Public License for more details.         
    
You should have received a copy of the GNU General Public License         
along with this program; if not, write to:         
The Free Software Foundation, Inc.         
59 Temple Place - Suite 330         
Boston, MA  02111-1307, USA.         
    
As a special exception, if other files instantiate classes, templates  
or use macros or inline functions from this project, or you compile         
this file and link it with other works to produce a work based         
on this file, this file does not by itself cause the resulting         
work to be covered by the GNU General Public License. However         
the source code for this file must still be made available in         
accordance with section (3) of the GNU General Public License.         
    
This exception does not invalidate any other reasons why a work         
based on this file might be covered by the GNU General Public         
License.
*/
dojo.provide("utils.configure.node");
dojo.require("mpx.node.Proxy");
dojo.require("dojo.parser");
dojo.require("dijit.Dialog");
dojo.require("dijit.form.Form");
dojo.require("dijit.form.Button");
dojo.require("nbmweb.edit.Node");
dojo.require("utils.display");
dojo.require("utils.select.nodes");
dojo.require("utils.configure.form");
dojo.require("utils.configure.Table");
dojo.require("utils.configure.templates");

utils.configure.node.createNodeManager = function(table, configurator) {
    var manager = new utils.configure.node.Manager(table, configurator);
    dojo.byId(table).manager = manager;
    return manager;
}

utils.configure.node.getTargetName = function(event) {
    /**************************
     * Use event generated by button in table to 
     * find node row, then row header, then node
     * name from header-inner HTML.
     *************************/
    var button;
    if (event.target)
        button = event.target;
    else if (event.currentTarget)
        button = event.currentTarget;
    else
        button = event;
    var node = button;
    while (node.nodeName.toLowerCase() != "tr")
        node = node.parentNode;
    // Slightly brittle assumption that row will have 
    // first header cell contain node name.
    var header = dojo.query("th", node)[0];
    var name = header.innerHTML;
	name = decodeSplChars(name);
    console.debug("findTargetName()", event, button, node, name);
    return name;
}

utils.configure.node.getManager = function(event) {
    var button;
    if (event.target)
        button = event.target;
    else if (event.currentTarget)
        button = event.currentTarget;
    else
        button = event;
    var node = button;
    while (node.nodeName.toLowerCase() != "table")
        node = node.parentNode;
    // Slightly brittle assumption that row will have 
    // first header cell contain node name.
    console.debug("getManager()", event, button, node);
    return node.manager;
}

dojo.declare("utils.configure.node.Manager", null, {
    tableId: "", 
    typeName: "Node",
    configuratorUrl: "", 
    editNodeHref: "/public/nbmweb/edit/forms/EditNode.html", 
    createNodeHref: "/public/nbmweb/edit/forms/EditNode.html", 
    constructor: function(args) {
        if (dojo.isString(args)) {
            args = {
                tableId: arguments[0], 
                configuratorUrl: arguments[1]
            };
            console.warn("Deprecated construct: ", this.declaredClass);
        }
        dojo.mixin(this, args);
        this.nodes = new Array();
        var templates = this.getRowTemplates();
        this.table = new utils.configure.Table(this.tableId, templates);
        this.actions = dijit.findWidgets(this.table.table);
        this.configurator = new mpx.node.Proxy(this.configuratorUrl);
    }, 
    getRowTemplates: function() {
        return utils.configure.templates.nodeRows;
    }, 
    refresh: function() {
        var message = this.declaredClass + " node refresh";
        var onLoad = dojo.hitch(this, function(response) {
            console.debug(message, "succeeded:", response);
            this.table.deleteRows();
            this.createNodeRows(response);
            return response;
        });
        var onError = dojo.hitch(this, function(response) {
            console.error(message, "failed:", response);
            return response;
        });
        var deferred = this.configurator.get_node_names();
        deferred.addCallbacks(onLoad, onError);
        return deferred;
    }, 
    createNodeRows: function(names) {
        console.debug("Loading names:", this, names);
        var rows = new Array();
        this.nodes = new Array();
        dojo.forEach(names, function(name, index) {
           this.table.addRow([name]);
           this.nodes.push(name);
        }, this);
    }, 
    openEditor: function(args) {
        console.log(this.declaredClass, "openEditor()", args);
        var deferred = new dojo.Deferred();
        var onCommit = args.onCommit;
        if (dojo.isString(onCommit))
            onCommit = dojo.hitch(this.configurator, onCommit);
        var onCancel = args.onCancel;
        if (dojo.isString(onCancel))
            onCancel = dojo.hitch(this.configurator, onCancel);
        var dialog = new dijit.Dialog({
            preload: true, 
            parseOnLoad: true, 
            extractContent: false,
            title: args.title || "Node Editor" 
        });
        dialog.attr("class", "editDialog");
        function onLoad(response) {
            var summary = dialog.attr("title") + " succeeded";
            console.log(summary, ": ", response);
            deferred.callback(response);
            return response;
        }
        function onError(response) {
            var summary = dialog.attr("title") + " failed";
            var errorMessage = response;
            if (dojo.isObject(response) && response.message)
                errorMessage = response.message;
            if(new RegExp(/403/).exec(errorMessage)) 
        		errorMessage = "Permission Denied";
            console.error(summary, ": ", response, errorMessage);
            setTimeout(function() {
            	utils.display.failure(summary, errorMessage);
            }, 500);
            deferred.errback(response);
            return response;
        }
        var refresh = dojo.hitch(this, function(response) {
            console.log("Refresh handler:", response);
            this.refresh();
            return response;
        });
        var onComplete = dojo.hitch(this, function(response) {
            console.log("Cleaning up " + dialog.attr("title") + " dialog.");
            dialog.destroyRecursive();
            dojo.disconnect(closeHandle);
            return response;
        });
        var closeHandle = dojo.connect(dialog.closeButtonNode, "onclick", onComplete);
        var connection = dojo.connect(dialog, "onLoad", function() {
            var editor = dijit.findWidgets(dialog.domNode)[0];
            editor.onCommit = function(values) {
                console.debug("Committing node edits:", values);
                var deferred = onCommit(values);
                deferred.addCallbacks(onLoad, onError);
                deferred.addBoth(onComplete);
                deferred.addBoth(refresh);
            }
            editor.onCancel = function(values) {
                if (onCancel)
                    onCancel(values);
                onComplete();
            }
            function populateEditor(values, readOnly) {
                if (values)
                    editor.attr("value", values);
                if (readOnly) {
                	for(var i=0; i<readOnly.length; i++)
                		editor[readOnly[i]].setAttribute("readOnly", true);
                }
                dialog.show();
                return values;
            }
            if (args.loadValues) {
                args.loadValues.addCallback(populateEditor);
            } else {
            	var readOnly = args.readOnly || [];
                populateEditor(args.values, readOnly);
            }
            dojo.disconnect(connection);
        });
        dialog.attr("href", args.href);
        return deferred;
    },  
    createNewNode: function() {
        var createNode = dojo.hitch(this, function(values) {
            return this.configurator.create_node(values.name, values);
        });
        var deferred = this.openEditor({
            onCommit: createNode, 
            href: this.createNodeHref, 
            title: "Create new " + this.typeName
        });
        deferred.addBoth(function(response) {
            console.log("node.createNewNode() callback handler:", response);
            return response;
        });
    }, 
    editNode: function(event) {
        var node = utils.configure.node.getTargetName(event);
		node = decodeSplChars(node);
        var deferred = this.openEditor({
            title: "Edit " + node, 
            href: this.editNodeHref,
            loadValues: this.configurator.node_configuration(node), 
            onCommit: dojo.hitch(this.configurator, "configure_node", node)
        });
        deferred.addBoth(function(response) {
            console.log("node.editNode() callback handler:", node, response);
            return response;
        });
        return deferred;
    },  
    deleteNode: function(event) {
    	var node = utils.configure.node.getTargetName(event);
		node = decodeSplChars(node);
        var manager = utils.configure.node.getManager(event);
        var deleteObj = {
        	"node": node, 
        	"manager": manager,
        	"event": event,
        	"title": "Delete "+ node,
        	"confirmationText": "Are you sure you want to delete the node - " +
        						"<b>" + node + "</b> and its configuration?"
        };
        
        console.debug("deleteNode()", this, node, manager);
        confirmDialog(this, deleteObj, true);
    },	
    deleteConfirmed: function(deleteObj) {
    	var node = deleteObj.node;
        var manager = deleteObj.manager;
        var configurator = manager.configurator;
        
        function onLoad(response) {
            console.log("deleteNode() response received", response);
            manager.refresh();
            return response;
        }
        function onError(response) {
        	//console.error("deleteNode() failed", response);
        	var summary = deleteObj.title + " failed";
            var errorMessage = response;
            if (dojo.isObject(response) && response.message)
                errorMessage = response.message;
        	
        	if(new RegExp(/403/).exec(errorMessage)) 
        		errorMessage = "Permission Denied";
            console.error(summary, ": ", response, errorMessage);
            utils.display.failure(summary, errorMessage);

            manager.refresh();
            return response;
        }
        console.debug("deleteNode() deleting node", node);
        var deferred = configurator.remove_node(node);
        deferred.addCallbacks(onLoad, onError);
    }
});
