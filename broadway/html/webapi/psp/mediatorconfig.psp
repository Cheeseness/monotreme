<%    
import os
import sys
from mpx.lib import ifconfig
from mpx.lib.http import MultipartCollector

from mpx.service.cloud.hosts import NBMManager

from mpx.lib.node import as_node

from mpx import properties
import ConfigParser
import socket, struct

CONFIGURATION_FILE = properties.MPXINIT_CONF_FILE
ETH0_CONFIG_MGR_FILE = properties.ETH0_CONFIG_MGR_FILE
NETWORK_CONFIG_MGR_FILE = properties.NETWORK_CONFIG_MGR_FILE
FW_VERSION = properties.COMPOUND_VERSION
try:
	if(properties.PRODUCT_VERSION != ""):
		FW_VERSION = properties.PRODUCT_VERSION
except:
	pass

if request.get_protocol() == 'http':
    root = properties.HTTP_ROOT
else:
    root = properties.HTTPS_ROOT

m = MultipartCollector(request)

admin = request.user_object().is_admin()
perm = 'disabled'
if admin:
    perm = ''

mkeys = m.keys()
dir_list =[] 
local_file = ''
filename =''
dir = ''
web_dir_class = 'normal'
local_file_class = 'normal'
filename_class = 'normal'
redirect = display_form = False
is_manager = False

if 'product' in mkeys:
    if 'Manager' in properties.PRODUCT_NAME:
        is_manager = True

model = properties.HARDWARE_MODEL # @fixme Change to MODEL when completed.
if model in ('NBM-MGR-6300',):
    is_manager = 1

def dottedQuadToNum(ip):
    "convert decimal dotted quad string to long integer"
    return struct.unpack('L',socket.inet_aton(ip))[0]

def numToDottedQuad(n):
    "convert long int to dotted quad string"
    return socket.inet_ntoa(struct.pack('L',n))
      
def network(address, netmask):
    n = dottedQuadToNum(address)
    m = dottedQuadToNum(netmask)
    net = n & m
    return numToDottedQuad(net)

#
# Handle Megatron configuration
#

def generate_megatron_config(p):
    os.system('rm -f /etc/resolv.conf')
    f = open('/etc/resolv.conf', 'w+')
    f.write('search %s\n' % p.get('host', 'domain_name'))
    f.write('nameserver %s\n' % p.get('host', 'nameserver'))
    f.close()

    f = open('/etc/network/interfaces', 'w+')
    f.write('# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)\n\n')
    f.write('auto lo\n')
    f.write('iface lo inet loopback\n\n')

    address = p.get('eth0', 'ip_addr')
    netmask = p.get('eth0', 'netmask')
    gateway = p.get('host', 'gateway')

    f.write('auto eth0\n')
    if p.get('eth0', 'dhcp') == 'enabled':
        f.write('iface eth0 inet dhcp\n\n')
    else:
        f.write('iface eth0 inet static\n')
        f.write('        address %s\n' % address)
        f.write('        netmask %s\n' % netmask)
        f.write('        network %s\n' % network(address, netmask))
        try:
            if network(gateway, netmask) == network(address, netmask):
                f.write('        gateway %s\n\n' % gateway)
        except:
            f.write('# Bad gateway address supplied in system page\n\n')
        
    address = p.get('eth1', 'ip_addr')
    netmask = p.get('eth1', 'netmask')

    f.write('auto eth1\n')
    if p.get('eth1', 'dhcp') == 'enabled':
        f.write('iface eth1 inet dhcp\n\n')
    else:
        f.write('iface eth1 inet static\n')
        f.write('        address %s\n' % address)
        f.write('        netmask %s\n' % netmask)
        f.write('        network %s\n' % network(address, netmask))
        try:
            if network(gateway, netmask) == network(address, netmask):
                f.write('        gateway %s\n\n' % gateway)
        except:
            f.write('# Bad gateway address supplied in system page\n\n')
        
    f.close()

    # Add hostname to the end of /etc/hosts so that flexlm doesn't barf
    hosts_entry = '127.0.0.1       localhost.localdomain           localhost %s.%s\n'
    f = open('/etc/hosts', 'w+')
    f.write('# Generated by mpxconfig. Contents will be overwritten!\n')
    f.write(hosts_entry % (p.get('host', 'hostname'), p.get('host', 'domain_name')))
    f.close()

    # Set hostname
    f = open('/etc/hostname', 'w+')
    f.write(p.get('host', 'hostname') + '.' + p.get('host', 'domain_name'))
    f.close()

    # Now tell the kernel about the change so we don't have to wait for reboot
    os.system('hostname %s.%s' % (p.get('host', 'hostname'), p.get('host', 'domain_name')))

    sysctl = open('/etc/sysctl.conf').read().split('\n')
    f = open('/etc/sysctl.conf', 'w+')
    for l in sysctl:
        if 'net.ipv4.ip_forward' in l:
            if p.get('host', 'ip_forward') == 'enabled': 
                ip_forward = 1
            else:
                ip_forward = 0
            f.write('net.ipv4.ip_forward=%d\n' % ip_forward)
        else:
            f.write(l + '\n')
    f.close()
                 
def load_config(filename):
    cp = ConfigParser.ConfigParser()
    try:
        fp = open(filename, 'r')
        cp.readfp(fp)
        fp.close()
    except:
        pass
    return cp

def _eth_ip_addr(interface):
    try: return ifconfig.ip_address(interface)
    except: return ''

def _eth_netmask(interface):
    try: return ifconfig.ip_netmask(interface)
    except: return ''

def _eth_dhcp(interface):
    try:
        ifcfg = open('/etc/sysconfig/networking/devices/ifcfg-%s' % interface)
        for line in ifcfg.readlines():
            kv = line.strip().split("=")
            if len(kv) is 2:
                if kv[0] == 'BOOTPROTO':
                    return 'enabled' if kv[1].lower() == 'dhcp' else 'disabled'
    except IOError:
        # If the file is not present, then DHCP is assumed.
        return 'enabled'
    except:
        pass
    return 'disabled'

_eth_func_map = {
        ('eth0','ip_addr'):(_eth_ip_addr, 'eth0'),
        ('eth0','netmask'):(_eth_netmask, 'eth0'),
        ('eth0','dhcp'):(_eth_dhcp, 'eth0'),
        ('eth1','ip_addr'):(_eth_ip_addr, 'eth1'),
        ('eth1','netmask'):(_eth_netmask, 'eth1'),
        ('eth1','dhcp'):(_eth_dhcp, 'eth1'),
}

def get_option(config, section, option):
    if config.has_section(section) and config.has_option(section, option):
        return config.get(section, option)
    func, arg = _eth_func_map.get((section, option), (lambda i: '', None))
    return func(arg)

def setConfig(configFile, key, value):
    config = {}
    startline = ''
    fp = open(configFile, 'r')
    line = fp.readline()
    if line.startswith("#") or line.startswith("["):
        startline = line
        line = fp.readline()
    while(line != ''):
        words = line.split("=")
        if len(words) == 2:
            config[words[0].strip()] = words[1].strip()
        line = fp.readline()
    fp.close()

    if config:
        config[key] = value;
        fp = open(configFile, 'w')
        if startline:
            fp.write(startline)
        for key, value in config.items():
            line = key + "=" + value
            if not line.endswith("\n"):
                line += "\n"
            fp.write(line)
        fp.close()
    return

def saveManagerConfig():
    if 'eth0_ip_addr' in mkeys:
        setConfig(ETH0_CONFIG_MGR_FILE, 'IPADDR', m['eth0_ip_addr'].value)
    if 'eth0_dhcp' in mkeys:
        bootproto = "dhcp"
        if m['eth0_dhcp'].value == "disabled":
            bootproto = "static"
        setConfig(ETH0_CONFIG_MGR_FILE, 'BOOTPROTO', bootproto)
    if 'eth0_netmask' in mkeys:
        setConfig(ETH0_CONFIG_MGR_FILE, 'NETMASK', m['eth0_netmask'].value)
    if 'host_gateway' in mkeys:
        setConfig(NETWORK_CONFIG_MGR_FILE, 'GATEWAY', m['host_gateway'].value)
    if 'host_location' in mkeys:
        setConfig(CONFIGURATION_FILE, 'location', m['host_location'].value)
    if 'host_hostname' in mkeys:
        setConfig(CONFIGURATION_FILE, 'hostname', m['host_hostname'].value)
    if 'host_domain_name' in mkeys:
        setConfig(CONFIGURATION_FILE, 'domain_name', m['host_domain_name'].value)
    if 'host_gateway' in mkeys:
        setConfig(CONFIGURATION_FILE, 'gateway', m['host_gateway'].value)
    if 'host_nameserver' in mkeys:
        setConfig(CONFIGURATION_FILE, 'nameserver', m['host_nameserver'].value)
    if 'host_proxyserver' in mkeys:
        setConfig(CONFIGURATION_FILE, 'proxyserver', m['host_proxyserver'].value)

def doChanges(config):
    if 'host_location' in mkeys:
        config.set('host', 'location', m['host_location'].value)
    if 'host_hostname' in mkeys:
        config.set('host', 'hostname', m['host_hostname'].value)
    if 'host_domain_name' in mkeys:
        config.set('host', 'domain_name', m['host_domain_name'].value)
    if 'host_gateway' in mkeys:
        config.set('host', 'gateway', m['host_gateway'].value)
    if 'host_nameserver' in mkeys:
        config.set('host', 'nameserver', m['host_nameserver'].value)
    if 'host_proxyserver' in mkeys:
        config.set('host', 'proxyserver', m['host_proxyserver'].value)
    if 'eth0_dhcp' in mkeys:
        config.set('eth0', 'dhcp', m['eth0_dhcp'].value)
    if 'eth1_dhcp' in mkeys:
        config.set('eth1', 'dhcp', m['eth1_dhcp'].value)
    if 'eth0_ip_addr' in mkeys:
        config.set('eth0', 'ip_addr', m['eth0_ip_addr'].value)
    if 'eth1_ip_addr' in mkeys:
        config.set('eth1', 'ip_addr', m['eth1_ip_addr'].value)
    if 'eth0_netmask' in mkeys:
        config.set('eth0', 'netmask', m['eth0_netmask'].value)
    if 'eth1_netmask' in mkeys:
        config.set('eth1', 'netmask', m['eth1_netmask'].value)

def doSave():
    psp.write('Saving Configuration...')
    if is_manager:
        saveManagerConfig()
        return 0
    try:
        cp = ConfigParser.ConfigParser()
        fp = open(CONFIGURATION_FILE, 'r')
        cp.readfp(fp)
        fp.close()
        wp = open('/etc/mpxinit.old','w')
        cp.write(wp)
        wp.close()
        doChanges(cp)
        fp = open(CONFIGURATION_FILE, 'w')
        cp.write(fp)
        fp.close()
    except Exception,e:
        psp.write('ERROR:%s<br>' % e)
        return -1
    else:
        if model in ['NBM-5000', 'NBM-2500']:
            generate_megatron_config(cp)
        psp.write('Done<br>')
        return 0

def doReboot():
    psp.write('Rebooting...<br>')
    os.system('(sleep 2; /sbin/reboot -f) &')
    


def macAddr(adapter):
    try:
        return ifconfig.mac_address('eth%d' % adapter)
    except:
        pass
    return ''

if mkeys == []:
    display_form = 1

if 'save' in mkeys:
    retval = doSave()
    redirect = True
if 'savereboot' in mkeys:
    retval = doSave()
    if retval == 0:
        doReboot()
    redirect = True
if 'reboot' in mkeys:
    doReboot()
    redirect = True
if 'upload' in mkeys:
    try:
        doLicUpload(m['flexlicense'])
    except:
        pass
    redirect = True

if redirect:
    html = """<html>
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <meta http-equiv="Cache-Control" content="no-store">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="expires" content="0">
    <meta http-equiv="last-modified" content="Wed, 07 May 1980 00:00:00 GMT">
    <META HTTP-EQUIV="Window-target" CONTENT="_top">
    <META http-equiv="Refresh" content="0; Url=/system.html" >
    <title>Redirect</title>
    </head>
    <body>
    </body>
    </html>
    """
    psp.write(html)
    return

if display_form:
		config = load_config(CONFIGURATION_FILE)
		#host_location
		#host_hostname
		#host_domain_name
		#host_gateway
		#host_nameserver
		#host_proxyserver
		rawomegasoftvers = '$Name: mediator_3_1_2_branch $'
		colonindex = rawomegasoftvers.index(':')
		eth0_dhcp = get_option(config, 'eth0', 'dhcp')
		eth1_dhcp = get_option(config, 'eth1', 'dhcp')
%>
<html>
	<head>
	<!-- Copyright (c) 2004 Richards-Zeta -->
	<!-- $Name: mediator_3_1_2_branch $ -->
	<!-- $Id: mediatorconfig.psp 20880 2011-08-26 05:04:35Z rthettal $ -->
	<style>
	BODY {
	    font-family: Verdana, Arial, Helvetica, sans-serif;
	    font-size: 11px;
	    color: #333333;
		line-height: 17pt;
	}
	
	DIV {
	    font-family: Verdana, Arial, Helvetica, sans-serif;
	    font-size: 11px;
	    color: #333333;
		line-height: 17pt;
	}
	
	TD {
	    font-family: Verdana, Arial, Helvetica, sans-serif;
	    font-size: 11px;
	    line-height: 17pt;
	}
	
	.normal{
	color:#555555;
	}
	
	.error{
	color:#FF0000;
	}
	
	</style>
	</head>
	<body>
	<form action="/webapi/psp/mediatorconfig.psp" method="post" enctype="multipart/form-data" name="mediatorconfig" onSubmit="return(validate_page());">
	<table width="500" border="0" cellspacing="0" cellpadding="2">
	<tr>
	<td align="right" nowrap>Model:&nbsp;&nbsp;</td>
	<td><input name="model" type="text" size="20" maxlength="20" disabled value="<%=model%>"></td>
	<td align="right" nowrap>Serial Number:&nbsp;&nbsp;</td>
	<td><input name="serialnumber" type="text" size="20" maxlength="20" disabled value="<%=properties.SERIAL_NUMBER%>"></td>
	</tr>
	<tr>
	<td align="right" nowrap>MOE Version:&nbsp;&nbsp;</td>
	<td><input name="moeversion" type="text" size="20" maxlength="20" disabled value="<%=properties.MOE_VERSION%>"></td>
	<td align="right" nowrap>Framework Version:&nbsp;&nbsp;</td>
	<td><input name="frameworkversion" type="text" size="20" maxlength="20" disabled value="<%=FW_VERSION%>"></td>
	</tr>
	<tr>
	<td align="right" nowrap>Location:&nbsp;&nbsp;</td>
	<td colspan="3"><input name="host_location" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'location')%>"></td>
	</tr>
	<tr>
	<td align="right" colspan="1" nowrap>Hostname:&nbsp;&nbsp;</td>
	<td align="left" colspan="3" nowrap>
	<input name="host_hostname" id="id_hostname" onChange="validate_hostname('id_hostname');" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'hostname')%>">
	</td>
	</tr>
	<tr>
	<td align="right" colspan="1" nowrap>Domain Name:&nbsp;&nbsp;</td>
	<td align="left" colspan="3" nowrap>
	<input name="host_domain_name" id="id_domainname" onChange="validate_domain_name('id_domainname')" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'domain_name')%>">
	</td>
	</tr>
	<tr>
	<td align="right" colspan="1" nowrap>Gateway:&nbsp;&nbsp;</td>
	<td align="left" colspan="3" nowrap>
	<input name="host_gateway" id="id_hostgateway" onChange="validate_ip('id_hostgateway');" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'gateway')%>">
	</td>
	</tr>
	<tr>
	<td align="right" colspan="1" nowrap>Name Server:&nbsp;&nbsp;</td>
	<td align="left" colspan="3" nowrap>
	<input name="host_nameserver" id="id_hostnameserver" onChange="validate_ip('id_hostnameserver');" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'nameserver')%>">
	</td>
	</tr>
<tr>
<td align="right" colspan="1" nowrap>Proxy Server:&nbsp;&nbsp;</td>
<td align="left" colspan="3" nowrap>
<input name="host_proxyserver" id="id_hostproxyserver" onChange="validate_ip('id_hostproxyserver');" type="text" size="60" maxlength="60" <%=perm%> value="<%=get_option(config, 'host', 'proxyserver')%>">
</td>
</tr>
<tr>
<td colspan="1" nowrap>&nbsp;</td>
<td align="center" colspan="1" nowrap>Ethernet 0</td>
<td align="center" colspan="1" nowrap>Ethernet 1</td>
</tr>

def get_if_dict(interface):
    result = {}
    try:
        result['input_ip_addr'] = ifconfig.ip_address(interface)
        result['input_net_mask'] = ifconfig.ip_netmask(interface)
        result['input_mac_addr'] = ifconfig.mac_address(interface)
    except:
        return {}
    return result

eth0_dict = get_if_dict('eth0')
eth1_dict = get_if_dict('eth1')
%>
<td align="right" colspan="1" nowrap>MAC Address:&nbsp;&nbsp;</td>
<%
mac_addr_str="""<td align="center" colspan="1" nowrap>
<input name="macaddr0" type="text" size="20" maxlength="20" disabled value="%s">
</td>"""
psp.write(mac_addr_str % eth0_dict.get('input_mac_addr', ''))
mac_addr_str="""<td align="center" colspan="1" nowrap>
<input name="macaddr1" type="text" size="20" maxlength="20" disabled value="%s">
</td>"""
psp.write(mac_addr_str % eth1_dict.get('input_mac_addr', '')) 
%>
</tr>
<tr>
<td align="right" colspan="1" nowrap>DHCP:&nbsp;&nbsp;</td>
<td align="center" colspan="1" nowrap>
<select name="eth0_dhcp" size="1">
<%
dhcp1_enable_str="""<option value="disabled" selected %s>disabled</option>
<option value="enabled" %s>enabled</option>"""
dhcp1_disable_str="""<option value="disabled" %s>disabled</option>
<option value="enabled" selected %s>enabled</option>"""
if eth0_dhcp == 'disabled':
    psp.write(dhcp1_enable_str % (perm, perm))
else:
    psp.write(dhcp1_disable_str % (perm, perm))
%>
</select>
</td>
<td align="center" colspan="1" nowrap>
<select name="eth1_dhcp" size="1">
<%
dhcp2_enable_str="""<option value="disabled" selected %s>disabled</option>
<option value="enabled" %s>enabled</option>"""
dhcp2_disable_str="""<option value="disabled" %s>disabled</option>
<option value="enabled" selected %s>enabled</option>"""
if eth1_dhcp == 'disabled':
    psp.write(dhcp2_enable_str % (perm, perm))
else:
    psp.write(dhcp2_disable_str % (perm, perm))
%>
</select>
</td>
</tr>
<tr>
<td align="right" colspan="1" nowrap>IP Address:&nbsp;&nbsp;</td>
<%
ip_addr_str="""<td align="center" colspan="1" nowrap>
<input name="eth0_ip_addr" id="id_eth0ipaddr" onChange="validate_ip('id_eth0ipaddr');" type="text" size="20" maxlength="20" %s value="%s">
</td>"""
if eth0_dict:
    psp.write(ip_addr_str % (perm, eth0_dict['input_ip_addr']))
else:
    psp.write(ip_addr_str % ("disabled",""))
ip_addr_str="""<td align="center" colspan="1" nowrap>
<input name="eth1_ip_addr" id="id_eth1ipaddr" onChange="validate_ip('id_eth1ipaddr');" type="text" size="20" maxlength="20" %s value="%s">
</td>"""
if eth1_dict:
    psp.write(ip_addr_str % (perm, eth1_dict['input_ip_addr']))
else:
    psp.write(ip_addr_str % ("disabled",""))
%>
</tr>
<tr>
<td align="right" colspan="1" nowrap>IP Netmask:&nbsp;&nbsp;</td>
<%
net_mask_str="""<td align="center" colspan="1" nowrap>
<input name="eth0_netmask" id="id_eth0netmask" onChange="validate_ip('id_eth0netmask');" type="text" size="20" maxlength="20" %s value="%s">
</td>"""
if eth0_dict:
    psp.write(net_mask_str % (perm, eth0_dict['input_net_mask']))
else:
    psp.write(net_mask_str % ("disabled",""))
net_mask_str="""<td align="center" colspan="1" nowrap>
<input name="eth1_netmask" id="id_eth1netmask" onChange="validate_ip('id_eth1netmask');" type="text" size="20" maxlength="20" %s value="%s">
</td>"""
if eth1_dict:
    psp.write(net_mask_str % (perm, eth1_dict['input_net_mask']))
else:
    psp.write(net_mask_str % ("disabled",""))
%>
</tr>
<tr>
<td align="center"><input name="save" type="submit" <%=perm%> value="Save"></td>
<td align="center"><input name="savereboot" type="submit" <%=perm%> value="Save/Reboot"></td>
<td align="center"><input name="reboot" type="submit" <%=perm%> value="Reboot"></td>
<td align="center"><input name="upload" type="submit" <%=perm%> value="Upload License"></td>
</tr>
</table>
<input type="hidden" name="product" id="product" value=""/>
<script type="text/javascript">
document.getElementById("product").value = utils.branding.product;
</script>
</form>

<script type="text/javascript">

function get_filename(path){
  var f = '';
  var len = path.length;
  while (len != 0){
    var c = path.substring(len-1,len);
    if (c == '/' || c ==':'|| c=='\\\\'){
       f = path.substring(len,path.length);       
       len = 0     
     }       
     else{
       len--;
     }
  }
  return f
}

function update_filename(){
  var uploadfile = document.getElementById("uploadfile").value;
  if(uploadfile.length > 25){
    document.getElementById("uploadfile").size = uploadfile.length;
  }
  else{
    document.getElementById("uploadfile").size = 25;
  }  
  var fn = get_filename(uploadfile);
  if(fn.length > 25){
    document.getElementById("filename").size = fn.length;
  }
  else{
    document.getElementById("filename").size = 25;
  }
  document.getElementById("filename").value = get_filename(uploadfile);  
}

</script>
</body>
</html>

