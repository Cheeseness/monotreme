#=---------------------------------------------------------------------------
# Makefile for Envenergy Broadway builds.
#
# @configure_input@
#=---------------------------------------------------------------------------


#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING BELOW THIS LINE                  -=#
#=--------------------------------------------------------------------------=#
# NOTE: This section of the makefile is generated by update_makefile.py in   #
#       the root directory of the broadway source tree.  By doing this,      #
#       it is reasonable to keep the almost 200 makefiles in sync with any   #
#       required changes.  To change this section, modify update_makefile.py #
#       and rerun the update_makefiles script.                               #
#=--------------------------------------------------------------------------=#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
include @BUILD_DIR@/Constants.make

#=--------------------------------------------------------------------------=#
#=-                DO NOT CHANGE ANYTHING ABOVE THIS LINE                  -=#
#=--------------------------------------------------------------------------=#


#=---------------------------------------------------------------------------
# Rule: do_makeall
#
#   Required.  Called by the top level makefile via 'Rules.make', or by a
#   call to 'make' in a subdirectory.  Feel free to add other targets here,
#   but you should leave the 'target', 'tools', 'tests' and 'doc' rules.

do_makeall: target tools tests doc


#=---------------------------------------------------------------------------
# Define your 'prelease(-d)' flist(s)."  See 'config/Rules.make' for a
# discussion of this variable.

PRELEASE:=	broadway.core


#=---------------------------------------------------------------------------
# Include the main 'Rules' file where most of the work is done.  This must
# follow the 'do_makeall' rule and PRELEASE symbols.

include $(RULES_FILE)


#=--------------------------------------------------------------------------- 
# Use 'TARGETS' to define what you want built.  Anything in the 'TARGETS'
# rule will also be included as part of the 'prelease(-d)' build step.
# If you need something built that should not be part of said build step
# create another target list and Makefile rule.  See the HOWTO in the
# dev intranet document for a complete discussion with examples.

RCOPY_FROM:=	_base \
		_firebug \
		cldr \
		data \
		date \
		dnd \
		fx \
		io \
		nls \
		resources \
		rpc \
		AdapterRegistry.js \
		DeferredList.js \
		LICENSE \
		NodeList-fx.js \
		NodeList-html.js \
		NodeList-manipulate.js \
		NodeList-traverse.js \
		OpenAjax.js \
		_base.js \
		back.js \
		behavior.js \
		build.txt \
		cache.js \
		colors.js \
		cookie.js \
		currency.js \
		date.js \
		dojo.js \
		dojo.js.uncompressed.js \
		fx.js \
		gears.js \
		hash.js \
		html.js \
		i18n.js \
		jaxer.js \
		number.js \
		parser.js \
		regexp.js \
		robot.js \
		robotx.js \
		string.js \
		tests.js

.PHONY: recursive-copy

RCOPY_EXCLUDE:=	--exclude CVS \
        --exclude .svn \
		--exclude .cvsignore \
		--exclude \*~ \
		--exclude \\\#* \
		--exclude .\\\#* \
		--exclude \*.py \
		--exclude \*.as \
		--exclude \*.fla \
		--exclude \*.psd \
		--exclude \*.txt \
		--exclude README
RCOPY_TARCMD:=(cd $(srcdir) && tar cf - $(RCOPY_EXCLUDE) $(RCOPY_FROM))
RCOPY_TARGETS:=$(shell $(RCOPY_TARCMD) | \
	tar tf - | \
	while read name; do echo "'$$name'"; done)

$(RCOPY_TARGETS): recursive-copy

recursive-copy:
	rm -rf $(RCOPY_FROM)
	$(RCOPY_TARCMD) | tar xf -

TARGETS:=$(RCOPY_TARGETS)

target: $(TARGETS)


#=---------------------------------------------------------------------------
# Use 'DOCUMENTATION' to define documentation that needs to be generated.

DOC:=

doc: $(DOC)


#=---------------------------------------------------------------------------
# Use 'TOOLS' to define utility programs.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TOOLS:=

tools: $(TOOLS)


#=---------------------------------------------------------------------------
# Use 'TESTS' to define test programs.  Any programs here will also be
# invoked when 'make unittest' is run.  Output from this rule will *not*
# be included in a 'prelease(-d)' invocation.

TESTS:=

tests: $(TESTS)


#=- EOF --------------------------------------------------------------------=#
