<?xml version="1.0" encoding="utf-8"?>
<mx:Panel 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="com.cisco.nbm.entities.ui.*"
	layout="vertical"  
	width="400"
	minHeight="200"
	paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
	creationComplete="init();"
	title="Override Editor"
	>
	<mx:Metadata>
		[Event(name="close", type="mx.events.CloseEvent")]
		[Event(name="error", type="flash.events.ErrorEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.managers.ISystemManager;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import com.cisco.nbm.entities.EntityProperty;
			import com.cisco.nbm.entities.Entity;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			private var entity:Entity;
			
			public var property:EntityProperty;
			
			public var overrides:Object /* of Object */ = [];
			
			private var desiredHeight:int;
			
			private function init():void
			{
				desiredHeight = height + 20;
				stage.addEventListener(Event.RESIZE, handleResizeEvent);
				
				
				if (entity != null && property != null)
				{
					setupEditor();
				}
				
				ensureFit();
			}
			
			private function ensureFit():void
			{
				if (stage == null)
				{
					return;
				}
				
				var minimumHeight:int = stage.stageHeight;
				var newHeight:int = height;
				
				if (minimumHeight < height)
				{
					newHeight = minimumHeight;
				}
				
				newHeight = desiredHeight < minimumHeight ? desiredHeight : minimumHeight;
				
				if (newHeight != desiredHeight)
				{
					invalidateSize();
				}
				
				
				height = newHeight;
				
				PopUpManager.centerPopUp(this);
			}
			
			private function handleResizeEvent(event:Event):void
			{			
				ensureFit();
			}
				
			
			private function setup(entity:Entity, property:EntityProperty):void
			{
				this.entity = entity;
				this.property = property;
				
				if (initialized)
				{
					setupEditor();
				}
			}
			
			private function setupEditor():void
			{
				outputEditor.setup(entity, property);
			}
			
			private function handleOK():void
			{
				dispatchClose(Alert.OK);
			}
			
			private function handleCancel():void
			{
				dispatchClose(Alert.CANCEL);
			}
			
			private function dispatchClose(reason:int):void
			{
				var event:CloseEvent = new CloseEvent(CloseEvent.CLOSE);
				event.detail = reason;
				
				// setting fake overrides
				overrides = outputEditor.overrides;
				
				/*
				if (closeHandler != null)
				{
					closeHandler(event);
				}
				*/
				
				dispatchEvent(event);
				
				destroy();
			}
			
			private function destroy():void
			{
				entity = null;
				property = null;
				//closeHandler = null;
				
				PopUpManager.removePopUp(this);
			}
			
			public static function show(entity:Entity, property:EntityProperty,
				panelParent:DisplayObject, closeHandler:Function=null):OutputEditorPanel
			{
				
				var sm:ISystemManager = ISystemManager(Application.application.systemManager);
	            if (sm.useSWFBridge())
	                panelParent = Sprite(sm.getSandboxRoot());
	            else
	                panelParent = Sprite(Application.application);
				
				var panel:OutputEditorPanel = new OutputEditorPanel();
				
				//panel.closeHandler = closeHandler;
				panel.setup(entity, property);
				
				if (closeHandler != null)
				{
					panel.addEventListener(CloseEvent.CLOSE, closeHandler);
				}
				
				
				
				panel.setActualSize(panel.getExplicitOrMeasuredWidth(),
                            panel.getExplicitOrMeasuredHeight());
				
				
				panel.addEventListener(FlexEvent.CREATION_COMPLETE, static_creationComplete);
				
				PopUpManager.addPopUp(panel, panelParent, true);
				
				return panel;	
			}
			
			private static function static_creationComplete(event:FlexEvent):void
			{
				if (event.target is IFlexDisplayObject && event.eventPhase == EventPhase.AT_TARGET)
		        {
		            event.target.removeEventListener(FlexEvent.CREATION_COMPLETE, static_creationComplete);
		            PopUpManager.centerPopUp(IFlexDisplayObject(event.target));
		        }
			}
			
			private function handleOutputEditorError(event:ErrorEvent):void
			{
				var newEvent:ErrorEvent = new ErrorEvent(ErrorEvent.ERROR);
				newEvent.text = event.text;
				dispatchEvent(newEvent);
				destroy();
			}
				
		]]>
	</mx:Script>
	<ui:OutputEditor id="outputEditor" 
		width="100%" 
		error="handleOutputEditorError(event)"/>
		
	<mx:HBox width="100%" horizontalAlign="right">
		<mx:Button label="OK" click="handleOK()" />
		<mx:Button label="Cancel" click="handleCancel()" />
	</mx:HBox>
</mx:Panel>
